
core_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc04  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800dcc8  0800dcc8  0001dcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c4  0800e3c4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3c4  0800e3c4  0001e3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3cc  0800e3cc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3cc  0800e3cc  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3d0  0800e3d0  0001e3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200001e8  0800e5bc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e38  0800e5bc  00021e38  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa0d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc0  00000000  00000000  0003ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bfd  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cc2  00000000  00000000  00047cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edc8  00000000  00000000  00061977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f073f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b98  00000000  00000000  000f0790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dcac 	.word	0x0800dcac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800dcac 	.word	0x0800dcac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f99b 	bl	8001778 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8eb 	bl	8001628 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f98d 	bl	8001778 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f983 	bl	8001778 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f913 	bl	80016ac <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f909 	bl	80016ac <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f87a 	bl	800265c <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f875 	bl	800265c <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fmul>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0244      	lsls	r4, r0, #9
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	0a64      	lsrs	r4, r4, #9
 80006ec:	1c0f      	adds	r7, r1, #0
 80006ee:	0e2d      	lsrs	r5, r5, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0x1c>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fmul+0x138>
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fmul+0x22>
 80006fc:	e092      	b.n	8000824 <__aeabi_fmul+0x148>
 80006fe:	2300      	movs	r3, #0
 8000700:	2080      	movs	r0, #128	; 0x80
 8000702:	4699      	mov	r9, r3
 8000704:	469a      	mov	sl, r3
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04c0      	lsls	r0, r0, #19
 800070a:	4304      	orrs	r4, r0
 800070c:	3d7f      	subs	r5, #127	; 0x7f
 800070e:	0278      	lsls	r0, r7, #9
 8000710:	0a43      	lsrs	r3, r0, #9
 8000712:	4698      	mov	r8, r3
 8000714:	007b      	lsls	r3, r7, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fff      	lsrs	r7, r7, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fmul+0x44>
 800071e:	e070      	b.n	8000802 <__aeabi_fmul+0x126>
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fmul+0x4a>
 8000724:	e086      	b.n	8000834 <__aeabi_fmul+0x158>
 8000726:	4642      	mov	r2, r8
 8000728:	00d0      	lsls	r0, r2, #3
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	3b7f      	subs	r3, #127	; 0x7f
 800072e:	18ed      	adds	r5, r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	04d2      	lsls	r2, r2, #19
 8000734:	4302      	orrs	r2, r0
 8000736:	4690      	mov	r8, r2
 8000738:	469c      	mov	ip, r3
 800073a:	0031      	movs	r1, r6
 800073c:	464b      	mov	r3, r9
 800073e:	4079      	eors	r1, r7
 8000740:	1c68      	adds	r0, r5, #1
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d81c      	bhi.n	8000780 <__aeabi_fmul+0xa4>
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <__aeabi_fmul+0x244>)
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	58d3      	ldr	r3, [r2, r3]
 800074c:	469f      	mov	pc, r3
 800074e:	0039      	movs	r1, r7
 8000750:	4644      	mov	r4, r8
 8000752:	46e2      	mov	sl, ip
 8000754:	4653      	mov	r3, sl
 8000756:	2b02      	cmp	r3, #2
 8000758:	d00f      	beq.n	800077a <__aeabi_fmul+0x9e>
 800075a:	2b03      	cmp	r3, #3
 800075c:	d100      	bne.n	8000760 <__aeabi_fmul+0x84>
 800075e:	e0d7      	b.n	8000910 <__aeabi_fmul+0x234>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d137      	bne.n	80007d4 <__aeabi_fmul+0xf8>
 8000764:	2000      	movs	r0, #0
 8000766:	2400      	movs	r4, #0
 8000768:	05c0      	lsls	r0, r0, #23
 800076a:	4320      	orrs	r0, r4
 800076c:	07c9      	lsls	r1, r1, #31
 800076e:	4308      	orrs	r0, r1
 8000770:	bce0      	pop	{r5, r6, r7}
 8000772:	46ba      	mov	sl, r7
 8000774:	46b1      	mov	r9, r6
 8000776:	46a8      	mov	r8, r5
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	20ff      	movs	r0, #255	; 0xff
 800077c:	2400      	movs	r4, #0
 800077e:	e7f3      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000780:	0c26      	lsrs	r6, r4, #16
 8000782:	0424      	lsls	r4, r4, #16
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	4644      	mov	r4, r8
 8000788:	0424      	lsls	r4, r4, #16
 800078a:	0c24      	lsrs	r4, r4, #16
 800078c:	4643      	mov	r3, r8
 800078e:	0027      	movs	r7, r4
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4357      	muls	r7, r2
 8000794:	4374      	muls	r4, r6
 8000796:	435a      	muls	r2, r3
 8000798:	435e      	muls	r6, r3
 800079a:	1912      	adds	r2, r2, r4
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	189b      	adds	r3, r3, r2
 80007a0:	429c      	cmp	r4, r3
 80007a2:	d903      	bls.n	80007ac <__aeabi_fmul+0xd0>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	4694      	mov	ip, r2
 80007aa:	4466      	add	r6, ip
 80007ac:	043f      	lsls	r7, r7, #16
 80007ae:	041a      	lsls	r2, r3, #16
 80007b0:	0c3f      	lsrs	r7, r7, #16
 80007b2:	19d2      	adds	r2, r2, r7
 80007b4:	0194      	lsls	r4, r2, #6
 80007b6:	1e67      	subs	r7, r4, #1
 80007b8:	41bc      	sbcs	r4, r7
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	0e92      	lsrs	r2, r2, #26
 80007be:	199b      	adds	r3, r3, r6
 80007c0:	4314      	orrs	r4, r2
 80007c2:	019b      	lsls	r3, r3, #6
 80007c4:	431c      	orrs	r4, r3
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fmul+0xf0>
 80007ca:	e09b      	b.n	8000904 <__aeabi_fmul+0x228>
 80007cc:	2301      	movs	r3, #1
 80007ce:	0862      	lsrs	r2, r4, #1
 80007d0:	401c      	ands	r4, r3
 80007d2:	4314      	orrs	r4, r2
 80007d4:	0002      	movs	r2, r0
 80007d6:	327f      	adds	r2, #127	; 0x7f
 80007d8:	2a00      	cmp	r2, #0
 80007da:	dd64      	ble.n	80008a6 <__aeabi_fmul+0x1ca>
 80007dc:	0763      	lsls	r3, r4, #29
 80007de:	d004      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e0:	230f      	movs	r3, #15
 80007e2:	4023      	ands	r3, r4
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e8:	3404      	adds	r4, #4
 80007ea:	0123      	lsls	r3, r4, #4
 80007ec:	d503      	bpl.n	80007f6 <__aeabi_fmul+0x11a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <__aeabi_fmul+0x248>)
 80007f2:	3280      	adds	r2, #128	; 0x80
 80007f4:	401c      	ands	r4, r3
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	dcbf      	bgt.n	800077a <__aeabi_fmul+0x9e>
 80007fa:	01a4      	lsls	r4, r4, #6
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	b2d0      	uxtb	r0, r2
 8000800:	e7b2      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000802:	4643      	mov	r3, r8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d13d      	bne.n	8000884 <__aeabi_fmul+0x1a8>
 8000808:	464a      	mov	r2, r9
 800080a:	3301      	adds	r3, #1
 800080c:	431a      	orrs	r2, r3
 800080e:	4691      	mov	r9, r2
 8000810:	469c      	mov	ip, r3
 8000812:	e792      	b.n	800073a <__aeabi_fmul+0x5e>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d129      	bne.n	800086c <__aeabi_fmul+0x190>
 8000818:	2304      	movs	r3, #4
 800081a:	4699      	mov	r9, r3
 800081c:	3b03      	subs	r3, #3
 800081e:	2500      	movs	r5, #0
 8000820:	469a      	mov	sl, r3
 8000822:	e774      	b.n	800070e <__aeabi_fmul+0x32>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d11b      	bne.n	8000860 <__aeabi_fmul+0x184>
 8000828:	2308      	movs	r3, #8
 800082a:	4699      	mov	r9, r3
 800082c:	3b06      	subs	r3, #6
 800082e:	25ff      	movs	r5, #255	; 0xff
 8000830:	469a      	mov	sl, r3
 8000832:	e76c      	b.n	800070e <__aeabi_fmul+0x32>
 8000834:	4643      	mov	r3, r8
 8000836:	35ff      	adds	r5, #255	; 0xff
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10b      	bne.n	8000854 <__aeabi_fmul+0x178>
 800083c:	2302      	movs	r3, #2
 800083e:	464a      	mov	r2, r9
 8000840:	431a      	orrs	r2, r3
 8000842:	4691      	mov	r9, r2
 8000844:	469c      	mov	ip, r3
 8000846:	e778      	b.n	800073a <__aeabi_fmul+0x5e>
 8000848:	4653      	mov	r3, sl
 800084a:	0031      	movs	r1, r6
 800084c:	2b02      	cmp	r3, #2
 800084e:	d000      	beq.n	8000852 <__aeabi_fmul+0x176>
 8000850:	e783      	b.n	800075a <__aeabi_fmul+0x7e>
 8000852:	e792      	b.n	800077a <__aeabi_fmul+0x9e>
 8000854:	2303      	movs	r3, #3
 8000856:	464a      	mov	r2, r9
 8000858:	431a      	orrs	r2, r3
 800085a:	4691      	mov	r9, r2
 800085c:	469c      	mov	ip, r3
 800085e:	e76c      	b.n	800073a <__aeabi_fmul+0x5e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	25ff      	movs	r5, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e750      	b.n	800070e <__aeabi_fmul+0x32>
 800086c:	0020      	movs	r0, r4
 800086e:	f001 fed7 	bl	8002620 <__clzsi2>
 8000872:	2576      	movs	r5, #118	; 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	426d      	negs	r5, r5
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a2d      	subs	r5, r5, r0
 8000882:	e744      	b.n	800070e <__aeabi_fmul+0x32>
 8000884:	4640      	mov	r0, r8
 8000886:	f001 fecb 	bl	8002620 <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2300      	movs	r3, #0
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	4690      	mov	r8, r2
 8000896:	469c      	mov	ip, r3
 8000898:	3d76      	subs	r5, #118	; 0x76
 800089a:	e74e      	b.n	800073a <__aeabi_fmul+0x5e>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	2100      	movs	r1, #0
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	03e4      	lsls	r4, r4, #15
 80008a4:	e760      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008a6:	2301      	movs	r3, #1
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	2b1b      	cmp	r3, #27
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_fmul+0x1d4>
 80008ae:	e759      	b.n	8000764 <__aeabi_fmul+0x88>
 80008b0:	0022      	movs	r2, r4
 80008b2:	309e      	adds	r0, #158	; 0x9e
 80008b4:	40da      	lsrs	r2, r3
 80008b6:	4084      	lsls	r4, r0
 80008b8:	0013      	movs	r3, r2
 80008ba:	1e62      	subs	r2, r4, #1
 80008bc:	4194      	sbcs	r4, r2
 80008be:	431c      	orrs	r4, r3
 80008c0:	0763      	lsls	r3, r4, #29
 80008c2:	d004      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d000      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008cc:	3404      	adds	r4, #4
 80008ce:	0163      	lsls	r3, r4, #5
 80008d0:	d51a      	bpl.n	8000908 <__aeabi_fmul+0x22c>
 80008d2:	2001      	movs	r0, #1
 80008d4:	2400      	movs	r4, #0
 80008d6:	e747      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008d8:	2080      	movs	r0, #128	; 0x80
 80008da:	03c0      	lsls	r0, r0, #15
 80008dc:	4204      	tst	r4, r0
 80008de:	d009      	beq.n	80008f4 <__aeabi_fmul+0x218>
 80008e0:	4643      	mov	r3, r8
 80008e2:	4203      	tst	r3, r0
 80008e4:	d106      	bne.n	80008f4 <__aeabi_fmul+0x218>
 80008e6:	4644      	mov	r4, r8
 80008e8:	4304      	orrs	r4, r0
 80008ea:	0264      	lsls	r4, r4, #9
 80008ec:	0039      	movs	r1, r7
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	e739      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008f4:	2080      	movs	r0, #128	; 0x80
 80008f6:	03c0      	lsls	r0, r0, #15
 80008f8:	4304      	orrs	r4, r0
 80008fa:	0264      	lsls	r4, r4, #9
 80008fc:	0031      	movs	r1, r6
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	e731      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000904:	0028      	movs	r0, r5
 8000906:	e765      	b.n	80007d4 <__aeabi_fmul+0xf8>
 8000908:	01a4      	lsls	r4, r4, #6
 800090a:	2000      	movs	r0, #0
 800090c:	0a64      	lsrs	r4, r4, #9
 800090e:	e72b      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	03c0      	lsls	r0, r0, #15
 8000914:	4304      	orrs	r4, r0
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a64      	lsrs	r4, r4, #9
 800091c:	e724      	b.n	8000768 <__aeabi_fmul+0x8c>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	0800de4c 	.word	0x0800de4c
 8000924:	f7ffffff 	.word	0xf7ffffff

08000928 <__aeabi_i2f>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	2800      	cmp	r0, #0
 800092c:	d013      	beq.n	8000956 <__aeabi_i2f+0x2e>
 800092e:	17c3      	asrs	r3, r0, #31
 8000930:	18c6      	adds	r6, r0, r3
 8000932:	405e      	eors	r6, r3
 8000934:	0fc4      	lsrs	r4, r0, #31
 8000936:	0030      	movs	r0, r6
 8000938:	f001 fe72 	bl	8002620 <__clzsi2>
 800093c:	239e      	movs	r3, #158	; 0x9e
 800093e:	0005      	movs	r5, r0
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	2b96      	cmp	r3, #150	; 0x96
 8000944:	dc0f      	bgt.n	8000966 <__aeabi_i2f+0x3e>
 8000946:	2808      	cmp	r0, #8
 8000948:	dd01      	ble.n	800094e <__aeabi_i2f+0x26>
 800094a:	3d08      	subs	r5, #8
 800094c:	40ae      	lsls	r6, r5
 800094e:	0276      	lsls	r6, r6, #9
 8000950:	0a76      	lsrs	r6, r6, #9
 8000952:	b2d8      	uxtb	r0, r3
 8000954:	e002      	b.n	800095c <__aeabi_i2f+0x34>
 8000956:	2400      	movs	r4, #0
 8000958:	2000      	movs	r0, #0
 800095a:	2600      	movs	r6, #0
 800095c:	05c0      	lsls	r0, r0, #23
 800095e:	4330      	orrs	r0, r6
 8000960:	07e4      	lsls	r4, r4, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000966:	2b99      	cmp	r3, #153	; 0x99
 8000968:	dd0c      	ble.n	8000984 <__aeabi_i2f+0x5c>
 800096a:	2205      	movs	r2, #5
 800096c:	0031      	movs	r1, r6
 800096e:	1a12      	subs	r2, r2, r0
 8000970:	40d1      	lsrs	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	0001      	movs	r1, r0
 8000976:	0030      	movs	r0, r6
 8000978:	311b      	adds	r1, #27
 800097a:	4088      	lsls	r0, r1
 800097c:	1e41      	subs	r1, r0, #1
 800097e:	4188      	sbcs	r0, r1
 8000980:	4302      	orrs	r2, r0
 8000982:	0016      	movs	r6, r2
 8000984:	2d05      	cmp	r5, #5
 8000986:	dc12      	bgt.n	80009ae <__aeabi_i2f+0x86>
 8000988:	0031      	movs	r1, r6
 800098a:	4f0d      	ldr	r7, [pc, #52]	; (80009c0 <__aeabi_i2f+0x98>)
 800098c:	4039      	ands	r1, r7
 800098e:	0772      	lsls	r2, r6, #29
 8000990:	d009      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 8000992:	200f      	movs	r0, #15
 8000994:	4030      	ands	r0, r6
 8000996:	2804      	cmp	r0, #4
 8000998:	d005      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 800099a:	3104      	adds	r1, #4
 800099c:	014a      	lsls	r2, r1, #5
 800099e:	d502      	bpl.n	80009a6 <__aeabi_i2f+0x7e>
 80009a0:	239f      	movs	r3, #159	; 0x9f
 80009a2:	4039      	ands	r1, r7
 80009a4:	1b5b      	subs	r3, r3, r5
 80009a6:	0189      	lsls	r1, r1, #6
 80009a8:	0a4e      	lsrs	r6, r1, #9
 80009aa:	b2d8      	uxtb	r0, r3
 80009ac:	e7d6      	b.n	800095c <__aeabi_i2f+0x34>
 80009ae:	1f6a      	subs	r2, r5, #5
 80009b0:	4096      	lsls	r6, r2
 80009b2:	0031      	movs	r1, r6
 80009b4:	4f02      	ldr	r7, [pc, #8]	; (80009c0 <__aeabi_i2f+0x98>)
 80009b6:	4039      	ands	r1, r7
 80009b8:	0772      	lsls	r2, r6, #29
 80009ba:	d0f4      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 80009bc:	e7e9      	b.n	8000992 <__aeabi_i2f+0x6a>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	fbffffff 	.word	0xfbffffff

080009c4 <__aeabi_dadd>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	464f      	mov	r7, r9
 80009c8:	4646      	mov	r6, r8
 80009ca:	46d6      	mov	lr, sl
 80009cc:	000d      	movs	r5, r1
 80009ce:	0004      	movs	r4, r0
 80009d0:	b5c0      	push	{r6, r7, lr}
 80009d2:	001f      	movs	r7, r3
 80009d4:	0011      	movs	r1, r2
 80009d6:	0328      	lsls	r0, r5, #12
 80009d8:	0f62      	lsrs	r2, r4, #29
 80009da:	0a40      	lsrs	r0, r0, #9
 80009dc:	4310      	orrs	r0, r2
 80009de:	007a      	lsls	r2, r7, #1
 80009e0:	0d52      	lsrs	r2, r2, #21
 80009e2:	00e3      	lsls	r3, r4, #3
 80009e4:	033c      	lsls	r4, r7, #12
 80009e6:	4691      	mov	r9, r2
 80009e8:	0a64      	lsrs	r4, r4, #9
 80009ea:	0ffa      	lsrs	r2, r7, #31
 80009ec:	0f4f      	lsrs	r7, r1, #29
 80009ee:	006e      	lsls	r6, r5, #1
 80009f0:	4327      	orrs	r7, r4
 80009f2:	4692      	mov	sl, r2
 80009f4:	46b8      	mov	r8, r7
 80009f6:	0d76      	lsrs	r6, r6, #21
 80009f8:	0fed      	lsrs	r5, r5, #31
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4295      	cmp	r5, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x3e>
 8000a00:	e099      	b.n	8000b36 <__aeabi_dadd+0x172>
 8000a02:	464c      	mov	r4, r9
 8000a04:	1b34      	subs	r4, r6, r4
 8000a06:	46a4      	mov	ip, r4
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x4a>
 8000a0c:	e07c      	b.n	8000b08 <__aeabi_dadd+0x144>
 8000a0e:	464a      	mov	r2, r9
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x52>
 8000a14:	e0b8      	b.n	8000b88 <__aeabi_dadd+0x1c4>
 8000a16:	4ac5      	ldr	r2, [pc, #788]	; (8000d2c <__aeabi_dadd+0x368>)
 8000a18:	4296      	cmp	r6, r2
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x5a>
 8000a1c:	e11c      	b.n	8000c58 <__aeabi_dadd+0x294>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	003c      	movs	r4, r7
 8000a22:	0412      	lsls	r2, r2, #16
 8000a24:	4314      	orrs	r4, r2
 8000a26:	46a0      	mov	r8, r4
 8000a28:	4662      	mov	r2, ip
 8000a2a:	2a38      	cmp	r2, #56	; 0x38
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x6c>
 8000a2e:	e161      	b.n	8000cf4 <__aeabi_dadd+0x330>
 8000a30:	2a1f      	cmp	r2, #31
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x72>
 8000a34:	e1cc      	b.n	8000dd0 <__aeabi_dadd+0x40c>
 8000a36:	4664      	mov	r4, ip
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b12      	subs	r2, r2, r4
 8000a3c:	4644      	mov	r4, r8
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	000f      	movs	r7, r1
 8000a42:	46a1      	mov	r9, r4
 8000a44:	4664      	mov	r4, ip
 8000a46:	4091      	lsls	r1, r2
 8000a48:	40e7      	lsrs	r7, r4
 8000a4a:	464c      	mov	r4, r9
 8000a4c:	1e4a      	subs	r2, r1, #1
 8000a4e:	4191      	sbcs	r1, r2
 8000a50:	433c      	orrs	r4, r7
 8000a52:	4642      	mov	r2, r8
 8000a54:	4321      	orrs	r1, r4
 8000a56:	4664      	mov	r4, ip
 8000a58:	40e2      	lsrs	r2, r4
 8000a5a:	1a80      	subs	r0, r0, r2
 8000a5c:	1a5c      	subs	r4, r3, r1
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	419b      	sbcs	r3, r3
 8000a62:	425f      	negs	r7, r3
 8000a64:	1bc7      	subs	r7, r0, r7
 8000a66:	023b      	lsls	r3, r7, #8
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_dadd+0xa8>
 8000a6a:	e0d0      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000a6c:	027f      	lsls	r7, r7, #9
 8000a6e:	0a7f      	lsrs	r7, r7, #9
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0xb2>
 8000a74:	e0ff      	b.n	8000c76 <__aeabi_dadd+0x2b2>
 8000a76:	0038      	movs	r0, r7
 8000a78:	f001 fdd2 	bl	8002620 <__clzsi2>
 8000a7c:	0001      	movs	r1, r0
 8000a7e:	3908      	subs	r1, #8
 8000a80:	2320      	movs	r3, #32
 8000a82:	0022      	movs	r2, r4
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	408f      	lsls	r7, r1
 8000a88:	40da      	lsrs	r2, r3
 8000a8a:	408c      	lsls	r4, r1
 8000a8c:	4317      	orrs	r7, r2
 8000a8e:	42b1      	cmp	r1, r6
 8000a90:	da00      	bge.n	8000a94 <__aeabi_dadd+0xd0>
 8000a92:	e0ff      	b.n	8000c94 <__aeabi_dadd+0x2d0>
 8000a94:	1b89      	subs	r1, r1, r6
 8000a96:	1c4b      	adds	r3, r1, #1
 8000a98:	2b1f      	cmp	r3, #31
 8000a9a:	dd00      	ble.n	8000a9e <__aeabi_dadd+0xda>
 8000a9c:	e0a8      	b.n	8000bf0 <__aeabi_dadd+0x22c>
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	0039      	movs	r1, r7
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	1e62      	subs	r2, r4, #1
 8000aae:	4194      	sbcs	r4, r2
 8000ab0:	40df      	lsrs	r7, r3
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	4301      	orrs	r1, r0
 8000ab6:	430c      	orrs	r4, r1
 8000ab8:	0763      	lsls	r3, r4, #29
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000ac4:	1d23      	adds	r3, r4, #4
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	41a4      	sbcs	r4, r4
 8000aca:	4264      	negs	r4, r4
 8000acc:	193f      	adds	r7, r7, r4
 8000ace:	001c      	movs	r4, r3
 8000ad0:	023b      	lsls	r3, r7, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x112>
 8000ad4:	e09e      	b.n	8000c14 <__aeabi_dadd+0x250>
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <__aeabi_dadd+0x368>)
 8000ad8:	3601      	adds	r6, #1
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x11c>
 8000ade:	e0b7      	b.n	8000c50 <__aeabi_dadd+0x28c>
 8000ae0:	4a93      	ldr	r2, [pc, #588]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000ae2:	08e4      	lsrs	r4, r4, #3
 8000ae4:	4017      	ands	r7, r2
 8000ae6:	077b      	lsls	r3, r7, #29
 8000ae8:	0571      	lsls	r1, r6, #21
 8000aea:	027f      	lsls	r7, r7, #9
 8000aec:	4323      	orrs	r3, r4
 8000aee:	0b3f      	lsrs	r7, r7, #12
 8000af0:	0d4a      	lsrs	r2, r1, #21
 8000af2:	0512      	lsls	r2, r2, #20
 8000af4:	433a      	orrs	r2, r7
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	432a      	orrs	r2, r5
 8000afa:	0018      	movs	r0, r3
 8000afc:	0011      	movs	r1, r2
 8000afe:	bce0      	pop	{r5, r6, r7}
 8000b00:	46ba      	mov	sl, r7
 8000b02:	46b1      	mov	r9, r6
 8000b04:	46a8      	mov	r8, r5
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d04b      	beq.n	8000ba4 <__aeabi_dadd+0x1e0>
 8000b0c:	464c      	mov	r4, r9
 8000b0e:	1ba4      	subs	r4, r4, r6
 8000b10:	46a4      	mov	ip, r4
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x154>
 8000b16:	e123      	b.n	8000d60 <__aeabi_dadd+0x39c>
 8000b18:	0004      	movs	r4, r0
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x15c>
 8000b1e:	e1af      	b.n	8000e80 <__aeabi_dadd+0x4bc>
 8000b20:	4662      	mov	r2, ip
 8000b22:	1e54      	subs	r4, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x166>
 8000b28:	e215      	b.n	8000f56 <__aeabi_dadd+0x592>
 8000b2a:	4d80      	ldr	r5, [pc, #512]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b2c:	45ac      	cmp	ip, r5
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x16e>
 8000b30:	e1c8      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000b32:	46a4      	mov	ip, r4
 8000b34:	e11b      	b.n	8000d6e <__aeabi_dadd+0x3aa>
 8000b36:	464a      	mov	r2, r9
 8000b38:	1ab2      	subs	r2, r6, r2
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x17e>
 8000b40:	e0ac      	b.n	8000c9c <__aeabi_dadd+0x2d8>
 8000b42:	464a      	mov	r2, r9
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d043      	beq.n	8000bd0 <__aeabi_dadd+0x20c>
 8000b48:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b4a:	4296      	cmp	r6, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x18c>
 8000b4e:	e1af      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	003c      	movs	r4, r7
 8000b54:	0412      	lsls	r2, r2, #16
 8000b56:	4314      	orrs	r4, r2
 8000b58:	46a0      	mov	r8, r4
 8000b5a:	4662      	mov	r2, ip
 8000b5c:	2a38      	cmp	r2, #56	; 0x38
 8000b5e:	dc67      	bgt.n	8000c30 <__aeabi_dadd+0x26c>
 8000b60:	2a1f      	cmp	r2, #31
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_dadd+0x1a2>
 8000b64:	e15f      	b.n	8000e26 <__aeabi_dadd+0x462>
 8000b66:	4647      	mov	r7, r8
 8000b68:	3a20      	subs	r2, #32
 8000b6a:	40d7      	lsrs	r7, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	2a20      	cmp	r2, #32
 8000b70:	d005      	beq.n	8000b7e <__aeabi_dadd+0x1ba>
 8000b72:	4664      	mov	r4, ip
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	1b12      	subs	r2, r2, r4
 8000b78:	4644      	mov	r4, r8
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	4321      	orrs	r1, r4
 8000b7e:	1e4a      	subs	r2, r1, #1
 8000b80:	4191      	sbcs	r1, r2
 8000b82:	000c      	movs	r4, r1
 8000b84:	433c      	orrs	r4, r7
 8000b86:	e057      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x1cc>
 8000b8e:	e105      	b.n	8000d9c <__aeabi_dadd+0x3d8>
 8000b90:	0022      	movs	r2, r4
 8000b92:	3a01      	subs	r2, #1
 8000b94:	2c01      	cmp	r4, #1
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x1d6>
 8000b98:	e182      	b.n	8000ea0 <__aeabi_dadd+0x4dc>
 8000b9a:	4c64      	ldr	r4, [pc, #400]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d05b      	beq.n	8000c58 <__aeabi_dadd+0x294>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	e741      	b.n	8000a28 <__aeabi_dadd+0x64>
 8000ba4:	4c63      	ldr	r4, [pc, #396]	; (8000d34 <__aeabi_dadd+0x370>)
 8000ba6:	1c77      	adds	r7, r6, #1
 8000ba8:	4227      	tst	r7, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x1ea>
 8000bac:	e0c4      	b.n	8000d38 <__aeabi_dadd+0x374>
 8000bae:	0004      	movs	r4, r0
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_dadd+0x1f4>
 8000bb6:	e169      	b.n	8000e8c <__aeabi_dadd+0x4c8>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x1fa>
 8000bbc:	e1bf      	b.n	8000f3e <__aeabi_dadd+0x57a>
 8000bbe:	4644      	mov	r4, r8
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x202>
 8000bc4:	e1d0      	b.n	8000f68 <__aeabi_dadd+0x5a4>
 8000bc6:	0742      	lsls	r2, r0, #29
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	08c0      	lsrs	r0, r0, #3
 8000bce:	e029      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x214>
 8000bd6:	e170      	b.n	8000eba <__aeabi_dadd+0x4f6>
 8000bd8:	4662      	mov	r2, ip
 8000bda:	4664      	mov	r4, ip
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	2c01      	cmp	r4, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x220>
 8000be2:	e0e0      	b.n	8000da6 <__aeabi_dadd+0x3e2>
 8000be4:	4c51      	ldr	r4, [pc, #324]	; (8000d2c <__aeabi_dadd+0x368>)
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x228>
 8000bea:	e161      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000bec:	4694      	mov	ip, r2
 8000bee:	e7b4      	b.n	8000b5a <__aeabi_dadd+0x196>
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	391f      	subs	r1, #31
 8000bf4:	40ca      	lsrs	r2, r1
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d003      	beq.n	8000c04 <__aeabi_dadd+0x240>
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	409f      	lsls	r7, r3
 8000c02:	433c      	orrs	r4, r7
 8000c04:	1e63      	subs	r3, r4, #1
 8000c06:	419c      	sbcs	r4, r3
 8000c08:	2700      	movs	r7, #0
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	430c      	orrs	r4, r1
 8000c0e:	0763      	lsls	r3, r4, #29
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x250>
 8000c12:	e753      	b.n	8000abc <__aeabi_dadd+0xf8>
 8000c14:	46b4      	mov	ip, r6
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	077b      	lsls	r3, r7, #29
 8000c1a:	4323      	orrs	r3, r4
 8000c1c:	08f8      	lsrs	r0, r7, #3
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c20:	4594      	cmp	ip, r2
 8000c22:	d01d      	beq.n	8000c60 <__aeabi_dadd+0x29c>
 8000c24:	4662      	mov	r2, ip
 8000c26:	0307      	lsls	r7, r0, #12
 8000c28:	0552      	lsls	r2, r2, #21
 8000c2a:	0b3f      	lsrs	r7, r7, #12
 8000c2c:	0d52      	lsrs	r2, r2, #21
 8000c2e:	e760      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c30:	4644      	mov	r4, r8
 8000c32:	430c      	orrs	r4, r1
 8000c34:	1e62      	subs	r2, r4, #1
 8000c36:	4194      	sbcs	r4, r2
 8000c38:	18e4      	adds	r4, r4, r3
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	425f      	negs	r7, r3
 8000c40:	183f      	adds	r7, r7, r0
 8000c42:	023b      	lsls	r3, r7, #8
 8000c44:	d5e3      	bpl.n	8000c0e <__aeabi_dadd+0x24a>
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c48:	3601      	adds	r6, #1
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dadd+0x28c>
 8000c4e:	e0b5      	b.n	8000dbc <__aeabi_dadd+0x3f8>
 8000c50:	0032      	movs	r2, r6
 8000c52:	2700      	movs	r7, #0
 8000c54:	2300      	movs	r3, #0
 8000c56:	e74c      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c58:	0742      	lsls	r2, r0, #29
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	08c0      	lsrs	r0, r0, #3
 8000c60:	001a      	movs	r2, r3
 8000c62:	4302      	orrs	r2, r0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x2a4>
 8000c66:	e1e1      	b.n	800102c <__aeabi_dadd+0x668>
 8000c68:	2780      	movs	r7, #128	; 0x80
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	4307      	orrs	r7, r0
 8000c6e:	033f      	lsls	r7, r7, #12
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c72:	0b3f      	lsrs	r7, r7, #12
 8000c74:	e73d      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c76:	0020      	movs	r0, r4
 8000c78:	f001 fcd2 	bl	8002620 <__clzsi2>
 8000c7c:	0001      	movs	r1, r0
 8000c7e:	3118      	adds	r1, #24
 8000c80:	291f      	cmp	r1, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x2c2>
 8000c84:	e6fc      	b.n	8000a80 <__aeabi_dadd+0xbc>
 8000c86:	3808      	subs	r0, #8
 8000c88:	4084      	lsls	r4, r0
 8000c8a:	0027      	movs	r7, r4
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	42b1      	cmp	r1, r6
 8000c90:	db00      	blt.n	8000c94 <__aeabi_dadd+0x2d0>
 8000c92:	e6ff      	b.n	8000a94 <__aeabi_dadd+0xd0>
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000c96:	1a76      	subs	r6, r6, r1
 8000c98:	4017      	ands	r7, r2
 8000c9a:	e70d      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d02f      	beq.n	8000d00 <__aeabi_dadd+0x33c>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	1b92      	subs	r2, r2, r6
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0x2e8>
 8000caa:	e0ad      	b.n	8000e08 <__aeabi_dadd+0x444>
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <__aeabi_dadd+0x368>)
 8000cae:	4591      	cmp	r9, r2
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x2f0>
 8000cb2:	e10f      	b.n	8000ed4 <__aeabi_dadd+0x510>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	0412      	lsls	r2, r2, #16
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	4662      	mov	r2, ip
 8000cbc:	2a38      	cmp	r2, #56	; 0x38
 8000cbe:	dd00      	ble.n	8000cc2 <__aeabi_dadd+0x2fe>
 8000cc0:	e10f      	b.n	8000ee2 <__aeabi_dadd+0x51e>
 8000cc2:	2a1f      	cmp	r2, #31
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_dadd+0x304>
 8000cc6:	e180      	b.n	8000fca <__aeabi_dadd+0x606>
 8000cc8:	4664      	mov	r4, ip
 8000cca:	2220      	movs	r2, #32
 8000ccc:	001e      	movs	r6, r3
 8000cce:	1b12      	subs	r2, r2, r4
 8000cd0:	4667      	mov	r7, ip
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	4093      	lsls	r3, r2
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	40fe      	lsrs	r6, r7
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	4193      	sbcs	r3, r2
 8000cde:	40f8      	lsrs	r0, r7
 8000ce0:	4334      	orrs	r4, r6
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	4480      	add	r8, r0
 8000ce6:	1864      	adds	r4, r4, r1
 8000ce8:	428c      	cmp	r4, r1
 8000cea:	41bf      	sbcs	r7, r7
 8000cec:	427f      	negs	r7, r7
 8000cee:	464e      	mov	r6, r9
 8000cf0:	4447      	add	r7, r8
 8000cf2:	e7a6      	b.n	8000c42 <__aeabi_dadd+0x27e>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	1e4a      	subs	r2, r1, #1
 8000cfc:	4191      	sbcs	r1, r2
 8000cfe:	e6ad      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000d00:	4c0c      	ldr	r4, [pc, #48]	; (8000d34 <__aeabi_dadd+0x370>)
 8000d02:	1c72      	adds	r2, r6, #1
 8000d04:	4222      	tst	r2, r4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x346>
 8000d08:	e0a1      	b.n	8000e4e <__aeabi_dadd+0x48a>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x350>
 8000d12:	e0fa      	b.n	8000f0a <__aeabi_dadd+0x546>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x356>
 8000d18:	e145      	b.n	8000fa6 <__aeabi_dadd+0x5e2>
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x35e>
 8000d20:	e146      	b.n	8000fb0 <__aeabi_dadd+0x5ec>
 8000d22:	0742      	lsls	r2, r0, #29
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	08c0      	lsrs	r0, r0, #3
 8000d2a:	e77b      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d2c:	000007ff 	.word	0x000007ff
 8000d30:	ff7fffff 	.word	0xff7fffff
 8000d34:	000007fe 	.word	0x000007fe
 8000d38:	4647      	mov	r7, r8
 8000d3a:	1a5c      	subs	r4, r3, r1
 8000d3c:	1bc2      	subs	r2, r0, r7
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	41bf      	sbcs	r7, r7
 8000d42:	427f      	negs	r7, r7
 8000d44:	46b9      	mov	r9, r7
 8000d46:	0017      	movs	r7, r2
 8000d48:	464a      	mov	r2, r9
 8000d4a:	1abf      	subs	r7, r7, r2
 8000d4c:	023a      	lsls	r2, r7, #8
 8000d4e:	d500      	bpl.n	8000d52 <__aeabi_dadd+0x38e>
 8000d50:	e08d      	b.n	8000e6e <__aeabi_dadd+0x4aa>
 8000d52:	0023      	movs	r3, r4
 8000d54:	433b      	orrs	r3, r7
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x396>
 8000d58:	e68a      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	e761      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d60:	4cb4      	ldr	r4, [pc, #720]	; (8001034 <__aeabi_dadd+0x670>)
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x3a4>
 8000d66:	e0ad      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	4320      	orrs	r0, r4
 8000d6e:	4664      	mov	r4, ip
 8000d70:	2c38      	cmp	r4, #56	; 0x38
 8000d72:	dc3d      	bgt.n	8000df0 <__aeabi_dadd+0x42c>
 8000d74:	4662      	mov	r2, ip
 8000d76:	2c1f      	cmp	r4, #31
 8000d78:	dd00      	ble.n	8000d7c <__aeabi_dadd+0x3b8>
 8000d7a:	e0b7      	b.n	8000eec <__aeabi_dadd+0x528>
 8000d7c:	2520      	movs	r5, #32
 8000d7e:	001e      	movs	r6, r3
 8000d80:	1b2d      	subs	r5, r5, r4
 8000d82:	0004      	movs	r4, r0
 8000d84:	40ab      	lsls	r3, r5
 8000d86:	40ac      	lsls	r4, r5
 8000d88:	40d6      	lsrs	r6, r2
 8000d8a:	40d0      	lsrs	r0, r2
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	1e5d      	subs	r5, r3, #1
 8000d90:	41ab      	sbcs	r3, r5
 8000d92:	4334      	orrs	r4, r6
 8000d94:	1a12      	subs	r2, r2, r0
 8000d96:	4690      	mov	r8, r2
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	e02c      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000d9c:	0742      	lsls	r2, r0, #29
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	08c0      	lsrs	r0, r0, #3
 8000da4:	e73b      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000da6:	185c      	adds	r4, r3, r1
 8000da8:	429c      	cmp	r4, r3
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4440      	add	r0, r8
 8000dae:	425b      	negs	r3, r3
 8000db0:	18c7      	adds	r7, r0, r3
 8000db2:	2601      	movs	r6, #1
 8000db4:	023b      	lsls	r3, r7, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x3f6>
 8000db8:	e729      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000dba:	2602      	movs	r6, #2
 8000dbc:	4a9e      	ldr	r2, [pc, #632]	; (8001038 <__aeabi_dadd+0x674>)
 8000dbe:	0863      	lsrs	r3, r4, #1
 8000dc0:	4017      	ands	r7, r2
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4014      	ands	r4, r2
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	07fb      	lsls	r3, r7, #31
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	087f      	lsrs	r7, r7, #1
 8000dce:	e673      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000dd0:	4644      	mov	r4, r8
 8000dd2:	3a20      	subs	r2, #32
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	4662      	mov	r2, ip
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d005      	beq.n	8000de8 <__aeabi_dadd+0x424>
 8000ddc:	4667      	mov	r7, ip
 8000dde:	2240      	movs	r2, #64	; 0x40
 8000de0:	1bd2      	subs	r2, r2, r7
 8000de2:	4647      	mov	r7, r8
 8000de4:	4097      	lsls	r7, r2
 8000de6:	4339      	orrs	r1, r7
 8000de8:	1e4a      	subs	r2, r1, #1
 8000dea:	4191      	sbcs	r1, r2
 8000dec:	4321      	orrs	r1, r4
 8000dee:	e635      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000df0:	4303      	orrs	r3, r0
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	4183      	sbcs	r3, r0
 8000df6:	1acc      	subs	r4, r1, r3
 8000df8:	42a1      	cmp	r1, r4
 8000dfa:	41bf      	sbcs	r7, r7
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	427f      	negs	r7, r7
 8000e00:	4655      	mov	r5, sl
 8000e02:	464e      	mov	r6, r9
 8000e04:	1bdf      	subs	r7, r3, r7
 8000e06:	e62e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x44c>
 8000e0e:	e0bd      	b.n	8000f8c <__aeabi_dadd+0x5c8>
 8000e10:	4662      	mov	r2, ip
 8000e12:	4664      	mov	r4, ip
 8000e14:	3a01      	subs	r2, #1
 8000e16:	2c01      	cmp	r4, #1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x458>
 8000e1a:	e0e5      	b.n	8000fe8 <__aeabi_dadd+0x624>
 8000e1c:	4c85      	ldr	r4, [pc, #532]	; (8001034 <__aeabi_dadd+0x670>)
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d058      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000e22:	4694      	mov	ip, r2
 8000e24:	e749      	b.n	8000cba <__aeabi_dadd+0x2f6>
 8000e26:	4664      	mov	r4, ip
 8000e28:	2220      	movs	r2, #32
 8000e2a:	1b12      	subs	r2, r2, r4
 8000e2c:	4644      	mov	r4, r8
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	000f      	movs	r7, r1
 8000e32:	46a1      	mov	r9, r4
 8000e34:	4664      	mov	r4, ip
 8000e36:	4091      	lsls	r1, r2
 8000e38:	40e7      	lsrs	r7, r4
 8000e3a:	464c      	mov	r4, r9
 8000e3c:	1e4a      	subs	r2, r1, #1
 8000e3e:	4191      	sbcs	r1, r2
 8000e40:	433c      	orrs	r4, r7
 8000e42:	4642      	mov	r2, r8
 8000e44:	430c      	orrs	r4, r1
 8000e46:	4661      	mov	r1, ip
 8000e48:	40ca      	lsrs	r2, r1
 8000e4a:	1880      	adds	r0, r0, r2
 8000e4c:	e6f4      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000e4e:	4c79      	ldr	r4, [pc, #484]	; (8001034 <__aeabi_dadd+0x670>)
 8000e50:	42a2      	cmp	r2, r4
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x492>
 8000e54:	e6fd      	b.n	8000c52 <__aeabi_dadd+0x28e>
 8000e56:	1859      	adds	r1, r3, r1
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	4440      	add	r0, r8
 8000e5e:	425f      	negs	r7, r3
 8000e60:	19c7      	adds	r7, r0, r7
 8000e62:	07fc      	lsls	r4, r7, #31
 8000e64:	0849      	lsrs	r1, r1, #1
 8000e66:	0016      	movs	r6, r2
 8000e68:	430c      	orrs	r4, r1
 8000e6a:	087f      	lsrs	r7, r7, #1
 8000e6c:	e6cf      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000e6e:	1acc      	subs	r4, r1, r3
 8000e70:	42a1      	cmp	r1, r4
 8000e72:	41bf      	sbcs	r7, r7
 8000e74:	4643      	mov	r3, r8
 8000e76:	427f      	negs	r7, r7
 8000e78:	1a18      	subs	r0, r3, r0
 8000e7a:	4655      	mov	r5, sl
 8000e7c:	1bc7      	subs	r7, r0, r7
 8000e7e:	e5f7      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000e80:	08c9      	lsrs	r1, r1, #3
 8000e82:	077b      	lsls	r3, r7, #29
 8000e84:	4655      	mov	r5, sl
 8000e86:	430b      	orrs	r3, r1
 8000e88:	08f8      	lsrs	r0, r7, #3
 8000e8a:	e6c8      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x4ce>
 8000e90:	e081      	b.n	8000f96 <__aeabi_dadd+0x5d2>
 8000e92:	4643      	mov	r3, r8
 8000e94:	430b      	orrs	r3, r1
 8000e96:	d115      	bne.n	8000ec4 <__aeabi_dadd+0x500>
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	0300      	lsls	r0, r0, #12
 8000e9e:	e6e3      	b.n	8000c68 <__aeabi_dadd+0x2a4>
 8000ea0:	1a5c      	subs	r4, r3, r1
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	1bc7      	subs	r7, r0, r7
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	2601      	movs	r6, #1
 8000eac:	1aff      	subs	r7, r7, r3
 8000eae:	e5da      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000eb0:	0742      	lsls	r2, r0, #29
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	08c0      	lsrs	r0, r0, #3
 8000eb8:	e6d2      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000eba:	0742      	lsls	r2, r0, #29
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	08c0      	lsrs	r0, r0, #3
 8000ec2:	e6ac      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	08c9      	lsrs	r1, r1, #3
 8000eca:	075b      	lsls	r3, r3, #29
 8000ecc:	4655      	mov	r5, sl
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	08d0      	lsrs	r0, r2, #3
 8000ed2:	e6c5      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	075b      	lsls	r3, r3, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	430b      	orrs	r3, r1
 8000ede:	08d0      	lsrs	r0, r2, #3
 8000ee0:	e6be      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	001c      	movs	r4, r3
 8000ee6:	1e63      	subs	r3, r4, #1
 8000ee8:	419c      	sbcs	r4, r3
 8000eea:	e6fc      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000eec:	0002      	movs	r2, r0
 8000eee:	3c20      	subs	r4, #32
 8000ef0:	40e2      	lsrs	r2, r4
 8000ef2:	0014      	movs	r4, r2
 8000ef4:	4662      	mov	r2, ip
 8000ef6:	2a20      	cmp	r2, #32
 8000ef8:	d003      	beq.n	8000f02 <__aeabi_dadd+0x53e>
 8000efa:	2540      	movs	r5, #64	; 0x40
 8000efc:	1aad      	subs	r5, r5, r2
 8000efe:	40a8      	lsls	r0, r5
 8000f00:	4303      	orrs	r3, r0
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	4183      	sbcs	r3, r0
 8000f06:	4323      	orrs	r3, r4
 8000f08:	e775      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d0e2      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000f0e:	003a      	movs	r2, r7
 8000f10:	430a      	orrs	r2, r1
 8000f12:	d0cd      	beq.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000f14:	0742      	lsls	r2, r0, #29
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	08c0      	lsrs	r0, r0, #3
 8000f1e:	0312      	lsls	r2, r2, #12
 8000f20:	4210      	tst	r0, r2
 8000f22:	d006      	beq.n	8000f32 <__aeabi_dadd+0x56e>
 8000f24:	08fc      	lsrs	r4, r7, #3
 8000f26:	4214      	tst	r4, r2
 8000f28:	d103      	bne.n	8000f32 <__aeabi_dadd+0x56e>
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	08cb      	lsrs	r3, r1, #3
 8000f2e:	077a      	lsls	r2, r7, #29
 8000f30:	4313      	orrs	r3, r2
 8000f32:	0f5a      	lsrs	r2, r3, #29
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	0752      	lsls	r2, r2, #29
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	e690      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	430b      	orrs	r3, r1
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x582>
 8000f44:	e709      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000f46:	4643      	mov	r3, r8
 8000f48:	4642      	mov	r2, r8
 8000f4a:	08c9      	lsrs	r1, r1, #3
 8000f4c:	075b      	lsls	r3, r3, #29
 8000f4e:	4655      	mov	r5, sl
 8000f50:	430b      	orrs	r3, r1
 8000f52:	08d0      	lsrs	r0, r2, #3
 8000f54:	e666      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000f56:	1acc      	subs	r4, r1, r3
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	4189      	sbcs	r1, r1
 8000f5c:	1a3f      	subs	r7, r7, r0
 8000f5e:	4249      	negs	r1, r1
 8000f60:	4655      	mov	r5, sl
 8000f62:	2601      	movs	r6, #1
 8000f64:	1a7f      	subs	r7, r7, r1
 8000f66:	e57e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	1a5c      	subs	r4, r3, r1
 8000f6c:	1a87      	subs	r7, r0, r2
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	4192      	sbcs	r2, r2
 8000f72:	4252      	negs	r2, r2
 8000f74:	1abf      	subs	r7, r7, r2
 8000f76:	023a      	lsls	r2, r7, #8
 8000f78:	d53d      	bpl.n	8000ff6 <__aeabi_dadd+0x632>
 8000f7a:	1acc      	subs	r4, r1, r3
 8000f7c:	42a1      	cmp	r1, r4
 8000f7e:	4189      	sbcs	r1, r1
 8000f80:	4643      	mov	r3, r8
 8000f82:	4249      	negs	r1, r1
 8000f84:	1a1f      	subs	r7, r3, r0
 8000f86:	4655      	mov	r5, sl
 8000f88:	1a7f      	subs	r7, r7, r1
 8000f8a:	e595      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000f8c:	077b      	lsls	r3, r7, #29
 8000f8e:	08c9      	lsrs	r1, r1, #3
 8000f90:	430b      	orrs	r3, r1
 8000f92:	08f8      	lsrs	r0, r7, #3
 8000f94:	e643      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000f96:	4644      	mov	r4, r8
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	d130      	bne.n	8001000 <__aeabi_dadd+0x63c>
 8000f9e:	0742      	lsls	r2, r0, #29
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	08c0      	lsrs	r0, r0, #3
 8000fa4:	e65c      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000fa6:	077b      	lsls	r3, r7, #29
 8000fa8:	08c9      	lsrs	r1, r1, #3
 8000faa:	430b      	orrs	r3, r1
 8000fac:	08f8      	lsrs	r0, r7, #3
 8000fae:	e639      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000fb0:	185c      	adds	r4, r3, r1
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	419b      	sbcs	r3, r3
 8000fb6:	4440      	add	r0, r8
 8000fb8:	425b      	negs	r3, r3
 8000fba:	18c7      	adds	r7, r0, r3
 8000fbc:	023b      	lsls	r3, r7, #8
 8000fbe:	d400      	bmi.n	8000fc2 <__aeabi_dadd+0x5fe>
 8000fc0:	e625      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <__aeabi_dadd+0x674>)
 8000fc4:	2601      	movs	r6, #1
 8000fc6:	401f      	ands	r7, r3
 8000fc8:	e621      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fca:	0004      	movs	r4, r0
 8000fcc:	3a20      	subs	r2, #32
 8000fce:	40d4      	lsrs	r4, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	2a20      	cmp	r2, #32
 8000fd4:	d004      	beq.n	8000fe0 <__aeabi_dadd+0x61c>
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	4666      	mov	r6, ip
 8000fda:	1b92      	subs	r2, r2, r6
 8000fdc:	4090      	lsls	r0, r2
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	e67e      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000fe8:	185c      	adds	r4, r3, r1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	4189      	sbcs	r1, r1
 8000fee:	4440      	add	r0, r8
 8000ff0:	4249      	negs	r1, r1
 8000ff2:	1847      	adds	r7, r0, r1
 8000ff4:	e6dd      	b.n	8000db2 <__aeabi_dadd+0x3ee>
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x63a>
 8000ffc:	e6ad      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000ffe:	e606      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8001000:	0744      	lsls	r4, r0, #29
 8001002:	4323      	orrs	r3, r4
 8001004:	2480      	movs	r4, #128	; 0x80
 8001006:	08c0      	lsrs	r0, r0, #3
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	4220      	tst	r0, r4
 800100c:	d008      	beq.n	8001020 <__aeabi_dadd+0x65c>
 800100e:	4642      	mov	r2, r8
 8001010:	08d6      	lsrs	r6, r2, #3
 8001012:	4226      	tst	r6, r4
 8001014:	d104      	bne.n	8001020 <__aeabi_dadd+0x65c>
 8001016:	4655      	mov	r5, sl
 8001018:	0030      	movs	r0, r6
 800101a:	08cb      	lsrs	r3, r1, #3
 800101c:	0751      	lsls	r1, r2, #29
 800101e:	430b      	orrs	r3, r1
 8001020:	0f5a      	lsrs	r2, r3, #29
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	4313      	orrs	r3, r2
 800102a:	e619      	b.n	8000c60 <__aeabi_dadd+0x29c>
 800102c:	2300      	movs	r3, #0
 800102e:	4a01      	ldr	r2, [pc, #4]	; (8001034 <__aeabi_dadd+0x670>)
 8001030:	001f      	movs	r7, r3
 8001032:	e55e      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8001034:	000007ff 	.word	0x000007ff
 8001038:	ff7fffff 	.word	0xff7fffff

0800103c <__aeabi_ddiv>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	4657      	mov	r7, sl
 8001040:	464e      	mov	r6, r9
 8001042:	4645      	mov	r5, r8
 8001044:	46de      	mov	lr, fp
 8001046:	b5e0      	push	{r5, r6, r7, lr}
 8001048:	4681      	mov	r9, r0
 800104a:	0005      	movs	r5, r0
 800104c:	030c      	lsls	r4, r1, #12
 800104e:	0048      	lsls	r0, r1, #1
 8001050:	4692      	mov	sl, r2
 8001052:	001f      	movs	r7, r3
 8001054:	b085      	sub	sp, #20
 8001056:	0b24      	lsrs	r4, r4, #12
 8001058:	0d40      	lsrs	r0, r0, #21
 800105a:	0fce      	lsrs	r6, r1, #31
 800105c:	2800      	cmp	r0, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_ddiv+0x26>
 8001060:	e156      	b.n	8001310 <__aeabi_ddiv+0x2d4>
 8001062:	4bd4      	ldr	r3, [pc, #848]	; (80013b4 <__aeabi_ddiv+0x378>)
 8001064:	4298      	cmp	r0, r3
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x2e>
 8001068:	e172      	b.n	8001350 <__aeabi_ddiv+0x314>
 800106a:	0f6b      	lsrs	r3, r5, #29
 800106c:	00e4      	lsls	r4, r4, #3
 800106e:	431c      	orrs	r4, r3
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4323      	orrs	r3, r4
 8001076:	4698      	mov	r8, r3
 8001078:	4bcf      	ldr	r3, [pc, #828]	; (80013b8 <__aeabi_ddiv+0x37c>)
 800107a:	00ed      	lsls	r5, r5, #3
 800107c:	469b      	mov	fp, r3
 800107e:	2300      	movs	r3, #0
 8001080:	4699      	mov	r9, r3
 8001082:	4483      	add	fp, r0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	033c      	lsls	r4, r7, #12
 8001088:	007b      	lsls	r3, r7, #1
 800108a:	4650      	mov	r0, sl
 800108c:	0b24      	lsrs	r4, r4, #12
 800108e:	0d5b      	lsrs	r3, r3, #21
 8001090:	0fff      	lsrs	r7, r7, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x5c>
 8001096:	e11f      	b.n	80012d8 <__aeabi_ddiv+0x29c>
 8001098:	4ac6      	ldr	r2, [pc, #792]	; (80013b4 <__aeabi_ddiv+0x378>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0x64>
 800109e:	e162      	b.n	8001366 <__aeabi_ddiv+0x32a>
 80010a0:	49c5      	ldr	r1, [pc, #788]	; (80013b8 <__aeabi_ddiv+0x37c>)
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	468c      	mov	ip, r1
 80010a6:	00e4      	lsls	r4, r4, #3
 80010a8:	4659      	mov	r1, fp
 80010aa:	4314      	orrs	r4, r2
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	4463      	add	r3, ip
 80010b0:	0412      	lsls	r2, r2, #16
 80010b2:	1acb      	subs	r3, r1, r3
 80010b4:	4314      	orrs	r4, r2
 80010b6:	469b      	mov	fp, r3
 80010b8:	00c2      	lsls	r2, r0, #3
 80010ba:	2000      	movs	r0, #0
 80010bc:	0033      	movs	r3, r6
 80010be:	407b      	eors	r3, r7
 80010c0:	469a      	mov	sl, r3
 80010c2:	464b      	mov	r3, r9
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d827      	bhi.n	8001118 <__aeabi_ddiv+0xdc>
 80010c8:	49bc      	ldr	r1, [pc, #752]	; (80013bc <__aeabi_ddiv+0x380>)
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	58cb      	ldr	r3, [r1, r3]
 80010ce:	469f      	mov	pc, r3
 80010d0:	46b2      	mov	sl, r6
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d016      	beq.n	8001106 <__aeabi_ddiv+0xca>
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d100      	bne.n	80010de <__aeabi_ddiv+0xa2>
 80010dc:	e28e      	b.n	80015fc <__aeabi_ddiv+0x5c0>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0xa8>
 80010e2:	e0d9      	b.n	8001298 <__aeabi_ddiv+0x25c>
 80010e4:	2300      	movs	r3, #0
 80010e6:	2400      	movs	r4, #0
 80010e8:	2500      	movs	r5, #0
 80010ea:	4652      	mov	r2, sl
 80010ec:	051b      	lsls	r3, r3, #20
 80010ee:	4323      	orrs	r3, r4
 80010f0:	07d2      	lsls	r2, r2, #31
 80010f2:	4313      	orrs	r3, r2
 80010f4:	0028      	movs	r0, r5
 80010f6:	0019      	movs	r1, r3
 80010f8:	b005      	add	sp, #20
 80010fa:	bcf0      	pop	{r4, r5, r6, r7}
 80010fc:	46bb      	mov	fp, r7
 80010fe:	46b2      	mov	sl, r6
 8001100:	46a9      	mov	r9, r5
 8001102:	46a0      	mov	r8, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	2400      	movs	r4, #0
 8001108:	2500      	movs	r5, #0
 800110a:	4baa      	ldr	r3, [pc, #680]	; (80013b4 <__aeabi_ddiv+0x378>)
 800110c:	e7ed      	b.n	80010ea <__aeabi_ddiv+0xae>
 800110e:	46ba      	mov	sl, r7
 8001110:	46a0      	mov	r8, r4
 8001112:	0015      	movs	r5, r2
 8001114:	9000      	str	r0, [sp, #0]
 8001116:	e7dc      	b.n	80010d2 <__aeabi_ddiv+0x96>
 8001118:	4544      	cmp	r4, r8
 800111a:	d200      	bcs.n	800111e <__aeabi_ddiv+0xe2>
 800111c:	e1c7      	b.n	80014ae <__aeabi_ddiv+0x472>
 800111e:	d100      	bne.n	8001122 <__aeabi_ddiv+0xe6>
 8001120:	e1c2      	b.n	80014a8 <__aeabi_ddiv+0x46c>
 8001122:	2301      	movs	r3, #1
 8001124:	425b      	negs	r3, r3
 8001126:	469c      	mov	ip, r3
 8001128:	002e      	movs	r6, r5
 800112a:	4640      	mov	r0, r8
 800112c:	2500      	movs	r5, #0
 800112e:	44e3      	add	fp, ip
 8001130:	0223      	lsls	r3, r4, #8
 8001132:	0e14      	lsrs	r4, r2, #24
 8001134:	431c      	orrs	r4, r3
 8001136:	0c1b      	lsrs	r3, r3, #16
 8001138:	4699      	mov	r9, r3
 800113a:	0423      	lsls	r3, r4, #16
 800113c:	0c1f      	lsrs	r7, r3, #16
 800113e:	0212      	lsls	r2, r2, #8
 8001140:	4649      	mov	r1, r9
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	9701      	str	r7, [sp, #4]
 8001146:	f7ff f881 	bl	800024c <__aeabi_uidivmod>
 800114a:	0002      	movs	r2, r0
 800114c:	437a      	muls	r2, r7
 800114e:	040b      	lsls	r3, r1, #16
 8001150:	0c31      	lsrs	r1, r6, #16
 8001152:	4680      	mov	r8, r0
 8001154:	4319      	orrs	r1, r3
 8001156:	428a      	cmp	r2, r1
 8001158:	d907      	bls.n	800116a <__aeabi_ddiv+0x12e>
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	469c      	mov	ip, r3
 8001160:	1909      	adds	r1, r1, r4
 8001162:	44e0      	add	r8, ip
 8001164:	428c      	cmp	r4, r1
 8001166:	d800      	bhi.n	800116a <__aeabi_ddiv+0x12e>
 8001168:	e207      	b.n	800157a <__aeabi_ddiv+0x53e>
 800116a:	1a88      	subs	r0, r1, r2
 800116c:	4649      	mov	r1, r9
 800116e:	f7ff f86d 	bl	800024c <__aeabi_uidivmod>
 8001172:	0409      	lsls	r1, r1, #16
 8001174:	468c      	mov	ip, r1
 8001176:	0431      	lsls	r1, r6, #16
 8001178:	4666      	mov	r6, ip
 800117a:	9a01      	ldr	r2, [sp, #4]
 800117c:	0c09      	lsrs	r1, r1, #16
 800117e:	4342      	muls	r2, r0
 8001180:	0003      	movs	r3, r0
 8001182:	4331      	orrs	r1, r6
 8001184:	428a      	cmp	r2, r1
 8001186:	d904      	bls.n	8001192 <__aeabi_ddiv+0x156>
 8001188:	1909      	adds	r1, r1, r4
 800118a:	3b01      	subs	r3, #1
 800118c:	428c      	cmp	r4, r1
 800118e:	d800      	bhi.n	8001192 <__aeabi_ddiv+0x156>
 8001190:	e1ed      	b.n	800156e <__aeabi_ddiv+0x532>
 8001192:	1a88      	subs	r0, r1, r2
 8001194:	4642      	mov	r2, r8
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	431a      	orrs	r2, r3
 800119a:	4690      	mov	r8, r2
 800119c:	4641      	mov	r1, r8
 800119e:	9b00      	ldr	r3, [sp, #0]
 80011a0:	040e      	lsls	r6, r1, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	001f      	movs	r7, r3
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	9b00      	ldr	r3, [sp, #0]
 80011aa:	0c36      	lsrs	r6, r6, #16
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	0c19      	lsrs	r1, r3, #16
 80011b0:	000b      	movs	r3, r1
 80011b2:	4373      	muls	r3, r6
 80011b4:	0c12      	lsrs	r2, r2, #16
 80011b6:	437e      	muls	r6, r7
 80011b8:	9103      	str	r1, [sp, #12]
 80011ba:	4351      	muls	r1, r2
 80011bc:	437a      	muls	r2, r7
 80011be:	0c1f      	lsrs	r7, r3, #16
 80011c0:	46bc      	mov	ip, r7
 80011c2:	1876      	adds	r6, r6, r1
 80011c4:	4466      	add	r6, ip
 80011c6:	42b1      	cmp	r1, r6
 80011c8:	d903      	bls.n	80011d2 <__aeabi_ddiv+0x196>
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0249      	lsls	r1, r1, #9
 80011ce:	468c      	mov	ip, r1
 80011d0:	4462      	add	r2, ip
 80011d2:	0c31      	lsrs	r1, r6, #16
 80011d4:	188a      	adds	r2, r1, r2
 80011d6:	0431      	lsls	r1, r6, #16
 80011d8:	041e      	lsls	r6, r3, #16
 80011da:	0c36      	lsrs	r6, r6, #16
 80011dc:	198e      	adds	r6, r1, r6
 80011de:	4290      	cmp	r0, r2
 80011e0:	d302      	bcc.n	80011e8 <__aeabi_ddiv+0x1ac>
 80011e2:	d112      	bne.n	800120a <__aeabi_ddiv+0x1ce>
 80011e4:	42b5      	cmp	r5, r6
 80011e6:	d210      	bcs.n	800120a <__aeabi_ddiv+0x1ce>
 80011e8:	4643      	mov	r3, r8
 80011ea:	1e59      	subs	r1, r3, #1
 80011ec:	9b00      	ldr	r3, [sp, #0]
 80011ee:	469c      	mov	ip, r3
 80011f0:	4465      	add	r5, ip
 80011f2:	001f      	movs	r7, r3
 80011f4:	429d      	cmp	r5, r3
 80011f6:	419b      	sbcs	r3, r3
 80011f8:	425b      	negs	r3, r3
 80011fa:	191b      	adds	r3, r3, r4
 80011fc:	18c0      	adds	r0, r0, r3
 80011fe:	4284      	cmp	r4, r0
 8001200:	d200      	bcs.n	8001204 <__aeabi_ddiv+0x1c8>
 8001202:	e1a0      	b.n	8001546 <__aeabi_ddiv+0x50a>
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x1cc>
 8001206:	e19b      	b.n	8001540 <__aeabi_ddiv+0x504>
 8001208:	4688      	mov	r8, r1
 800120a:	1bae      	subs	r6, r5, r6
 800120c:	42b5      	cmp	r5, r6
 800120e:	41ad      	sbcs	r5, r5
 8001210:	1a80      	subs	r0, r0, r2
 8001212:	426d      	negs	r5, r5
 8001214:	1b40      	subs	r0, r0, r5
 8001216:	4284      	cmp	r4, r0
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x1e0>
 800121a:	e1d5      	b.n	80015c8 <__aeabi_ddiv+0x58c>
 800121c:	4649      	mov	r1, r9
 800121e:	f7ff f815 	bl	800024c <__aeabi_uidivmod>
 8001222:	9a01      	ldr	r2, [sp, #4]
 8001224:	040b      	lsls	r3, r1, #16
 8001226:	4342      	muls	r2, r0
 8001228:	0c31      	lsrs	r1, r6, #16
 800122a:	0005      	movs	r5, r0
 800122c:	4319      	orrs	r1, r3
 800122e:	428a      	cmp	r2, r1
 8001230:	d900      	bls.n	8001234 <__aeabi_ddiv+0x1f8>
 8001232:	e16c      	b.n	800150e <__aeabi_ddiv+0x4d2>
 8001234:	1a88      	subs	r0, r1, r2
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f808 	bl	800024c <__aeabi_uidivmod>
 800123c:	9a01      	ldr	r2, [sp, #4]
 800123e:	0436      	lsls	r6, r6, #16
 8001240:	4342      	muls	r2, r0
 8001242:	0409      	lsls	r1, r1, #16
 8001244:	0c36      	lsrs	r6, r6, #16
 8001246:	0003      	movs	r3, r0
 8001248:	430e      	orrs	r6, r1
 800124a:	42b2      	cmp	r2, r6
 800124c:	d900      	bls.n	8001250 <__aeabi_ddiv+0x214>
 800124e:	e153      	b.n	80014f8 <__aeabi_ddiv+0x4bc>
 8001250:	9803      	ldr	r0, [sp, #12]
 8001252:	1ab6      	subs	r6, r6, r2
 8001254:	0002      	movs	r2, r0
 8001256:	042d      	lsls	r5, r5, #16
 8001258:	431d      	orrs	r5, r3
 800125a:	9f02      	ldr	r7, [sp, #8]
 800125c:	042b      	lsls	r3, r5, #16
 800125e:	0c1b      	lsrs	r3, r3, #16
 8001260:	435a      	muls	r2, r3
 8001262:	437b      	muls	r3, r7
 8001264:	469c      	mov	ip, r3
 8001266:	0c29      	lsrs	r1, r5, #16
 8001268:	4348      	muls	r0, r1
 800126a:	0c13      	lsrs	r3, r2, #16
 800126c:	4484      	add	ip, r0
 800126e:	4463      	add	r3, ip
 8001270:	4379      	muls	r1, r7
 8001272:	4298      	cmp	r0, r3
 8001274:	d903      	bls.n	800127e <__aeabi_ddiv+0x242>
 8001276:	2080      	movs	r0, #128	; 0x80
 8001278:	0240      	lsls	r0, r0, #9
 800127a:	4684      	mov	ip, r0
 800127c:	4461      	add	r1, ip
 800127e:	0c18      	lsrs	r0, r3, #16
 8001280:	0412      	lsls	r2, r2, #16
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	1841      	adds	r1, r0, r1
 8001288:	189b      	adds	r3, r3, r2
 800128a:	428e      	cmp	r6, r1
 800128c:	d200      	bcs.n	8001290 <__aeabi_ddiv+0x254>
 800128e:	e0ff      	b.n	8001490 <__aeabi_ddiv+0x454>
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x258>
 8001292:	e0fa      	b.n	800148a <__aeabi_ddiv+0x44e>
 8001294:	2301      	movs	r3, #1
 8001296:	431d      	orrs	r5, r3
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <__aeabi_ddiv+0x384>)
 800129a:	445a      	add	r2, fp
 800129c:	2a00      	cmp	r2, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_ddiv+0x266>
 80012a0:	e0aa      	b.n	80013f8 <__aeabi_ddiv+0x3bc>
 80012a2:	076b      	lsls	r3, r5, #29
 80012a4:	d000      	beq.n	80012a8 <__aeabi_ddiv+0x26c>
 80012a6:	e13d      	b.n	8001524 <__aeabi_ddiv+0x4e8>
 80012a8:	08ed      	lsrs	r5, r5, #3
 80012aa:	4643      	mov	r3, r8
 80012ac:	01db      	lsls	r3, r3, #7
 80012ae:	d506      	bpl.n	80012be <__aeabi_ddiv+0x282>
 80012b0:	4642      	mov	r2, r8
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <__aeabi_ddiv+0x388>)
 80012b4:	401a      	ands	r2, r3
 80012b6:	4690      	mov	r8, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	445a      	add	r2, fp
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <__aeabi_ddiv+0x38c>)
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dd00      	ble.n	80012c6 <__aeabi_ddiv+0x28a>
 80012c4:	e71f      	b.n	8001106 <__aeabi_ddiv+0xca>
 80012c6:	4643      	mov	r3, r8
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	431d      	orrs	r5, r3
 80012cc:	4643      	mov	r3, r8
 80012ce:	0552      	lsls	r2, r2, #21
 80012d0:	025c      	lsls	r4, r3, #9
 80012d2:	0b24      	lsrs	r4, r4, #12
 80012d4:	0d53      	lsrs	r3, r2, #21
 80012d6:	e708      	b.n	80010ea <__aeabi_ddiv+0xae>
 80012d8:	4652      	mov	r2, sl
 80012da:	4322      	orrs	r2, r4
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x2a4>
 80012de:	e07b      	b.n	80013d8 <__aeabi_ddiv+0x39c>
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x2aa>
 80012e4:	e0fa      	b.n	80014dc <__aeabi_ddiv+0x4a0>
 80012e6:	0020      	movs	r0, r4
 80012e8:	f001 f99a 	bl	8002620 <__clzsi2>
 80012ec:	0002      	movs	r2, r0
 80012ee:	3a0b      	subs	r2, #11
 80012f0:	231d      	movs	r3, #29
 80012f2:	0001      	movs	r1, r0
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	4652      	mov	r2, sl
 80012f8:	3908      	subs	r1, #8
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	408c      	lsls	r4, r1
 80012fe:	4314      	orrs	r4, r2
 8001300:	4652      	mov	r2, sl
 8001302:	408a      	lsls	r2, r1
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <__aeabi_ddiv+0x390>)
 8001306:	4458      	add	r0, fp
 8001308:	469b      	mov	fp, r3
 800130a:	4483      	add	fp, r0
 800130c:	2000      	movs	r0, #0
 800130e:	e6d5      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001310:	464b      	mov	r3, r9
 8001312:	4323      	orrs	r3, r4
 8001314:	4698      	mov	r8, r3
 8001316:	d044      	beq.n	80013a2 <__aeabi_ddiv+0x366>
 8001318:	2c00      	cmp	r4, #0
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0x2e2>
 800131c:	e0ce      	b.n	80014bc <__aeabi_ddiv+0x480>
 800131e:	0020      	movs	r0, r4
 8001320:	f001 f97e 	bl	8002620 <__clzsi2>
 8001324:	0001      	movs	r1, r0
 8001326:	0002      	movs	r2, r0
 8001328:	390b      	subs	r1, #11
 800132a:	231d      	movs	r3, #29
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	4649      	mov	r1, r9
 8001330:	0010      	movs	r0, r2
 8001332:	40d9      	lsrs	r1, r3
 8001334:	3808      	subs	r0, #8
 8001336:	4084      	lsls	r4, r0
 8001338:	000b      	movs	r3, r1
 800133a:	464d      	mov	r5, r9
 800133c:	4323      	orrs	r3, r4
 800133e:	4698      	mov	r8, r3
 8001340:	4085      	lsls	r5, r0
 8001342:	4823      	ldr	r0, [pc, #140]	; (80013d0 <__aeabi_ddiv+0x394>)
 8001344:	1a83      	subs	r3, r0, r2
 8001346:	469b      	mov	fp, r3
 8001348:	2300      	movs	r3, #0
 800134a:	4699      	mov	r9, r3
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	e69a      	b.n	8001086 <__aeabi_ddiv+0x4a>
 8001350:	464b      	mov	r3, r9
 8001352:	4323      	orrs	r3, r4
 8001354:	4698      	mov	r8, r3
 8001356:	d11d      	bne.n	8001394 <__aeabi_ddiv+0x358>
 8001358:	2308      	movs	r3, #8
 800135a:	4699      	mov	r9, r3
 800135c:	3b06      	subs	r3, #6
 800135e:	2500      	movs	r5, #0
 8001360:	4683      	mov	fp, r0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	e68f      	b.n	8001086 <__aeabi_ddiv+0x4a>
 8001366:	4652      	mov	r2, sl
 8001368:	4322      	orrs	r2, r4
 800136a:	d109      	bne.n	8001380 <__aeabi_ddiv+0x344>
 800136c:	2302      	movs	r3, #2
 800136e:	4649      	mov	r1, r9
 8001370:	4319      	orrs	r1, r3
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <__aeabi_ddiv+0x398>)
 8001374:	4689      	mov	r9, r1
 8001376:	469c      	mov	ip, r3
 8001378:	2400      	movs	r4, #0
 800137a:	2002      	movs	r0, #2
 800137c:	44e3      	add	fp, ip
 800137e:	e69d      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001380:	2303      	movs	r3, #3
 8001382:	464a      	mov	r2, r9
 8001384:	431a      	orrs	r2, r3
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <__aeabi_ddiv+0x398>)
 8001388:	4691      	mov	r9, r2
 800138a:	469c      	mov	ip, r3
 800138c:	4652      	mov	r2, sl
 800138e:	2003      	movs	r0, #3
 8001390:	44e3      	add	fp, ip
 8001392:	e693      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001394:	230c      	movs	r3, #12
 8001396:	4699      	mov	r9, r3
 8001398:	3b09      	subs	r3, #9
 800139a:	46a0      	mov	r8, r4
 800139c:	4683      	mov	fp, r0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	e671      	b.n	8001086 <__aeabi_ddiv+0x4a>
 80013a2:	2304      	movs	r3, #4
 80013a4:	4699      	mov	r9, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	469b      	mov	fp, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	2500      	movs	r5, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	e669      	b.n	8001086 <__aeabi_ddiv+0x4a>
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	fffffc01 	.word	0xfffffc01
 80013bc:	0800de8c 	.word	0x0800de8c
 80013c0:	000003ff 	.word	0x000003ff
 80013c4:	feffffff 	.word	0xfeffffff
 80013c8:	000007fe 	.word	0x000007fe
 80013cc:	000003f3 	.word	0x000003f3
 80013d0:	fffffc0d 	.word	0xfffffc0d
 80013d4:	fffff801 	.word	0xfffff801
 80013d8:	4649      	mov	r1, r9
 80013da:	2301      	movs	r3, #1
 80013dc:	4319      	orrs	r1, r3
 80013de:	4689      	mov	r9, r1
 80013e0:	2400      	movs	r4, #0
 80013e2:	2001      	movs	r0, #1
 80013e4:	e66a      	b.n	80010bc <__aeabi_ddiv+0x80>
 80013e6:	2300      	movs	r3, #0
 80013e8:	2480      	movs	r4, #128	; 0x80
 80013ea:	469a      	mov	sl, r3
 80013ec:	2500      	movs	r5, #0
 80013ee:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <__aeabi_ddiv+0x5dc>)
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	e67a      	b.n	80010ea <__aeabi_ddiv+0xae>
 80013f4:	2501      	movs	r5, #1
 80013f6:	426d      	negs	r5, r5
 80013f8:	2301      	movs	r3, #1
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	2b38      	cmp	r3, #56	; 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_ddiv+0x3c6>
 8001400:	e670      	b.n	80010e4 <__aeabi_ddiv+0xa8>
 8001402:	2b1f      	cmp	r3, #31
 8001404:	dc00      	bgt.n	8001408 <__aeabi_ddiv+0x3cc>
 8001406:	e0bf      	b.n	8001588 <__aeabi_ddiv+0x54c>
 8001408:	211f      	movs	r1, #31
 800140a:	4249      	negs	r1, r1
 800140c:	1a8a      	subs	r2, r1, r2
 800140e:	4641      	mov	r1, r8
 8001410:	40d1      	lsrs	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	2b20      	cmp	r3, #32
 8001416:	d004      	beq.n	8001422 <__aeabi_ddiv+0x3e6>
 8001418:	4641      	mov	r1, r8
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <__aeabi_ddiv+0x5e0>)
 800141c:	445b      	add	r3, fp
 800141e:	4099      	lsls	r1, r3
 8001420:	430d      	orrs	r5, r1
 8001422:	1e6b      	subs	r3, r5, #1
 8001424:	419d      	sbcs	r5, r3
 8001426:	2307      	movs	r3, #7
 8001428:	432a      	orrs	r2, r5
 800142a:	001d      	movs	r5, r3
 800142c:	2400      	movs	r4, #0
 800142e:	4015      	ands	r5, r2
 8001430:	4213      	tst	r3, r2
 8001432:	d100      	bne.n	8001436 <__aeabi_ddiv+0x3fa>
 8001434:	e0d4      	b.n	80015e0 <__aeabi_ddiv+0x5a4>
 8001436:	210f      	movs	r1, #15
 8001438:	2300      	movs	r3, #0
 800143a:	4011      	ands	r1, r2
 800143c:	2904      	cmp	r1, #4
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x406>
 8001440:	e0cb      	b.n	80015da <__aeabi_ddiv+0x59e>
 8001442:	1d11      	adds	r1, r2, #4
 8001444:	4291      	cmp	r1, r2
 8001446:	4192      	sbcs	r2, r2
 8001448:	4252      	negs	r2, r2
 800144a:	189b      	adds	r3, r3, r2
 800144c:	000a      	movs	r2, r1
 800144e:	0219      	lsls	r1, r3, #8
 8001450:	d400      	bmi.n	8001454 <__aeabi_ddiv+0x418>
 8001452:	e0c2      	b.n	80015da <__aeabi_ddiv+0x59e>
 8001454:	2301      	movs	r3, #1
 8001456:	2400      	movs	r4, #0
 8001458:	2500      	movs	r5, #0
 800145a:	e646      	b.n	80010ea <__aeabi_ddiv+0xae>
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	4641      	mov	r1, r8
 8001460:	031b      	lsls	r3, r3, #12
 8001462:	4219      	tst	r1, r3
 8001464:	d008      	beq.n	8001478 <__aeabi_ddiv+0x43c>
 8001466:	421c      	tst	r4, r3
 8001468:	d106      	bne.n	8001478 <__aeabi_ddiv+0x43c>
 800146a:	431c      	orrs	r4, r3
 800146c:	0324      	lsls	r4, r4, #12
 800146e:	46ba      	mov	sl, r7
 8001470:	0015      	movs	r5, r2
 8001472:	4b69      	ldr	r3, [pc, #420]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001474:	0b24      	lsrs	r4, r4, #12
 8001476:	e638      	b.n	80010ea <__aeabi_ddiv+0xae>
 8001478:	2480      	movs	r4, #128	; 0x80
 800147a:	4643      	mov	r3, r8
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	431c      	orrs	r4, r3
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	46b2      	mov	sl, r6
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001486:	0b24      	lsrs	r4, r4, #12
 8001488:	e62f      	b.n	80010ea <__aeabi_ddiv+0xae>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x454>
 800148e:	e703      	b.n	8001298 <__aeabi_ddiv+0x25c>
 8001490:	19a6      	adds	r6, r4, r6
 8001492:	1e68      	subs	r0, r5, #1
 8001494:	42a6      	cmp	r6, r4
 8001496:	d200      	bcs.n	800149a <__aeabi_ddiv+0x45e>
 8001498:	e08d      	b.n	80015b6 <__aeabi_ddiv+0x57a>
 800149a:	428e      	cmp	r6, r1
 800149c:	d200      	bcs.n	80014a0 <__aeabi_ddiv+0x464>
 800149e:	e0a3      	b.n	80015e8 <__aeabi_ddiv+0x5ac>
 80014a0:	d100      	bne.n	80014a4 <__aeabi_ddiv+0x468>
 80014a2:	e0b3      	b.n	800160c <__aeabi_ddiv+0x5d0>
 80014a4:	0005      	movs	r5, r0
 80014a6:	e6f5      	b.n	8001294 <__aeabi_ddiv+0x258>
 80014a8:	42aa      	cmp	r2, r5
 80014aa:	d900      	bls.n	80014ae <__aeabi_ddiv+0x472>
 80014ac:	e639      	b.n	8001122 <__aeabi_ddiv+0xe6>
 80014ae:	4643      	mov	r3, r8
 80014b0:	07de      	lsls	r6, r3, #31
 80014b2:	0858      	lsrs	r0, r3, #1
 80014b4:	086b      	lsrs	r3, r5, #1
 80014b6:	431e      	orrs	r6, r3
 80014b8:	07ed      	lsls	r5, r5, #31
 80014ba:	e639      	b.n	8001130 <__aeabi_ddiv+0xf4>
 80014bc:	4648      	mov	r0, r9
 80014be:	f001 f8af 	bl	8002620 <__clzsi2>
 80014c2:	0001      	movs	r1, r0
 80014c4:	0002      	movs	r2, r0
 80014c6:	3115      	adds	r1, #21
 80014c8:	3220      	adds	r2, #32
 80014ca:	291c      	cmp	r1, #28
 80014cc:	dc00      	bgt.n	80014d0 <__aeabi_ddiv+0x494>
 80014ce:	e72c      	b.n	800132a <__aeabi_ddiv+0x2ee>
 80014d0:	464b      	mov	r3, r9
 80014d2:	3808      	subs	r0, #8
 80014d4:	4083      	lsls	r3, r0
 80014d6:	2500      	movs	r5, #0
 80014d8:	4698      	mov	r8, r3
 80014da:	e732      	b.n	8001342 <__aeabi_ddiv+0x306>
 80014dc:	f001 f8a0 	bl	8002620 <__clzsi2>
 80014e0:	0003      	movs	r3, r0
 80014e2:	001a      	movs	r2, r3
 80014e4:	3215      	adds	r2, #21
 80014e6:	3020      	adds	r0, #32
 80014e8:	2a1c      	cmp	r2, #28
 80014ea:	dc00      	bgt.n	80014ee <__aeabi_ddiv+0x4b2>
 80014ec:	e700      	b.n	80012f0 <__aeabi_ddiv+0x2b4>
 80014ee:	4654      	mov	r4, sl
 80014f0:	3b08      	subs	r3, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	409c      	lsls	r4, r3
 80014f6:	e705      	b.n	8001304 <__aeabi_ddiv+0x2c8>
 80014f8:	1936      	adds	r6, r6, r4
 80014fa:	3b01      	subs	r3, #1
 80014fc:	42b4      	cmp	r4, r6
 80014fe:	d900      	bls.n	8001502 <__aeabi_ddiv+0x4c6>
 8001500:	e6a6      	b.n	8001250 <__aeabi_ddiv+0x214>
 8001502:	42b2      	cmp	r2, r6
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x4cc>
 8001506:	e6a3      	b.n	8001250 <__aeabi_ddiv+0x214>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	1936      	adds	r6, r6, r4
 800150c:	e6a0      	b.n	8001250 <__aeabi_ddiv+0x214>
 800150e:	1909      	adds	r1, r1, r4
 8001510:	3d01      	subs	r5, #1
 8001512:	428c      	cmp	r4, r1
 8001514:	d900      	bls.n	8001518 <__aeabi_ddiv+0x4dc>
 8001516:	e68d      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 8001518:	428a      	cmp	r2, r1
 800151a:	d800      	bhi.n	800151e <__aeabi_ddiv+0x4e2>
 800151c:	e68a      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 800151e:	1e85      	subs	r5, r0, #2
 8001520:	1909      	adds	r1, r1, r4
 8001522:	e687      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 8001524:	230f      	movs	r3, #15
 8001526:	402b      	ands	r3, r5
 8001528:	2b04      	cmp	r3, #4
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x4f2>
 800152c:	e6bc      	b.n	80012a8 <__aeabi_ddiv+0x26c>
 800152e:	2305      	movs	r3, #5
 8001530:	425b      	negs	r3, r3
 8001532:	42ab      	cmp	r3, r5
 8001534:	419b      	sbcs	r3, r3
 8001536:	3504      	adds	r5, #4
 8001538:	425b      	negs	r3, r3
 800153a:	08ed      	lsrs	r5, r5, #3
 800153c:	4498      	add	r8, r3
 800153e:	e6b4      	b.n	80012aa <__aeabi_ddiv+0x26e>
 8001540:	42af      	cmp	r7, r5
 8001542:	d900      	bls.n	8001546 <__aeabi_ddiv+0x50a>
 8001544:	e660      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 8001546:	4282      	cmp	r2, r0
 8001548:	d804      	bhi.n	8001554 <__aeabi_ddiv+0x518>
 800154a:	d000      	beq.n	800154e <__aeabi_ddiv+0x512>
 800154c:	e65c      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 800154e:	42ae      	cmp	r6, r5
 8001550:	d800      	bhi.n	8001554 <__aeabi_ddiv+0x518>
 8001552:	e659      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 8001554:	2302      	movs	r3, #2
 8001556:	425b      	negs	r3, r3
 8001558:	469c      	mov	ip, r3
 800155a:	9b00      	ldr	r3, [sp, #0]
 800155c:	44e0      	add	r8, ip
 800155e:	469c      	mov	ip, r3
 8001560:	4465      	add	r5, ip
 8001562:	429d      	cmp	r5, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	425b      	negs	r3, r3
 8001568:	191b      	adds	r3, r3, r4
 800156a:	18c0      	adds	r0, r0, r3
 800156c:	e64d      	b.n	800120a <__aeabi_ddiv+0x1ce>
 800156e:	428a      	cmp	r2, r1
 8001570:	d800      	bhi.n	8001574 <__aeabi_ddiv+0x538>
 8001572:	e60e      	b.n	8001192 <__aeabi_ddiv+0x156>
 8001574:	1e83      	subs	r3, r0, #2
 8001576:	1909      	adds	r1, r1, r4
 8001578:	e60b      	b.n	8001192 <__aeabi_ddiv+0x156>
 800157a:	428a      	cmp	r2, r1
 800157c:	d800      	bhi.n	8001580 <__aeabi_ddiv+0x544>
 800157e:	e5f4      	b.n	800116a <__aeabi_ddiv+0x12e>
 8001580:	1e83      	subs	r3, r0, #2
 8001582:	4698      	mov	r8, r3
 8001584:	1909      	adds	r1, r1, r4
 8001586:	e5f0      	b.n	800116a <__aeabi_ddiv+0x12e>
 8001588:	4925      	ldr	r1, [pc, #148]	; (8001620 <__aeabi_ddiv+0x5e4>)
 800158a:	0028      	movs	r0, r5
 800158c:	4459      	add	r1, fp
 800158e:	408d      	lsls	r5, r1
 8001590:	4642      	mov	r2, r8
 8001592:	408a      	lsls	r2, r1
 8001594:	1e69      	subs	r1, r5, #1
 8001596:	418d      	sbcs	r5, r1
 8001598:	4641      	mov	r1, r8
 800159a:	40d8      	lsrs	r0, r3
 800159c:	40d9      	lsrs	r1, r3
 800159e:	4302      	orrs	r2, r0
 80015a0:	432a      	orrs	r2, r5
 80015a2:	000b      	movs	r3, r1
 80015a4:	0751      	lsls	r1, r2, #29
 80015a6:	d100      	bne.n	80015aa <__aeabi_ddiv+0x56e>
 80015a8:	e751      	b.n	800144e <__aeabi_ddiv+0x412>
 80015aa:	210f      	movs	r1, #15
 80015ac:	4011      	ands	r1, r2
 80015ae:	2904      	cmp	r1, #4
 80015b0:	d000      	beq.n	80015b4 <__aeabi_ddiv+0x578>
 80015b2:	e746      	b.n	8001442 <__aeabi_ddiv+0x406>
 80015b4:	e74b      	b.n	800144e <__aeabi_ddiv+0x412>
 80015b6:	0005      	movs	r5, r0
 80015b8:	428e      	cmp	r6, r1
 80015ba:	d000      	beq.n	80015be <__aeabi_ddiv+0x582>
 80015bc:	e66a      	b.n	8001294 <__aeabi_ddiv+0x258>
 80015be:	9a00      	ldr	r2, [sp, #0]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d000      	beq.n	80015c6 <__aeabi_ddiv+0x58a>
 80015c4:	e666      	b.n	8001294 <__aeabi_ddiv+0x258>
 80015c6:	e667      	b.n	8001298 <__aeabi_ddiv+0x25c>
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <__aeabi_ddiv+0x5e8>)
 80015ca:	445a      	add	r2, fp
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	dc00      	bgt.n	80015d2 <__aeabi_ddiv+0x596>
 80015d0:	e710      	b.n	80013f4 <__aeabi_ddiv+0x3b8>
 80015d2:	2301      	movs	r3, #1
 80015d4:	2500      	movs	r5, #0
 80015d6:	4498      	add	r8, r3
 80015d8:	e667      	b.n	80012aa <__aeabi_ddiv+0x26e>
 80015da:	075d      	lsls	r5, r3, #29
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	0b1c      	lsrs	r4, r3, #12
 80015e0:	08d2      	lsrs	r2, r2, #3
 80015e2:	2300      	movs	r3, #0
 80015e4:	4315      	orrs	r5, r2
 80015e6:	e580      	b.n	80010ea <__aeabi_ddiv+0xae>
 80015e8:	9800      	ldr	r0, [sp, #0]
 80015ea:	3d02      	subs	r5, #2
 80015ec:	0042      	lsls	r2, r0, #1
 80015ee:	4282      	cmp	r2, r0
 80015f0:	41bf      	sbcs	r7, r7
 80015f2:	427f      	negs	r7, r7
 80015f4:	193c      	adds	r4, r7, r4
 80015f6:	1936      	adds	r6, r6, r4
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	e7dd      	b.n	80015b8 <__aeabi_ddiv+0x57c>
 80015fc:	2480      	movs	r4, #128	; 0x80
 80015fe:	4643      	mov	r3, r8
 8001600:	0324      	lsls	r4, r4, #12
 8001602:	431c      	orrs	r4, r3
 8001604:	0324      	lsls	r4, r4, #12
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001608:	0b24      	lsrs	r4, r4, #12
 800160a:	e56e      	b.n	80010ea <__aeabi_ddiv+0xae>
 800160c:	9a00      	ldr	r2, [sp, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d3ea      	bcc.n	80015e8 <__aeabi_ddiv+0x5ac>
 8001612:	0005      	movs	r5, r0
 8001614:	e7d3      	b.n	80015be <__aeabi_ddiv+0x582>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	000007ff 	.word	0x000007ff
 800161c:	0000043e 	.word	0x0000043e
 8001620:	0000041e 	.word	0x0000041e
 8001624:	000003ff 	.word	0x000003ff

08001628 <__eqdf2>:
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	464e      	mov	r6, r9
 800162c:	4645      	mov	r5, r8
 800162e:	46de      	mov	lr, fp
 8001630:	4657      	mov	r7, sl
 8001632:	4690      	mov	r8, r2
 8001634:	b5e0      	push	{r5, r6, r7, lr}
 8001636:	0017      	movs	r7, r2
 8001638:	031a      	lsls	r2, r3, #12
 800163a:	0b12      	lsrs	r2, r2, #12
 800163c:	0005      	movs	r5, r0
 800163e:	4684      	mov	ip, r0
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <__eqdf2+0x80>)
 8001642:	030e      	lsls	r6, r1, #12
 8001644:	004c      	lsls	r4, r1, #1
 8001646:	4691      	mov	r9, r2
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	0fdb      	lsrs	r3, r3, #31
 800164c:	469b      	mov	fp, r3
 800164e:	0b36      	lsrs	r6, r6, #12
 8001650:	0d64      	lsrs	r4, r4, #21
 8001652:	0fc9      	lsrs	r1, r1, #31
 8001654:	0d52      	lsrs	r2, r2, #21
 8001656:	4284      	cmp	r4, r0
 8001658:	d019      	beq.n	800168e <__eqdf2+0x66>
 800165a:	4282      	cmp	r2, r0
 800165c:	d010      	beq.n	8001680 <__eqdf2+0x58>
 800165e:	2001      	movs	r0, #1
 8001660:	4294      	cmp	r4, r2
 8001662:	d10e      	bne.n	8001682 <__eqdf2+0x5a>
 8001664:	454e      	cmp	r6, r9
 8001666:	d10c      	bne.n	8001682 <__eqdf2+0x5a>
 8001668:	2001      	movs	r0, #1
 800166a:	45c4      	cmp	ip, r8
 800166c:	d109      	bne.n	8001682 <__eqdf2+0x5a>
 800166e:	4559      	cmp	r1, fp
 8001670:	d017      	beq.n	80016a2 <__eqdf2+0x7a>
 8001672:	2c00      	cmp	r4, #0
 8001674:	d105      	bne.n	8001682 <__eqdf2+0x5a>
 8001676:	0030      	movs	r0, r6
 8001678:	4328      	orrs	r0, r5
 800167a:	1e43      	subs	r3, r0, #1
 800167c:	4198      	sbcs	r0, r3
 800167e:	e000      	b.n	8001682 <__eqdf2+0x5a>
 8001680:	2001      	movs	r0, #1
 8001682:	bcf0      	pop	{r4, r5, r6, r7}
 8001684:	46bb      	mov	fp, r7
 8001686:	46b2      	mov	sl, r6
 8001688:	46a9      	mov	r9, r5
 800168a:	46a0      	mov	r8, r4
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	0033      	movs	r3, r6
 8001690:	2001      	movs	r0, #1
 8001692:	432b      	orrs	r3, r5
 8001694:	d1f5      	bne.n	8001682 <__eqdf2+0x5a>
 8001696:	42a2      	cmp	r2, r4
 8001698:	d1f3      	bne.n	8001682 <__eqdf2+0x5a>
 800169a:	464b      	mov	r3, r9
 800169c:	433b      	orrs	r3, r7
 800169e:	d1f0      	bne.n	8001682 <__eqdf2+0x5a>
 80016a0:	e7e2      	b.n	8001668 <__eqdf2+0x40>
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7ed      	b.n	8001682 <__eqdf2+0x5a>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__gedf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	4647      	mov	r7, r8
 80016b0:	46ce      	mov	lr, r9
 80016b2:	0004      	movs	r4, r0
 80016b4:	0018      	movs	r0, r3
 80016b6:	0016      	movs	r6, r2
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	4d2d      	ldr	r5, [pc, #180]	; (8001774 <__gedf2+0xc8>)
 80016be:	004a      	lsls	r2, r1, #1
 80016c0:	4699      	mov	r9, r3
 80016c2:	b580      	push	{r7, lr}
 80016c4:	0043      	lsls	r3, r0, #1
 80016c6:	030f      	lsls	r7, r1, #12
 80016c8:	46a4      	mov	ip, r4
 80016ca:	46b0      	mov	r8, r6
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d52      	lsrs	r2, r2, #21
 80016d0:	0fc9      	lsrs	r1, r1, #31
 80016d2:	0d5b      	lsrs	r3, r3, #21
 80016d4:	0fc0      	lsrs	r0, r0, #31
 80016d6:	42aa      	cmp	r2, r5
 80016d8:	d021      	beq.n	800171e <__gedf2+0x72>
 80016da:	42ab      	cmp	r3, r5
 80016dc:	d013      	beq.n	8001706 <__gedf2+0x5a>
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d122      	bne.n	8001728 <__gedf2+0x7c>
 80016e2:	433c      	orrs	r4, r7
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <__gedf2+0x42>
 80016e8:	464d      	mov	r5, r9
 80016ea:	432e      	orrs	r6, r5
 80016ec:	d022      	beq.n	8001734 <__gedf2+0x88>
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d010      	beq.n	8001714 <__gedf2+0x68>
 80016f2:	4281      	cmp	r1, r0
 80016f4:	d022      	beq.n	800173c <__gedf2+0x90>
 80016f6:	2002      	movs	r0, #2
 80016f8:	3901      	subs	r1, #1
 80016fa:	4008      	ands	r0, r1
 80016fc:	3801      	subs	r0, #1
 80016fe:	bcc0      	pop	{r6, r7}
 8001700:	46b9      	mov	r9, r7
 8001702:	46b0      	mov	r8, r6
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	464d      	mov	r5, r9
 8001708:	432e      	orrs	r6, r5
 800170a:	d129      	bne.n	8001760 <__gedf2+0xb4>
 800170c:	2a00      	cmp	r2, #0
 800170e:	d1f0      	bne.n	80016f2 <__gedf2+0x46>
 8001710:	433c      	orrs	r4, r7
 8001712:	d1ee      	bne.n	80016f2 <__gedf2+0x46>
 8001714:	2800      	cmp	r0, #0
 8001716:	d1f2      	bne.n	80016fe <__gedf2+0x52>
 8001718:	2001      	movs	r0, #1
 800171a:	4240      	negs	r0, r0
 800171c:	e7ef      	b.n	80016fe <__gedf2+0x52>
 800171e:	003d      	movs	r5, r7
 8001720:	4325      	orrs	r5, r4
 8001722:	d11d      	bne.n	8001760 <__gedf2+0xb4>
 8001724:	4293      	cmp	r3, r2
 8001726:	d0ee      	beq.n	8001706 <__gedf2+0x5a>
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e2      	bne.n	80016f2 <__gedf2+0x46>
 800172c:	464c      	mov	r4, r9
 800172e:	4326      	orrs	r6, r4
 8001730:	d1df      	bne.n	80016f2 <__gedf2+0x46>
 8001732:	e7e0      	b.n	80016f6 <__gedf2+0x4a>
 8001734:	2000      	movs	r0, #0
 8001736:	2c00      	cmp	r4, #0
 8001738:	d0e1      	beq.n	80016fe <__gedf2+0x52>
 800173a:	e7dc      	b.n	80016f6 <__gedf2+0x4a>
 800173c:	429a      	cmp	r2, r3
 800173e:	dc0a      	bgt.n	8001756 <__gedf2+0xaa>
 8001740:	dbe8      	blt.n	8001714 <__gedf2+0x68>
 8001742:	454f      	cmp	r7, r9
 8001744:	d8d7      	bhi.n	80016f6 <__gedf2+0x4a>
 8001746:	d00e      	beq.n	8001766 <__gedf2+0xba>
 8001748:	2000      	movs	r0, #0
 800174a:	454f      	cmp	r7, r9
 800174c:	d2d7      	bcs.n	80016fe <__gedf2+0x52>
 800174e:	2900      	cmp	r1, #0
 8001750:	d0e2      	beq.n	8001718 <__gedf2+0x6c>
 8001752:	0008      	movs	r0, r1
 8001754:	e7d3      	b.n	80016fe <__gedf2+0x52>
 8001756:	4243      	negs	r3, r0
 8001758:	4158      	adcs	r0, r3
 800175a:	0040      	lsls	r0, r0, #1
 800175c:	3801      	subs	r0, #1
 800175e:	e7ce      	b.n	80016fe <__gedf2+0x52>
 8001760:	2002      	movs	r0, #2
 8001762:	4240      	negs	r0, r0
 8001764:	e7cb      	b.n	80016fe <__gedf2+0x52>
 8001766:	45c4      	cmp	ip, r8
 8001768:	d8c5      	bhi.n	80016f6 <__gedf2+0x4a>
 800176a:	2000      	movs	r0, #0
 800176c:	45c4      	cmp	ip, r8
 800176e:	d2c6      	bcs.n	80016fe <__gedf2+0x52>
 8001770:	e7ed      	b.n	800174e <__gedf2+0xa2>
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	000007ff 	.word	0x000007ff

08001778 <__ledf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	4647      	mov	r7, r8
 800177c:	46ce      	mov	lr, r9
 800177e:	0004      	movs	r4, r0
 8001780:	0018      	movs	r0, r3
 8001782:	0016      	movs	r6, r2
 8001784:	031b      	lsls	r3, r3, #12
 8001786:	0b1b      	lsrs	r3, r3, #12
 8001788:	4d2c      	ldr	r5, [pc, #176]	; (800183c <__ledf2+0xc4>)
 800178a:	004a      	lsls	r2, r1, #1
 800178c:	4699      	mov	r9, r3
 800178e:	b580      	push	{r7, lr}
 8001790:	0043      	lsls	r3, r0, #1
 8001792:	030f      	lsls	r7, r1, #12
 8001794:	46a4      	mov	ip, r4
 8001796:	46b0      	mov	r8, r6
 8001798:	0b3f      	lsrs	r7, r7, #12
 800179a:	0d52      	lsrs	r2, r2, #21
 800179c:	0fc9      	lsrs	r1, r1, #31
 800179e:	0d5b      	lsrs	r3, r3, #21
 80017a0:	0fc0      	lsrs	r0, r0, #31
 80017a2:	42aa      	cmp	r2, r5
 80017a4:	d00d      	beq.n	80017c2 <__ledf2+0x4a>
 80017a6:	42ab      	cmp	r3, r5
 80017a8:	d010      	beq.n	80017cc <__ledf2+0x54>
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	d127      	bne.n	80017fe <__ledf2+0x86>
 80017ae:	433c      	orrs	r4, r7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <__ledf2+0x60>
 80017b4:	464d      	mov	r5, r9
 80017b6:	432e      	orrs	r6, r5
 80017b8:	d10e      	bne.n	80017d8 <__ledf2+0x60>
 80017ba:	2000      	movs	r0, #0
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d015      	beq.n	80017ec <__ledf2+0x74>
 80017c0:	e00e      	b.n	80017e0 <__ledf2+0x68>
 80017c2:	003d      	movs	r5, r7
 80017c4:	4325      	orrs	r5, r4
 80017c6:	d110      	bne.n	80017ea <__ledf2+0x72>
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d118      	bne.n	80017fe <__ledf2+0x86>
 80017cc:	464d      	mov	r5, r9
 80017ce:	432e      	orrs	r6, r5
 80017d0:	d10b      	bne.n	80017ea <__ledf2+0x72>
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d102      	bne.n	80017dc <__ledf2+0x64>
 80017d6:	433c      	orrs	r4, r7
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d00b      	beq.n	80017f4 <__ledf2+0x7c>
 80017dc:	4281      	cmp	r1, r0
 80017de:	d014      	beq.n	800180a <__ledf2+0x92>
 80017e0:	2002      	movs	r0, #2
 80017e2:	3901      	subs	r1, #1
 80017e4:	4008      	ands	r0, r1
 80017e6:	3801      	subs	r0, #1
 80017e8:	e000      	b.n	80017ec <__ledf2+0x74>
 80017ea:	2002      	movs	r0, #2
 80017ec:	bcc0      	pop	{r6, r7}
 80017ee:	46b9      	mov	r9, r7
 80017f0:	46b0      	mov	r8, r6
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1f9      	bne.n	80017ec <__ledf2+0x74>
 80017f8:	2001      	movs	r0, #1
 80017fa:	4240      	negs	r0, r0
 80017fc:	e7f6      	b.n	80017ec <__ledf2+0x74>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ec      	bne.n	80017dc <__ledf2+0x64>
 8001802:	464c      	mov	r4, r9
 8001804:	4326      	orrs	r6, r4
 8001806:	d1e9      	bne.n	80017dc <__ledf2+0x64>
 8001808:	e7ea      	b.n	80017e0 <__ledf2+0x68>
 800180a:	429a      	cmp	r2, r3
 800180c:	dd04      	ble.n	8001818 <__ledf2+0xa0>
 800180e:	4243      	negs	r3, r0
 8001810:	4158      	adcs	r0, r3
 8001812:	0040      	lsls	r0, r0, #1
 8001814:	3801      	subs	r0, #1
 8001816:	e7e9      	b.n	80017ec <__ledf2+0x74>
 8001818:	429a      	cmp	r2, r3
 800181a:	dbeb      	blt.n	80017f4 <__ledf2+0x7c>
 800181c:	454f      	cmp	r7, r9
 800181e:	d8df      	bhi.n	80017e0 <__ledf2+0x68>
 8001820:	d006      	beq.n	8001830 <__ledf2+0xb8>
 8001822:	2000      	movs	r0, #0
 8001824:	454f      	cmp	r7, r9
 8001826:	d2e1      	bcs.n	80017ec <__ledf2+0x74>
 8001828:	2900      	cmp	r1, #0
 800182a:	d0e5      	beq.n	80017f8 <__ledf2+0x80>
 800182c:	0008      	movs	r0, r1
 800182e:	e7dd      	b.n	80017ec <__ledf2+0x74>
 8001830:	45c4      	cmp	ip, r8
 8001832:	d8d5      	bhi.n	80017e0 <__ledf2+0x68>
 8001834:	2000      	movs	r0, #0
 8001836:	45c4      	cmp	ip, r8
 8001838:	d2d8      	bcs.n	80017ec <__ledf2+0x74>
 800183a:	e7f5      	b.n	8001828 <__ledf2+0xb0>
 800183c:	000007ff 	.word	0x000007ff

08001840 <__aeabi_dmul>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	4657      	mov	r7, sl
 8001844:	464e      	mov	r6, r9
 8001846:	4645      	mov	r5, r8
 8001848:	46de      	mov	lr, fp
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	4698      	mov	r8, r3
 800184e:	030c      	lsls	r4, r1, #12
 8001850:	004b      	lsls	r3, r1, #1
 8001852:	0006      	movs	r6, r0
 8001854:	4692      	mov	sl, r2
 8001856:	b087      	sub	sp, #28
 8001858:	0b24      	lsrs	r4, r4, #12
 800185a:	0d5b      	lsrs	r3, r3, #21
 800185c:	0fcf      	lsrs	r7, r1, #31
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dmul+0x24>
 8001862:	e15c      	b.n	8001b1e <__aeabi_dmul+0x2de>
 8001864:	4ad9      	ldr	r2, [pc, #868]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d100      	bne.n	800186c <__aeabi_dmul+0x2c>
 800186a:	e175      	b.n	8001b58 <__aeabi_dmul+0x318>
 800186c:	0f42      	lsrs	r2, r0, #29
 800186e:	00e4      	lsls	r4, r4, #3
 8001870:	4314      	orrs	r4, r2
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	4314      	orrs	r4, r2
 8001878:	4ad5      	ldr	r2, [pc, #852]	; (8001bd0 <__aeabi_dmul+0x390>)
 800187a:	00c5      	lsls	r5, r0, #3
 800187c:	4694      	mov	ip, r2
 800187e:	4463      	add	r3, ip
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	4699      	mov	r9, r3
 8001886:	469b      	mov	fp, r3
 8001888:	4643      	mov	r3, r8
 800188a:	4642      	mov	r2, r8
 800188c:	031e      	lsls	r6, r3, #12
 800188e:	0fd2      	lsrs	r2, r2, #31
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4650      	mov	r0, sl
 8001894:	4690      	mov	r8, r2
 8001896:	0b36      	lsrs	r6, r6, #12
 8001898:	0d5b      	lsrs	r3, r3, #21
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x5e>
 800189c:	e120      	b.n	8001ae0 <__aeabi_dmul+0x2a0>
 800189e:	4acb      	ldr	r2, [pc, #812]	; (8001bcc <__aeabi_dmul+0x38c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dmul+0x66>
 80018a4:	e162      	b.n	8001b6c <__aeabi_dmul+0x32c>
 80018a6:	49ca      	ldr	r1, [pc, #808]	; (8001bd0 <__aeabi_dmul+0x390>)
 80018a8:	0f42      	lsrs	r2, r0, #29
 80018aa:	468c      	mov	ip, r1
 80018ac:	9900      	ldr	r1, [sp, #0]
 80018ae:	4463      	add	r3, ip
 80018b0:	00f6      	lsls	r6, r6, #3
 80018b2:	468c      	mov	ip, r1
 80018b4:	4316      	orrs	r6, r2
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	449c      	add	ip, r3
 80018ba:	0412      	lsls	r2, r2, #16
 80018bc:	4663      	mov	r3, ip
 80018be:	4316      	orrs	r6, r2
 80018c0:	00c2      	lsls	r2, r0, #3
 80018c2:	2000      	movs	r0, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	9900      	ldr	r1, [sp, #0]
 80018c8:	4643      	mov	r3, r8
 80018ca:	3101      	adds	r1, #1
 80018cc:	468c      	mov	ip, r1
 80018ce:	4649      	mov	r1, r9
 80018d0:	407b      	eors	r3, r7
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	290f      	cmp	r1, #15
 80018d6:	d826      	bhi.n	8001926 <__aeabi_dmul+0xe6>
 80018d8:	4bbe      	ldr	r3, [pc, #760]	; (8001bd4 <__aeabi_dmul+0x394>)
 80018da:	0089      	lsls	r1, r1, #2
 80018dc:	5859      	ldr	r1, [r3, r1]
 80018de:	468f      	mov	pc, r1
 80018e0:	4643      	mov	r3, r8
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	0034      	movs	r4, r6
 80018e6:	0015      	movs	r5, r2
 80018e8:	4683      	mov	fp, r0
 80018ea:	465b      	mov	r3, fp
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d016      	beq.n	800191e <__aeabi_dmul+0xde>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dmul+0xb6>
 80018f4:	e203      	b.n	8001cfe <__aeabi_dmul+0x4be>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d000      	beq.n	80018fc <__aeabi_dmul+0xbc>
 80018fa:	e0cd      	b.n	8001a98 <__aeabi_dmul+0x258>
 80018fc:	2200      	movs	r2, #0
 80018fe:	2400      	movs	r4, #0
 8001900:	2500      	movs	r5, #0
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	0512      	lsls	r2, r2, #20
 8001906:	4322      	orrs	r2, r4
 8001908:	07db      	lsls	r3, r3, #31
 800190a:	431a      	orrs	r2, r3
 800190c:	0028      	movs	r0, r5
 800190e:	0011      	movs	r1, r2
 8001910:	b007      	add	sp, #28
 8001912:	bcf0      	pop	{r4, r5, r6, r7}
 8001914:	46bb      	mov	fp, r7
 8001916:	46b2      	mov	sl, r6
 8001918:	46a9      	mov	r9, r5
 800191a:	46a0      	mov	r8, r4
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	2400      	movs	r4, #0
 8001920:	2500      	movs	r5, #0
 8001922:	4aaa      	ldr	r2, [pc, #680]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001924:	e7ed      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001926:	0c28      	lsrs	r0, r5, #16
 8001928:	042d      	lsls	r5, r5, #16
 800192a:	0c2d      	lsrs	r5, r5, #16
 800192c:	002b      	movs	r3, r5
 800192e:	0c11      	lsrs	r1, r2, #16
 8001930:	0412      	lsls	r2, r2, #16
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	4353      	muls	r3, r2
 8001936:	4698      	mov	r8, r3
 8001938:	0013      	movs	r3, r2
 800193a:	002f      	movs	r7, r5
 800193c:	4343      	muls	r3, r0
 800193e:	4699      	mov	r9, r3
 8001940:	434f      	muls	r7, r1
 8001942:	444f      	add	r7, r9
 8001944:	46bb      	mov	fp, r7
 8001946:	4647      	mov	r7, r8
 8001948:	000b      	movs	r3, r1
 800194a:	0c3f      	lsrs	r7, r7, #16
 800194c:	46ba      	mov	sl, r7
 800194e:	4343      	muls	r3, r0
 8001950:	44da      	add	sl, fp
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	45d1      	cmp	r9, sl
 8001956:	d904      	bls.n	8001962 <__aeabi_dmul+0x122>
 8001958:	2780      	movs	r7, #128	; 0x80
 800195a:	027f      	lsls	r7, r7, #9
 800195c:	46b9      	mov	r9, r7
 800195e:	444b      	add	r3, r9
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	4653      	mov	r3, sl
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	469b      	mov	fp, r3
 8001968:	4653      	mov	r3, sl
 800196a:	041f      	lsls	r7, r3, #16
 800196c:	4643      	mov	r3, r8
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	4698      	mov	r8, r3
 8001974:	003b      	movs	r3, r7
 8001976:	4443      	add	r3, r8
 8001978:	9304      	str	r3, [sp, #16]
 800197a:	0c33      	lsrs	r3, r6, #16
 800197c:	0436      	lsls	r6, r6, #16
 800197e:	0c36      	lsrs	r6, r6, #16
 8001980:	4698      	mov	r8, r3
 8001982:	0033      	movs	r3, r6
 8001984:	4343      	muls	r3, r0
 8001986:	4699      	mov	r9, r3
 8001988:	4643      	mov	r3, r8
 800198a:	4343      	muls	r3, r0
 800198c:	002f      	movs	r7, r5
 800198e:	469a      	mov	sl, r3
 8001990:	4643      	mov	r3, r8
 8001992:	4377      	muls	r7, r6
 8001994:	435d      	muls	r5, r3
 8001996:	0c38      	lsrs	r0, r7, #16
 8001998:	444d      	add	r5, r9
 800199a:	1945      	adds	r5, r0, r5
 800199c:	45a9      	cmp	r9, r5
 800199e:	d903      	bls.n	80019a8 <__aeabi_dmul+0x168>
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4699      	mov	r9, r3
 80019a6:	44ca      	add	sl, r9
 80019a8:	043f      	lsls	r7, r7, #16
 80019aa:	0c28      	lsrs	r0, r5, #16
 80019ac:	0c3f      	lsrs	r7, r7, #16
 80019ae:	042d      	lsls	r5, r5, #16
 80019b0:	19ed      	adds	r5, r5, r7
 80019b2:	0c27      	lsrs	r7, r4, #16
 80019b4:	0424      	lsls	r4, r4, #16
 80019b6:	0c24      	lsrs	r4, r4, #16
 80019b8:	0003      	movs	r3, r0
 80019ba:	0020      	movs	r0, r4
 80019bc:	4350      	muls	r0, r2
 80019be:	437a      	muls	r2, r7
 80019c0:	4691      	mov	r9, r2
 80019c2:	003a      	movs	r2, r7
 80019c4:	4453      	add	r3, sl
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	0c03      	lsrs	r3, r0, #16
 80019ca:	469a      	mov	sl, r3
 80019cc:	434a      	muls	r2, r1
 80019ce:	4361      	muls	r1, r4
 80019d0:	4449      	add	r1, r9
 80019d2:	4451      	add	r1, sl
 80019d4:	44ab      	add	fp, r5
 80019d6:	4589      	cmp	r9, r1
 80019d8:	d903      	bls.n	80019e2 <__aeabi_dmul+0x1a2>
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	025b      	lsls	r3, r3, #9
 80019de:	4699      	mov	r9, r3
 80019e0:	444a      	add	r2, r9
 80019e2:	0400      	lsls	r0, r0, #16
 80019e4:	0c0b      	lsrs	r3, r1, #16
 80019e6:	0c00      	lsrs	r0, r0, #16
 80019e8:	0409      	lsls	r1, r1, #16
 80019ea:	1809      	adds	r1, r1, r0
 80019ec:	0020      	movs	r0, r4
 80019ee:	4699      	mov	r9, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	4370      	muls	r0, r6
 80019f4:	435c      	muls	r4, r3
 80019f6:	437e      	muls	r6, r7
 80019f8:	435f      	muls	r7, r3
 80019fa:	0c03      	lsrs	r3, r0, #16
 80019fc:	4698      	mov	r8, r3
 80019fe:	19a4      	adds	r4, r4, r6
 8001a00:	4444      	add	r4, r8
 8001a02:	444a      	add	r2, r9
 8001a04:	9703      	str	r7, [sp, #12]
 8001a06:	42a6      	cmp	r6, r4
 8001a08:	d904      	bls.n	8001a14 <__aeabi_dmul+0x1d4>
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	4698      	mov	r8, r3
 8001a10:	4447      	add	r7, r8
 8001a12:	9703      	str	r7, [sp, #12]
 8001a14:	0423      	lsls	r3, r4, #16
 8001a16:	9e02      	ldr	r6, [sp, #8]
 8001a18:	469a      	mov	sl, r3
 8001a1a:	9b05      	ldr	r3, [sp, #20]
 8001a1c:	445e      	add	r6, fp
 8001a1e:	4698      	mov	r8, r3
 8001a20:	42ae      	cmp	r6, r5
 8001a22:	41ad      	sbcs	r5, r5
 8001a24:	1876      	adds	r6, r6, r1
 8001a26:	428e      	cmp	r6, r1
 8001a28:	4189      	sbcs	r1, r1
 8001a2a:	0400      	lsls	r0, r0, #16
 8001a2c:	0c00      	lsrs	r0, r0, #16
 8001a2e:	4450      	add	r0, sl
 8001a30:	4440      	add	r0, r8
 8001a32:	426d      	negs	r5, r5
 8001a34:	1947      	adds	r7, r0, r5
 8001a36:	46b8      	mov	r8, r7
 8001a38:	4693      	mov	fp, r2
 8001a3a:	4249      	negs	r1, r1
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	44c3      	add	fp, r8
 8001a40:	44d9      	add	r9, fp
 8001a42:	4298      	cmp	r0, r3
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	45a8      	cmp	r8, r5
 8001a48:	41ad      	sbcs	r5, r5
 8001a4a:	4593      	cmp	fp, r2
 8001a4c:	4192      	sbcs	r2, r2
 8001a4e:	4589      	cmp	r9, r1
 8001a50:	4189      	sbcs	r1, r1
 8001a52:	426d      	negs	r5, r5
 8001a54:	4240      	negs	r0, r0
 8001a56:	4328      	orrs	r0, r5
 8001a58:	0c24      	lsrs	r4, r4, #16
 8001a5a:	4252      	negs	r2, r2
 8001a5c:	4249      	negs	r1, r1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	1900      	adds	r0, r0, r4
 8001a64:	1880      	adds	r0, r0, r2
 8001a66:	18c7      	adds	r7, r0, r3
 8001a68:	464b      	mov	r3, r9
 8001a6a:	0ddc      	lsrs	r4, r3, #23
 8001a6c:	9b04      	ldr	r3, [sp, #16]
 8001a6e:	0275      	lsls	r5, r6, #9
 8001a70:	431d      	orrs	r5, r3
 8001a72:	1e6a      	subs	r2, r5, #1
 8001a74:	4195      	sbcs	r5, r2
 8001a76:	464b      	mov	r3, r9
 8001a78:	0df6      	lsrs	r6, r6, #23
 8001a7a:	027f      	lsls	r7, r7, #9
 8001a7c:	4335      	orrs	r5, r6
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	433c      	orrs	r4, r7
 8001a82:	4315      	orrs	r5, r2
 8001a84:	01fb      	lsls	r3, r7, #7
 8001a86:	d400      	bmi.n	8001a8a <__aeabi_dmul+0x24a>
 8001a88:	e11c      	b.n	8001cc4 <__aeabi_dmul+0x484>
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	086a      	lsrs	r2, r5, #1
 8001a8e:	400d      	ands	r5, r1
 8001a90:	4315      	orrs	r5, r2
 8001a92:	07e2      	lsls	r2, r4, #31
 8001a94:	4315      	orrs	r5, r2
 8001a96:	0864      	lsrs	r4, r4, #1
 8001a98:	494f      	ldr	r1, [pc, #316]	; (8001bd8 <__aeabi_dmul+0x398>)
 8001a9a:	4461      	add	r1, ip
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_dmul+0x262>
 8001aa0:	e0b0      	b.n	8001c04 <__aeabi_dmul+0x3c4>
 8001aa2:	076b      	lsls	r3, r5, #29
 8001aa4:	d009      	beq.n	8001aba <__aeabi_dmul+0x27a>
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	402a      	ands	r2, r5
 8001aaa:	2a04      	cmp	r2, #4
 8001aac:	d005      	beq.n	8001aba <__aeabi_dmul+0x27a>
 8001aae:	1d2a      	adds	r2, r5, #4
 8001ab0:	42aa      	cmp	r2, r5
 8001ab2:	41ad      	sbcs	r5, r5
 8001ab4:	426d      	negs	r5, r5
 8001ab6:	1964      	adds	r4, r4, r5
 8001ab8:	0015      	movs	r5, r2
 8001aba:	01e3      	lsls	r3, r4, #7
 8001abc:	d504      	bpl.n	8001ac8 <__aeabi_dmul+0x288>
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <__aeabi_dmul+0x39c>)
 8001ac2:	00c9      	lsls	r1, r1, #3
 8001ac4:	4014      	ands	r4, r2
 8001ac6:	4461      	add	r1, ip
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <__aeabi_dmul+0x3a0>)
 8001aca:	4291      	cmp	r1, r2
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dmul+0x290>
 8001ace:	e726      	b.n	800191e <__aeabi_dmul+0xde>
 8001ad0:	0762      	lsls	r2, r4, #29
 8001ad2:	08ed      	lsrs	r5, r5, #3
 8001ad4:	0264      	lsls	r4, r4, #9
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	4315      	orrs	r5, r2
 8001ada:	0b24      	lsrs	r4, r4, #12
 8001adc:	0d4a      	lsrs	r2, r1, #21
 8001ade:	e710      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	4332      	orrs	r2, r6
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dmul+0x2a8>
 8001ae6:	e07f      	b.n	8001be8 <__aeabi_dmul+0x3a8>
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dmul+0x2ae>
 8001aec:	e0dc      	b.n	8001ca8 <__aeabi_dmul+0x468>
 8001aee:	0030      	movs	r0, r6
 8001af0:	f000 fd96 	bl	8002620 <__clzsi2>
 8001af4:	0002      	movs	r2, r0
 8001af6:	3a0b      	subs	r2, #11
 8001af8:	231d      	movs	r3, #29
 8001afa:	0001      	movs	r1, r0
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	4652      	mov	r2, sl
 8001b00:	3908      	subs	r1, #8
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	408e      	lsls	r6, r1
 8001b06:	4316      	orrs	r6, r2
 8001b08:	4652      	mov	r2, sl
 8001b0a:	408a      	lsls	r2, r1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	4935      	ldr	r1, [pc, #212]	; (8001be4 <__aeabi_dmul+0x3a4>)
 8001b10:	1a18      	subs	r0, r3, r0
 8001b12:	0003      	movs	r3, r0
 8001b14:	468c      	mov	ip, r1
 8001b16:	4463      	add	r3, ip
 8001b18:	2000      	movs	r0, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	e6d3      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001b1e:	0025      	movs	r5, r4
 8001b20:	4305      	orrs	r5, r0
 8001b22:	d04a      	beq.n	8001bba <__aeabi_dmul+0x37a>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dmul+0x2ea>
 8001b28:	e0b0      	b.n	8001c8c <__aeabi_dmul+0x44c>
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f000 fd78 	bl	8002620 <__clzsi2>
 8001b30:	0001      	movs	r1, r0
 8001b32:	0002      	movs	r2, r0
 8001b34:	390b      	subs	r1, #11
 8001b36:	231d      	movs	r3, #29
 8001b38:	0010      	movs	r0, r2
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	0031      	movs	r1, r6
 8001b3e:	0035      	movs	r5, r6
 8001b40:	3808      	subs	r0, #8
 8001b42:	4084      	lsls	r4, r0
 8001b44:	40d9      	lsrs	r1, r3
 8001b46:	4085      	lsls	r5, r0
 8001b48:	430c      	orrs	r4, r1
 8001b4a:	4826      	ldr	r0, [pc, #152]	; (8001be4 <__aeabi_dmul+0x3a4>)
 8001b4c:	1a83      	subs	r3, r0, r2
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	4699      	mov	r9, r3
 8001b54:	469b      	mov	fp, r3
 8001b56:	e697      	b.n	8001888 <__aeabi_dmul+0x48>
 8001b58:	0005      	movs	r5, r0
 8001b5a:	4325      	orrs	r5, r4
 8001b5c:	d126      	bne.n	8001bac <__aeabi_dmul+0x36c>
 8001b5e:	2208      	movs	r2, #8
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2302      	movs	r3, #2
 8001b64:	2400      	movs	r4, #0
 8001b66:	4691      	mov	r9, r2
 8001b68:	469b      	mov	fp, r3
 8001b6a:	e68d      	b.n	8001888 <__aeabi_dmul+0x48>
 8001b6c:	4652      	mov	r2, sl
 8001b6e:	9b00      	ldr	r3, [sp, #0]
 8001b70:	4332      	orrs	r2, r6
 8001b72:	d110      	bne.n	8001b96 <__aeabi_dmul+0x356>
 8001b74:	4915      	ldr	r1, [pc, #84]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001b76:	2600      	movs	r6, #0
 8001b78:	468c      	mov	ip, r1
 8001b7a:	4463      	add	r3, ip
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2302      	movs	r3, #2
 8001b82:	4319      	orrs	r1, r3
 8001b84:	4689      	mov	r9, r1
 8001b86:	2002      	movs	r0, #2
 8001b88:	e69d      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001b8a:	465b      	mov	r3, fp
 8001b8c:	9701      	str	r7, [sp, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dmul+0x354>
 8001b92:	e6ad      	b.n	80018f0 <__aeabi_dmul+0xb0>
 8001b94:	e6c3      	b.n	800191e <__aeabi_dmul+0xde>
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001b98:	2003      	movs	r0, #3
 8001b9a:	4694      	mov	ip, r2
 8001b9c:	4463      	add	r3, ip
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	4652      	mov	r2, sl
 8001baa:	e68c      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001bac:	220c      	movs	r2, #12
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	0005      	movs	r5, r0
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	469b      	mov	fp, r3
 8001bb8:	e666      	b.n	8001888 <__aeabi_dmul+0x48>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	e65e      	b.n	8001888 <__aeabi_dmul+0x48>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	000007ff 	.word	0x000007ff
 8001bd0:	fffffc01 	.word	0xfffffc01
 8001bd4:	0800decc 	.word	0x0800decc
 8001bd8:	000003ff 	.word	0x000003ff
 8001bdc:	feffffff 	.word	0xfeffffff
 8001be0:	000007fe 	.word	0x000007fe
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	4649      	mov	r1, r9
 8001bea:	2301      	movs	r3, #1
 8001bec:	4319      	orrs	r1, r3
 8001bee:	4689      	mov	r9, r1
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	e667      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2480      	movs	r4, #128	; 0x80
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	0324      	lsls	r4, r4, #12
 8001c02:	e67e      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c04:	2001      	movs	r0, #1
 8001c06:	1a40      	subs	r0, r0, r1
 8001c08:	2838      	cmp	r0, #56	; 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dmul+0x3ce>
 8001c0c:	e676      	b.n	80018fc <__aeabi_dmul+0xbc>
 8001c0e:	281f      	cmp	r0, #31
 8001c10:	dd5b      	ble.n	8001cca <__aeabi_dmul+0x48a>
 8001c12:	221f      	movs	r2, #31
 8001c14:	0023      	movs	r3, r4
 8001c16:	4252      	negs	r2, r2
 8001c18:	1a51      	subs	r1, r2, r1
 8001c1a:	40cb      	lsrs	r3, r1
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	2820      	cmp	r0, #32
 8001c20:	d003      	beq.n	8001c2a <__aeabi_dmul+0x3ea>
 8001c22:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <__aeabi_dmul+0x4d0>)
 8001c24:	4462      	add	r2, ip
 8001c26:	4094      	lsls	r4, r2
 8001c28:	4325      	orrs	r5, r4
 8001c2a:	1e6a      	subs	r2, r5, #1
 8001c2c:	4195      	sbcs	r5, r2
 8001c2e:	002a      	movs	r2, r5
 8001c30:	430a      	orrs	r2, r1
 8001c32:	2107      	movs	r1, #7
 8001c34:	000d      	movs	r5, r1
 8001c36:	2400      	movs	r4, #0
 8001c38:	4015      	ands	r5, r2
 8001c3a:	4211      	tst	r1, r2
 8001c3c:	d05b      	beq.n	8001cf6 <__aeabi_dmul+0x4b6>
 8001c3e:	210f      	movs	r1, #15
 8001c40:	2400      	movs	r4, #0
 8001c42:	4011      	ands	r1, r2
 8001c44:	2904      	cmp	r1, #4
 8001c46:	d053      	beq.n	8001cf0 <__aeabi_dmul+0x4b0>
 8001c48:	1d11      	adds	r1, r2, #4
 8001c4a:	4291      	cmp	r1, r2
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	4252      	negs	r2, r2
 8001c50:	18a4      	adds	r4, r4, r2
 8001c52:	000a      	movs	r2, r1
 8001c54:	0223      	lsls	r3, r4, #8
 8001c56:	d54b      	bpl.n	8001cf0 <__aeabi_dmul+0x4b0>
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	e650      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	031b      	lsls	r3, r3, #12
 8001c64:	421c      	tst	r4, r3
 8001c66:	d009      	beq.n	8001c7c <__aeabi_dmul+0x43c>
 8001c68:	421e      	tst	r6, r3
 8001c6a:	d107      	bne.n	8001c7c <__aeabi_dmul+0x43c>
 8001c6c:	4333      	orrs	r3, r6
 8001c6e:	031c      	lsls	r4, r3, #12
 8001c70:	4643      	mov	r3, r8
 8001c72:	0015      	movs	r5, r2
 8001c74:	0b24      	lsrs	r4, r4, #12
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	e642      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	0312      	lsls	r2, r2, #12
 8001c80:	4314      	orrs	r4, r2
 8001c82:	0324      	lsls	r4, r4, #12
 8001c84:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001c86:	0b24      	lsrs	r4, r4, #12
 8001c88:	9701      	str	r7, [sp, #4]
 8001c8a:	e63a      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c8c:	f000 fcc8 	bl	8002620 <__clzsi2>
 8001c90:	0001      	movs	r1, r0
 8001c92:	0002      	movs	r2, r0
 8001c94:	3115      	adds	r1, #21
 8001c96:	3220      	adds	r2, #32
 8001c98:	291c      	cmp	r1, #28
 8001c9a:	dc00      	bgt.n	8001c9e <__aeabi_dmul+0x45e>
 8001c9c:	e74b      	b.n	8001b36 <__aeabi_dmul+0x2f6>
 8001c9e:	0034      	movs	r4, r6
 8001ca0:	3808      	subs	r0, #8
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	4084      	lsls	r4, r0
 8001ca6:	e750      	b.n	8001b4a <__aeabi_dmul+0x30a>
 8001ca8:	f000 fcba 	bl	8002620 <__clzsi2>
 8001cac:	0003      	movs	r3, r0
 8001cae:	001a      	movs	r2, r3
 8001cb0:	3215      	adds	r2, #21
 8001cb2:	3020      	adds	r0, #32
 8001cb4:	2a1c      	cmp	r2, #28
 8001cb6:	dc00      	bgt.n	8001cba <__aeabi_dmul+0x47a>
 8001cb8:	e71e      	b.n	8001af8 <__aeabi_dmul+0x2b8>
 8001cba:	4656      	mov	r6, sl
 8001cbc:	3b08      	subs	r3, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	409e      	lsls	r6, r3
 8001cc2:	e723      	b.n	8001b0c <__aeabi_dmul+0x2cc>
 8001cc4:	9b00      	ldr	r3, [sp, #0]
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	e6e6      	b.n	8001a98 <__aeabi_dmul+0x258>
 8001cca:	4912      	ldr	r1, [pc, #72]	; (8001d14 <__aeabi_dmul+0x4d4>)
 8001ccc:	0022      	movs	r2, r4
 8001cce:	4461      	add	r1, ip
 8001cd0:	002e      	movs	r6, r5
 8001cd2:	408d      	lsls	r5, r1
 8001cd4:	408a      	lsls	r2, r1
 8001cd6:	40c6      	lsrs	r6, r0
 8001cd8:	1e69      	subs	r1, r5, #1
 8001cda:	418d      	sbcs	r5, r1
 8001cdc:	4332      	orrs	r2, r6
 8001cde:	432a      	orrs	r2, r5
 8001ce0:	40c4      	lsrs	r4, r0
 8001ce2:	0753      	lsls	r3, r2, #29
 8001ce4:	d0b6      	beq.n	8001c54 <__aeabi_dmul+0x414>
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	4011      	ands	r1, r2
 8001cea:	2904      	cmp	r1, #4
 8001cec:	d1ac      	bne.n	8001c48 <__aeabi_dmul+0x408>
 8001cee:	e7b1      	b.n	8001c54 <__aeabi_dmul+0x414>
 8001cf0:	0765      	lsls	r5, r4, #29
 8001cf2:	0264      	lsls	r4, r4, #9
 8001cf4:	0b24      	lsrs	r4, r4, #12
 8001cf6:	08d2      	lsrs	r2, r2, #3
 8001cf8:	4315      	orrs	r5, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	e601      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	4314      	orrs	r4, r2
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	4a01      	ldr	r2, [pc, #4]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001d08:	0b24      	lsrs	r4, r4, #12
 8001d0a:	e5fa      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	0000043e 	.word	0x0000043e
 8001d14:	0000041e 	.word	0x0000041e

08001d18 <__aeabi_dsub>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	4645      	mov	r5, r8
 8001d20:	46de      	mov	lr, fp
 8001d22:	b5e0      	push	{r5, r6, r7, lr}
 8001d24:	001e      	movs	r6, r3
 8001d26:	0017      	movs	r7, r2
 8001d28:	004a      	lsls	r2, r1, #1
 8001d2a:	030b      	lsls	r3, r1, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	4690      	mov	r8, r2
 8001d32:	0f42      	lsrs	r2, r0, #29
 8001d34:	431a      	orrs	r2, r3
 8001d36:	0fcd      	lsrs	r5, r1, #31
 8001d38:	4ccd      	ldr	r4, [pc, #820]	; (8002070 <__aeabi_dsub+0x358>)
 8001d3a:	0331      	lsls	r1, r6, #12
 8001d3c:	00c3      	lsls	r3, r0, #3
 8001d3e:	4694      	mov	ip, r2
 8001d40:	0070      	lsls	r0, r6, #1
 8001d42:	0f7a      	lsrs	r2, r7, #29
 8001d44:	0a49      	lsrs	r1, r1, #9
 8001d46:	00ff      	lsls	r7, r7, #3
 8001d48:	469a      	mov	sl, r3
 8001d4a:	46b9      	mov	r9, r7
 8001d4c:	0d40      	lsrs	r0, r0, #21
 8001d4e:	0ff6      	lsrs	r6, r6, #31
 8001d50:	4311      	orrs	r1, r2
 8001d52:	42a0      	cmp	r0, r4
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x40>
 8001d56:	e0b1      	b.n	8001ebc <__aeabi_dsub+0x1a4>
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4056      	eors	r6, r2
 8001d5c:	46b3      	mov	fp, r6
 8001d5e:	42b5      	cmp	r5, r6
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x4c>
 8001d62:	e088      	b.n	8001e76 <__aeabi_dsub+0x15e>
 8001d64:	4642      	mov	r2, r8
 8001d66:	1a12      	subs	r2, r2, r0
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	dc00      	bgt.n	8001d6e <__aeabi_dsub+0x56>
 8001d6c:	e0ae      	b.n	8001ecc <__aeabi_dsub+0x1b4>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x5c>
 8001d72:	e0c1      	b.n	8001ef8 <__aeabi_dsub+0x1e0>
 8001d74:	48be      	ldr	r0, [pc, #760]	; (8002070 <__aeabi_dsub+0x358>)
 8001d76:	4580      	cmp	r8, r0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x64>
 8001d7a:	e151      	b.n	8002020 <__aeabi_dsub+0x308>
 8001d7c:	2080      	movs	r0, #128	; 0x80
 8001d7e:	0400      	lsls	r0, r0, #16
 8001d80:	4301      	orrs	r1, r0
 8001d82:	2a38      	cmp	r2, #56	; 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x70>
 8001d86:	e17b      	b.n	8002080 <__aeabi_dsub+0x368>
 8001d88:	2a1f      	cmp	r2, #31
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x76>
 8001d8c:	e1ee      	b.n	800216c <__aeabi_dsub+0x454>
 8001d8e:	2020      	movs	r0, #32
 8001d90:	003e      	movs	r6, r7
 8001d92:	1a80      	subs	r0, r0, r2
 8001d94:	000c      	movs	r4, r1
 8001d96:	40d6      	lsrs	r6, r2
 8001d98:	40d1      	lsrs	r1, r2
 8001d9a:	4087      	lsls	r7, r0
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	4084      	lsls	r4, r0
 8001da0:	1a52      	subs	r2, r2, r1
 8001da2:	1e78      	subs	r0, r7, #1
 8001da4:	4187      	sbcs	r7, r0
 8001da6:	4694      	mov	ip, r2
 8001da8:	4334      	orrs	r4, r6
 8001daa:	4327      	orrs	r7, r4
 8001dac:	1bdc      	subs	r4, r3, r7
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	419b      	sbcs	r3, r3
 8001db2:	4662      	mov	r2, ip
 8001db4:	425b      	negs	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4699      	mov	r9, r3
 8001dba:	464b      	mov	r3, r9
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	d400      	bmi.n	8001dc2 <__aeabi_dsub+0xaa>
 8001dc0:	e118      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	0258      	lsls	r0, r3, #9
 8001dc6:	0a43      	lsrs	r3, r0, #9
 8001dc8:	4699      	mov	r9, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0xba>
 8001dd0:	e137      	b.n	8002042 <__aeabi_dsub+0x32a>
 8001dd2:	4648      	mov	r0, r9
 8001dd4:	f000 fc24 	bl	8002620 <__clzsi2>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	3908      	subs	r1, #8
 8001ddc:	2320      	movs	r3, #32
 8001dde:	0022      	movs	r2, r4
 8001de0:	4648      	mov	r0, r9
 8001de2:	1a5b      	subs	r3, r3, r1
 8001de4:	40da      	lsrs	r2, r3
 8001de6:	4088      	lsls	r0, r1
 8001de8:	408c      	lsls	r4, r1
 8001dea:	4643      	mov	r3, r8
 8001dec:	4310      	orrs	r0, r2
 8001dee:	4588      	cmp	r8, r1
 8001df0:	dd00      	ble.n	8001df4 <__aeabi_dsub+0xdc>
 8001df2:	e136      	b.n	8002062 <__aeabi_dsub+0x34a>
 8001df4:	1ac9      	subs	r1, r1, r3
 8001df6:	1c4b      	adds	r3, r1, #1
 8001df8:	2b1f      	cmp	r3, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0xe6>
 8001dfc:	e0ea      	b.n	8001fd4 <__aeabi_dsub+0x2bc>
 8001dfe:	2220      	movs	r2, #32
 8001e00:	0026      	movs	r6, r4
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	0001      	movs	r1, r0
 8001e06:	4094      	lsls	r4, r2
 8001e08:	40de      	lsrs	r6, r3
 8001e0a:	40d8      	lsrs	r0, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	1e62      	subs	r2, r4, #1
 8001e12:	4194      	sbcs	r4, r2
 8001e14:	4681      	mov	r9, r0
 8001e16:	4698      	mov	r8, r3
 8001e18:	4331      	orrs	r1, r6
 8001e1a:	430c      	orrs	r4, r1
 8001e1c:	0763      	lsls	r3, r4, #29
 8001e1e:	d009      	beq.n	8001e34 <__aeabi_dsub+0x11c>
 8001e20:	230f      	movs	r3, #15
 8001e22:	4023      	ands	r3, r4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d005      	beq.n	8001e34 <__aeabi_dsub+0x11c>
 8001e28:	1d23      	adds	r3, r4, #4
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	41a4      	sbcs	r4, r4
 8001e2e:	4264      	negs	r4, r4
 8001e30:	44a1      	add	r9, r4
 8001e32:	001c      	movs	r4, r3
 8001e34:	464b      	mov	r3, r9
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x124>
 8001e3a:	e0de      	b.n	8001ffa <__aeabi_dsub+0x2e2>
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <__aeabi_dsub+0x358>)
 8001e40:	3101      	adds	r1, #1
 8001e42:	4299      	cmp	r1, r3
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x130>
 8001e46:	e0e7      	b.n	8002018 <__aeabi_dsub+0x300>
 8001e48:	464b      	mov	r3, r9
 8001e4a:	488a      	ldr	r0, [pc, #552]	; (8002074 <__aeabi_dsub+0x35c>)
 8001e4c:	08e4      	lsrs	r4, r4, #3
 8001e4e:	4003      	ands	r3, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0549      	lsls	r1, r1, #21
 8001e54:	075b      	lsls	r3, r3, #29
 8001e56:	0240      	lsls	r0, r0, #9
 8001e58:	4323      	orrs	r3, r4
 8001e5a:	0d4a      	lsrs	r2, r1, #21
 8001e5c:	0b04      	lsrs	r4, r0, #12
 8001e5e:	0512      	lsls	r2, r2, #20
 8001e60:	07ed      	lsls	r5, r5, #31
 8001e62:	4322      	orrs	r2, r4
 8001e64:	432a      	orrs	r2, r5
 8001e66:	0018      	movs	r0, r3
 8001e68:	0011      	movs	r1, r2
 8001e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e6c:	46bb      	mov	fp, r7
 8001e6e:	46b2      	mov	sl, r6
 8001e70:	46a9      	mov	r9, r5
 8001e72:	46a0      	mov	r8, r4
 8001e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e76:	4642      	mov	r2, r8
 8001e78:	1a12      	subs	r2, r2, r0
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	dd52      	ble.n	8001f24 <__aeabi_dsub+0x20c>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x16c>
 8001e82:	e09c      	b.n	8001fbe <__aeabi_dsub+0x2a6>
 8001e84:	45a0      	cmp	r8, r4
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x172>
 8001e88:	e0ca      	b.n	8002020 <__aeabi_dsub+0x308>
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	0400      	lsls	r0, r0, #16
 8001e8e:	4301      	orrs	r1, r0
 8001e90:	2a38      	cmp	r2, #56	; 0x38
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dsub+0x17e>
 8001e94:	e149      	b.n	800212a <__aeabi_dsub+0x412>
 8001e96:	2a1f      	cmp	r2, #31
 8001e98:	dc00      	bgt.n	8001e9c <__aeabi_dsub+0x184>
 8001e9a:	e197      	b.n	80021cc <__aeabi_dsub+0x4b4>
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	000e      	movs	r6, r1
 8001ea0:	3820      	subs	r0, #32
 8001ea2:	40c6      	lsrs	r6, r0
 8001ea4:	2a20      	cmp	r2, #32
 8001ea6:	d004      	beq.n	8001eb2 <__aeabi_dsub+0x19a>
 8001ea8:	2040      	movs	r0, #64	; 0x40
 8001eaa:	1a82      	subs	r2, r0, r2
 8001eac:	4091      	lsls	r1, r2
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	464c      	mov	r4, r9
 8001eb4:	1e62      	subs	r2, r4, #1
 8001eb6:	4194      	sbcs	r4, r2
 8001eb8:	4334      	orrs	r4, r6
 8001eba:	e13a      	b.n	8002132 <__aeabi_dsub+0x41a>
 8001ebc:	000a      	movs	r2, r1
 8001ebe:	433a      	orrs	r2, r7
 8001ec0:	d028      	beq.n	8001f14 <__aeabi_dsub+0x1fc>
 8001ec2:	46b3      	mov	fp, r6
 8001ec4:	42b5      	cmp	r5, r6
 8001ec6:	d02b      	beq.n	8001f20 <__aeabi_dsub+0x208>
 8001ec8:	4a6b      	ldr	r2, [pc, #428]	; (8002078 <__aeabi_dsub+0x360>)
 8001eca:	4442      	add	r2, r8
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d05d      	beq.n	8001f8c <__aeabi_dsub+0x274>
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	4644      	mov	r4, r8
 8001ed4:	1a82      	subs	r2, r0, r2
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dsub+0x1c4>
 8001eda:	e0f5      	b.n	80020c8 <__aeabi_dsub+0x3b0>
 8001edc:	4665      	mov	r5, ip
 8001ede:	431d      	orrs	r5, r3
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x1cc>
 8001ee2:	e19c      	b.n	800221e <__aeabi_dsub+0x506>
 8001ee4:	1e55      	subs	r5, r2, #1
 8001ee6:	2a01      	cmp	r2, #1
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x1d4>
 8001eea:	e1fb      	b.n	80022e4 <__aeabi_dsub+0x5cc>
 8001eec:	4c60      	ldr	r4, [pc, #384]	; (8002070 <__aeabi_dsub+0x358>)
 8001eee:	42a2      	cmp	r2, r4
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x1dc>
 8001ef2:	e1bd      	b.n	8002270 <__aeabi_dsub+0x558>
 8001ef4:	002a      	movs	r2, r5
 8001ef6:	e0f0      	b.n	80020da <__aeabi_dsub+0x3c2>
 8001ef8:	0008      	movs	r0, r1
 8001efa:	4338      	orrs	r0, r7
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x1e8>
 8001efe:	e0c3      	b.n	8002088 <__aeabi_dsub+0x370>
 8001f00:	1e50      	subs	r0, r2, #1
 8001f02:	2a01      	cmp	r2, #1
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x1f0>
 8001f06:	e1a8      	b.n	800225a <__aeabi_dsub+0x542>
 8001f08:	4c59      	ldr	r4, [pc, #356]	; (8002070 <__aeabi_dsub+0x358>)
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x1f8>
 8001f0e:	e087      	b.n	8002020 <__aeabi_dsub+0x308>
 8001f10:	0002      	movs	r2, r0
 8001f12:	e736      	b.n	8001d82 <__aeabi_dsub+0x6a>
 8001f14:	2201      	movs	r2, #1
 8001f16:	4056      	eors	r6, r2
 8001f18:	46b3      	mov	fp, r6
 8001f1a:	42b5      	cmp	r5, r6
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x208>
 8001f1e:	e721      	b.n	8001d64 <__aeabi_dsub+0x4c>
 8001f20:	4a55      	ldr	r2, [pc, #340]	; (8002078 <__aeabi_dsub+0x360>)
 8001f22:	4442      	add	r2, r8
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x212>
 8001f28:	e0b5      	b.n	8002096 <__aeabi_dsub+0x37e>
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	4644      	mov	r4, r8
 8001f2e:	1a82      	subs	r2, r0, r2
 8001f30:	2c00      	cmp	r4, #0
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x21e>
 8001f34:	e138      	b.n	80021a8 <__aeabi_dsub+0x490>
 8001f36:	4e4e      	ldr	r6, [pc, #312]	; (8002070 <__aeabi_dsub+0x358>)
 8001f38:	42b0      	cmp	r0, r6
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x226>
 8001f3c:	e1de      	b.n	80022fc <__aeabi_dsub+0x5e4>
 8001f3e:	2680      	movs	r6, #128	; 0x80
 8001f40:	4664      	mov	r4, ip
 8001f42:	0436      	lsls	r6, r6, #16
 8001f44:	4334      	orrs	r4, r6
 8001f46:	46a4      	mov	ip, r4
 8001f48:	2a38      	cmp	r2, #56	; 0x38
 8001f4a:	dd00      	ble.n	8001f4e <__aeabi_dsub+0x236>
 8001f4c:	e196      	b.n	800227c <__aeabi_dsub+0x564>
 8001f4e:	2a1f      	cmp	r2, #31
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_dsub+0x23c>
 8001f52:	e224      	b.n	800239e <__aeabi_dsub+0x686>
 8001f54:	2620      	movs	r6, #32
 8001f56:	1ab4      	subs	r4, r6, r2
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	4664      	mov	r4, ip
 8001f5c:	4656      	mov	r6, sl
 8001f5e:	40b4      	lsls	r4, r6
 8001f60:	46a1      	mov	r9, r4
 8001f62:	001c      	movs	r4, r3
 8001f64:	464e      	mov	r6, r9
 8001f66:	40d4      	lsrs	r4, r2
 8001f68:	4326      	orrs	r6, r4
 8001f6a:	0034      	movs	r4, r6
 8001f6c:	4656      	mov	r6, sl
 8001f6e:	40b3      	lsls	r3, r6
 8001f70:	1e5e      	subs	r6, r3, #1
 8001f72:	41b3      	sbcs	r3, r6
 8001f74:	431c      	orrs	r4, r3
 8001f76:	4663      	mov	r3, ip
 8001f78:	40d3      	lsrs	r3, r2
 8001f7a:	18c9      	adds	r1, r1, r3
 8001f7c:	19e4      	adds	r4, r4, r7
 8001f7e:	42bc      	cmp	r4, r7
 8001f80:	41bf      	sbcs	r7, r7
 8001f82:	427f      	negs	r7, r7
 8001f84:	46b9      	mov	r9, r7
 8001f86:	4680      	mov	r8, r0
 8001f88:	4489      	add	r9, r1
 8001f8a:	e0d8      	b.n	800213e <__aeabi_dsub+0x426>
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	4c3b      	ldr	r4, [pc, #236]	; (800207c <__aeabi_dsub+0x364>)
 8001f90:	3001      	adds	r0, #1
 8001f92:	4220      	tst	r0, r4
 8001f94:	d000      	beq.n	8001f98 <__aeabi_dsub+0x280>
 8001f96:	e0b4      	b.n	8002102 <__aeabi_dsub+0x3ea>
 8001f98:	4640      	mov	r0, r8
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x288>
 8001f9e:	e144      	b.n	800222a <__aeabi_dsub+0x512>
 8001fa0:	4660      	mov	r0, ip
 8001fa2:	4318      	orrs	r0, r3
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x290>
 8001fa6:	e190      	b.n	80022ca <__aeabi_dsub+0x5b2>
 8001fa8:	0008      	movs	r0, r1
 8001faa:	4338      	orrs	r0, r7
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x298>
 8001fae:	e1aa      	b.n	8002306 <__aeabi_dsub+0x5ee>
 8001fb0:	4661      	mov	r1, ip
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	4661      	mov	r1, ip
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e027      	b.n	800200e <__aeabi_dsub+0x2f6>
 8001fbe:	0008      	movs	r0, r1
 8001fc0:	4338      	orrs	r0, r7
 8001fc2:	d061      	beq.n	8002088 <__aeabi_dsub+0x370>
 8001fc4:	1e50      	subs	r0, r2, #1
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x2b4>
 8001fca:	e139      	b.n	8002240 <__aeabi_dsub+0x528>
 8001fcc:	42a2      	cmp	r2, r4
 8001fce:	d027      	beq.n	8002020 <__aeabi_dsub+0x308>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	e75d      	b.n	8001e90 <__aeabi_dsub+0x178>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	391f      	subs	r1, #31
 8001fd8:	40ca      	lsrs	r2, r1
 8001fda:	0011      	movs	r1, r2
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d003      	beq.n	8001fe8 <__aeabi_dsub+0x2d0>
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4098      	lsls	r0, r3
 8001fe6:	4304      	orrs	r4, r0
 8001fe8:	1e63      	subs	r3, r4, #1
 8001fea:	419c      	sbcs	r4, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	4699      	mov	r9, r3
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	430c      	orrs	r4, r1
 8001ff4:	0763      	lsls	r3, r4, #29
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x2e2>
 8001ff8:	e712      	b.n	8001e20 <__aeabi_dsub+0x108>
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	08e4      	lsrs	r4, r4, #3
 8002000:	075b      	lsls	r3, r3, #29
 8002002:	4323      	orrs	r3, r4
 8002004:	08d4      	lsrs	r4, r2, #3
 8002006:	4642      	mov	r2, r8
 8002008:	4919      	ldr	r1, [pc, #100]	; (8002070 <__aeabi_dsub+0x358>)
 800200a:	428a      	cmp	r2, r1
 800200c:	d00e      	beq.n	800202c <__aeabi_dsub+0x314>
 800200e:	0324      	lsls	r4, r4, #12
 8002010:	0552      	lsls	r2, r2, #21
 8002012:	0b24      	lsrs	r4, r4, #12
 8002014:	0d52      	lsrs	r2, r2, #21
 8002016:	e722      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002018:	000a      	movs	r2, r1
 800201a:	2400      	movs	r4, #0
 800201c:	2300      	movs	r3, #0
 800201e:	e71e      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	4662      	mov	r2, ip
 8002024:	0752      	lsls	r2, r2, #29
 8002026:	4313      	orrs	r3, r2
 8002028:	4662      	mov	r2, ip
 800202a:	08d4      	lsrs	r4, r2, #3
 800202c:	001a      	movs	r2, r3
 800202e:	4322      	orrs	r2, r4
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x31c>
 8002032:	e1fc      	b.n	800242e <__aeabi_dsub+0x716>
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	0312      	lsls	r2, r2, #12
 8002038:	4314      	orrs	r4, r2
 800203a:	0324      	lsls	r4, r4, #12
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <__aeabi_dsub+0x358>)
 800203e:	0b24      	lsrs	r4, r4, #12
 8002040:	e70d      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002042:	0020      	movs	r0, r4
 8002044:	f000 faec 	bl	8002620 <__clzsi2>
 8002048:	0001      	movs	r1, r0
 800204a:	3118      	adds	r1, #24
 800204c:	291f      	cmp	r1, #31
 800204e:	dc00      	bgt.n	8002052 <__aeabi_dsub+0x33a>
 8002050:	e6c4      	b.n	8001ddc <__aeabi_dsub+0xc4>
 8002052:	3808      	subs	r0, #8
 8002054:	4084      	lsls	r4, r0
 8002056:	4643      	mov	r3, r8
 8002058:	0020      	movs	r0, r4
 800205a:	2400      	movs	r4, #0
 800205c:	4588      	cmp	r8, r1
 800205e:	dc00      	bgt.n	8002062 <__aeabi_dsub+0x34a>
 8002060:	e6c8      	b.n	8001df4 <__aeabi_dsub+0xdc>
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__aeabi_dsub+0x35c>)
 8002064:	1a5b      	subs	r3, r3, r1
 8002066:	4010      	ands	r0, r2
 8002068:	4698      	mov	r8, r3
 800206a:	4681      	mov	r9, r0
 800206c:	e6d6      	b.n	8001e1c <__aeabi_dsub+0x104>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000007ff 	.word	0x000007ff
 8002074:	ff7fffff 	.word	0xff7fffff
 8002078:	fffff801 	.word	0xfffff801
 800207c:	000007fe 	.word	0x000007fe
 8002080:	430f      	orrs	r7, r1
 8002082:	1e7a      	subs	r2, r7, #1
 8002084:	4197      	sbcs	r7, r2
 8002086:	e691      	b.n	8001dac <__aeabi_dsub+0x94>
 8002088:	4661      	mov	r1, ip
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	0749      	lsls	r1, r1, #29
 800208e:	430b      	orrs	r3, r1
 8002090:	4661      	mov	r1, ip
 8002092:	08cc      	lsrs	r4, r1, #3
 8002094:	e7b8      	b.n	8002008 <__aeabi_dsub+0x2f0>
 8002096:	4640      	mov	r0, r8
 8002098:	4cd3      	ldr	r4, [pc, #844]	; (80023e8 <__aeabi_dsub+0x6d0>)
 800209a:	3001      	adds	r0, #1
 800209c:	4220      	tst	r0, r4
 800209e:	d000      	beq.n	80020a2 <__aeabi_dsub+0x38a>
 80020a0:	e0a2      	b.n	80021e8 <__aeabi_dsub+0x4d0>
 80020a2:	4640      	mov	r0, r8
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d000      	beq.n	80020aa <__aeabi_dsub+0x392>
 80020a8:	e101      	b.n	80022ae <__aeabi_dsub+0x596>
 80020aa:	4660      	mov	r0, ip
 80020ac:	4318      	orrs	r0, r3
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x39a>
 80020b0:	e15e      	b.n	8002370 <__aeabi_dsub+0x658>
 80020b2:	0008      	movs	r0, r1
 80020b4:	4338      	orrs	r0, r7
 80020b6:	d000      	beq.n	80020ba <__aeabi_dsub+0x3a2>
 80020b8:	e15f      	b.n	800237a <__aeabi_dsub+0x662>
 80020ba:	4661      	mov	r1, ip
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	0749      	lsls	r1, r1, #29
 80020c0:	430b      	orrs	r3, r1
 80020c2:	4661      	mov	r1, ip
 80020c4:	08cc      	lsrs	r4, r1, #3
 80020c6:	e7a2      	b.n	800200e <__aeabi_dsub+0x2f6>
 80020c8:	4dc8      	ldr	r5, [pc, #800]	; (80023ec <__aeabi_dsub+0x6d4>)
 80020ca:	42a8      	cmp	r0, r5
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x3b8>
 80020ce:	e0cf      	b.n	8002270 <__aeabi_dsub+0x558>
 80020d0:	2580      	movs	r5, #128	; 0x80
 80020d2:	4664      	mov	r4, ip
 80020d4:	042d      	lsls	r5, r5, #16
 80020d6:	432c      	orrs	r4, r5
 80020d8:	46a4      	mov	ip, r4
 80020da:	2a38      	cmp	r2, #56	; 0x38
 80020dc:	dc56      	bgt.n	800218c <__aeabi_dsub+0x474>
 80020de:	2a1f      	cmp	r2, #31
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x3cc>
 80020e2:	e0d1      	b.n	8002288 <__aeabi_dsub+0x570>
 80020e4:	2520      	movs	r5, #32
 80020e6:	001e      	movs	r6, r3
 80020e8:	1aad      	subs	r5, r5, r2
 80020ea:	4664      	mov	r4, ip
 80020ec:	40ab      	lsls	r3, r5
 80020ee:	40ac      	lsls	r4, r5
 80020f0:	40d6      	lsrs	r6, r2
 80020f2:	1e5d      	subs	r5, r3, #1
 80020f4:	41ab      	sbcs	r3, r5
 80020f6:	4334      	orrs	r4, r6
 80020f8:	4323      	orrs	r3, r4
 80020fa:	4664      	mov	r4, ip
 80020fc:	40d4      	lsrs	r4, r2
 80020fe:	1b09      	subs	r1, r1, r4
 8002100:	e049      	b.n	8002196 <__aeabi_dsub+0x47e>
 8002102:	4660      	mov	r0, ip
 8002104:	1bdc      	subs	r4, r3, r7
 8002106:	1a46      	subs	r6, r0, r1
 8002108:	42a3      	cmp	r3, r4
 800210a:	4180      	sbcs	r0, r0
 800210c:	4240      	negs	r0, r0
 800210e:	4681      	mov	r9, r0
 8002110:	0030      	movs	r0, r6
 8002112:	464e      	mov	r6, r9
 8002114:	1b80      	subs	r0, r0, r6
 8002116:	4681      	mov	r9, r0
 8002118:	0200      	lsls	r0, r0, #8
 800211a:	d476      	bmi.n	800220a <__aeabi_dsub+0x4f2>
 800211c:	464b      	mov	r3, r9
 800211e:	4323      	orrs	r3, r4
 8002120:	d000      	beq.n	8002124 <__aeabi_dsub+0x40c>
 8002122:	e652      	b.n	8001dca <__aeabi_dsub+0xb2>
 8002124:	2400      	movs	r4, #0
 8002126:	2500      	movs	r5, #0
 8002128:	e771      	b.n	800200e <__aeabi_dsub+0x2f6>
 800212a:	4339      	orrs	r1, r7
 800212c:	000c      	movs	r4, r1
 800212e:	1e62      	subs	r2, r4, #1
 8002130:	4194      	sbcs	r4, r2
 8002132:	18e4      	adds	r4, r4, r3
 8002134:	429c      	cmp	r4, r3
 8002136:	419b      	sbcs	r3, r3
 8002138:	425b      	negs	r3, r3
 800213a:	4463      	add	r3, ip
 800213c:	4699      	mov	r9, r3
 800213e:	464b      	mov	r3, r9
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	d400      	bmi.n	8002146 <__aeabi_dsub+0x42e>
 8002144:	e756      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8002146:	2301      	movs	r3, #1
 8002148:	469c      	mov	ip, r3
 800214a:	4ba8      	ldr	r3, [pc, #672]	; (80023ec <__aeabi_dsub+0x6d4>)
 800214c:	44e0      	add	r8, ip
 800214e:	4598      	cmp	r8, r3
 8002150:	d038      	beq.n	80021c4 <__aeabi_dsub+0x4ac>
 8002152:	464b      	mov	r3, r9
 8002154:	48a6      	ldr	r0, [pc, #664]	; (80023f0 <__aeabi_dsub+0x6d8>)
 8002156:	2201      	movs	r2, #1
 8002158:	4003      	ands	r3, r0
 800215a:	0018      	movs	r0, r3
 800215c:	0863      	lsrs	r3, r4, #1
 800215e:	4014      	ands	r4, r2
 8002160:	431c      	orrs	r4, r3
 8002162:	07c3      	lsls	r3, r0, #31
 8002164:	431c      	orrs	r4, r3
 8002166:	0843      	lsrs	r3, r0, #1
 8002168:	4699      	mov	r9, r3
 800216a:	e657      	b.n	8001e1c <__aeabi_dsub+0x104>
 800216c:	0010      	movs	r0, r2
 800216e:	000e      	movs	r6, r1
 8002170:	3820      	subs	r0, #32
 8002172:	40c6      	lsrs	r6, r0
 8002174:	2a20      	cmp	r2, #32
 8002176:	d004      	beq.n	8002182 <__aeabi_dsub+0x46a>
 8002178:	2040      	movs	r0, #64	; 0x40
 800217a:	1a82      	subs	r2, r0, r2
 800217c:	4091      	lsls	r1, r2
 800217e:	430f      	orrs	r7, r1
 8002180:	46b9      	mov	r9, r7
 8002182:	464f      	mov	r7, r9
 8002184:	1e7a      	subs	r2, r7, #1
 8002186:	4197      	sbcs	r7, r2
 8002188:	4337      	orrs	r7, r6
 800218a:	e60f      	b.n	8001dac <__aeabi_dsub+0x94>
 800218c:	4662      	mov	r2, ip
 800218e:	431a      	orrs	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	4193      	sbcs	r3, r2
 8002196:	1afc      	subs	r4, r7, r3
 8002198:	42a7      	cmp	r7, r4
 800219a:	41bf      	sbcs	r7, r7
 800219c:	427f      	negs	r7, r7
 800219e:	1bcb      	subs	r3, r1, r7
 80021a0:	4699      	mov	r9, r3
 80021a2:	465d      	mov	r5, fp
 80021a4:	4680      	mov	r8, r0
 80021a6:	e608      	b.n	8001dba <__aeabi_dsub+0xa2>
 80021a8:	4666      	mov	r6, ip
 80021aa:	431e      	orrs	r6, r3
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x498>
 80021ae:	e0be      	b.n	800232e <__aeabi_dsub+0x616>
 80021b0:	1e56      	subs	r6, r2, #1
 80021b2:	2a01      	cmp	r2, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x4a0>
 80021b6:	e109      	b.n	80023cc <__aeabi_dsub+0x6b4>
 80021b8:	4c8c      	ldr	r4, [pc, #560]	; (80023ec <__aeabi_dsub+0x6d4>)
 80021ba:	42a2      	cmp	r2, r4
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x4a8>
 80021be:	e119      	b.n	80023f4 <__aeabi_dsub+0x6dc>
 80021c0:	0032      	movs	r2, r6
 80021c2:	e6c1      	b.n	8001f48 <__aeabi_dsub+0x230>
 80021c4:	4642      	mov	r2, r8
 80021c6:	2400      	movs	r4, #0
 80021c8:	2300      	movs	r3, #0
 80021ca:	e648      	b.n	8001e5e <__aeabi_dsub+0x146>
 80021cc:	2020      	movs	r0, #32
 80021ce:	000c      	movs	r4, r1
 80021d0:	1a80      	subs	r0, r0, r2
 80021d2:	003e      	movs	r6, r7
 80021d4:	4087      	lsls	r7, r0
 80021d6:	4084      	lsls	r4, r0
 80021d8:	40d6      	lsrs	r6, r2
 80021da:	1e78      	subs	r0, r7, #1
 80021dc:	4187      	sbcs	r7, r0
 80021de:	40d1      	lsrs	r1, r2
 80021e0:	4334      	orrs	r4, r6
 80021e2:	433c      	orrs	r4, r7
 80021e4:	448c      	add	ip, r1
 80021e6:	e7a4      	b.n	8002132 <__aeabi_dsub+0x41a>
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <__aeabi_dsub+0x6d4>)
 80021ea:	4290      	cmp	r0, r2
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x4d8>
 80021ee:	e0e9      	b.n	80023c4 <__aeabi_dsub+0x6ac>
 80021f0:	19df      	adds	r7, r3, r7
 80021f2:	429f      	cmp	r7, r3
 80021f4:	419b      	sbcs	r3, r3
 80021f6:	4461      	add	r1, ip
 80021f8:	425b      	negs	r3, r3
 80021fa:	18c9      	adds	r1, r1, r3
 80021fc:	07cc      	lsls	r4, r1, #31
 80021fe:	087f      	lsrs	r7, r7, #1
 8002200:	084b      	lsrs	r3, r1, #1
 8002202:	4699      	mov	r9, r3
 8002204:	4680      	mov	r8, r0
 8002206:	433c      	orrs	r4, r7
 8002208:	e6f4      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800220a:	1afc      	subs	r4, r7, r3
 800220c:	42a7      	cmp	r7, r4
 800220e:	41bf      	sbcs	r7, r7
 8002210:	4663      	mov	r3, ip
 8002212:	427f      	negs	r7, r7
 8002214:	1ac9      	subs	r1, r1, r3
 8002216:	1bcb      	subs	r3, r1, r7
 8002218:	4699      	mov	r9, r3
 800221a:	465d      	mov	r5, fp
 800221c:	e5d5      	b.n	8001dca <__aeabi_dsub+0xb2>
 800221e:	08ff      	lsrs	r7, r7, #3
 8002220:	074b      	lsls	r3, r1, #29
 8002222:	465d      	mov	r5, fp
 8002224:	433b      	orrs	r3, r7
 8002226:	08cc      	lsrs	r4, r1, #3
 8002228:	e6ee      	b.n	8002008 <__aeabi_dsub+0x2f0>
 800222a:	4662      	mov	r2, ip
 800222c:	431a      	orrs	r2, r3
 800222e:	d000      	beq.n	8002232 <__aeabi_dsub+0x51a>
 8002230:	e082      	b.n	8002338 <__aeabi_dsub+0x620>
 8002232:	000b      	movs	r3, r1
 8002234:	433b      	orrs	r3, r7
 8002236:	d11b      	bne.n	8002270 <__aeabi_dsub+0x558>
 8002238:	2480      	movs	r4, #128	; 0x80
 800223a:	2500      	movs	r5, #0
 800223c:	0324      	lsls	r4, r4, #12
 800223e:	e6f9      	b.n	8002034 <__aeabi_dsub+0x31c>
 8002240:	19dc      	adds	r4, r3, r7
 8002242:	429c      	cmp	r4, r3
 8002244:	419b      	sbcs	r3, r3
 8002246:	4461      	add	r1, ip
 8002248:	4689      	mov	r9, r1
 800224a:	425b      	negs	r3, r3
 800224c:	4499      	add	r9, r3
 800224e:	464b      	mov	r3, r9
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	d444      	bmi.n	80022de <__aeabi_dsub+0x5c6>
 8002254:	2301      	movs	r3, #1
 8002256:	4698      	mov	r8, r3
 8002258:	e6cc      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800225a:	1bdc      	subs	r4, r3, r7
 800225c:	4662      	mov	r2, ip
 800225e:	42a3      	cmp	r3, r4
 8002260:	419b      	sbcs	r3, r3
 8002262:	1a51      	subs	r1, r2, r1
 8002264:	425b      	negs	r3, r3
 8002266:	1acb      	subs	r3, r1, r3
 8002268:	4699      	mov	r9, r3
 800226a:	2301      	movs	r3, #1
 800226c:	4698      	mov	r8, r3
 800226e:	e5a4      	b.n	8001dba <__aeabi_dsub+0xa2>
 8002270:	08ff      	lsrs	r7, r7, #3
 8002272:	074b      	lsls	r3, r1, #29
 8002274:	465d      	mov	r5, fp
 8002276:	433b      	orrs	r3, r7
 8002278:	08cc      	lsrs	r4, r1, #3
 800227a:	e6d7      	b.n	800202c <__aeabi_dsub+0x314>
 800227c:	4662      	mov	r2, ip
 800227e:	431a      	orrs	r2, r3
 8002280:	0014      	movs	r4, r2
 8002282:	1e63      	subs	r3, r4, #1
 8002284:	419c      	sbcs	r4, r3
 8002286:	e679      	b.n	8001f7c <__aeabi_dsub+0x264>
 8002288:	0015      	movs	r5, r2
 800228a:	4664      	mov	r4, ip
 800228c:	3d20      	subs	r5, #32
 800228e:	40ec      	lsrs	r4, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	2a20      	cmp	r2, #32
 8002294:	d005      	beq.n	80022a2 <__aeabi_dsub+0x58a>
 8002296:	2540      	movs	r5, #64	; 0x40
 8002298:	4664      	mov	r4, ip
 800229a:	1aaa      	subs	r2, r5, r2
 800229c:	4094      	lsls	r4, r2
 800229e:	4323      	orrs	r3, r4
 80022a0:	469a      	mov	sl, r3
 80022a2:	4654      	mov	r4, sl
 80022a4:	1e63      	subs	r3, r4, #1
 80022a6:	419c      	sbcs	r4, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4323      	orrs	r3, r4
 80022ac:	e773      	b.n	8002196 <__aeabi_dsub+0x47e>
 80022ae:	4662      	mov	r2, ip
 80022b0:	431a      	orrs	r2, r3
 80022b2:	d023      	beq.n	80022fc <__aeabi_dsub+0x5e4>
 80022b4:	000a      	movs	r2, r1
 80022b6:	433a      	orrs	r2, r7
 80022b8:	d000      	beq.n	80022bc <__aeabi_dsub+0x5a4>
 80022ba:	e0a0      	b.n	80023fe <__aeabi_dsub+0x6e6>
 80022bc:	4662      	mov	r2, ip
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	0752      	lsls	r2, r2, #29
 80022c2:	4313      	orrs	r3, r2
 80022c4:	4662      	mov	r2, ip
 80022c6:	08d4      	lsrs	r4, r2, #3
 80022c8:	e6b0      	b.n	800202c <__aeabi_dsub+0x314>
 80022ca:	000b      	movs	r3, r1
 80022cc:	433b      	orrs	r3, r7
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x5ba>
 80022d0:	e728      	b.n	8002124 <__aeabi_dsub+0x40c>
 80022d2:	08ff      	lsrs	r7, r7, #3
 80022d4:	074b      	lsls	r3, r1, #29
 80022d6:	465d      	mov	r5, fp
 80022d8:	433b      	orrs	r3, r7
 80022da:	08cc      	lsrs	r4, r1, #3
 80022dc:	e697      	b.n	800200e <__aeabi_dsub+0x2f6>
 80022de:	2302      	movs	r3, #2
 80022e0:	4698      	mov	r8, r3
 80022e2:	e736      	b.n	8002152 <__aeabi_dsub+0x43a>
 80022e4:	1afc      	subs	r4, r7, r3
 80022e6:	42a7      	cmp	r7, r4
 80022e8:	41bf      	sbcs	r7, r7
 80022ea:	4663      	mov	r3, ip
 80022ec:	427f      	negs	r7, r7
 80022ee:	1ac9      	subs	r1, r1, r3
 80022f0:	1bcb      	subs	r3, r1, r7
 80022f2:	4699      	mov	r9, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	465d      	mov	r5, fp
 80022f8:	4698      	mov	r8, r3
 80022fa:	e55e      	b.n	8001dba <__aeabi_dsub+0xa2>
 80022fc:	074b      	lsls	r3, r1, #29
 80022fe:	08ff      	lsrs	r7, r7, #3
 8002300:	433b      	orrs	r3, r7
 8002302:	08cc      	lsrs	r4, r1, #3
 8002304:	e692      	b.n	800202c <__aeabi_dsub+0x314>
 8002306:	1bdc      	subs	r4, r3, r7
 8002308:	4660      	mov	r0, ip
 800230a:	42a3      	cmp	r3, r4
 800230c:	41b6      	sbcs	r6, r6
 800230e:	1a40      	subs	r0, r0, r1
 8002310:	4276      	negs	r6, r6
 8002312:	1b80      	subs	r0, r0, r6
 8002314:	4681      	mov	r9, r0
 8002316:	0200      	lsls	r0, r0, #8
 8002318:	d560      	bpl.n	80023dc <__aeabi_dsub+0x6c4>
 800231a:	1afc      	subs	r4, r7, r3
 800231c:	42a7      	cmp	r7, r4
 800231e:	41bf      	sbcs	r7, r7
 8002320:	4663      	mov	r3, ip
 8002322:	427f      	negs	r7, r7
 8002324:	1ac9      	subs	r1, r1, r3
 8002326:	1bcb      	subs	r3, r1, r7
 8002328:	4699      	mov	r9, r3
 800232a:	465d      	mov	r5, fp
 800232c:	e576      	b.n	8001e1c <__aeabi_dsub+0x104>
 800232e:	08ff      	lsrs	r7, r7, #3
 8002330:	074b      	lsls	r3, r1, #29
 8002332:	433b      	orrs	r3, r7
 8002334:	08cc      	lsrs	r4, r1, #3
 8002336:	e667      	b.n	8002008 <__aeabi_dsub+0x2f0>
 8002338:	000a      	movs	r2, r1
 800233a:	08db      	lsrs	r3, r3, #3
 800233c:	433a      	orrs	r2, r7
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x62a>
 8002340:	e66f      	b.n	8002022 <__aeabi_dsub+0x30a>
 8002342:	4662      	mov	r2, ip
 8002344:	0752      	lsls	r2, r2, #29
 8002346:	4313      	orrs	r3, r2
 8002348:	4662      	mov	r2, ip
 800234a:	08d4      	lsrs	r4, r2, #3
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0312      	lsls	r2, r2, #12
 8002350:	4214      	tst	r4, r2
 8002352:	d007      	beq.n	8002364 <__aeabi_dsub+0x64c>
 8002354:	08c8      	lsrs	r0, r1, #3
 8002356:	4210      	tst	r0, r2
 8002358:	d104      	bne.n	8002364 <__aeabi_dsub+0x64c>
 800235a:	465d      	mov	r5, fp
 800235c:	0004      	movs	r4, r0
 800235e:	08fb      	lsrs	r3, r7, #3
 8002360:	0749      	lsls	r1, r1, #29
 8002362:	430b      	orrs	r3, r1
 8002364:	0f5a      	lsrs	r2, r3, #29
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	08db      	lsrs	r3, r3, #3
 800236a:	0752      	lsls	r2, r2, #29
 800236c:	4313      	orrs	r3, r2
 800236e:	e65d      	b.n	800202c <__aeabi_dsub+0x314>
 8002370:	074b      	lsls	r3, r1, #29
 8002372:	08ff      	lsrs	r7, r7, #3
 8002374:	433b      	orrs	r3, r7
 8002376:	08cc      	lsrs	r4, r1, #3
 8002378:	e649      	b.n	800200e <__aeabi_dsub+0x2f6>
 800237a:	19dc      	adds	r4, r3, r7
 800237c:	429c      	cmp	r4, r3
 800237e:	419b      	sbcs	r3, r3
 8002380:	4461      	add	r1, ip
 8002382:	4689      	mov	r9, r1
 8002384:	425b      	negs	r3, r3
 8002386:	4499      	add	r9, r3
 8002388:	464b      	mov	r3, r9
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	d400      	bmi.n	8002390 <__aeabi_dsub+0x678>
 800238e:	e631      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8002390:	464a      	mov	r2, r9
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <__aeabi_dsub+0x6d8>)
 8002394:	401a      	ands	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	4691      	mov	r9, r2
 800239a:	4698      	mov	r8, r3
 800239c:	e62a      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800239e:	0016      	movs	r6, r2
 80023a0:	4664      	mov	r4, ip
 80023a2:	3e20      	subs	r6, #32
 80023a4:	40f4      	lsrs	r4, r6
 80023a6:	46a0      	mov	r8, r4
 80023a8:	2a20      	cmp	r2, #32
 80023aa:	d005      	beq.n	80023b8 <__aeabi_dsub+0x6a0>
 80023ac:	2640      	movs	r6, #64	; 0x40
 80023ae:	4664      	mov	r4, ip
 80023b0:	1ab2      	subs	r2, r6, r2
 80023b2:	4094      	lsls	r4, r2
 80023b4:	4323      	orrs	r3, r4
 80023b6:	469a      	mov	sl, r3
 80023b8:	4654      	mov	r4, sl
 80023ba:	1e63      	subs	r3, r4, #1
 80023bc:	419c      	sbcs	r4, r3
 80023be:	4643      	mov	r3, r8
 80023c0:	431c      	orrs	r4, r3
 80023c2:	e5db      	b.n	8001f7c <__aeabi_dsub+0x264>
 80023c4:	0002      	movs	r2, r0
 80023c6:	2400      	movs	r4, #0
 80023c8:	2300      	movs	r3, #0
 80023ca:	e548      	b.n	8001e5e <__aeabi_dsub+0x146>
 80023cc:	19dc      	adds	r4, r3, r7
 80023ce:	42bc      	cmp	r4, r7
 80023d0:	41bf      	sbcs	r7, r7
 80023d2:	4461      	add	r1, ip
 80023d4:	4689      	mov	r9, r1
 80023d6:	427f      	negs	r7, r7
 80023d8:	44b9      	add	r9, r7
 80023da:	e738      	b.n	800224e <__aeabi_dsub+0x536>
 80023dc:	464b      	mov	r3, r9
 80023de:	4323      	orrs	r3, r4
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x6cc>
 80023e2:	e69f      	b.n	8002124 <__aeabi_dsub+0x40c>
 80023e4:	e606      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	000007fe 	.word	0x000007fe
 80023ec:	000007ff 	.word	0x000007ff
 80023f0:	ff7fffff 	.word	0xff7fffff
 80023f4:	08ff      	lsrs	r7, r7, #3
 80023f6:	074b      	lsls	r3, r1, #29
 80023f8:	433b      	orrs	r3, r7
 80023fa:	08cc      	lsrs	r4, r1, #3
 80023fc:	e616      	b.n	800202c <__aeabi_dsub+0x314>
 80023fe:	4662      	mov	r2, ip
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	0752      	lsls	r2, r2, #29
 8002404:	4313      	orrs	r3, r2
 8002406:	4662      	mov	r2, ip
 8002408:	08d4      	lsrs	r4, r2, #3
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	0312      	lsls	r2, r2, #12
 800240e:	4214      	tst	r4, r2
 8002410:	d007      	beq.n	8002422 <__aeabi_dsub+0x70a>
 8002412:	08c8      	lsrs	r0, r1, #3
 8002414:	4210      	tst	r0, r2
 8002416:	d104      	bne.n	8002422 <__aeabi_dsub+0x70a>
 8002418:	465d      	mov	r5, fp
 800241a:	0004      	movs	r4, r0
 800241c:	08fb      	lsrs	r3, r7, #3
 800241e:	0749      	lsls	r1, r1, #29
 8002420:	430b      	orrs	r3, r1
 8002422:	0f5a      	lsrs	r2, r3, #29
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	0752      	lsls	r2, r2, #29
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	4313      	orrs	r3, r2
 800242c:	e5fe      	b.n	800202c <__aeabi_dsub+0x314>
 800242e:	2300      	movs	r3, #0
 8002430:	4a01      	ldr	r2, [pc, #4]	; (8002438 <__aeabi_dsub+0x720>)
 8002432:	001c      	movs	r4, r3
 8002434:	e513      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007ff 	.word	0x000007ff

0800243c <__aeabi_dcmpun>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	0005      	movs	r5, r0
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <__aeabi_dcmpun+0x38>)
 8002442:	031c      	lsls	r4, r3, #12
 8002444:	0016      	movs	r6, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	0049      	lsls	r1, r1, #1
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	0d49      	lsrs	r1, r1, #21
 8002450:	0b24      	lsrs	r4, r4, #12
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	4281      	cmp	r1, r0
 8002456:	d008      	beq.n	800246a <__aeabi_dcmpun+0x2e>
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <__aeabi_dcmpun+0x38>)
 800245a:	2000      	movs	r0, #0
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <__aeabi_dcmpun+0x2c>
 8002460:	0020      	movs	r0, r4
 8002462:	4330      	orrs	r0, r6
 8002464:	1e43      	subs	r3, r0, #1
 8002466:	4198      	sbcs	r0, r3
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	2001      	movs	r0, #1
 800246c:	432a      	orrs	r2, r5
 800246e:	d1fb      	bne.n	8002468 <__aeabi_dcmpun+0x2c>
 8002470:	e7f2      	b.n	8002458 <__aeabi_dcmpun+0x1c>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	000007ff 	.word	0x000007ff

08002478 <__aeabi_d2iz>:
 8002478:	000a      	movs	r2, r1
 800247a:	b530      	push	{r4, r5, lr}
 800247c:	4c13      	ldr	r4, [pc, #76]	; (80024cc <__aeabi_d2iz+0x54>)
 800247e:	0053      	lsls	r3, r2, #1
 8002480:	0309      	lsls	r1, r1, #12
 8002482:	0005      	movs	r5, r0
 8002484:	0b09      	lsrs	r1, r1, #12
 8002486:	2000      	movs	r0, #0
 8002488:	0d5b      	lsrs	r3, r3, #21
 800248a:	0fd2      	lsrs	r2, r2, #31
 800248c:	42a3      	cmp	r3, r4
 800248e:	dd04      	ble.n	800249a <__aeabi_d2iz+0x22>
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <__aeabi_d2iz+0x58>)
 8002492:	4283      	cmp	r3, r0
 8002494:	dd02      	ble.n	800249c <__aeabi_d2iz+0x24>
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <__aeabi_d2iz+0x5c>)
 8002498:	18d0      	adds	r0, r2, r3
 800249a:	bd30      	pop	{r4, r5, pc}
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	0340      	lsls	r0, r0, #13
 80024a0:	4301      	orrs	r1, r0
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <__aeabi_d2iz+0x60>)
 80024a4:	1ac0      	subs	r0, r0, r3
 80024a6:	281f      	cmp	r0, #31
 80024a8:	dd08      	ble.n	80024bc <__aeabi_d2iz+0x44>
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <__aeabi_d2iz+0x64>)
 80024ac:	1ac3      	subs	r3, r0, r3
 80024ae:	40d9      	lsrs	r1, r3
 80024b0:	000b      	movs	r3, r1
 80024b2:	4258      	negs	r0, r3
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d1f0      	bne.n	800249a <__aeabi_d2iz+0x22>
 80024b8:	0018      	movs	r0, r3
 80024ba:	e7ee      	b.n	800249a <__aeabi_d2iz+0x22>
 80024bc:	4c08      	ldr	r4, [pc, #32]	; (80024e0 <__aeabi_d2iz+0x68>)
 80024be:	40c5      	lsrs	r5, r0
 80024c0:	46a4      	mov	ip, r4
 80024c2:	4463      	add	r3, ip
 80024c4:	4099      	lsls	r1, r3
 80024c6:	000b      	movs	r3, r1
 80024c8:	432b      	orrs	r3, r5
 80024ca:	e7f2      	b.n	80024b2 <__aeabi_d2iz+0x3a>
 80024cc:	000003fe 	.word	0x000003fe
 80024d0:	0000041d 	.word	0x0000041d
 80024d4:	7fffffff 	.word	0x7fffffff
 80024d8:	00000433 	.word	0x00000433
 80024dc:	00000413 	.word	0x00000413
 80024e0:	fffffbed 	.word	0xfffffbed

080024e4 <__aeabi_i2d>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d016      	beq.n	8002518 <__aeabi_i2d+0x34>
 80024ea:	17c3      	asrs	r3, r0, #31
 80024ec:	18c5      	adds	r5, r0, r3
 80024ee:	405d      	eors	r5, r3
 80024f0:	0fc4      	lsrs	r4, r0, #31
 80024f2:	0028      	movs	r0, r5
 80024f4:	f000 f894 	bl	8002620 <__clzsi2>
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <__aeabi_i2d+0x5c>)
 80024fa:	1a12      	subs	r2, r2, r0
 80024fc:	280a      	cmp	r0, #10
 80024fe:	dc16      	bgt.n	800252e <__aeabi_i2d+0x4a>
 8002500:	0003      	movs	r3, r0
 8002502:	002e      	movs	r6, r5
 8002504:	3315      	adds	r3, #21
 8002506:	409e      	lsls	r6, r3
 8002508:	230b      	movs	r3, #11
 800250a:	1a18      	subs	r0, r3, r0
 800250c:	40c5      	lsrs	r5, r0
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	032d      	lsls	r5, r5, #12
 8002512:	0b2d      	lsrs	r5, r5, #12
 8002514:	0d53      	lsrs	r3, r2, #21
 8002516:	e003      	b.n	8002520 <__aeabi_i2d+0x3c>
 8002518:	2400      	movs	r4, #0
 800251a:	2300      	movs	r3, #0
 800251c:	2500      	movs	r5, #0
 800251e:	2600      	movs	r6, #0
 8002520:	051b      	lsls	r3, r3, #20
 8002522:	432b      	orrs	r3, r5
 8002524:	07e4      	lsls	r4, r4, #31
 8002526:	4323      	orrs	r3, r4
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	380b      	subs	r0, #11
 8002530:	4085      	lsls	r5, r0
 8002532:	0552      	lsls	r2, r2, #21
 8002534:	032d      	lsls	r5, r5, #12
 8002536:	2600      	movs	r6, #0
 8002538:	0b2d      	lsrs	r5, r5, #12
 800253a:	0d53      	lsrs	r3, r2, #21
 800253c:	e7f0      	b.n	8002520 <__aeabi_i2d+0x3c>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	0000041e 	.word	0x0000041e

08002544 <__aeabi_ui2d>:
 8002544:	b510      	push	{r4, lr}
 8002546:	1e04      	subs	r4, r0, #0
 8002548:	d010      	beq.n	800256c <__aeabi_ui2d+0x28>
 800254a:	f000 f869 	bl	8002620 <__clzsi2>
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <__aeabi_ui2d+0x48>)
 8002550:	1a1b      	subs	r3, r3, r0
 8002552:	280a      	cmp	r0, #10
 8002554:	dc11      	bgt.n	800257a <__aeabi_ui2d+0x36>
 8002556:	220b      	movs	r2, #11
 8002558:	0021      	movs	r1, r4
 800255a:	1a12      	subs	r2, r2, r0
 800255c:	40d1      	lsrs	r1, r2
 800255e:	3015      	adds	r0, #21
 8002560:	030a      	lsls	r2, r1, #12
 8002562:	055b      	lsls	r3, r3, #21
 8002564:	4084      	lsls	r4, r0
 8002566:	0b12      	lsrs	r2, r2, #12
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	e001      	b.n	8002570 <__aeabi_ui2d+0x2c>
 800256c:	2300      	movs	r3, #0
 800256e:	2200      	movs	r2, #0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	4313      	orrs	r3, r2
 8002574:	0020      	movs	r0, r4
 8002576:	0019      	movs	r1, r3
 8002578:	bd10      	pop	{r4, pc}
 800257a:	0022      	movs	r2, r4
 800257c:	380b      	subs	r0, #11
 800257e:	4082      	lsls	r2, r0
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	0312      	lsls	r2, r2, #12
 8002584:	2400      	movs	r4, #0
 8002586:	0b12      	lsrs	r2, r2, #12
 8002588:	0d5b      	lsrs	r3, r3, #21
 800258a:	e7f1      	b.n	8002570 <__aeabi_ui2d+0x2c>
 800258c:	0000041e 	.word	0x0000041e

08002590 <__aeabi_f2d>:
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	0043      	lsls	r3, r0, #1
 8002594:	0246      	lsls	r6, r0, #9
 8002596:	0fc4      	lsrs	r4, r0, #31
 8002598:	20fe      	movs	r0, #254	; 0xfe
 800259a:	0e1b      	lsrs	r3, r3, #24
 800259c:	1c59      	adds	r1, r3, #1
 800259e:	0a75      	lsrs	r5, r6, #9
 80025a0:	4208      	tst	r0, r1
 80025a2:	d00c      	beq.n	80025be <__aeabi_f2d+0x2e>
 80025a4:	22e0      	movs	r2, #224	; 0xe0
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4694      	mov	ip, r2
 80025aa:	076d      	lsls	r5, r5, #29
 80025ac:	0b36      	lsrs	r6, r6, #12
 80025ae:	4463      	add	r3, ip
 80025b0:	051b      	lsls	r3, r3, #20
 80025b2:	4333      	orrs	r3, r6
 80025b4:	07e4      	lsls	r4, r4, #31
 80025b6:	4323      	orrs	r3, r4
 80025b8:	0028      	movs	r0, r5
 80025ba:	0019      	movs	r1, r3
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d114      	bne.n	80025ec <__aeabi_f2d+0x5c>
 80025c2:	2d00      	cmp	r5, #0
 80025c4:	d01b      	beq.n	80025fe <__aeabi_f2d+0x6e>
 80025c6:	0028      	movs	r0, r5
 80025c8:	f000 f82a 	bl	8002620 <__clzsi2>
 80025cc:	280a      	cmp	r0, #10
 80025ce:	dc1c      	bgt.n	800260a <__aeabi_f2d+0x7a>
 80025d0:	230b      	movs	r3, #11
 80025d2:	002e      	movs	r6, r5
 80025d4:	1a1b      	subs	r3, r3, r0
 80025d6:	40de      	lsrs	r6, r3
 80025d8:	0003      	movs	r3, r0
 80025da:	3315      	adds	r3, #21
 80025dc:	409d      	lsls	r5, r3
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <__aeabi_f2d+0x88>)
 80025e0:	0336      	lsls	r6, r6, #12
 80025e2:	1a12      	subs	r2, r2, r0
 80025e4:	0552      	lsls	r2, r2, #21
 80025e6:	0b36      	lsrs	r6, r6, #12
 80025e8:	0d53      	lsrs	r3, r2, #21
 80025ea:	e7e1      	b.n	80025b0 <__aeabi_f2d+0x20>
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d009      	beq.n	8002604 <__aeabi_f2d+0x74>
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0b36      	lsrs	r6, r6, #12
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <__aeabi_f2d+0x8c>)
 80025f8:	076d      	lsls	r5, r5, #29
 80025fa:	4316      	orrs	r6, r2
 80025fc:	e7d8      	b.n	80025b0 <__aeabi_f2d+0x20>
 80025fe:	2300      	movs	r3, #0
 8002600:	2600      	movs	r6, #0
 8002602:	e7d5      	b.n	80025b0 <__aeabi_f2d+0x20>
 8002604:	2600      	movs	r6, #0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <__aeabi_f2d+0x8c>)
 8002608:	e7d2      	b.n	80025b0 <__aeabi_f2d+0x20>
 800260a:	0003      	movs	r3, r0
 800260c:	3b0b      	subs	r3, #11
 800260e:	409d      	lsls	r5, r3
 8002610:	002e      	movs	r6, r5
 8002612:	2500      	movs	r5, #0
 8002614:	e7e3      	b.n	80025de <__aeabi_f2d+0x4e>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	00000389 	.word	0x00000389
 800261c:	000007ff 	.word	0x000007ff

08002620 <__clzsi2>:
 8002620:	211c      	movs	r1, #28
 8002622:	2301      	movs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4298      	cmp	r0, r3
 8002628:	d301      	bcc.n	800262e <__clzsi2+0xe>
 800262a:	0c00      	lsrs	r0, r0, #16
 800262c:	3910      	subs	r1, #16
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	4298      	cmp	r0, r3
 8002632:	d301      	bcc.n	8002638 <__clzsi2+0x18>
 8002634:	0a00      	lsrs	r0, r0, #8
 8002636:	3908      	subs	r1, #8
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	4298      	cmp	r0, r3
 800263c:	d301      	bcc.n	8002642 <__clzsi2+0x22>
 800263e:	0900      	lsrs	r0, r0, #4
 8002640:	3904      	subs	r1, #4
 8002642:	a202      	add	r2, pc, #8	; (adr r2, 800264c <__clzsi2+0x2c>)
 8002644:	5c10      	ldrb	r0, [r2, r0]
 8002646:	1840      	adds	r0, r0, r1
 8002648:	4770      	bx	lr
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	02020304 	.word	0x02020304
 8002650:	01010101 	.word	0x01010101
	...

0800265c <__clzdi2>:
 800265c:	b510      	push	{r4, lr}
 800265e:	2900      	cmp	r1, #0
 8002660:	d103      	bne.n	800266a <__clzdi2+0xe>
 8002662:	f7ff ffdd 	bl	8002620 <__clzsi2>
 8002666:	3020      	adds	r0, #32
 8002668:	e002      	b.n	8002670 <__clzdi2+0x14>
 800266a:	0008      	movs	r0, r1
 800266c:	f7ff ffd8 	bl	8002620 <__clzsi2>
 8002670:	bd10      	pop	{r4, pc}
 8002672:	46c0      	nop			; (mov r8, r8)

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	4c2c      	ldr	r4, [pc, #176]	; (8002728 <main+0xb4>)
 8002678:	44a5      	add	sp, r4
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267c:	f001 fdca 	bl	8004214 <HAL_Init>

  /* USER CODE BEGIN Init */

  print_debug("Main\r\n");
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <main+0xb8>)
 8002682:	0018      	movs	r0, r3
 8002684:	f000 fa08 	bl	8002a98 <print_debug>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002688:	f000 f868 	bl	800275c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800268c:	f000 f9c2 	bl	8002a14 <MX_GPIO_Init>
  MX_DMA_Init();
 8002690:	f000 f9a2 	bl	80029d8 <MX_DMA_Init>
  MX_USART5_UART_Init();
 8002694:	f000 f968 	bl	8002968 <MX_USART5_UART_Init>
  MX_I2C2_Init();
 8002698:	f000 f8f8 	bl	800288c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800269c:	f000 f934 	bl	8002908 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80026a0:	f000 f8c8 	bl	8002834 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart5, uart_buff, 6);
 80026a4:	4922      	ldr	r1, [pc, #136]	; (8002730 <main+0xbc>)
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <main+0xc0>)
 80026a8:	2206      	movs	r2, #6
 80026aa:	0018      	movs	r0, r3
 80026ac:	f004 fc08 	bl	8006ec0 <HAL_UART_Receive_DMA>

  bt_assobio_stm32_parameters_s bluetooth;
  memset(&bluetooth, 0x00, sizeof(bt_assobio_stm32_parameters_s));
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <main+0xc4>)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2100      	movs	r1, #0
 80026b6:	0018      	movs	r0, r3
 80026b8:	f008 fbf0 	bl	800ae9c <memset>
  bluetooth.uart = &huart5;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <main+0xc8>)
 80026be:	2291      	movs	r2, #145	; 0x91
 80026c0:	00d2      	lsls	r2, r2, #3
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	19db      	adds	r3, r3, r7
 80026c6:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <main+0xcc>)
 80026c8:	491a      	ldr	r1, [pc, #104]	; (8002734 <main+0xc0>)
 80026ca:	0408      	lsls	r0, r1, #16
 80026cc:	0c05      	lsrs	r5, r0, #16
 80026ce:	5a98      	ldrh	r0, [r3, r2]
 80026d0:	2400      	movs	r4, #0
 80026d2:	4020      	ands	r0, r4
 80026d4:	1c04      	adds	r4, r0, #0
 80026d6:	1c28      	adds	r0, r5, #0
 80026d8:	4320      	orrs	r0, r4
 80026da:	5298      	strh	r0, [r3, r2]
 80026dc:	0c08      	lsrs	r0, r1, #16
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	885a      	ldrh	r2, [r3, #2]
 80026e2:	2100      	movs	r1, #0
 80026e4:	400a      	ands	r2, r1
 80026e6:	1c11      	adds	r1, r2, #0
 80026e8:	1c02      	adds	r2, r0, #0
 80026ea:	430a      	orrs	r2, r1
 80026ec:	805a      	strh	r2, [r3, #2]
  bt_assobio_init(&bluetooth);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 f943 	bl	800397c <bt_assobio_init>
  bt_assobio_pair_mode();
 80026f6:	f001 fc73 	bl	8003fe0 <bt_assobio_pair_mode>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026fa:	f005 fe1b 	bl	8008334 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of app_rotulacao */
  app_rotulacaoHandle = osThreadNew(app_rotulacao_func, NULL, &app_rotulacao_attributes);
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <main+0xd0>)
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <main+0xd4>)
 8002702:	2100      	movs	r1, #0
 8002704:	0018      	movs	r0, r3
 8002706:	f005 fe71 	bl	80083ec <osThreadNew>
 800270a:	0002      	movs	r2, r0
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <main+0xd8>)
 800270e:	601a      	str	r2, [r3, #0]

  /* creation of task_bt_receive */
  task_bt_receiveHandle = osThreadNew(bt_receive_uart, NULL, &task_bt_receive_attributes);
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <main+0xdc>)
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <main+0xe0>)
 8002714:	2100      	movs	r1, #0
 8002716:	0018      	movs	r0, r3
 8002718:	f005 fe68 	bl	80083ec <osThreadNew>
 800271c:	0002      	movs	r2, r0
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <main+0xe4>)
 8002720:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002722:	f005 fe33 	bl	800838c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002726:	e7fe      	b.n	8002726 <main+0xb2>
 8002728:	fffffb78 	.word	0xfffffb78
 800272c:	0800dce8 	.word	0x0800dce8
 8002730:	20000204 	.word	0x20000204
 8002734:	2000030c 	.word	0x2000030c
 8002738:	00000482 	.word	0x00000482
 800273c:	fffffb7c 	.word	0xfffffb7c
 8002740:	0000047e 	.word	0x0000047e
 8002744:	0800df0c 	.word	0x0800df0c
 8002748:	08002ac5 	.word	0x08002ac5
 800274c:	200003dc 	.word	0x200003dc
 8002750:	0800df30 	.word	0x0800df30
 8002754:	08004175 	.word	0x08004175
 8002758:	200003e0 	.word	0x200003e0

0800275c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b09d      	sub	sp, #116	; 0x74
 8002760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002762:	2438      	movs	r4, #56	; 0x38
 8002764:	193b      	adds	r3, r7, r4
 8002766:	0018      	movs	r0, r3
 8002768:	2338      	movs	r3, #56	; 0x38
 800276a:	001a      	movs	r2, r3
 800276c:	2100      	movs	r1, #0
 800276e:	f008 fb95 	bl	800ae9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002772:	2324      	movs	r3, #36	; 0x24
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	0018      	movs	r0, r3
 8002778:	2314      	movs	r3, #20
 800277a:	001a      	movs	r2, r3
 800277c:	2100      	movs	r1, #0
 800277e:	f008 fb8d 	bl	800ae9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002782:	003b      	movs	r3, r7
 8002784:	0018      	movs	r0, r3
 8002786:	2324      	movs	r3, #36	; 0x24
 8002788:	001a      	movs	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	f008 fb86 	bl	800ae9c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <SystemClock_Config+0xd0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a26      	ldr	r2, [pc, #152]	; (8002830 <SystemClock_Config+0xd4>)
 8002796:	401a      	ands	r2, r3
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <SystemClock_Config+0xd0>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0109      	lsls	r1, r1, #4
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027a2:	0021      	movs	r1, r4
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2210      	movs	r2, #16
 80027a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2201      	movs	r2, #1
 80027ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	22c0      	movs	r2, #192	; 0xc0
 80027ba:	0212      	lsls	r2, r2, #8
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	0018      	movs	r0, r3
 80027c8:	f003 fb32 	bl	8005e30 <HAL_RCC_OscConfig>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80027d0:	f000 fa34 	bl	8002c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d4:	2124      	movs	r1, #36	; 0x24
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	220f      	movs	r2, #15
 80027da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2100      	movs	r1, #0
 80027f8:	0018      	movs	r0, r3
 80027fa:	f003 feed 	bl	80065d8 <HAL_RCC_ClockConfig>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002802:	f000 fa1b 	bl	8002c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002806:	003b      	movs	r3, r7
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800280c:	003b      	movs	r3, r7
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002812:	003b      	movs	r3, r7
 8002814:	0018      	movs	r0, r3
 8002816:	f004 f903 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800281e:	f000 fa0d 	bl	8002c3c <Error_Handler>
  }
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b01d      	add	sp, #116	; 0x74
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40007000 	.word	0x40007000
 8002830:	ffffe7ff 	.word	0xffffe7ff

08002834 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <MX_CRC_Init+0x50>)
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <MX_CRC_Init+0x54>)
 800283c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_CRC_Init+0x50>)
 8002840:	2201      	movs	r2, #1
 8002842:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <MX_CRC_Init+0x50>)
 8002846:	2201      	movs	r2, #1
 8002848:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_CRC_Init+0x50>)
 800284c:	2207      	movs	r2, #7
 800284e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_CRC_Init+0x50>)
 8002852:	2210      	movs	r2, #16
 8002854:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_CRC_Init+0x50>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_CRC_Init+0x50>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_CRC_Init+0x50>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_CRC_Init+0x50>)
 800286a:	2201      	movs	r2, #1
 800286c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <MX_CRC_Init+0x50>)
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fe1d 	bl	80044b0 <HAL_CRC_Init>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 800287a:	f000 f9df 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	2000020c 	.word	0x2000020c
 8002888:	40023000 	.word	0x40023000

0800288c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_I2C2_Init+0x74>)
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <MX_I2C2_Init+0x78>)
 8002894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000004;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <MX_I2C2_Init+0x74>)
 8002898:	2204      	movs	r2, #4
 800289a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_I2C2_Init+0x74>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_I2C2_Init+0x74>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <MX_I2C2_Init+0x74>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_I2C2_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_I2C2_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_I2C2_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_I2C2_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_I2C2_Init+0x74>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f002 fba3 	bl	8005014 <HAL_I2C_Init>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d001      	beq.n	80028d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80028d2:	f000 f9b3 	bl	8002c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_I2C2_Init+0x74>)
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f003 fa10 	bl	8005d00 <HAL_I2CEx_ConfigAnalogFilter>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80028e4:	f000 f9aa 	bl	8002c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <MX_I2C2_Init+0x74>)
 80028ea:	2100      	movs	r1, #0
 80028ec:	0018      	movs	r0, r3
 80028ee:	f003 fa53 	bl	8005d98 <HAL_I2CEx_ConfigDigitalFilter>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80028f6:	f000 f9a1 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000230 	.word	0x20000230
 8002904:	40005800 	.word	0x40005800

08002908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <MX_USART2_UART_Init+0x5c>)
 8002910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002914:	22e1      	movs	r2, #225	; 0xe1
 8002916:	0252      	lsls	r2, r2, #9
 8002918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800294c:	0018      	movs	r0, r3
 800294e:	f004 f9c3 	bl	8006cd8 <HAL_UART_Init>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002956:	f000 f971 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000284 	.word	0x20000284
 8002964:	40004400 	.word	0x40004400

08002968 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 800296e:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <MX_USART5_UART_Init+0x6c>)
 8002970:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 8002974:	22e1      	movs	r2, #225	; 0xe1
 8002976:	0252      	lsls	r2, r2, #9
 8002978:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 80029a6:	2230      	movs	r2, #48	; 0x30
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0152      	lsls	r2, r2, #5
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
  huart5.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	0192      	lsls	r2, r2, #6
 80029b8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <MX_USART5_UART_Init+0x68>)
 80029bc:	0018      	movs	r0, r3
 80029be:	f004 f98b 	bl	8006cd8 <HAL_UART_Init>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_USART5_UART_Init+0x62>
  {
    Error_Handler();
 80029c6:	f000 f939 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000030c 	.word	0x2000030c
 80029d4:	40005000 	.word	0x40005000

080029d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <MX_DMA_Init+0x38>)
 80029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_DMA_Init+0x38>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_DMA_Init+0x38>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2103      	movs	r1, #3
 80029fa:	200a      	movs	r0, #10
 80029fc:	f001 fd26 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002a00:	200a      	movs	r0, #10
 8002a02:	f001 fd38 	bl	8004476 <HAL_NVIC_EnableIRQ>

}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <MX_GPIO_Init+0x40>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    // Keep add new if statement whenever a new UART interface is added and call the needed function

    if (huart == &huart5) {
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_UART_RxCpltCallback+0x34>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d10c      	bne.n	8002a82 <HAL_UART_RxCpltCallback+0x2a>
        osMessageQueuePut(bt_receive_queue_handle, &uart_buff, 0, 0);
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_UART_RxCpltCallback+0x38>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	4909      	ldr	r1, [pc, #36]	; (8002a94 <HAL_UART_RxCpltCallback+0x3c>)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2200      	movs	r2, #0
 8002a72:	f005 fe0d 	bl	8008690 <osMessageQueuePut>
        HAL_UART_Receive_DMA(&huart5, uart_buff, 6);
 8002a76:	4907      	ldr	r1, [pc, #28]	; (8002a94 <HAL_UART_RxCpltCallback+0x3c>)
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_UART_RxCpltCallback+0x34>)
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f004 fa1f 	bl	8006ec0 <HAL_UART_Receive_DMA>
    }
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	2000030c 	.word	0x2000030c
 8002a90:	20000420 	.word	0x20000420
 8002a94:	20000204 	.word	0x20000204

08002a98 <print_debug>:

void print_debug(const char *message) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) message, strlen(message), HAL_MAX_DELAY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fd fb30 	bl	8000108 <strlen>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	2301      	movs	r3, #1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <print_debug+0x28>)
 8002ab4:	f004 f964 	bl	8006d80 <HAL_UART_Transmit>
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000284 	.word	0x20000284

08002ac4 <app_rotulacao_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_app_rotulacao_func */
void app_rotulacao_func(void *argument)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	b0af      	sub	sp, #188	; 0xbc
 8002ac8:	af10      	add	r7, sp, #64	; 0x40
 8002aca:	63f8      	str	r0, [r7, #60]	; 0x3c
  /* USER CODE BEGIN 5 */

  print_debug("Enter app rotulacao\r\n");
 8002acc:	4b54      	ldr	r3, [pc, #336]	; (8002c20 <app_rotulacao_func+0x15c>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ffe2 	bl	8002a98 <print_debug>
  print_debug("Set structures and variables\r\n");
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <app_rotulacao_func+0x160>)
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff ffde 	bl	8002a98 <print_debug>

  bool mes_tog0 = true;
 8002adc:	233f      	movs	r3, #63	; 0x3f
 8002ade:	2138      	movs	r1, #56	; 0x38
 8002ae0:	185b      	adds	r3, r3, r1
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
  bool mes_tog1 = true;
 8002ae8:	233e      	movs	r3, #62	; 0x3e
 8002aea:	185b      	adds	r3, r3, r1
 8002aec:	19db      	adds	r3, r3, r7
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]

  bt_assobio_bmx160_data_s data_struct_sender;
  uint16_t len_data = sizeof(bt_assobio_bmx160_data_s);
 8002af2:	233c      	movs	r3, #60	; 0x3c
 8002af4:	185b      	adds	r3, r3, r1
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2230      	movs	r2, #48	; 0x30
 8002afa:	801a      	strh	r2, [r3, #0]

  bmx160_set_i2c(&hi2c2);
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <app_rotulacao_func+0x164>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 faea 	bl	80030d8 <bmx160_set_i2c>
  bmx160_begin();
 8002b04:	f000 faf6 	bl	80030f4 <bmx160_begin>

  print_debug("End settings\r\n");
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <app_rotulacao_func+0x168>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ffc4 	bl	8002a98 <print_debug>
  print_debug("Start infinite loop\r\n");
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <app_rotulacao_func+0x16c>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff ffc0 	bl	8002a98 <print_debug>
  /* Infinite loop */
  while (true) {
    print_debug("Modo Coleta on\r\n");
 8002b18:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <app_rotulacao_func+0x170>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff ffbc 	bl	8002a98 <print_debug>
    bmx160_getAllData(&data_struct_sender.magn, &data_struct_sender.gyro, &data_struct_sender.accel);
 8002b20:	2608      	movs	r6, #8
 8002b22:	2038      	movs	r0, #56	; 0x38
 8002b24:	1833      	adds	r3, r6, r0
 8002b26:	19db      	adds	r3, r3, r7
 8002b28:	3320      	adds	r3, #32
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	1833      	adds	r3, r6, r0
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	3310      	adds	r3, #16
 8002b32:	0019      	movs	r1, r3
 8002b34:	0004      	movs	r4, r0
 8002b36:	1933      	adds	r3, r6, r4
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fbc6 	bl	80032cc <bmx160_getAllData>


    const char *data;
    sprintf(data, "mag data x = %f, y = %f, z = %f; gyro data x = %f, y = %f, z = %f; acel data x = %f, y = %f, z = %f", data_struct_sender.magn.x, data_struct_sender.magn.y, data_struct_sender.magn.z, data_struct_sender.gyro.x, data_struct_sender.gyro.y, data_struct_sender.gyro.z, data_struct_sender.accel.x, data_struct_sender.accel.y, data_struct_sender.accel.z);
 8002b40:	1933      	adds	r3, r6, r4
 8002b42:	19db      	adds	r3, r3, r7
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1c18      	adds	r0, r3, #0
 8002b48:	f7ff fd22 	bl	8002590 <__aeabi_f2d>
 8002b4c:	6338      	str	r0, [r7, #48]	; 0x30
 8002b4e:	6379      	str	r1, [r7, #52]	; 0x34
 8002b50:	1933      	adds	r3, r6, r4
 8002b52:	19db      	adds	r3, r3, r7
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	1c18      	adds	r0, r3, #0
 8002b58:	f7ff fd1a 	bl	8002590 <__aeabi_f2d>
 8002b5c:	62b8      	str	r0, [r7, #40]	; 0x28
 8002b5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b60:	1933      	adds	r3, r6, r4
 8002b62:	19db      	adds	r3, r3, r7
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	1c18      	adds	r0, r3, #0
 8002b68:	f7ff fd12 	bl	8002590 <__aeabi_f2d>
 8002b6c:	6238      	str	r0, [r7, #32]
 8002b6e:	6279      	str	r1, [r7, #36]	; 0x24
 8002b70:	1933      	adds	r3, r6, r4
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	1c18      	adds	r0, r3, #0
 8002b78:	f7ff fd0a 	bl	8002590 <__aeabi_f2d>
 8002b7c:	61b8      	str	r0, [r7, #24]
 8002b7e:	61f9      	str	r1, [r7, #28]
 8002b80:	1933      	adds	r3, r6, r4
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	1c18      	adds	r0, r3, #0
 8002b88:	f7ff fd02 	bl	8002590 <__aeabi_f2d>
 8002b8c:	6138      	str	r0, [r7, #16]
 8002b8e:	6179      	str	r1, [r7, #20]
 8002b90:	1933      	adds	r3, r6, r4
 8002b92:	19db      	adds	r3, r3, r7
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	1c18      	adds	r0, r3, #0
 8002b98:	f7ff fcfa 	bl	8002590 <__aeabi_f2d>
 8002b9c:	60b8      	str	r0, [r7, #8]
 8002b9e:	60f9      	str	r1, [r7, #12]
 8002ba0:	1933      	adds	r3, r6, r4
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	1c18      	adds	r0, r3, #0
 8002ba8:	f7ff fcf2 	bl	8002590 <__aeabi_f2d>
 8002bac:	6038      	str	r0, [r7, #0]
 8002bae:	6079      	str	r1, [r7, #4]
 8002bb0:	1932      	adds	r2, r6, r4
 8002bb2:	19d3      	adds	r3, r2, r7
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c18      	adds	r0, r3, #0
 8002bb8:	f7ff fcea 	bl	8002590 <__aeabi_f2d>
 8002bbc:	0004      	movs	r4, r0
 8002bbe:	000d      	movs	r5, r1
 8002bc0:	2338      	movs	r3, #56	; 0x38
 8002bc2:	18f3      	adds	r3, r6, r3
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	1c18      	adds	r0, r3, #0
 8002bca:	f7ff fce1 	bl	8002590 <__aeabi_f2d>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	4919      	ldr	r1, [pc, #100]	; (8002c38 <app_rotulacao_func+0x174>)
 8002bd4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002bd6:	920e      	str	r2, [sp, #56]	; 0x38
 8002bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bda:	940c      	str	r4, [sp, #48]	; 0x30
 8002bdc:	950d      	str	r5, [sp, #52]	; 0x34
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	687c      	ldr	r4, [r7, #4]
 8002be2:	930a      	str	r3, [sp, #40]	; 0x28
 8002be4:	940b      	str	r4, [sp, #44]	; 0x2c
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68fc      	ldr	r4, [r7, #12]
 8002bea:	9308      	str	r3, [sp, #32]
 8002bec:	9409      	str	r4, [sp, #36]	; 0x24
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	697c      	ldr	r4, [r7, #20]
 8002bf2:	9306      	str	r3, [sp, #24]
 8002bf4:	9407      	str	r4, [sp, #28]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	69fc      	ldr	r4, [r7, #28]
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	9405      	str	r4, [sp, #20]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	9403      	str	r4, [sp, #12]
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	9401      	str	r4, [sp, #4]
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	f008 fed7 	bl	800b9c4 <siprintf>

    print_debug(data);
 8002c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff ff3d 	bl	8002a98 <print_debug>
  while (true) {
 8002c1e:	e77b      	b.n	8002b18 <app_rotulacao_func+0x54>
 8002c20:	0800dcf0 	.word	0x0800dcf0
 8002c24:	0800dd08 	.word	0x0800dd08
 8002c28:	20000230 	.word	0x20000230
 8002c2c:	0800dd28 	.word	0x0800dd28
 8002c30:	0800dd38 	.word	0x0800dd38
 8002c34:	0800dd50 	.word	0x0800dd50
 8002c38:	0800dd64 	.word	0x0800dd64

08002c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <Error_Handler+0x8>
	...

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_MspInit+0x34>)
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_MspInit+0x34>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_MspInit+0x34>)
 8002c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_MspInit+0x34>)
 8002c5e:	2180      	movs	r1, #128	; 0x80
 8002c60:	0549      	lsls	r1, r1, #21
 8002c62:	430a      	orrs	r2, r1
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002c66:	2302      	movs	r3, #2
 8002c68:	425b      	negs	r3, r3
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f001 fbec 	bl	800444c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_CRC_MspInit+0x38>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10d      	bne.n	8002cae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_CRC_MspInit+0x3c>)
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_CRC_MspInit+0x3c>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0149      	lsls	r1, r1, #5
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_CRC_MspInit+0x3c>)
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40023000 	.word	0x40023000
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	240c      	movs	r4, #12
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	0018      	movs	r0, r3
 8002cce:	2314      	movs	r3, #20
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f008 f8e2 	bl	800ae9c <memset>
  if(hi2c->Instance==I2C2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_I2C_MspInit+0x80>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d129      	bne.n	8002d36 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_I2C_MspInit+0x84>)
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_I2C_MspInit+0x84>)
 8002ce8:	2102      	movs	r1, #2
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_I2C_MspInit+0x84>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	22c0      	movs	r2, #192	; 0xc0
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	0021      	movs	r1, r4
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2212      	movs	r2, #18
 8002d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2203      	movs	r2, #3
 8002d14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2206      	movs	r2, #6
 8002d1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_I2C_MspInit+0x88>)
 8002d20:	0019      	movs	r1, r3
 8002d22:	0010      	movs	r0, r2
 8002d24:	f001 fff8 	bl	8004d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_I2C_MspInit+0x84>)
 8002d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_I2C_MspInit+0x84>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	03c9      	lsls	r1, r1, #15
 8002d32:	430a      	orrs	r2, r1
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b009      	add	sp, #36	; 0x24
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40005800 	.word	0x40005800
 8002d44:	40021000 	.word	0x40021000
 8002d48:	50000400 	.word	0x50000400

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	2414      	movs	r4, #20
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	0018      	movs	r0, r3
 8002d5a:	2314      	movs	r3, #20
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f008 f89c 	bl	800ae9c <memset>
  if(huart->Instance==USART2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <HAL_UART_MspInit+0x140>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12a      	bne.n	8002dc4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d6e:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0289      	lsls	r1, r1, #10
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b44      	ldr	r3, [pc, #272]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	430a      	orrs	r2, r1
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d94:	0021      	movs	r1, r4
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	220c      	movs	r2, #12
 8002d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2202      	movs	r2, #2
 8002da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2203      	movs	r2, #3
 8002dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2204      	movs	r2, #4
 8002db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	187a      	adds	r2, r7, r1
 8002db6:	23a0      	movs	r3, #160	; 0xa0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 ffab 	bl	8004d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002dc2:	e05e      	b.n	8002e82 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART5)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <HAL_UART_MspInit+0x148>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d159      	bne.n	8002e82 <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART5_CLK_ENABLE();
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0349      	lsls	r1, r1, #13
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002de2:	2102      	movs	r1, #2
 8002de4:	430a      	orrs	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de8:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_UART_MspInit+0x144>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002df4:	2114      	movs	r1, #20
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	2218      	movs	r2, #24
 8002dfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2202      	movs	r2, #2
 8002e00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	2206      	movs	r2, #6
 8002e12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e18:	0019      	movs	r1, r3
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	f001 ff7c 	bl	8004d18 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel2;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_UART_MspInit+0x154>)
 8002e24:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e28:	220d      	movs	r2, #13
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f001 fd1b 	bl	8004894 <HAL_DMA_Init>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8002e62:	f7ff feeb 	bl	8002c3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart5_rx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e6a:	675a      	str	r2, [r3, #116]	; 0x74
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 3, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2103      	movs	r1, #3
 8002e76:	200e      	movs	r0, #14
 8002e78:	f001 fae8 	bl	800444c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002e7c:	200e      	movs	r0, #14
 8002e7e:	f001 fafa 	bl	8004476 <HAL_NVIC_EnableIRQ>
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b00b      	add	sp, #44	; 0x2c
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40005000 	.word	0x40005000
 8002e98:	50000400 	.word	0x50000400
 8002e9c:	20000394 	.word	0x20000394
 8002ea0:	4002001c 	.word	0x4002001c

08002ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <NMI_Handler+0x4>

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <HardFault_Handler+0x4>

08002eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb4:	f001 fa02 	bl	80042bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002eb8:	f007 f802 	bl	8009ec0 <xTaskGetSchedulerState>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ec2:	f007 fcd1 	bl	800a868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f001 fe43 	bl	8004b5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000394 	.word	0x20000394

08002ee4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <USART4_5_IRQHandler+0x14>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f004 f846 	bl	8006f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	2000030c 	.word	0x2000030c

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_kill>:

int _kill(int pid, int sig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f12:	f007 fe8b 	bl	800ac2c <__errno>
 8002f16:	0003      	movs	r3, r0
 8002f18:	2216      	movs	r2, #22
 8002f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	425b      	negs	r3, r3
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_exit>:

void _exit (int status)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f30:	2301      	movs	r3, #1
 8002f32:	425a      	negs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ffe5 	bl	8002f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f3e:	e7fe      	b.n	8002f3e <_exit+0x16>

08002f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e00a      	b.n	8002f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f52:	e000      	b.n	8002f56 <_read+0x16>
 8002f54:	bf00      	nop
 8002f56:	0001      	movs	r1, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	60ba      	str	r2, [r7, #8]
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dbf0      	blt.n	8002f52 <_read+0x12>
  }

  return len;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e009      	b.n	8002fa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	60ba      	str	r2, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	0018      	movs	r0, r3
 8002f96:	e000      	b.n	8002f9a <_write+0x20>
 8002f98:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf1      	blt.n	8002f8c <_write+0x12>
  }
  return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b006      	add	sp, #24
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_close>:

int _close(int file)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	425b      	negs	r3, r3
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0192      	lsls	r2, r2, #6
 8002fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_isatty>:

int _isatty(int file)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <_sbrk+0x5c>)
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <_sbrk+0x60>)
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_sbrk+0x64>)
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <_sbrk+0x68>)
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800303c:	f007 fdf6 	bl	800ac2c <__errno>
 8003040:	0003      	movs	r3, r0
 8003042:	220c      	movs	r2, #12
 8003044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003046:	2301      	movs	r3, #1
 8003048:	425b      	negs	r3, r3
 800304a:	e009      	b.n	8003060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	18d2      	adds	r2, r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <_sbrk+0x64>)
 800305c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20005000 	.word	0x20005000
 800306c:	00000400 	.word	0x00000400
 8003070:	200003e4 	.word	0x200003e4
 8003074:	20001e38 	.word	0x20001e38

08003078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003086:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800308a:	490e      	ldr	r1, [pc, #56]	; (80030c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <LoopForever+0xe>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80030a0:	4c0b      	ldr	r4, [pc, #44]	; (80030d0 <LoopForever+0x16>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030ae:	f7ff ffe3 	bl	8003078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b2:	f007 fec3 	bl	800ae3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b6:	f7ff fadd 	bl	8002674 <main>

080030ba <LoopForever>:

LoopForever:
    b LoopForever
 80030ba:	e7fe      	b.n	80030ba <LoopForever>
   ldr   r0, =_estack
 80030bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80030c8:	0800e3d4 	.word	0x0800e3d4
  ldr r2, =_sbss
 80030cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80030d0:	20001e38 	.word	0x20001e38

080030d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC1_COMP_IRQHandler>
	...

080030d8 <bmx160_set_i2c>:
sBmx160Dev_t bmx160_Obmx160_s;

I2C_HandleTypeDef *_pWire;

void bmx160_set_i2c(I2C_HandleTypeDef *pWire)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    _pWire = pWire;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <bmx160_set_i2c+0x18>)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000414 	.word	0x20000414

080030f4 <bmx160_begin>:
    BMX160_INT2_FIFO_FULL_MASK,
    BMX160_INT2_FIFO_WM_MASK
};

bool bmx160_begin()
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
    HAL_I2C_Init(_pWire);
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <bmx160_begin+0x54>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f001 ff89 	bl	8005014 <HAL_I2C_Init>

    if (bmx160_scan() == true){
 8003102:	f000 fc1f 	bl	8003944 <bmx160_scan>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d01a      	beq.n	8003140 <bmx160_begin+0x4c>
        bmx160_softReset();
 800310a:	f000 f81f 	bl	800314c <bmx160_softReset>
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x11);
 800310e:	2111      	movs	r1, #17
 8003110:	207e      	movs	r0, #126	; 0x7e
 8003112:	f000 fb6d 	bl	80037f0 <bmx160_writeBmxReg>
        osDelay(50);
 8003116:	2032      	movs	r0, #50	; 0x32
 8003118:	f005 fa0c 	bl	8008534 <osDelay>
        /* Set gyro to normal mode */
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x15);
 800311c:	2115      	movs	r1, #21
 800311e:	207e      	movs	r0, #126	; 0x7e
 8003120:	f000 fb66 	bl	80037f0 <bmx160_writeBmxReg>
        osDelay(100);
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	f005 fa05 	bl	8008534 <osDelay>
        /* Set mag to normal mode */
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x19);
 800312a:	2119      	movs	r1, #25
 800312c:	207e      	movs	r0, #126	; 0x7e
 800312e:	f000 fb5f 	bl	80037f0 <bmx160_writeBmxReg>
        osDelay(10);
 8003132:	200a      	movs	r0, #10
 8003134:	f005 f9fe 	bl	8008534 <osDelay>
        bmx160_setMagnConf();
 8003138:	f000 f88d 	bl	8003256 <bmx160_setMagnConf>
        return true;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <bmx160_begin+0x4e>
    }
    else
        return false;
 8003140:	2300      	movs	r3, #0
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000414 	.word	0x20000414

0800314c <bmx160_softReset>:
    bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x19);
    osDelay(100);
}

bool bmx160_softReset()
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
  int8_t rslt = BMX160_OK;
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
  rslt = bmx160__softReset(&bmx160_Obmx160_s);
 8003158:	1dfc      	adds	r4, r7, #7
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <bmx160_softReset+0x34>)
 800315c:	0018      	movs	r0, r3
 800315e:	f000 f811 	bl	8003184 <bmx160__softReset>
 8003162:	0003      	movs	r3, r0
 8003164:	7023      	strb	r3, [r4, #0]
  if (rslt == 0)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b25b      	sxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <bmx160_softReset+0x28>
    return true;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <bmx160_softReset+0x2a>
  else
    return false;
 8003174:	2300      	movs	r3, #0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b003      	add	sp, #12
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	200003e8 	.word	0x200003e8

08003184 <bmx160__softReset>:

int8_t bmx160__softReset(sBmx160Dev_t *dev)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMX160_OK;
 800318c:	210f      	movs	r1, #15
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
  uint8_t data = BMX160_SOFT_RESET_CMD;
 8003194:	230e      	movs	r3, #14
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	22b6      	movs	r2, #182	; 0xb6
 800319a:	701a      	strb	r2, [r3, #0]
  if (dev == NULL){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <bmx160__softReset+0x24>
    rslt = BMX160_E_NULL_PTR;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	701a      	strb	r2, [r3, #0]
  }
  bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, data);
 80031a8:	230e      	movs	r3, #14
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	0019      	movs	r1, r3
 80031b0:	207e      	movs	r0, #126	; 0x7e
 80031b2:	f000 fb1d 	bl	80037f0 <bmx160_writeBmxReg>
  osDelay(BMX160_SOFT_RESET_DELAY_MS);
 80031b6:	200f      	movs	r0, #15
 80031b8:	f005 f9bc 	bl	8008534 <osDelay>
  if (rslt == BMX160_OK){
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b25b      	sxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <bmx160__softReset+0x4c>
    bmx160_defaultParamSettg(dev);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f808 	bl	80031e0 <bmx160_defaultParamSettg>
  }  
  return rslt;
 80031d0:	230f      	movs	r3, #15
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b25b      	sxtb	r3, r3
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}

080031e0 <bmx160_defaultParamSettg>:

void bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = BMX160_GYRO_BW_NORMAL_MODE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = BMX160_GYRO_ODR_100HZ;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = BMX160_GYRO_SUSPEND_MODE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2214      	movs	r2, #20
 80031f8:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = BMX160_GYRO_RANGE_2000_DPS;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = BMX160_ACCEL_BW_NORMAL_AVG4;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = BMX160_ACCEL_ODR_100HZ;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = BMX160_ACCEL_SUSPEND_MODE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2210      	movs	r2, #16
 8003210:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = BMX160_ACCEL_RANGE_2G;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	739a      	strb	r2, [r3, #14]
  

  dev->prevMagnCfg = dev->magnCfg;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	0010      	movs	r0, r2
 8003220:	3304      	adds	r3, #4
 8003222:	2204      	movs	r2, #4
 8003224:	0019      	movs	r1, r3
 8003226:	f007 fe30 	bl	800ae8a <memcpy>
  dev->prevGyroCfg = dev->gyroCfg;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3218      	adds	r2, #24
 8003230:	0010      	movs	r0, r2
 8003232:	3314      	adds	r3, #20
 8003234:	2204      	movs	r2, #4
 8003236:	0019      	movs	r1, r3
 8003238:	f007 fe27 	bl	800ae8a <memcpy>
  dev->prevAccelCfg = dev->accelCfg;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3210      	adds	r2, #16
 8003242:	0010      	movs	r0, r2
 8003244:	330c      	adds	r3, #12
 8003246:	2204      	movs	r2, #4
 8003248:	0019      	movs	r1, r3
 800324a:	f007 fe1e 	bl	800ae8a <memcpy>
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}

08003256 <bmx160_setMagnConf>:

void bmx160_setMagnConf()
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0
    bmx160_writeBmxReg(BMX160_MAGN_IF_0_ADDR, 0x80);
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	204c      	movs	r0, #76	; 0x4c
 800325e:	f000 fac7 	bl	80037f0 <bmx160_writeBmxReg>
    osDelay(50);
 8003262:	2032      	movs	r0, #50	; 0x32
 8003264:	f005 f966 	bl	8008534 <osDelay>
    // Sleep mode
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x01);
 8003268:	2101      	movs	r1, #1
 800326a:	204f      	movs	r0, #79	; 0x4f
 800326c:	f000 fac0 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x4B);
 8003270:	214b      	movs	r1, #75	; 0x4b
 8003272:	204e      	movs	r0, #78	; 0x4e
 8003274:	f000 fabc 	bl	80037f0 <bmx160_writeBmxReg>
    // REPXY regular preset
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x04);
 8003278:	2104      	movs	r1, #4
 800327a:	204f      	movs	r0, #79	; 0x4f
 800327c:	f000 fab8 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x51);
 8003280:	2151      	movs	r1, #81	; 0x51
 8003282:	204e      	movs	r0, #78	; 0x4e
 8003284:	f000 fab4 	bl	80037f0 <bmx160_writeBmxReg>
    // REPZ regular preset
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x0E);
 8003288:	210e      	movs	r1, #14
 800328a:	204f      	movs	r0, #79	; 0x4f
 800328c:	f000 fab0 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x52);
 8003290:	2152      	movs	r1, #82	; 0x52
 8003292:	204e      	movs	r0, #78	; 0x4e
 8003294:	f000 faac 	bl	80037f0 <bmx160_writeBmxReg>
    
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x02);
 8003298:	2102      	movs	r1, #2
 800329a:	204f      	movs	r0, #79	; 0x4f
 800329c:	f000 faa8 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x4C);
 80032a0:	214c      	movs	r1, #76	; 0x4c
 80032a2:	204e      	movs	r0, #78	; 0x4e
 80032a4:	f000 faa4 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_1_ADDR, 0x42);
 80032a8:	2142      	movs	r1, #66	; 0x42
 80032aa:	204d      	movs	r0, #77	; 0x4d
 80032ac:	f000 faa0 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_CONFIG_ADDR, 0x08);
 80032b0:	2108      	movs	r1, #8
 80032b2:	2044      	movs	r0, #68	; 0x44
 80032b4:	f000 fa9c 	bl	80037f0 <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_0_ADDR, 0x03);
 80032b8:	2103      	movs	r1, #3
 80032ba:	204c      	movs	r0, #76	; 0x4c
 80032bc:	f000 fa98 	bl	80037f0 <bmx160_writeBmxReg>
    osDelay(50);
 80032c0:	2032      	movs	r0, #50	; 0x32
 80032c2:	f005 f937 	bl	8008534 <osDelay>
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <bmx160_getAllData>:
            BMX160_ACCEL_RANGE_CONST = BMX160_ACCEL_MG_LSB_2G * 10;
            break;
    }
}

void bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b08d      	sub	sp, #52	; 0x34
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

    uint8_t data[23];
    memset(data, 0, sizeof(data));
 80032d8:	2410      	movs	r4, #16
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2217      	movs	r2, #23
 80032de:	2100      	movs	r1, #0
 80032e0:	0018      	movs	r0, r3
 80032e2:	f007 fddb 	bl	800ae9c <memset>
    int16_t x = 0;
 80032e6:	252e      	movs	r5, #46	; 0x2e
 80032e8:	197b      	adds	r3, r7, r5
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
    int16_t y = 0;
 80032ee:	262c      	movs	r6, #44	; 0x2c
 80032f0:	19bb      	adds	r3, r7, r6
 80032f2:	2200      	movs	r2, #0
 80032f4:	801a      	strh	r2, [r3, #0]
    int16_t z = 0;
 80032f6:	232a      	movs	r3, #42	; 0x2a
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	801a      	strh	r2, [r3, #0]
    // put your main code here, to run repeatedly:
    bmx160_readReg(BMX160_MAG_DATA_ADDR, data, 23);
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2217      	movs	r2, #23
 8003302:	0019      	movs	r1, r3
 8003304:	2004      	movs	r0, #4
 8003306:	f000 faf3 	bl	80038f0 <bmx160_readReg>
    if(magn){
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d100      	bne.n	8003312 <bmx160_getAllData+0x46>
 8003310:	e0c3      	b.n	800349a <bmx160_getAllData+0x1ce>
        x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 8003312:	0020      	movs	r0, r4
 8003314:	183b      	adds	r3, r7, r0
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	b219      	sxth	r1, r3
 800331c:	183b      	adds	r3, r7, r0
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b21a      	sxth	r2, r3
 8003322:	002c      	movs	r4, r5
 8003324:	193b      	adds	r3, r7, r4
 8003326:	430a      	orrs	r2, r1
 8003328:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 800332a:	183b      	adds	r3, r7, r0
 800332c:	78db      	ldrb	r3, [r3, #3]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b219      	sxth	r1, r3
 8003332:	183b      	adds	r3, r7, r0
 8003334:	789b      	ldrb	r3, [r3, #2]
 8003336:	b21a      	sxth	r2, r3
 8003338:	0035      	movs	r5, r6
 800333a:	197b      	adds	r3, r7, r5
 800333c:	430a      	orrs	r2, r1
 800333e:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 8003340:	183b      	adds	r3, r7, r0
 8003342:	795b      	ldrb	r3, [r3, #5]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b219      	sxth	r1, r3
 8003348:	183b      	adds	r3, r7, r0
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	b21a      	sxth	r2, r3
 800334e:	262a      	movs	r6, #42	; 0x2a
 8003350:	19bb      	adds	r3, r7, r6
 8003352:	430a      	orrs	r2, r1
 8003354:	801a      	strh	r2, [r3, #0]
        magn->x = x * BMX160_MAGN_UT_LSB;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2200      	movs	r2, #0
 800335a:	5e9b      	ldrsh	r3, [r3, r2]
 800335c:	0018      	movs	r0, r3
 800335e:	f7fd fae3 	bl	8000928 <__aeabi_i2f>
 8003362:	1c03      	adds	r3, r0, #0
 8003364:	49fd      	ldr	r1, [pc, #1012]	; (800375c <bmx160_getAllData+0x490>)
 8003366:	1c18      	adds	r0, r3, #0
 8003368:	f7fd f9b8 	bl	80006dc <__aeabi_fmul>
 800336c:	1c03      	adds	r3, r0, #0
 800336e:	1c1a      	adds	r2, r3, #0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	21ff      	movs	r1, #255	; 0xff
 8003374:	4011      	ands	r1, r2
 8003376:	000c      	movs	r4, r1
 8003378:	7819      	ldrb	r1, [r3, #0]
 800337a:	2000      	movs	r0, #0
 800337c:	4001      	ands	r1, r0
 800337e:	1c08      	adds	r0, r1, #0
 8003380:	1c21      	adds	r1, r4, #0
 8003382:	4301      	orrs	r1, r0
 8003384:	7019      	strb	r1, [r3, #0]
 8003386:	0a11      	lsrs	r1, r2, #8
 8003388:	20ff      	movs	r0, #255	; 0xff
 800338a:	4001      	ands	r1, r0
 800338c:	000c      	movs	r4, r1
 800338e:	7859      	ldrb	r1, [r3, #1]
 8003390:	2000      	movs	r0, #0
 8003392:	4001      	ands	r1, r0
 8003394:	1c08      	adds	r0, r1, #0
 8003396:	1c21      	adds	r1, r4, #0
 8003398:	4301      	orrs	r1, r0
 800339a:	7059      	strb	r1, [r3, #1]
 800339c:	0c11      	lsrs	r1, r2, #16
 800339e:	20ff      	movs	r0, #255	; 0xff
 80033a0:	4001      	ands	r1, r0
 80033a2:	000c      	movs	r4, r1
 80033a4:	7899      	ldrb	r1, [r3, #2]
 80033a6:	2000      	movs	r0, #0
 80033a8:	4001      	ands	r1, r0
 80033aa:	1c08      	adds	r0, r1, #0
 80033ac:	1c21      	adds	r1, r4, #0
 80033ae:	4301      	orrs	r1, r0
 80033b0:	7099      	strb	r1, [r3, #2]
 80033b2:	0e10      	lsrs	r0, r2, #24
 80033b4:	78da      	ldrb	r2, [r3, #3]
 80033b6:	2100      	movs	r1, #0
 80033b8:	400a      	ands	r2, r1
 80033ba:	1c11      	adds	r1, r2, #0
 80033bc:	1c02      	adds	r2, r0, #0
 80033be:	430a      	orrs	r2, r1
 80033c0:	70da      	strb	r2, [r3, #3]
        magn->y = y * BMX160_MAGN_UT_LSB;
 80033c2:	197b      	adds	r3, r7, r5
 80033c4:	2200      	movs	r2, #0
 80033c6:	5e9b      	ldrsh	r3, [r3, r2]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd faad 	bl	8000928 <__aeabi_i2f>
 80033ce:	1c03      	adds	r3, r0, #0
 80033d0:	49e2      	ldr	r1, [pc, #904]	; (800375c <bmx160_getAllData+0x490>)
 80033d2:	1c18      	adds	r0, r3, #0
 80033d4:	f7fd f982 	bl	80006dc <__aeabi_fmul>
 80033d8:	1c03      	adds	r3, r0, #0
 80033da:	1c1a      	adds	r2, r3, #0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	21ff      	movs	r1, #255	; 0xff
 80033e0:	4011      	ands	r1, r2
 80033e2:	000c      	movs	r4, r1
 80033e4:	7919      	ldrb	r1, [r3, #4]
 80033e6:	2000      	movs	r0, #0
 80033e8:	4001      	ands	r1, r0
 80033ea:	1c08      	adds	r0, r1, #0
 80033ec:	1c21      	adds	r1, r4, #0
 80033ee:	4301      	orrs	r1, r0
 80033f0:	7119      	strb	r1, [r3, #4]
 80033f2:	0a11      	lsrs	r1, r2, #8
 80033f4:	20ff      	movs	r0, #255	; 0xff
 80033f6:	4001      	ands	r1, r0
 80033f8:	000c      	movs	r4, r1
 80033fa:	7959      	ldrb	r1, [r3, #5]
 80033fc:	2000      	movs	r0, #0
 80033fe:	4001      	ands	r1, r0
 8003400:	1c08      	adds	r0, r1, #0
 8003402:	1c21      	adds	r1, r4, #0
 8003404:	4301      	orrs	r1, r0
 8003406:	7159      	strb	r1, [r3, #5]
 8003408:	0c11      	lsrs	r1, r2, #16
 800340a:	20ff      	movs	r0, #255	; 0xff
 800340c:	4001      	ands	r1, r0
 800340e:	000c      	movs	r4, r1
 8003410:	7999      	ldrb	r1, [r3, #6]
 8003412:	2000      	movs	r0, #0
 8003414:	4001      	ands	r1, r0
 8003416:	1c08      	adds	r0, r1, #0
 8003418:	1c21      	adds	r1, r4, #0
 800341a:	4301      	orrs	r1, r0
 800341c:	7199      	strb	r1, [r3, #6]
 800341e:	0e10      	lsrs	r0, r2, #24
 8003420:	79da      	ldrb	r2, [r3, #7]
 8003422:	2100      	movs	r1, #0
 8003424:	400a      	ands	r2, r1
 8003426:	1c11      	adds	r1, r2, #0
 8003428:	1c02      	adds	r2, r0, #0
 800342a:	430a      	orrs	r2, r1
 800342c:	71da      	strb	r2, [r3, #7]
        magn->z = z * BMX160_MAGN_UT_LSB;
 800342e:	19bb      	adds	r3, r7, r6
 8003430:	2200      	movs	r2, #0
 8003432:	5e9b      	ldrsh	r3, [r3, r2]
 8003434:	0018      	movs	r0, r3
 8003436:	f7fd fa77 	bl	8000928 <__aeabi_i2f>
 800343a:	1c03      	adds	r3, r0, #0
 800343c:	49c7      	ldr	r1, [pc, #796]	; (800375c <bmx160_getAllData+0x490>)
 800343e:	1c18      	adds	r0, r3, #0
 8003440:	f7fd f94c 	bl	80006dc <__aeabi_fmul>
 8003444:	1c03      	adds	r3, r0, #0
 8003446:	1c1a      	adds	r2, r3, #0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	21ff      	movs	r1, #255	; 0xff
 800344c:	4011      	ands	r1, r2
 800344e:	000c      	movs	r4, r1
 8003450:	7a19      	ldrb	r1, [r3, #8]
 8003452:	2000      	movs	r0, #0
 8003454:	4001      	ands	r1, r0
 8003456:	1c08      	adds	r0, r1, #0
 8003458:	1c21      	adds	r1, r4, #0
 800345a:	4301      	orrs	r1, r0
 800345c:	7219      	strb	r1, [r3, #8]
 800345e:	0a11      	lsrs	r1, r2, #8
 8003460:	20ff      	movs	r0, #255	; 0xff
 8003462:	4001      	ands	r1, r0
 8003464:	000c      	movs	r4, r1
 8003466:	7a59      	ldrb	r1, [r3, #9]
 8003468:	2000      	movs	r0, #0
 800346a:	4001      	ands	r1, r0
 800346c:	1c08      	adds	r0, r1, #0
 800346e:	1c21      	adds	r1, r4, #0
 8003470:	4301      	orrs	r1, r0
 8003472:	7259      	strb	r1, [r3, #9]
 8003474:	0c11      	lsrs	r1, r2, #16
 8003476:	20ff      	movs	r0, #255	; 0xff
 8003478:	4001      	ands	r1, r0
 800347a:	000c      	movs	r4, r1
 800347c:	7a99      	ldrb	r1, [r3, #10]
 800347e:	2000      	movs	r0, #0
 8003480:	4001      	ands	r1, r0
 8003482:	1c08      	adds	r0, r1, #0
 8003484:	1c21      	adds	r1, r4, #0
 8003486:	4301      	orrs	r1, r0
 8003488:	7299      	strb	r1, [r3, #10]
 800348a:	0e10      	lsrs	r0, r2, #24
 800348c:	7ada      	ldrb	r2, [r3, #11]
 800348e:	2100      	movs	r1, #0
 8003490:	400a      	ands	r2, r1
 8003492:	1c11      	adds	r1, r2, #0
 8003494:	1c02      	adds	r2, r0, #0
 8003496:	430a      	orrs	r2, r1
 8003498:	72da      	strb	r2, [r3, #11]
    }
    if(gyro){
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d100      	bne.n	80034a2 <bmx160_getAllData+0x1d6>
 80034a0:	e0c9      	b.n	8003636 <bmx160_getAllData+0x36a>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 80034a2:	2010      	movs	r0, #16
 80034a4:	183b      	adds	r3, r7, r0
 80034a6:	7a5b      	ldrb	r3, [r3, #9]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	b219      	sxth	r1, r3
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	7a1b      	ldrb	r3, [r3, #8]
 80034b0:	b21a      	sxth	r2, r3
 80034b2:	242e      	movs	r4, #46	; 0x2e
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	430a      	orrs	r2, r1
 80034b8:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	7adb      	ldrb	r3, [r3, #11]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b219      	sxth	r1, r3
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	7a9b      	ldrb	r3, [r3, #10]
 80034c6:	b21a      	sxth	r2, r3
 80034c8:	252c      	movs	r5, #44	; 0x2c
 80034ca:	197b      	adds	r3, r7, r5
 80034cc:	430a      	orrs	r2, r1
 80034ce:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	7b5b      	ldrb	r3, [r3, #13]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	b219      	sxth	r1, r3
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	7b1b      	ldrb	r3, [r3, #12]
 80034dc:	b21a      	sxth	r2, r3
 80034de:	262a      	movs	r6, #42	; 0x2a
 80034e0:	19bb      	adds	r3, r7, r6
 80034e2:	430a      	orrs	r2, r1
 80034e4:	801a      	strh	r2, [r3, #0]
        gyro->x = x * BMX160_GYRO_RANGE_CONST;
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2200      	movs	r2, #0
 80034ea:	5e9b      	ldrsh	r3, [r3, r2]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fd fa1b 	bl	8000928 <__aeabi_i2f>
 80034f2:	1c02      	adds	r2, r0, #0
 80034f4:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <bmx160_getAllData+0x494>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c19      	adds	r1, r3, #0
 80034fa:	1c10      	adds	r0, r2, #0
 80034fc:	f7fd f8ee 	bl	80006dc <__aeabi_fmul>
 8003500:	1c03      	adds	r3, r0, #0
 8003502:	1c1a      	adds	r2, r3, #0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	21ff      	movs	r1, #255	; 0xff
 8003508:	4011      	ands	r1, r2
 800350a:	000c      	movs	r4, r1
 800350c:	7819      	ldrb	r1, [r3, #0]
 800350e:	2000      	movs	r0, #0
 8003510:	4001      	ands	r1, r0
 8003512:	1c08      	adds	r0, r1, #0
 8003514:	1c21      	adds	r1, r4, #0
 8003516:	4301      	orrs	r1, r0
 8003518:	7019      	strb	r1, [r3, #0]
 800351a:	0a11      	lsrs	r1, r2, #8
 800351c:	20ff      	movs	r0, #255	; 0xff
 800351e:	4001      	ands	r1, r0
 8003520:	000c      	movs	r4, r1
 8003522:	7859      	ldrb	r1, [r3, #1]
 8003524:	2000      	movs	r0, #0
 8003526:	4001      	ands	r1, r0
 8003528:	1c08      	adds	r0, r1, #0
 800352a:	1c21      	adds	r1, r4, #0
 800352c:	4301      	orrs	r1, r0
 800352e:	7059      	strb	r1, [r3, #1]
 8003530:	0c11      	lsrs	r1, r2, #16
 8003532:	20ff      	movs	r0, #255	; 0xff
 8003534:	4001      	ands	r1, r0
 8003536:	000c      	movs	r4, r1
 8003538:	7899      	ldrb	r1, [r3, #2]
 800353a:	2000      	movs	r0, #0
 800353c:	4001      	ands	r1, r0
 800353e:	1c08      	adds	r0, r1, #0
 8003540:	1c21      	adds	r1, r4, #0
 8003542:	4301      	orrs	r1, r0
 8003544:	7099      	strb	r1, [r3, #2]
 8003546:	0e10      	lsrs	r0, r2, #24
 8003548:	78da      	ldrb	r2, [r3, #3]
 800354a:	2100      	movs	r1, #0
 800354c:	400a      	ands	r2, r1
 800354e:	1c11      	adds	r1, r2, #0
 8003550:	1c02      	adds	r2, r0, #0
 8003552:	430a      	orrs	r2, r1
 8003554:	70da      	strb	r2, [r3, #3]
        gyro->y = y * BMX160_GYRO_RANGE_CONST;
 8003556:	197b      	adds	r3, r7, r5
 8003558:	2200      	movs	r2, #0
 800355a:	5e9b      	ldrsh	r3, [r3, r2]
 800355c:	0018      	movs	r0, r3
 800355e:	f7fd f9e3 	bl	8000928 <__aeabi_i2f>
 8003562:	1c02      	adds	r2, r0, #0
 8003564:	4b7e      	ldr	r3, [pc, #504]	; (8003760 <bmx160_getAllData+0x494>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c19      	adds	r1, r3, #0
 800356a:	1c10      	adds	r0, r2, #0
 800356c:	f7fd f8b6 	bl	80006dc <__aeabi_fmul>
 8003570:	1c03      	adds	r3, r0, #0
 8003572:	1c1a      	adds	r2, r3, #0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	21ff      	movs	r1, #255	; 0xff
 8003578:	4011      	ands	r1, r2
 800357a:	000c      	movs	r4, r1
 800357c:	7919      	ldrb	r1, [r3, #4]
 800357e:	2000      	movs	r0, #0
 8003580:	4001      	ands	r1, r0
 8003582:	1c08      	adds	r0, r1, #0
 8003584:	1c21      	adds	r1, r4, #0
 8003586:	4301      	orrs	r1, r0
 8003588:	7119      	strb	r1, [r3, #4]
 800358a:	0a11      	lsrs	r1, r2, #8
 800358c:	20ff      	movs	r0, #255	; 0xff
 800358e:	4001      	ands	r1, r0
 8003590:	000c      	movs	r4, r1
 8003592:	7959      	ldrb	r1, [r3, #5]
 8003594:	2000      	movs	r0, #0
 8003596:	4001      	ands	r1, r0
 8003598:	1c08      	adds	r0, r1, #0
 800359a:	1c21      	adds	r1, r4, #0
 800359c:	4301      	orrs	r1, r0
 800359e:	7159      	strb	r1, [r3, #5]
 80035a0:	0c11      	lsrs	r1, r2, #16
 80035a2:	20ff      	movs	r0, #255	; 0xff
 80035a4:	4001      	ands	r1, r0
 80035a6:	000c      	movs	r4, r1
 80035a8:	7999      	ldrb	r1, [r3, #6]
 80035aa:	2000      	movs	r0, #0
 80035ac:	4001      	ands	r1, r0
 80035ae:	1c08      	adds	r0, r1, #0
 80035b0:	1c21      	adds	r1, r4, #0
 80035b2:	4301      	orrs	r1, r0
 80035b4:	7199      	strb	r1, [r3, #6]
 80035b6:	0e10      	lsrs	r0, r2, #24
 80035b8:	79da      	ldrb	r2, [r3, #7]
 80035ba:	2100      	movs	r1, #0
 80035bc:	400a      	ands	r2, r1
 80035be:	1c11      	adds	r1, r2, #0
 80035c0:	1c02      	adds	r2, r0, #0
 80035c2:	430a      	orrs	r2, r1
 80035c4:	71da      	strb	r2, [r3, #7]
        gyro->z = z * BMX160_GYRO_RANGE_CONST;
 80035c6:	19bb      	adds	r3, r7, r6
 80035c8:	2200      	movs	r2, #0
 80035ca:	5e9b      	ldrsh	r3, [r3, r2]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fd f9ab 	bl	8000928 <__aeabi_i2f>
 80035d2:	1c02      	adds	r2, r0, #0
 80035d4:	4b62      	ldr	r3, [pc, #392]	; (8003760 <bmx160_getAllData+0x494>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c19      	adds	r1, r3, #0
 80035da:	1c10      	adds	r0, r2, #0
 80035dc:	f7fd f87e 	bl	80006dc <__aeabi_fmul>
 80035e0:	1c03      	adds	r3, r0, #0
 80035e2:	1c1a      	adds	r2, r3, #0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	21ff      	movs	r1, #255	; 0xff
 80035e8:	4011      	ands	r1, r2
 80035ea:	000c      	movs	r4, r1
 80035ec:	7a19      	ldrb	r1, [r3, #8]
 80035ee:	2000      	movs	r0, #0
 80035f0:	4001      	ands	r1, r0
 80035f2:	1c08      	adds	r0, r1, #0
 80035f4:	1c21      	adds	r1, r4, #0
 80035f6:	4301      	orrs	r1, r0
 80035f8:	7219      	strb	r1, [r3, #8]
 80035fa:	0a11      	lsrs	r1, r2, #8
 80035fc:	20ff      	movs	r0, #255	; 0xff
 80035fe:	4001      	ands	r1, r0
 8003600:	000c      	movs	r4, r1
 8003602:	7a59      	ldrb	r1, [r3, #9]
 8003604:	2000      	movs	r0, #0
 8003606:	4001      	ands	r1, r0
 8003608:	1c08      	adds	r0, r1, #0
 800360a:	1c21      	adds	r1, r4, #0
 800360c:	4301      	orrs	r1, r0
 800360e:	7259      	strb	r1, [r3, #9]
 8003610:	0c11      	lsrs	r1, r2, #16
 8003612:	20ff      	movs	r0, #255	; 0xff
 8003614:	4001      	ands	r1, r0
 8003616:	000c      	movs	r4, r1
 8003618:	7a99      	ldrb	r1, [r3, #10]
 800361a:	2000      	movs	r0, #0
 800361c:	4001      	ands	r1, r0
 800361e:	1c08      	adds	r0, r1, #0
 8003620:	1c21      	adds	r1, r4, #0
 8003622:	4301      	orrs	r1, r0
 8003624:	7299      	strb	r1, [r3, #10]
 8003626:	0e10      	lsrs	r0, r2, #24
 8003628:	7ada      	ldrb	r2, [r3, #11]
 800362a:	2100      	movs	r1, #0
 800362c:	400a      	ands	r2, r1
 800362e:	1c11      	adds	r1, r2, #0
 8003630:	1c02      	adds	r2, r0, #0
 8003632:	430a      	orrs	r2, r1
 8003634:	72da      	strb	r2, [r3, #11]
    }
    if(accel){
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d100      	bne.n	800363e <bmx160_getAllData+0x372>
 800363c:	e0d1      	b.n	80037e2 <bmx160_getAllData+0x516>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 800363e:	2010      	movs	r0, #16
 8003640:	183b      	adds	r3, r7, r0
 8003642:	7bdb      	ldrb	r3, [r3, #15]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	b219      	sxth	r1, r3
 8003648:	183b      	adds	r3, r7, r0
 800364a:	7b9b      	ldrb	r3, [r3, #14]
 800364c:	b21a      	sxth	r2, r3
 800364e:	242e      	movs	r4, #46	; 0x2e
 8003650:	193b      	adds	r3, r7, r4
 8003652:	430a      	orrs	r2, r1
 8003654:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 8003656:	183b      	adds	r3, r7, r0
 8003658:	7c5b      	ldrb	r3, [r3, #17]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	b219      	sxth	r1, r3
 800365e:	183b      	adds	r3, r7, r0
 8003660:	7c1b      	ldrb	r3, [r3, #16]
 8003662:	b21a      	sxth	r2, r3
 8003664:	252c      	movs	r5, #44	; 0x2c
 8003666:	197b      	adds	r3, r7, r5
 8003668:	430a      	orrs	r2, r1
 800366a:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 800366c:	183b      	adds	r3, r7, r0
 800366e:	7cdb      	ldrb	r3, [r3, #19]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b219      	sxth	r1, r3
 8003674:	183b      	adds	r3, r7, r0
 8003676:	7c9b      	ldrb	r3, [r3, #18]
 8003678:	b21a      	sxth	r2, r3
 800367a:	262a      	movs	r6, #42	; 0x2a
 800367c:	19bb      	adds	r3, r7, r6
 800367e:	430a      	orrs	r2, r1
 8003680:	801a      	strh	r2, [r3, #0]
        accel->x = x * BMX160_ACCEL_RANGE_CONST;
 8003682:	193b      	adds	r3, r7, r4
 8003684:	2200      	movs	r2, #0
 8003686:	5e9b      	ldrsh	r3, [r3, r2]
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd f94d 	bl	8000928 <__aeabi_i2f>
 800368e:	1c02      	adds	r2, r0, #0
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <bmx160_getAllData+0x498>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1c19      	adds	r1, r3, #0
 8003696:	1c10      	adds	r0, r2, #0
 8003698:	f7fd f820 	bl	80006dc <__aeabi_fmul>
 800369c:	1c03      	adds	r3, r0, #0
 800369e:	1c1a      	adds	r2, r3, #0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	21ff      	movs	r1, #255	; 0xff
 80036a4:	4011      	ands	r1, r2
 80036a6:	000c      	movs	r4, r1
 80036a8:	7819      	ldrb	r1, [r3, #0]
 80036aa:	2000      	movs	r0, #0
 80036ac:	4001      	ands	r1, r0
 80036ae:	1c08      	adds	r0, r1, #0
 80036b0:	1c21      	adds	r1, r4, #0
 80036b2:	4301      	orrs	r1, r0
 80036b4:	7019      	strb	r1, [r3, #0]
 80036b6:	0a11      	lsrs	r1, r2, #8
 80036b8:	20ff      	movs	r0, #255	; 0xff
 80036ba:	4001      	ands	r1, r0
 80036bc:	000c      	movs	r4, r1
 80036be:	7859      	ldrb	r1, [r3, #1]
 80036c0:	2000      	movs	r0, #0
 80036c2:	4001      	ands	r1, r0
 80036c4:	1c08      	adds	r0, r1, #0
 80036c6:	1c21      	adds	r1, r4, #0
 80036c8:	4301      	orrs	r1, r0
 80036ca:	7059      	strb	r1, [r3, #1]
 80036cc:	0c11      	lsrs	r1, r2, #16
 80036ce:	20ff      	movs	r0, #255	; 0xff
 80036d0:	4001      	ands	r1, r0
 80036d2:	000c      	movs	r4, r1
 80036d4:	7899      	ldrb	r1, [r3, #2]
 80036d6:	2000      	movs	r0, #0
 80036d8:	4001      	ands	r1, r0
 80036da:	1c08      	adds	r0, r1, #0
 80036dc:	1c21      	adds	r1, r4, #0
 80036de:	4301      	orrs	r1, r0
 80036e0:	7099      	strb	r1, [r3, #2]
 80036e2:	0e10      	lsrs	r0, r2, #24
 80036e4:	78da      	ldrb	r2, [r3, #3]
 80036e6:	2100      	movs	r1, #0
 80036e8:	400a      	ands	r2, r1
 80036ea:	1c11      	adds	r1, r2, #0
 80036ec:	1c02      	adds	r2, r0, #0
 80036ee:	430a      	orrs	r2, r1
 80036f0:	70da      	strb	r2, [r3, #3]
        accel->y = y * BMX160_ACCEL_RANGE_CONST;
 80036f2:	197b      	adds	r3, r7, r5
 80036f4:	2200      	movs	r2, #0
 80036f6:	5e9b      	ldrsh	r3, [r3, r2]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fd f915 	bl	8000928 <__aeabi_i2f>
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <bmx160_getAllData+0x498>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1c19      	adds	r1, r3, #0
 8003706:	1c10      	adds	r0, r2, #0
 8003708:	f7fc ffe8 	bl	80006dc <__aeabi_fmul>
 800370c:	1c03      	adds	r3, r0, #0
 800370e:	1c1a      	adds	r2, r3, #0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	21ff      	movs	r1, #255	; 0xff
 8003714:	4011      	ands	r1, r2
 8003716:	000c      	movs	r4, r1
 8003718:	7919      	ldrb	r1, [r3, #4]
 800371a:	2000      	movs	r0, #0
 800371c:	4001      	ands	r1, r0
 800371e:	1c08      	adds	r0, r1, #0
 8003720:	1c21      	adds	r1, r4, #0
 8003722:	4301      	orrs	r1, r0
 8003724:	7119      	strb	r1, [r3, #4]
 8003726:	0a11      	lsrs	r1, r2, #8
 8003728:	20ff      	movs	r0, #255	; 0xff
 800372a:	4001      	ands	r1, r0
 800372c:	000c      	movs	r4, r1
 800372e:	7959      	ldrb	r1, [r3, #5]
 8003730:	2000      	movs	r0, #0
 8003732:	4001      	ands	r1, r0
 8003734:	1c08      	adds	r0, r1, #0
 8003736:	1c21      	adds	r1, r4, #0
 8003738:	4301      	orrs	r1, r0
 800373a:	7159      	strb	r1, [r3, #5]
 800373c:	0c11      	lsrs	r1, r2, #16
 800373e:	20ff      	movs	r0, #255	; 0xff
 8003740:	4001      	ands	r1, r0
 8003742:	000c      	movs	r4, r1
 8003744:	7999      	ldrb	r1, [r3, #6]
 8003746:	2000      	movs	r0, #0
 8003748:	4001      	ands	r1, r0
 800374a:	1c08      	adds	r0, r1, #0
 800374c:	1c21      	adds	r1, r4, #0
 800374e:	4301      	orrs	r1, r0
 8003750:	7199      	strb	r1, [r3, #6]
 8003752:	0e10      	lsrs	r0, r2, #24
 8003754:	79da      	ldrb	r2, [r3, #7]
 8003756:	2100      	movs	r1, #0
 8003758:	e006      	b.n	8003768 <bmx160_getAllData+0x49c>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	3e99999a 	.word	0x3e99999a
 8003760:	20000008 	.word	0x20000008
 8003764:	20000004 	.word	0x20000004
 8003768:	400a      	ands	r2, r1
 800376a:	1c11      	adds	r1, r2, #0
 800376c:	1c02      	adds	r2, r0, #0
 800376e:	430a      	orrs	r2, r1
 8003770:	71da      	strb	r2, [r3, #7]
        accel->z = z * BMX160_ACCEL_RANGE_CONST;
 8003772:	19bb      	adds	r3, r7, r6
 8003774:	2200      	movs	r2, #0
 8003776:	5e9b      	ldrsh	r3, [r3, r2]
 8003778:	0018      	movs	r0, r3
 800377a:	f7fd f8d5 	bl	8000928 <__aeabi_i2f>
 800377e:	1c02      	adds	r2, r0, #0
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <bmx160_getAllData+0x520>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	1c19      	adds	r1, r3, #0
 8003786:	1c10      	adds	r0, r2, #0
 8003788:	f7fc ffa8 	bl	80006dc <__aeabi_fmul>
 800378c:	1c03      	adds	r3, r0, #0
 800378e:	1c1a      	adds	r2, r3, #0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	21ff      	movs	r1, #255	; 0xff
 8003794:	4011      	ands	r1, r2
 8003796:	000c      	movs	r4, r1
 8003798:	7a19      	ldrb	r1, [r3, #8]
 800379a:	2000      	movs	r0, #0
 800379c:	4001      	ands	r1, r0
 800379e:	1c08      	adds	r0, r1, #0
 80037a0:	1c21      	adds	r1, r4, #0
 80037a2:	4301      	orrs	r1, r0
 80037a4:	7219      	strb	r1, [r3, #8]
 80037a6:	0a11      	lsrs	r1, r2, #8
 80037a8:	20ff      	movs	r0, #255	; 0xff
 80037aa:	4001      	ands	r1, r0
 80037ac:	000c      	movs	r4, r1
 80037ae:	7a59      	ldrb	r1, [r3, #9]
 80037b0:	2000      	movs	r0, #0
 80037b2:	4001      	ands	r1, r0
 80037b4:	1c08      	adds	r0, r1, #0
 80037b6:	1c21      	adds	r1, r4, #0
 80037b8:	4301      	orrs	r1, r0
 80037ba:	7259      	strb	r1, [r3, #9]
 80037bc:	0c11      	lsrs	r1, r2, #16
 80037be:	20ff      	movs	r0, #255	; 0xff
 80037c0:	4001      	ands	r1, r0
 80037c2:	000c      	movs	r4, r1
 80037c4:	7a99      	ldrb	r1, [r3, #10]
 80037c6:	2000      	movs	r0, #0
 80037c8:	4001      	ands	r1, r0
 80037ca:	1c08      	adds	r0, r1, #0
 80037cc:	1c21      	adds	r1, r4, #0
 80037ce:	4301      	orrs	r1, r0
 80037d0:	7299      	strb	r1, [r3, #10]
 80037d2:	0e10      	lsrs	r0, r2, #24
 80037d4:	7ada      	ldrb	r2, [r3, #11]
 80037d6:	2100      	movs	r1, #0
 80037d8:	400a      	ands	r2, r1
 80037da:	1c11      	adds	r1, r2, #0
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	430a      	orrs	r2, r1
 80037e0:	72da      	strb	r2, [r3, #11]
    }
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00d      	add	sp, #52	; 0x34
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	20000004 	.word	0x20000004

080037f0 <bmx160_writeBmxReg>:

void bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	0002      	movs	r2, r0
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	1c0a      	adds	r2, r1, #0
 8003800:	701a      	strb	r2, [r3, #0]
    bmx160_writeReg(reg, &value, 1);
 8003802:	1db9      	adds	r1, r7, #6
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	0018      	movs	r0, r3
 800380c:	f000 f804 	bl	8003818 <bmx160_writeReg>
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <bmx160_writeReg>:

void bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	46c6      	mov	lr, r8
 800381c:	b500      	push	{lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af02      	add	r7, sp, #8
 8003822:	61b9      	str	r1, [r7, #24]
 8003824:	0011      	movs	r1, r2
 8003826:	231f      	movs	r3, #31
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	261c      	movs	r6, #28
 8003830:	19bb      	adds	r3, r7, r6
 8003832:	1c0a      	adds	r2, r1, #0
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	466b      	mov	r3, sp
 8003838:	4698      	mov	r8, r3
	uint16_t total_len = len + 1;
 800383a:	2116      	movs	r1, #22
 800383c:	2018      	movs	r0, #24
 800383e:	180a      	adds	r2, r1, r0
 8003840:	19d3      	adds	r3, r2, r7
 8003842:	19ba      	adds	r2, r7, r6
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	3201      	adds	r2, #1
 8003848:	801a      	strh	r2, [r3, #0]
	uint8_t temp[total_len];
 800384a:	180b      	adds	r3, r1, r0
 800384c:	19db      	adds	r3, r3, r7
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	001a      	movs	r2, r3
 8003852:	3a01      	subs	r2, #1
 8003854:	62ba      	str	r2, [r7, #40]	; 0x28
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	2200      	movs	r2, #0
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	68b8      	ldr	r0, [r7, #8]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	0002      	movs	r2, r0
 8003862:	0f52      	lsrs	r2, r2, #29
 8003864:	000e      	movs	r6, r1
 8003866:	00f6      	lsls	r6, r6, #3
 8003868:	617e      	str	r6, [r7, #20]
 800386a:	697e      	ldr	r6, [r7, #20]
 800386c:	4316      	orrs	r6, r2
 800386e:	617e      	str	r6, [r7, #20]
 8003870:	0002      	movs	r2, r0
 8003872:	00d2      	lsls	r2, r2, #3
 8003874:	613a      	str	r2, [r7, #16]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	6838      	ldr	r0, [r7, #0]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	0002      	movs	r2, r0
 8003882:	0f52      	lsrs	r2, r2, #29
 8003884:	000e      	movs	r6, r1
 8003886:	00f5      	lsls	r5, r6, #3
 8003888:	4315      	orrs	r5, r2
 800388a:	0002      	movs	r2, r0
 800388c:	00d4      	lsls	r4, r2, #3
 800388e:	3307      	adds	r3, #7
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	466a      	mov	r2, sp
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	4695      	mov	sp, r2
 800389a:	ab02      	add	r3, sp, #8
 800389c:	3300      	adds	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
	temp[0] = reg;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	211f      	movs	r1, #31
 80038a4:	187a      	adds	r2, r7, r1
 80038a6:	7812      	ldrb	r2, [r2, #0]
 80038a8:	701a      	strb	r2, [r3, #0]
	memcpy(&temp[1], pBuf, len);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	1c58      	adds	r0, r3, #1
 80038ae:	261c      	movs	r6, #28
 80038b0:	19bb      	adds	r3, r7, r6
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	0019      	movs	r1, r3
 80038b8:	f007 fae7 	bl	800ae8a <memcpy>
    HAL_I2C_Master_Transmit(_pWire, BMX160_ADDR, temp, total_len, HAL_MAX_DELAY);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <bmx160_writeReg+0xd4>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	23d0      	movs	r3, #208	; 0xd0
 80038c2:	b299      	uxth	r1, r3
 80038c4:	2316      	movs	r3, #22
 80038c6:	2218      	movs	r2, #24
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	19db      	adds	r3, r3, r7
 80038cc:	881c      	ldrh	r4, [r3, #0]
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	2301      	movs	r3, #1
 80038d2:	425b      	negs	r3, r3
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	0023      	movs	r3, r4
 80038d8:	f001 fc32 	bl	8005140 <HAL_I2C_Master_Transmit>
 80038dc:	46c5      	mov	sp, r8
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b00c      	add	sp, #48	; 0x30
 80038e4:	bc80      	pop	{r7}
 80038e6:	46b8      	mov	r8, r7
 80038e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	20000414 	.word	0x20000414

080038f0 <bmx160_readReg>:

void bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	6039      	str	r1, [r7, #0]
 80038f8:	0011      	movs	r1, r2
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	1c02      	adds	r2, r0, #0
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	1c0a      	adds	r2, r1, #0
 8003904:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_pWire, BMX160_ADDR, &reg, 1, HAL_MAX_DELAY);
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <bmx160_readReg+0x50>)
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	23d0      	movs	r3, #208	; 0xd0
 800390c:	b299      	uxth	r1, r3
 800390e:	1dfa      	adds	r2, r7, #7
 8003910:	2301      	movs	r3, #1
 8003912:	425b      	negs	r3, r3
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2301      	movs	r3, #1
 8003918:	f001 fc12 	bl	8005140 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_pWire, BMX160_ADDR, pBuf, len, HAL_MAX_DELAY);
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <bmx160_readReg+0x50>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	23d0      	movs	r3, #208	; 0xd0
 8003922:	b299      	uxth	r1, r3
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	881c      	ldrh	r4, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	2301      	movs	r3, #1
 800392c:	425b      	negs	r3, r3
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	0023      	movs	r3, r4
 8003932:	f001 fd0d 	bl	8005350 <HAL_I2C_Master_Receive>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b003      	add	sp, #12
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	20000414 	.word	0x20000414

08003944 <bmx160_scan>:

bool bmx160_scan()
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(_pWire, BMX160_ADDR, 100, HAL_MAX_DELAY);
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <bmx160_scan+0x34>)
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	23d0      	movs	r3, #208	; 0xd0
 8003950:	b299      	uxth	r1, r3
 8003952:	1dfc      	adds	r4, r7, #7
 8003954:	2301      	movs	r3, #1
 8003956:	425b      	negs	r3, r3
 8003958:	2264      	movs	r2, #100	; 0x64
 800395a:	f001 fe01 	bl	8005560 <HAL_I2C_IsDeviceReady>
 800395e:	0003      	movs	r3, r0
 8003960:	7023      	strb	r3, [r4, #0]

    if (ret == HAL_OK) {
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <bmx160_scan+0x2a>
    	return true;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <bmx160_scan+0x2c>
    } else {
    	return false;
 800396e:	2300      	movs	r3, #0
    }
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b003      	add	sp, #12
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	20000414 	.word	0x20000414

0800397c <bt_assobio_init>:
osMessageQueueId_t bt_intern_queue_handle;

extern CRC_HandleTypeDef hcrc;

assobio_error_t bt_assobio_init(bt_assobio_stm32_parameters_s *parameter)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    _bt_parameters = parameter;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <bt_assobio_init+0x44>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]

    bt_receive_queue_handle = osMessageQueueNew(BT_QUEUE_SIZE, BT_QUEUE_ITEM_SIZE, NULL);
 800398a:	2200      	movs	r2, #0
 800398c:	2106      	movs	r1, #6
 800398e:	200a      	movs	r0, #10
 8003990:	f004 fdf8 	bl	8008584 <osMessageQueueNew>
 8003994:	0002      	movs	r2, r0
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <bt_assobio_init+0x48>)
 8003998:	601a      	str	r2, [r3, #0]

    if (_bt_parameters == NULL || bt_receive_queue_handle == NULL) {
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <bt_assobio_init+0x44>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <bt_assobio_init+0x2e>
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <bt_assobio_init+0x48>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <bt_assobio_init+0x32>
        return ASSOBIO_NO_PARAMETER;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <bt_assobio_init+0x3c>
    }

    bt_assobio_enable();
 80039ae:	f000 f80b 	bl	80039c8 <bt_assobio_enable>

    /* initiate Bluetooth module */

    /* set default parameters */
    bt_assobio_default_parameters();
 80039b2:	f000 f81b 	bl	80039ec <bt_assobio_default_parameters>

    return ASSOBIO_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000418 	.word	0x20000418
 80039c4:	20000420 	.word	0x20000420

080039c8 <bt_assobio_enable>:

    return ASSOBIO_OK;
}

assobio_error_t bt_assobio_enable()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
    _bt_parameters->en = ASSOBIO_ENABLE;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <bt_assobio_enable+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <bt_assobio_enable+0x20>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]
    bt_assobio_send_cmd(NRF52_CMD_ENABLE);
 80039d6:	2081      	movs	r0, #129	; 0x81
 80039d8:	f000 fb0b 	bl	8003ff2 <bt_assobio_send_cmd>
    return ASSOBIO_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000418 	.word	0x20000418
 80039e8:	0000047d 	.word	0x0000047d

080039ec <bt_assobio_default_parameters>:
    bt_assobio_send_cmd(NRF52_CMD_DISABLE);
    return ASSOBIO_OK;
}

assobio_error_t bt_assobio_default_parameters()
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	af00      	add	r7, sp, #0
    if (_bt_parameters == NULL) {
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <bt_assobio_default_parameters+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <bt_assobio_default_parameters+0x14>
        return ASSOBIO_NO_PARAMETER;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e2d4      	b.n	8003fa6 <bt_assobio_default_parameters+0x5ba>
 80039fc:	20000418 	.word	0x20000418
    // if (_bt_parameters->en != ASSOBIO_ENABLE) {
    //     return ASSOBIO_NOT_ENABLED;
    // }

    /* Default WiFi */
    strcpy(_bt_parameters->parameters.wifi[0].ssid, BT_DEFAULT_WIFI_SSID);
 8003a00:	4bfe      	ldr	r3, [pc, #1016]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	001a      	movs	r2, r3
 8003a06:	4bfe      	ldr	r3, [pc, #1016]	; (8003e00 <bt_assobio_default_parameters+0x414>)
 8003a08:	0010      	movs	r0, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	001a      	movs	r2, r3
 8003a10:	f007 fa3b 	bl	800ae8a <memcpy>
    strcpy(_bt_parameters->parameters.wifi[0].password, BT_DEFAULT_WIFI_PASSWORD);
 8003a14:	4bf9      	ldr	r3, [pc, #996]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3320      	adds	r3, #32
 8003a1a:	001a      	movs	r2, r3
 8003a1c:	4bf9      	ldr	r3, [pc, #996]	; (8003e04 <bt_assobio_default_parameters+0x418>)
 8003a1e:	0010      	movs	r0, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	230a      	movs	r3, #10
 8003a24:	001a      	movs	r2, r3
 8003a26:	f007 fa30 	bl	800ae8a <memcpy>
    _bt_parameters->parameters.wifi_device_id = BT_DEFAULT_WIFI_DEVICE_ID;
 8003a2a:	4bf4      	ldr	r3, [pc, #976]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	5cd1      	ldrb	r1, [r2, r3]
 8003a34:	2000      	movs	r0, #0
 8003a36:	4001      	ands	r1, r0
 8003a38:	1c08      	adds	r0, r1, #0
 8003a3a:	217c      	movs	r1, #124	; 0x7c
 8003a3c:	4249      	negs	r1, r1
 8003a3e:	4301      	orrs	r1, r0
 8003a40:	54d1      	strb	r1, [r2, r3]
 8003a42:	18d1      	adds	r1, r2, r3
 8003a44:	7848      	ldrb	r0, [r1, #1]
 8003a46:	2400      	movs	r4, #0
 8003a48:	4020      	ands	r0, r4
 8003a4a:	1c04      	adds	r4, r0, #0
 8003a4c:	2004      	movs	r0, #4
 8003a4e:	4240      	negs	r0, r0
 8003a50:	4320      	orrs	r0, r4
 8003a52:	7048      	strb	r0, [r1, #1]
 8003a54:	18d1      	adds	r1, r2, r3
 8003a56:	7888      	ldrb	r0, [r1, #2]
 8003a58:	2400      	movs	r4, #0
 8003a5a:	4020      	ands	r0, r4
 8003a5c:	1c04      	adds	r4, r0, #0
 8003a5e:	201b      	movs	r0, #27
 8003a60:	4240      	negs	r0, r0
 8003a62:	4320      	orrs	r0, r4
 8003a64:	7088      	strb	r0, [r1, #2]
 8003a66:	18d3      	adds	r3, r2, r3
 8003a68:	78da      	ldrb	r2, [r3, #3]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	70da      	strb	r2, [r3, #3]

    /* Default Bluetooth */
    strcpy(_bt_parameters->parameters.bt[0].ssid, BT_DEFAULT_BLUETOOTH_SSID);
 8003a70:	4be2      	ldr	r3, [pc, #904]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1d5a      	adds	r2, r3, #5
 8003a76:	32ff      	adds	r2, #255	; 0xff
 8003a78:	4be3      	ldr	r3, [pc, #908]	; (8003e08 <bt_assobio_default_parameters+0x41c>)
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	2310      	movs	r3, #16
 8003a80:	001a      	movs	r2, r3
 8003a82:	f007 fa02 	bl	800ae8a <memcpy>
    strcpy(_bt_parameters->parameters.bt_device_id, BT_DEFAULT_DEVICE_BLUETOOTH_ID);
 8003a86:	4bdd      	ldr	r3, [pc, #884]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3385      	adds	r3, #133	; 0x85
 8003a8c:	33ff      	adds	r3, #255	; 0xff
 8003a8e:	001a      	movs	r2, r3
 8003a90:	4bde      	ldr	r3, [pc, #888]	; (8003e0c <bt_assobio_default_parameters+0x420>)
 8003a92:	0010      	movs	r0, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	2304      	movs	r3, #4
 8003a98:	001a      	movs	r2, r3
 8003a9a:	f007 f9f6 	bl	800ae8a <memcpy>

    /* Default Location Safe Point */
    _bt_parameters->parameters.location_safe_point[0].x1 = BT_DEFAULT_SAFE_AREA_POINT_X1;
 8003a9e:	4bd7      	ldr	r3, [pc, #860]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	23d2      	movs	r3, #210	; 0xd2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	2100      	movs	r1, #0
 8003aac:	400a      	ands	r2, r1
 8003aae:	1c11      	adds	r1, r2, #0
 8003ab0:	2234      	movs	r2, #52	; 0x34
 8003ab2:	4252      	negs	r2, r2
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	785a      	ldrb	r2, [r3, #1]
 8003aba:	2100      	movs	r1, #0
 8003abc:	400a      	ands	r2, r1
 8003abe:	1c11      	adds	r1, r2, #0
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4252      	negs	r2, r2
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	705a      	strb	r2, [r3, #1]
 8003ac8:	789a      	ldrb	r2, [r3, #2]
 8003aca:	2100      	movs	r1, #0
 8003acc:	400a      	ands	r2, r1
 8003ace:	1c11      	adds	r1, r2, #0
 8003ad0:	2261      	movs	r2, #97	; 0x61
 8003ad2:	4252      	negs	r2, r2
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	709a      	strb	r2, [r3, #2]
 8003ad8:	78da      	ldrb	r2, [r3, #3]
 8003ada:	2100      	movs	r1, #0
 8003adc:	400a      	ands	r2, r1
 8003ade:	1c11      	adds	r1, r2, #0
 8003ae0:	226e      	movs	r2, #110	; 0x6e
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	70da      	strb	r2, [r3, #3]
 8003ae6:	791a      	ldrb	r2, [r3, #4]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	400a      	ands	r2, r1
 8003aec:	1c11      	adds	r1, r2, #0
 8003aee:	2260      	movs	r2, #96	; 0x60
 8003af0:	4252      	negs	r2, r2
 8003af2:	430a      	orrs	r2, r1
 8003af4:	711a      	strb	r2, [r3, #4]
 8003af6:	795a      	ldrb	r2, [r3, #5]
 8003af8:	2100      	movs	r1, #0
 8003afa:	400a      	ands	r2, r1
 8003afc:	1c11      	adds	r1, r2, #0
 8003afe:	2220      	movs	r2, #32
 8003b00:	430a      	orrs	r2, r1
 8003b02:	715a      	strb	r2, [r3, #5]
 8003b04:	799a      	ldrb	r2, [r3, #6]
 8003b06:	2100      	movs	r1, #0
 8003b08:	400a      	ands	r2, r1
 8003b0a:	1c11      	adds	r1, r2, #0
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	719a      	strb	r2, [r3, #6]
 8003b12:	79da      	ldrb	r2, [r3, #7]
 8003b14:	2100      	movs	r1, #0
 8003b16:	400a      	ands	r2, r1
 8003b18:	1c11      	adds	r1, r2, #0
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	4252      	negs	r2, r2
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[0].y1 = BT_DEFAULT_SAFE_AREA_POINT_Y1;
 8003b22:	4bb6      	ldr	r3, [pc, #728]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	23d6      	movs	r3, #214	; 0xd6
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	18d3      	adds	r3, r2, r3
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	400a      	ands	r2, r1
 8003b32:	1c11      	adds	r1, r2, #0
 8003b34:	220f      	movs	r2, #15
 8003b36:	430a      	orrs	r2, r1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	785a      	ldrb	r2, [r3, #1]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	400a      	ands	r2, r1
 8003b40:	1c11      	adds	r1, r2, #0
 8003b42:	2261      	movs	r2, #97	; 0x61
 8003b44:	430a      	orrs	r2, r1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	789a      	ldrb	r2, [r3, #2]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	1c11      	adds	r1, r2, #0
 8003b50:	2204      	movs	r2, #4
 8003b52:	4252      	negs	r2, r2
 8003b54:	430a      	orrs	r2, r1
 8003b56:	709a      	strb	r2, [r3, #2]
 8003b58:	78da      	ldrb	r2, [r3, #3]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	1c11      	adds	r1, r2, #0
 8003b60:	2234      	movs	r2, #52	; 0x34
 8003b62:	430a      	orrs	r2, r1
 8003b64:	70da      	strb	r2, [r3, #3]
 8003b66:	791a      	ldrb	r2, [r3, #4]
 8003b68:	2100      	movs	r1, #0
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	1c11      	adds	r1, r2, #0
 8003b6e:	2212      	movs	r2, #18
 8003b70:	4252      	negs	r2, r2
 8003b72:	430a      	orrs	r2, r1
 8003b74:	711a      	strb	r2, [r3, #4]
 8003b76:	795a      	ldrb	r2, [r3, #5]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	1c11      	adds	r1, r2, #0
 8003b7e:	226f      	movs	r2, #111	; 0x6f
 8003b80:	430a      	orrs	r2, r1
 8003b82:	715a      	strb	r2, [r3, #5]
 8003b84:	799a      	ldrb	r2, [r3, #6]
 8003b86:	2100      	movs	r1, #0
 8003b88:	400a      	ands	r2, r1
 8003b8a:	1c11      	adds	r1, r2, #0
 8003b8c:	2241      	movs	r2, #65	; 0x41
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	719a      	strb	r2, [r3, #6]
 8003b92:	79da      	ldrb	r2, [r3, #7]
 8003b94:	2100      	movs	r1, #0
 8003b96:	400a      	ands	r2, r1
 8003b98:	1c11      	adds	r1, r2, #0
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	4252      	negs	r2, r2
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[0].x2 = BT_DEFAULT_SAFE_AREA_POINT_X2;
 8003ba2:	4b96      	ldr	r3, [pc, #600]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	23da      	movs	r3, #218	; 0xda
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	1c11      	adds	r1, r2, #0
 8003bb4:	2240      	movs	r2, #64	; 0x40
 8003bb6:	4252      	negs	r2, r2
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	785a      	ldrb	r2, [r3, #1]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	1c11      	adds	r1, r2, #0
 8003bc4:	2259      	movs	r2, #89	; 0x59
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	705a      	strb	r2, [r3, #1]
 8003bca:	789a      	ldrb	r2, [r3, #2]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	400a      	ands	r2, r1
 8003bd0:	1c11      	adds	r1, r2, #0
 8003bd2:	224a      	movs	r2, #74	; 0x4a
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	709a      	strb	r2, [r3, #2]
 8003bd8:	78da      	ldrb	r2, [r3, #3]
 8003bda:	2100      	movs	r1, #0
 8003bdc:	400a      	ands	r2, r1
 8003bde:	1c11      	adds	r1, r2, #0
 8003be0:	226a      	movs	r2, #106	; 0x6a
 8003be2:	4252      	negs	r2, r2
 8003be4:	430a      	orrs	r2, r1
 8003be6:	70da      	strb	r2, [r3, #3]
 8003be8:	791a      	ldrb	r2, [r3, #4]
 8003bea:	2100      	movs	r1, #0
 8003bec:	400a      	ands	r2, r1
 8003bee:	1c11      	adds	r1, r2, #0
 8003bf0:	226d      	movs	r2, #109	; 0x6d
 8003bf2:	4252      	negs	r2, r2
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	711a      	strb	r2, [r3, #4]
 8003bf8:	795a      	ldrb	r2, [r3, #5]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	1c11      	adds	r1, r2, #0
 8003c00:	2220      	movs	r2, #32
 8003c02:	430a      	orrs	r2, r1
 8003c04:	715a      	strb	r2, [r3, #5]
 8003c06:	799a      	ldrb	r2, [r3, #6]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	1c11      	adds	r1, r2, #0
 8003c0e:	2220      	movs	r2, #32
 8003c10:	430a      	orrs	r2, r1
 8003c12:	719a      	strb	r2, [r3, #6]
 8003c14:	79da      	ldrb	r2, [r3, #7]
 8003c16:	2100      	movs	r1, #0
 8003c18:	400a      	ands	r2, r1
 8003c1a:	1c11      	adds	r1, r2, #0
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4252      	negs	r2, r2
 8003c20:	430a      	orrs	r2, r1
 8003c22:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[0].y2 = BT_DEFAULT_SAFE_AREA_POINT_Y2;
 8003c24:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	23de      	movs	r3, #222	; 0xde
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	2100      	movs	r1, #0
 8003c32:	400a      	ands	r2, r1
 8003c34:	1c11      	adds	r1, r2, #0
 8003c36:	2246      	movs	r2, #70	; 0x46
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	785a      	ldrb	r2, [r3, #1]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	400a      	ands	r2, r1
 8003c42:	1c11      	adds	r1, r2, #0
 8003c44:	2230      	movs	r2, #48	; 0x30
 8003c46:	4252      	negs	r2, r2
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	789a      	ldrb	r2, [r3, #2]
 8003c4e:	2100      	movs	r1, #0
 8003c50:	400a      	ands	r2, r1
 8003c52:	1c11      	adds	r1, r2, #0
 8003c54:	2268      	movs	r2, #104	; 0x68
 8003c56:	4252      	negs	r2, r2
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	709a      	strb	r2, [r3, #2]
 8003c5c:	78da      	ldrb	r2, [r3, #3]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	400a      	ands	r2, r1
 8003c62:	1c11      	adds	r1, r2, #0
 8003c64:	2249      	movs	r2, #73	; 0x49
 8003c66:	430a      	orrs	r2, r1
 8003c68:	70da      	strb	r2, [r3, #3]
 8003c6a:	791a      	ldrb	r2, [r3, #4]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	400a      	ands	r2, r1
 8003c70:	1c11      	adds	r1, r2, #0
 8003c72:	222c      	movs	r2, #44	; 0x2c
 8003c74:	4252      	negs	r2, r2
 8003c76:	430a      	orrs	r2, r1
 8003c78:	711a      	strb	r2, [r3, #4]
 8003c7a:	795a      	ldrb	r2, [r3, #5]
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	400a      	ands	r2, r1
 8003c80:	1c11      	adds	r1, r2, #0
 8003c82:	226f      	movs	r2, #111	; 0x6f
 8003c84:	430a      	orrs	r2, r1
 8003c86:	715a      	strb	r2, [r3, #5]
 8003c88:	799a      	ldrb	r2, [r3, #6]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	1c11      	adds	r1, r2, #0
 8003c90:	2241      	movs	r2, #65	; 0x41
 8003c92:	430a      	orrs	r2, r1
 8003c94:	719a      	strb	r2, [r3, #6]
 8003c96:	79da      	ldrb	r2, [r3, #7]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	1c11      	adds	r1, r2, #0
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	4252      	negs	r2, r2
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[1].x1 = BT_DEFAULT_SAFE_AREA_POINT_X3;
 8003ca6:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	23e2      	movs	r3, #226	; 0xe2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	18d3      	adds	r3, r2, r3
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	1c11      	adds	r1, r2, #0
 8003cb8:	2274      	movs	r2, #116	; 0x74
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	785a      	ldrb	r2, [r3, #1]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	1c11      	adds	r1, r2, #0
 8003cc6:	227c      	movs	r2, #124	; 0x7c
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	705a      	strb	r2, [r3, #1]
 8003ccc:	789a      	ldrb	r2, [r3, #2]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	1c11      	adds	r1, r2, #0
 8003cd4:	224c      	movs	r2, #76	; 0x4c
 8003cd6:	4252      	negs	r2, r2
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	709a      	strb	r2, [r3, #2]
 8003cdc:	78da      	ldrb	r2, [r3, #3]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	1c11      	adds	r1, r2, #0
 8003ce4:	2238      	movs	r2, #56	; 0x38
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	70da      	strb	r2, [r3, #3]
 8003cea:	791a      	ldrb	r2, [r3, #4]
 8003cec:	2100      	movs	r1, #0
 8003cee:	400a      	ands	r2, r1
 8003cf0:	1c11      	adds	r1, r2, #0
 8003cf2:	2263      	movs	r2, #99	; 0x63
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	711a      	strb	r2, [r3, #4]
 8003cf8:	795a      	ldrb	r2, [r3, #5]
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	1c11      	adds	r1, r2, #0
 8003d00:	2220      	movs	r2, #32
 8003d02:	430a      	orrs	r2, r1
 8003d04:	715a      	strb	r2, [r3, #5]
 8003d06:	799a      	ldrb	r2, [r3, #6]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	1c11      	adds	r1, r2, #0
 8003d0e:	2220      	movs	r2, #32
 8003d10:	430a      	orrs	r2, r1
 8003d12:	719a      	strb	r2, [r3, #6]
 8003d14:	79da      	ldrb	r2, [r3, #7]
 8003d16:	2100      	movs	r1, #0
 8003d18:	400a      	ands	r2, r1
 8003d1a:	1c11      	adds	r1, r2, #0
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	4252      	negs	r2, r2
 8003d20:	430a      	orrs	r2, r1
 8003d22:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[1].y1 = BT_DEFAULT_SAFE_AREA_POINT_Y3;
 8003d24:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	23e6      	movs	r3, #230	; 0xe6
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	18d3      	adds	r3, r2, r3
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	400a      	ands	r2, r1
 8003d34:	1c11      	adds	r1, r2, #0
 8003d36:	2227      	movs	r2, #39	; 0x27
 8003d38:	4252      	negs	r2, r2
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	785a      	ldrb	r2, [r3, #1]
 8003d40:	2100      	movs	r1, #0
 8003d42:	400a      	ands	r2, r1
 8003d44:	1c11      	adds	r1, r2, #0
 8003d46:	224f      	movs	r2, #79	; 0x4f
 8003d48:	4252      	negs	r2, r2
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	705a      	strb	r2, [r3, #1]
 8003d4e:	789a      	ldrb	r2, [r3, #2]
 8003d50:	2100      	movs	r1, #0
 8003d52:	400a      	ands	r2, r1
 8003d54:	1c11      	adds	r1, r2, #0
 8003d56:	2211      	movs	r2, #17
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	709a      	strb	r2, [r3, #2]
 8003d5c:	78da      	ldrb	r2, [r3, #3]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	400a      	ands	r2, r1
 8003d62:	1c11      	adds	r1, r2, #0
 8003d64:	2278      	movs	r2, #120	; 0x78
 8003d66:	4252      	negs	r2, r2
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	70da      	strb	r2, [r3, #3]
 8003d6c:	791a      	ldrb	r2, [r3, #4]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	400a      	ands	r2, r1
 8003d72:	1c11      	adds	r1, r2, #0
 8003d74:	2229      	movs	r2, #41	; 0x29
 8003d76:	4252      	negs	r2, r2
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	711a      	strb	r2, [r3, #4]
 8003d7c:	795a      	ldrb	r2, [r3, #5]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	400a      	ands	r2, r1
 8003d82:	1c11      	adds	r1, r2, #0
 8003d84:	226f      	movs	r2, #111	; 0x6f
 8003d86:	430a      	orrs	r2, r1
 8003d88:	715a      	strb	r2, [r3, #5]
 8003d8a:	799a      	ldrb	r2, [r3, #6]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	400a      	ands	r2, r1
 8003d90:	1c11      	adds	r1, r2, #0
 8003d92:	2241      	movs	r2, #65	; 0x41
 8003d94:	430a      	orrs	r2, r1
 8003d96:	719a      	strb	r2, [r3, #6]
 8003d98:	79da      	ldrb	r2, [r3, #7]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	1c11      	adds	r1, r2, #0
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	4252      	negs	r2, r2
 8003da4:	430a      	orrs	r2, r1
 8003da6:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[1].x2 = BT_DEFAULT_SAFE_AREA_POINT_X4;
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <bt_assobio_default_parameters+0x410>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	23ea      	movs	r3, #234	; 0xea
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	18d3      	adds	r3, r2, r3
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	2100      	movs	r1, #0
 8003db6:	400a      	ands	r2, r1
 8003db8:	1c11      	adds	r1, r2, #0
 8003dba:	2215      	movs	r2, #21
 8003dbc:	4252      	negs	r2, r2
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	785a      	ldrb	r2, [r3, #1]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	1c11      	adds	r1, r2, #0
 8003dca:	2203      	movs	r2, #3
 8003dcc:	4252      	negs	r2, r2
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	705a      	strb	r2, [r3, #1]
 8003dd2:	789a      	ldrb	r2, [r3, #2]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	1c11      	adds	r1, r2, #0
 8003dda:	2246      	movs	r2, #70	; 0x46
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	709a      	strb	r2, [r3, #2]
 8003de0:	78da      	ldrb	r2, [r3, #3]
 8003de2:	2100      	movs	r1, #0
 8003de4:	400a      	ands	r2, r1
 8003de6:	1c11      	adds	r1, r2, #0
 8003de8:	223b      	movs	r2, #59	; 0x3b
 8003dea:	430a      	orrs	r2, r1
 8003dec:	70da      	strb	r2, [r3, #3]
 8003dee:	791a      	ldrb	r2, [r3, #4]
 8003df0:	2100      	movs	r1, #0
 8003df2:	400a      	ands	r2, r1
 8003df4:	1c11      	adds	r1, r2, #0
 8003df6:	226e      	movs	r2, #110	; 0x6e
 8003df8:	e00a      	b.n	8003e10 <bt_assobio_default_parameters+0x424>
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	20000418 	.word	0x20000418
 8003e00:	0800ddc8 	.word	0x0800ddc8
 8003e04:	0800ddd4 	.word	0x0800ddd4
 8003e08:	0800dde0 	.word	0x0800dde0
 8003e0c:	0800ddf4 	.word	0x0800ddf4
 8003e10:	430a      	orrs	r2, r1
 8003e12:	711a      	strb	r2, [r3, #4]
 8003e14:	795a      	ldrb	r2, [r3, #5]
 8003e16:	2100      	movs	r1, #0
 8003e18:	400a      	ands	r2, r1
 8003e1a:	1c11      	adds	r1, r2, #0
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	715a      	strb	r2, [r3, #5]
 8003e22:	799a      	ldrb	r2, [r3, #6]
 8003e24:	2100      	movs	r1, #0
 8003e26:	400a      	ands	r2, r1
 8003e28:	1c11      	adds	r1, r2, #0
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	719a      	strb	r2, [r3, #6]
 8003e30:	79da      	ldrb	r2, [r3, #7]
 8003e32:	2100      	movs	r1, #0
 8003e34:	400a      	ands	r2, r1
 8003e36:	1c11      	adds	r1, r2, #0
 8003e38:	2240      	movs	r2, #64	; 0x40
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	71da      	strb	r2, [r3, #7]
    _bt_parameters->parameters.location_safe_point[1].y2 = BT_DEFAULT_SAFE_AREA_POINT_Y4;
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	23ee      	movs	r3, #238	; 0xee
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	400a      	ands	r2, r1
 8003e50:	1c11      	adds	r1, r2, #0
 8003e52:	2273      	movs	r2, #115	; 0x73
 8003e54:	4252      	negs	r2, r2
 8003e56:	430a      	orrs	r2, r1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	785a      	ldrb	r2, [r3, #1]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	400a      	ands	r2, r1
 8003e60:	1c11      	adds	r1, r2, #0
 8003e62:	224a      	movs	r2, #74	; 0x4a
 8003e64:	4252      	negs	r2, r2
 8003e66:	430a      	orrs	r2, r1
 8003e68:	705a      	strb	r2, [r3, #1]
 8003e6a:	789a      	ldrb	r2, [r3, #2]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	400a      	ands	r2, r1
 8003e70:	1c11      	adds	r1, r2, #0
 8003e72:	222a      	movs	r2, #42	; 0x2a
 8003e74:	430a      	orrs	r2, r1
 8003e76:	709a      	strb	r2, [r3, #2]
 8003e78:	78da      	ldrb	r2, [r3, #3]
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	1c11      	adds	r1, r2, #0
 8003e80:	2277      	movs	r2, #119	; 0x77
 8003e82:	4252      	negs	r2, r2
 8003e84:	430a      	orrs	r2, r1
 8003e86:	70da      	strb	r2, [r3, #3]
 8003e88:	791a      	ldrb	r2, [r3, #4]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	1c11      	adds	r1, r2, #0
 8003e90:	2214      	movs	r2, #20
 8003e92:	4252      	negs	r2, r2
 8003e94:	430a      	orrs	r2, r1
 8003e96:	711a      	strb	r2, [r3, #4]
 8003e98:	795a      	ldrb	r2, [r3, #5]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	1c11      	adds	r1, r2, #0
 8003ea0:	226f      	movs	r2, #111	; 0x6f
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	715a      	strb	r2, [r3, #5]
 8003ea6:	799a      	ldrb	r2, [r3, #6]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	400a      	ands	r2, r1
 8003eac:	1c11      	adds	r1, r2, #0
 8003eae:	2241      	movs	r2, #65	; 0x41
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	719a      	strb	r2, [r3, #6]
 8003eb4:	79da      	ldrb	r2, [r3, #7]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	400a      	ands	r2, r1
 8003eba:	1c11      	adds	r1, r2, #0
 8003ebc:	2240      	movs	r2, #64	; 0x40
 8003ebe:	4252      	negs	r2, r2
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	71da      	strb	r2, [r3, #7]

    /* Default MQTT */
    strcpy(_bt_parameters->parameters.mqtt[0].username, BT_DEFAULT_MQTT_USERNAME);
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	22a9      	movs	r2, #169	; 0xa9
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	189a      	adds	r2, r3, r2
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <bt_assobio_default_parameters+0x5c4>)
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	f006 ffd7 	bl	800ae8a <memcpy>
    strcpy(_bt_parameters->parameters.mqtt[0].password, BT_DEFAULT_MQTT_PASSWORD);
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	22b1      	movs	r2, #177	; 0xb1
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	189a      	adds	r2, r3, r2
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <bt_assobio_default_parameters+0x5c8>)
 8003ee8:	0010      	movs	r0, r2
 8003eea:	0019      	movs	r1, r3
 8003eec:	2307      	movs	r3, #7
 8003eee:	001a      	movs	r2, r3
 8003ef0:	f006 ffcb 	bl	800ae8a <memcpy>
    strcpy(_bt_parameters->parameters.mqtt[0].domain, BT_DEFAULT_MQTT_DOMAIN);
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	22b9      	movs	r2, #185	; 0xb9
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	189a      	adds	r2, r3, r2
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <bt_assobio_default_parameters+0x5cc>)
 8003f00:	0010      	movs	r0, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	230f      	movs	r3, #15
 8003f06:	001a      	movs	r2, r3
 8003f08:	f006 ffbf 	bl	800ae8a <memcpy>
    _bt_parameters->parameters.mqtt[0].port = BT_DEFAULT_MQTT_PORT;
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <bt_assobio_default_parameters+0x5d0>)
 8003f12:	5c99      	ldrb	r1, [r3, r2]
 8003f14:	2000      	movs	r0, #0
 8003f16:	4001      	ands	r1, r0
 8003f18:	1c08      	adds	r0, r1, #0
 8003f1a:	215b      	movs	r1, #91	; 0x5b
 8003f1c:	4301      	orrs	r1, r0
 8003f1e:	5499      	strb	r1, [r3, r2]
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	785a      	ldrb	r2, [r3, #1]
 8003f24:	2100      	movs	r1, #0
 8003f26:	400a      	ands	r2, r1
 8003f28:	1c11      	adds	r1, r2, #0
 8003f2a:	2207      	movs	r2, #7
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	705a      	strb	r2, [r3, #1]
    strcpy(_bt_parameters->parameters.mqtt[0].labling_topic, BT_DEFAULT_MQTT_LABELING_TOPIC);
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <bt_assobio_default_parameters+0x5d4>)
 8003f36:	189a      	adds	r2, r3, r2
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <bt_assobio_default_parameters+0x5d8>)
 8003f3a:	0010      	movs	r0, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	230f      	movs	r3, #15
 8003f40:	001a      	movs	r2, r3
 8003f42:	f006 ffa2 	bl	800ae8a <memcpy>
    strcpy(_bt_parameters->parameters.mqtt[0].config_topic, BT_DEFAULT_MQTT_CONFIG_TOPIC);
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22d5      	movs	r2, #213	; 0xd5
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	189a      	adds	r2, r3, r2
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <bt_assobio_default_parameters+0x5dc>)
 8003f52:	0010      	movs	r0, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	2307      	movs	r3, #7
 8003f58:	001a      	movs	r2, r3
 8003f5a:	f006 ff96 	bl	800ae8a <memcpy>

    /* Default Operation */
    _bt_parameters->parameters.op = BT_OP_SAFE;
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <bt_assobio_default_parameters+0x5e0>)
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]

    /* Default MPU */
    _bt_parameters->parameters.mpu[0].accel = BT_ACCEL_8G;
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <bt_assobio_default_parameters+0x5e4>)
 8003f6e:	2102      	movs	r1, #2
 8003f70:	5499      	strb	r1, [r3, r2]
    _bt_parameters->parameters.mpu[0].gyro = BT_GYRO_500DEG;
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <bt_assobio_default_parameters+0x5e8>)
 8003f78:	2101      	movs	r1, #1
 8003f7a:	5499      	strb	r1, [r3, r2]
    _bt_parameters->parameters.mpu[0].filter_bandwidth = BT_FB_5HZ;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <bt_assobio_default_parameters+0x5ec>)
 8003f82:	2106      	movs	r1, #6
 8003f84:	5499      	strb	r1, [r3, r2]
    _bt_parameters->parameters.mpu[0].sample_interval = 100;
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <bt_assobio_default_parameters+0x5c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <bt_assobio_default_parameters+0x5f0>)
 8003f8c:	5c99      	ldrb	r1, [r3, r2]
 8003f8e:	2000      	movs	r0, #0
 8003f90:	4001      	ands	r1, r0
 8003f92:	1c08      	adds	r0, r1, #0
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	4301      	orrs	r1, r0
 8003f98:	5499      	strb	r1, [r3, r2]
 8003f9a:	189b      	adds	r3, r3, r2
 8003f9c:	785a      	ldrb	r2, [r3, #1]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	705a      	strb	r2, [r3, #1]

    return ASSOBIO_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}
 8003fac:	20000418 	.word	0x20000418
 8003fb0:	0800ddfc 	.word	0x0800ddfc
 8003fb4:	0800de04 	.word	0x0800de04
 8003fb8:	0800de0c 	.word	0x0800de0c
 8003fbc:	0000031b 	.word	0x0000031b
 8003fc0:	0000031d 	.word	0x0000031d
 8003fc4:	0800de1c 	.word	0x0800de1c
 8003fc8:	0800de2c 	.word	0x0800de2c
 8003fcc:	00000472 	.word	0x00000472
 8003fd0:	00000473 	.word	0x00000473
 8003fd4:	00000474 	.word	0x00000474
 8003fd8:	00000475 	.word	0x00000475
 8003fdc:	00000476 	.word	0x00000476

08003fe0 <bt_assobio_pair_mode>:

/* SSID - Ainda não entendi o que foi requerido */

assobio_error_t bt_assobio_pair_mode()
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
    // if (_bt_parameters->en != ASSOBIO_ENABLE) {
    //     return ASSOBIO_NOT_ENABLED;
    // }

    /* Request to pair the device */
    return bt_assobio_send_cmd(NRF52_CMD_PAIR_MODE_ON);
 8003fe4:	2085      	movs	r0, #133	; 0x85
 8003fe6:	f000 f804 	bl	8003ff2 <bt_assobio_send_cmd>
 8003fea:	0003      	movs	r3, r0
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <bt_assobio_send_cmd>:
    
    return safe;
}

assobio_error_t bt_assobio_send_cmd(uint8_t cmd)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	1dfb      	adds	r3, r7, #7
 8003ffc:	701a      	strb	r2, [r3, #0]
    // if (_bt_parameters->en != ASSOBIO_ENABLE) {
    //     return ASSOBIO_NOT_ENABLED;
    // }

    return bt_send_uart(&cmd, 1);
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	2101      	movs	r1, #1
 8004002:	0018      	movs	r0, r3
 8004004:	f000 f806 	bl	8004014 <bt_send_uart>
 8004008:	0003      	movs	r3, r0
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b002      	add	sp, #8
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <bt_send_uart>:

assobio_error_t bt_send_uart(uint8_t *data, uint16_t len)
{
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b08d      	sub	sp, #52	; 0x34
 8004018:	af00      	add	r7, sp, #0
 800401a:	61f8      	str	r0, [r7, #28]
 800401c:	0008      	movs	r0, r1
 800401e:	231a      	movs	r3, #26
 8004020:	18f9      	adds	r1, r7, r3
 8004022:	8008      	strh	r0, [r1, #0]
 8004024:	4669      	mov	r1, sp
 8004026:	000e      	movs	r6, r1
    // 1 to 2: length of the payload = n
    // 3 to (n+3): payload
    // n+3: CRC8
    // n+4: end byte

    uint16_t total_len = len + 5;
 8004028:	231a      	movs	r3, #26
 800402a:	18f9      	adds	r1, r7, r3
 800402c:	8808      	ldrh	r0, [r1, #0]
 800402e:	2116      	movs	r1, #22
 8004030:	000b      	movs	r3, r1
 8004032:	2218      	movs	r2, #24
 8004034:	188a      	adds	r2, r1, r2
 8004036:	19d1      	adds	r1, r2, r7
 8004038:	3005      	adds	r0, #5
 800403a:	8008      	strh	r0, [r1, #0]
    uint8_t buff[total_len];
 800403c:	0019      	movs	r1, r3
 800403e:	2318      	movs	r3, #24
 8004040:	18cb      	adds	r3, r1, r3
 8004042:	19d9      	adds	r1, r3, r7
 8004044:	8809      	ldrh	r1, [r1, #0]
 8004046:	0008      	movs	r0, r1
 8004048:	3801      	subs	r0, #1
 800404a:	62b8      	str	r0, [r7, #40]	; 0x28
 800404c:	6139      	str	r1, [r7, #16]
 800404e:	2000      	movs	r0, #0
 8004050:	6178      	str	r0, [r7, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	0010      	movs	r0, r2
 8004058:	0f40      	lsrs	r0, r0, #29
 800405a:	613a      	str	r2, [r7, #16]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	00dd      	lsls	r5, r3, #3
 8004060:	4305      	orrs	r5, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	00dc      	lsls	r4, r3, #3
 8004066:	6039      	str	r1, [r7, #0]
 8004068:	2000      	movs	r0, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	683c      	ldr	r4, [r7, #0]
 800406e:	687d      	ldr	r5, [r7, #4]
 8004070:	0023      	movs	r3, r4
 8004072:	0f58      	lsrs	r0, r3, #29
 8004074:	002b      	movs	r3, r5
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4303      	orrs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	0023      	movs	r3, r4
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	000b      	movs	r3, r1
 8004088:	3307      	adds	r3, #7
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	466a      	mov	r2, sp
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	469d      	mov	sp, r3
 8004094:	466b      	mov	r3, sp
 8004096:	3300      	adds	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    buff[0] = 0x24;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	701a      	strb	r2, [r3, #0]
    memcpy(&buff[1], &len, sizeof(uint16_t));
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	3301      	adds	r3, #1
 80040a4:	221a      	movs	r2, #26
 80040a6:	18b9      	adds	r1, r7, r2
 80040a8:	2202      	movs	r2, #2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f006 feed 	bl	800ae8a <memcpy>
    memcpy(&buff[3], data, len);
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1cd8      	adds	r0, r3, #3
 80040b4:	231a      	movs	r3, #26
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	001a      	movs	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	0019      	movs	r1, r3
 80040c0:	f006 fee3 	bl	800ae8a <memcpy>
    buff[total_len - 2] = HAL_CRC_Calculate(&hcrc, (uint32_t *) data, len);
 80040c4:	231a      	movs	r3, #26
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	001a      	movs	r2, r3
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <bt_send_uart+0x14c>)
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 fa53 	bl	800457c <HAL_CRC_Calculate>
 80040d6:	0002      	movs	r2, r0
 80040d8:	2016      	movs	r0, #22
 80040da:	2318      	movs	r3, #24
 80040dc:	18c3      	adds	r3, r0, r3
 80040de:	19db      	adds	r3, r3, r7
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	b2d1      	uxtb	r1, r2
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	54d1      	strb	r1, [r2, r3]
    buff[total_len - 1] = 0x04;
 80040ea:	2318      	movs	r3, #24
 80040ec:	18c3      	adds	r3, r0, r3
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	2104      	movs	r1, #4
 80040f8:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef ret = HAL_UART_Transmit(_bt_parameters->uart, buff, total_len, HAL_MAX_DELAY);
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <bt_send_uart+0x150>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <bt_send_uart+0x154>)
 8004100:	5c9a      	ldrb	r2, [r3, r2]
 8004102:	491a      	ldr	r1, [pc, #104]	; (800416c <bt_send_uart+0x158>)
 8004104:	5c59      	ldrb	r1, [r3, r1]
 8004106:	0209      	lsls	r1, r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	2190      	movs	r1, #144	; 0x90
 800410c:	00c9      	lsls	r1, r1, #3
 800410e:	5c59      	ldrb	r1, [r3, r1]
 8004110:	0409      	lsls	r1, r1, #16
 8004112:	430a      	orrs	r2, r1
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <bt_send_uart+0x15c>)
 8004116:	5c5b      	ldrb	r3, [r3, r1]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	4313      	orrs	r3, r2
 800411c:	001d      	movs	r5, r3
 800411e:	220b      	movs	r2, #11
 8004120:	2318      	movs	r3, #24
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	19dc      	adds	r4, r3, r7
 8004126:	2301      	movs	r3, #1
 8004128:	4258      	negs	r0, r3
 800412a:	2316      	movs	r3, #22
 800412c:	2218      	movs	r2, #24
 800412e:	189b      	adds	r3, r3, r2
 8004130:	19db      	adds	r3, r3, r7
 8004132:	881a      	ldrh	r2, [r3, #0]
 8004134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004136:	0003      	movs	r3, r0
 8004138:	0028      	movs	r0, r5
 800413a:	f002 fe21 	bl	8006d80 <HAL_UART_Transmit>
 800413e:	0003      	movs	r3, r0
 8004140:	7023      	strb	r3, [r4, #0]
    if (ret == HAL_OK) {
 8004142:	220b      	movs	r2, #11
 8004144:	2318      	movs	r3, #24
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	19db      	adds	r3, r3, r7
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <bt_send_uart+0x140>
        return ASSOBIO_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <bt_send_uart+0x142>
    } else {
        return ASSOBIO_COMMUNICATION_ERROR;
 8004154:	2304      	movs	r3, #4
 8004156:	46b5      	mov	sp, r6
    }
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b00d      	add	sp, #52	; 0x34
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004160:	2000020c 	.word	0x2000020c
 8004164:	20000418 	.word	0x20000418
 8004168:	0000047e 	.word	0x0000047e
 800416c:	0000047f 	.word	0x0000047f
 8004170:	00000481 	.word	0x00000481

08004174 <bt_receive_uart>:

void bt_receive_uart(void *argument)
{
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b08b      	sub	sp, #44	; 0x2c
 8004178:	af00      	add	r7, sp, #0
 800417a:	6178      	str	r0, [r7, #20]

//	char print_buff[64];
//	sprintf(print_buff, "Started Received UART BT\r\n");
//	print_debug(print_buff);

    uint16_t total_len = 6;//sizeof(bt_assobio_config_param_s) + 5;
 800417c:	2616      	movs	r6, #22
 800417e:	2110      	movs	r1, #16
 8004180:	1870      	adds	r0, r6, r1
 8004182:	19c1      	adds	r1, r0, r7
 8004184:	2006      	movs	r0, #6
 8004186:	8008      	strh	r0, [r1, #0]
//    uint16_t payload_len = 0;
    uint8_t buff[total_len];
 8004188:	2110      	movs	r1, #16
 800418a:	1871      	adds	r1, r6, r1
 800418c:	19c9      	adds	r1, r1, r7
 800418e:	8809      	ldrh	r1, [r1, #0]
 8004190:	0008      	movs	r0, r1
 8004192:	3801      	subs	r0, #1
 8004194:	6238      	str	r0, [r7, #32]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	2000      	movs	r0, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	68b8      	ldr	r0, [r7, #8]
 800419e:	0f40      	lsrs	r0, r0, #29
 80041a0:	68fe      	ldr	r6, [r7, #12]
 80041a2:	00f5      	lsls	r5, r6, #3
 80041a4:	4305      	orrs	r5, r0
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	00c4      	lsls	r4, r0, #3
 80041aa:	6039      	str	r1, [r7, #0]
 80041ac:	2000      	movs	r0, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	683c      	ldr	r4, [r7, #0]
 80041b2:	687d      	ldr	r5, [r7, #4]
 80041b4:	0020      	movs	r0, r4
 80041b6:	0f40      	lsrs	r0, r0, #29
 80041b8:	002e      	movs	r6, r5
 80041ba:	00f3      	lsls	r3, r6, #3
 80041bc:	4303      	orrs	r3, r0
 80041be:	0020      	movs	r0, r4
 80041c0:	00c2      	lsls	r2, r0, #3
 80041c2:	000b      	movs	r3, r1
 80041c4:	3307      	adds	r3, #7
 80041c6:	08db      	lsrs	r3, r3, #3
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	466a      	mov	r2, sp
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	469d      	mov	sp, r3
 80041d0:	466b      	mov	r3, sp
 80041d2:	3300      	adds	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]

//	sprintf(print_buff, "Heap size: %d bytes\r\n", xPortGetFreeHeapSize());
//	print_debug(print_buff);

    while (true) {
    	while (osMessageQueueGet(bt_receive_queue_handle, buff, NULL, BT_UART_TIMEOUT) == osOK) {
 80041d6:	e00d      	b.n	80041f4 <bt_receive_uart+0x80>
			// 	start = true;
			// 	payload_len = 1;
    		// }

            // if (start && stop) {
                if (/* payload_len == 1 &&  */buff[3] == NRF52_CMD_MODE_ROTULACAO_START) {
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	78db      	ldrb	r3, [r3, #3]
 80041dc:	2b91      	cmp	r3, #145	; 0x91
 80041de:	d102      	bne.n	80041e6 <bt_receive_uart+0x72>
                    assobio_mode = 1;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <bt_receive_uart+0x94>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
                    // payload_len = 0;
                }

                if (/* payload_len == 1 &&  */buff[3] == NRF52_CMD_MODE_ROTULACAO_STOP) {
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	2b92      	cmp	r3, #146	; 0x92
 80041ec:	d102      	bne.n	80041f4 <bt_receive_uart+0x80>
                    assobio_mode = 0;
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <bt_receive_uart+0x94>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    	while (osMessageQueueGet(bt_receive_queue_handle, buff, NULL, BT_UART_TIMEOUT) == osOK) {
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <bt_receive_uart+0x98>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <bt_receive_uart+0x9c>)
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f004 fab1 	bl	8008764 <osMessageQueueGet>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d0e8      	beq.n	80041d8 <bt_receive_uart+0x64>
 8004206:	e7f5      	b.n	80041f4 <bt_receive_uart+0x80>
 8004208:	2000041c 	.word	0x2000041c
 800420c:	20000420 	.word	0x20000420
 8004210:	00003a98 	.word	0x00003a98

08004214 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_Init+0x3c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_Init+0x3c>)
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800422c:	2003      	movs	r0, #3
 800422e:	f000 f811 	bl	8004254 <HAL_InitTick>
 8004232:	1e03      	subs	r3, r0, #0
 8004234:	d003      	beq.n	800423e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e001      	b.n	8004242 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800423e:	f7fe fd03 	bl	8002c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004242:	1dfb      	adds	r3, r7, #7
 8004244:	781b      	ldrb	r3, [r3, #0]
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b002      	add	sp, #8
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	40022000 	.word	0x40022000

08004254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_InitTick+0x5c>)
 800425e:	681c      	ldr	r4, [r3, #0]
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_InitTick+0x60>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	0019      	movs	r1, r3
 8004266:	23fa      	movs	r3, #250	; 0xfa
 8004268:	0098      	lsls	r0, r3, #2
 800426a:	f7fb ff69 	bl	8000140 <__udivsi3>
 800426e:	0003      	movs	r3, r0
 8004270:	0019      	movs	r1, r3
 8004272:	0020      	movs	r0, r4
 8004274:	f7fb ff64 	bl	8000140 <__udivsi3>
 8004278:	0003      	movs	r3, r0
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f90b 	bl	8004496 <HAL_SYSTICK_Config>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d001      	beq.n	8004288 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e00f      	b.n	80042a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b03      	cmp	r3, #3
 800428c:	d80b      	bhi.n	80042a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	2301      	movs	r3, #1
 8004292:	425b      	negs	r3, r3
 8004294:	2200      	movs	r2, #0
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f8d8 	bl	800444c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_InitTick+0x64>)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b003      	add	sp, #12
 80042ae:	bd90      	pop	{r4, r7, pc}
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000010 	.word	0x20000010
 80042b8:	2000000c 	.word	0x2000000c

080042bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_IncTick+0x1c>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	001a      	movs	r2, r3
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_IncTick+0x20>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	18d2      	adds	r2, r2, r3
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_IncTick+0x20>)
 80042ce:	601a      	str	r2, [r3, #0]
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	20000010 	.word	0x20000010
 80042dc:	20000424 	.word	0x20000424

080042e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  return uwTick;
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <HAL_GetTick+0x10>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000424 	.word	0x20000424

080042f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	0002      	movs	r2, r0
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b7f      	cmp	r3, #127	; 0x7f
 8004306:	d809      	bhi.n	800431c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	001a      	movs	r2, r3
 800430e:	231f      	movs	r3, #31
 8004310:	401a      	ands	r2, r3
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <__NVIC_EnableIRQ+0x30>)
 8004314:	2101      	movs	r1, #1
 8004316:	4091      	lsls	r1, r2
 8004318:	000a      	movs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
  }
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e000e100 	.word	0xe000e100

08004328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	0002      	movs	r2, r0
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	1dfb      	adds	r3, r7, #7
 8004334:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b7f      	cmp	r3, #127	; 0x7f
 800433c:	d828      	bhi.n	8004390 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <__NVIC_SetPriority+0xd4>)
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b25b      	sxtb	r3, r3
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	33c0      	adds	r3, #192	; 0xc0
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	589b      	ldr	r3, [r3, r2]
 800434e:	1dfa      	adds	r2, r7, #7
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	0011      	movs	r1, r2
 8004354:	2203      	movs	r2, #3
 8004356:	400a      	ands	r2, r1
 8004358:	00d2      	lsls	r2, r2, #3
 800435a:	21ff      	movs	r1, #255	; 0xff
 800435c:	4091      	lsls	r1, r2
 800435e:	000a      	movs	r2, r1
 8004360:	43d2      	mvns	r2, r2
 8004362:	401a      	ands	r2, r3
 8004364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	22ff      	movs	r2, #255	; 0xff
 800436c:	401a      	ands	r2, r3
 800436e:	1dfb      	adds	r3, r7, #7
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	0018      	movs	r0, r3
 8004374:	2303      	movs	r3, #3
 8004376:	4003      	ands	r3, r0
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800437c:	481f      	ldr	r0, [pc, #124]	; (80043fc <__NVIC_SetPriority+0xd4>)
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	430a      	orrs	r2, r1
 8004388:	33c0      	adds	r3, #192	; 0xc0
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800438e:	e031      	b.n	80043f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <__NVIC_SetPriority+0xd8>)
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	0019      	movs	r1, r3
 8004398:	230f      	movs	r3, #15
 800439a:	400b      	ands	r3, r1
 800439c:	3b08      	subs	r3, #8
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3306      	adds	r3, #6
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	3304      	adds	r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1dfa      	adds	r2, r7, #7
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	0011      	movs	r1, r2
 80043b0:	2203      	movs	r2, #3
 80043b2:	400a      	ands	r2, r1
 80043b4:	00d2      	lsls	r2, r2, #3
 80043b6:	21ff      	movs	r1, #255	; 0xff
 80043b8:	4091      	lsls	r1, r2
 80043ba:	000a      	movs	r2, r1
 80043bc:	43d2      	mvns	r2, r2
 80043be:	401a      	ands	r2, r3
 80043c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	019b      	lsls	r3, r3, #6
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	401a      	ands	r2, r3
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	0018      	movs	r0, r3
 80043d0:	2303      	movs	r3, #3
 80043d2:	4003      	ands	r3, r0
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <__NVIC_SetPriority+0xd8>)
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	001c      	movs	r4, r3
 80043e0:	230f      	movs	r3, #15
 80043e2:	4023      	ands	r3, r4
 80043e4:	3b08      	subs	r3, #8
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	430a      	orrs	r2, r1
 80043ea:	3306      	adds	r3, #6
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	18c3      	adds	r3, r0, r3
 80043f0:	3304      	adds	r3, #4
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b003      	add	sp, #12
 80043fa:	bd90      	pop	{r4, r7, pc}
 80043fc:	e000e100 	.word	0xe000e100
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1e5a      	subs	r2, r3, #1
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	045b      	lsls	r3, r3, #17
 8004414:	429a      	cmp	r2, r3
 8004416:	d301      	bcc.n	800441c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004418:	2301      	movs	r3, #1
 800441a:	e010      	b.n	800443e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <SysTick_Config+0x44>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	3a01      	subs	r2, #1
 8004422:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004424:	2301      	movs	r3, #1
 8004426:	425b      	negs	r3, r3
 8004428:	2103      	movs	r1, #3
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff ff7c 	bl	8004328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Config+0x44>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <SysTick_Config+0x44>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800443c:	2300      	movs	r3, #0
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	210f      	movs	r1, #15
 8004458:	187b      	adds	r3, r7, r1
 800445a:	1c02      	adds	r2, r0, #0
 800445c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	187b      	adds	r3, r7, r1
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b25b      	sxtb	r3, r3
 8004466:	0011      	movs	r1, r2
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff ff5d 	bl	8004328 <__NVIC_SetPriority>
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b004      	add	sp, #16
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	0002      	movs	r2, r0
 800447e:	1dfb      	adds	r3, r7, #7
 8004480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004482:	1dfb      	adds	r3, r7, #7
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b25b      	sxtb	r3, r3
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ff33 	bl	80042f4 <__NVIC_EnableIRQ>
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7ff ffaf 	bl	8004404 <SysTick_Config>
 80044a6:	0003      	movs	r3, r0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e056      	b.n	8004570 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7f5b      	ldrb	r3, [r3, #29]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7fe fbd3 	bl	8002c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	791b      	ldrb	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10c      	bne.n	8004502 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_CRC_Init+0xc8>)
 80044ee:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2118      	movs	r1, #24
 80044fc:	438a      	bics	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	e00b      	b.n	800451a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 f94c 	bl	80047aa <HAL_CRCEx_Polynomial_Set>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d001      	beq.n	800451a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e02a      	b.n	8004570 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	795b      	ldrb	r3, [r3, #5]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	4252      	negs	r2, r2
 800452a:	611a      	str	r2, [r3, #16]
 800452c:	e004      	b.n	8004538 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6912      	ldr	r2, [r2, #16]
 8004536:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2260      	movs	r2, #96	; 0x60
 8004540:	4393      	bics	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}
 8004578:	04c11db7 	.word	0x04c11db7

0800457c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d005      	beq.n	80045b6 <HAL_CRC_Calculate+0x3a>
 80045aa:	d82d      	bhi.n	8004608 <HAL_CRC_Calculate+0x8c>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d019      	beq.n	80045e4 <HAL_CRC_Calculate+0x68>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d020      	beq.n	80045f6 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80045b4:	e028      	b.n	8004608 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e00a      	b.n	80045d2 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	18d2      	adds	r2, r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d3f0      	bcc.n	80045bc <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]
      break;
 80045e2:	e012      	b.n	800460a <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 f815 	bl	800461a <CRC_Handle_8>
 80045f0:	0003      	movs	r3, r0
 80045f2:	613b      	str	r3, [r7, #16]
      break;
 80045f4:	e009      	b.n	800460a <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 f89d 	bl	800473c <CRC_Handle_16>
 8004602:	0003      	movs	r3, r0
 8004604:	613b      	str	r3, [r7, #16]
      break;
 8004606:	e000      	b.n	800460a <HAL_CRC_Calculate+0x8e>
      break;
 8004608:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004610:	693b      	ldr	r3, [r7, #16]
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b006      	add	sp, #24
 8004618:	bd80      	pop	{r7, pc}

0800461a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e023      	b.n	8004674 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	3301      	adds	r3, #1
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	18cb      	adds	r3, r1, r3
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004646:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	18cb      	adds	r3, r1, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004656:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	3303      	adds	r3, #3
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	18cb      	adds	r3, r1, r3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800466a:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800466c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3301      	adds	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	429a      	cmp	r2, r3
 800467c:	d3d6      	bcc.n	800462c <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2203      	movs	r2, #3
 8004682:	4013      	ands	r3, r2
 8004684:	d053      	beq.n	800472e <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	4013      	ands	r3, r2
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	18d2      	adds	r2, r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d119      	bne.n	80046de <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	18d3      	adds	r3, r2, r3
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	b21a      	sxth	r2, r3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	3301      	adds	r3, #1
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	18cb      	adds	r3, r1, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	4313      	orrs	r3, r2
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	211a      	movs	r1, #26
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	187a      	adds	r2, r7, r1
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d122      	bne.n	800472e <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	18d3      	adds	r3, r2, r3
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	b21a      	sxth	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	3301      	adds	r3, #1
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	18cb      	adds	r3, r1, r3
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b21b      	sxth	r3, r3
 8004704:	4313      	orrs	r3, r2
 8004706:	b21a      	sxth	r2, r3
 8004708:	211a      	movs	r1, #26
 800470a:	187b      	adds	r3, r7, r1
 800470c:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	187a      	adds	r2, r7, r1
 8004718:	8812      	ldrh	r2, [r2, #0]
 800471a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	3302      	adds	r3, #2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	18d2      	adds	r2, r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b008      	add	sp, #32
 800473a:	bd80      	pop	{r7, pc}

0800473c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e013      	b.n	8004776 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	18d3      	adds	r3, r2, r3
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	041a      	lsls	r2, r3, #16
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	18cb      	adds	r3, r1, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	0019      	movs	r1, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d3e6      	bcc.n	800474e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	d009      	beq.n	800479c <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	18d3      	adds	r3, r2, r3
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b006      	add	sp, #24
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2117      	movs	r1, #23
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047be:	231f      	movs	r3, #31
 80047c0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d103      	bne.n	80047d2 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e045      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1e5a      	subs	r2, r3, #1
 80047d8:	613a      	str	r2, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_CRCEx_Polynomial_Set+0x46>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	221f      	movs	r2, #31
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	40da      	lsrs	r2, r3
 80047e8:	0013      	movs	r3, r2
 80047ea:	2201      	movs	r2, #1
 80047ec:	4013      	ands	r3, r2
 80047ee:	d0f1      	beq.n	80047d4 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b18      	cmp	r3, #24
 80047f4:	d00f      	beq.n	8004816 <HAL_CRCEx_Polynomial_Set+0x6c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b18      	cmp	r3, #24
 80047fa:	d824      	bhi.n	8004846 <HAL_CRCEx_Polynomial_Set+0x9c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d011      	beq.n	8004826 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b10      	cmp	r3, #16
 8004806:	d81e      	bhi.n	8004846 <HAL_CRCEx_Polynomial_Set+0x9c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d020      	beq.n	8004850 <HAL_CRCEx_Polynomial_Set+0xa6>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d010      	beq.n	8004836 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004814:	e017      	b.n	8004846 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d91b      	bls.n	8004854 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 800481c:	2317      	movs	r3, #23
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004824:	e016      	b.n	8004854 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b07      	cmp	r3, #7
 800482a:	d915      	bls.n	8004858 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 800482c:	2317      	movs	r3, #23
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004834:	e010      	b.n	8004858 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d90f      	bls.n	800485c <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 800483c:	2317      	movs	r3, #23
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004844:	e00a      	b.n	800485c <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004846:	2317      	movs	r3, #23
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
        break;
 800484e:	e006      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	e004      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	e002      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	e000      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800485c:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800485e:	2317      	movs	r3, #23
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10e      	bne.n	8004886 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2218      	movs	r2, #24
 8004878:	4393      	bics	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004886:	2317      	movs	r3, #23
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	781b      	ldrb	r3, [r3, #0]
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b006      	add	sp, #24
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e061      	b.n	800496a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_DMA_Init+0xe0>)
 80048ac:	4694      	mov	ip, r2
 80048ae:	4463      	add	r3, ip
 80048b0:	2114      	movs	r1, #20
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7fb fc44 	bl	8000140 <__udivsi3>
 80048b8:	0003      	movs	r3, r0
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a2d      	ldr	r2, [pc, #180]	; (8004978 <HAL_DMA_Init+0xe4>)
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2225      	movs	r2, #37	; 0x25
 80048ca:	2102      	movs	r1, #2
 80048cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_DMA_Init+0xe8>)
 80048da:	4013      	ands	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	429a      	cmp	r2, r3
 800491e:	d018      	beq.n	8004952 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_DMA_Init+0xec>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	211c      	movs	r1, #28
 800492a:	400b      	ands	r3, r1
 800492c:	210f      	movs	r1, #15
 800492e:	4099      	lsls	r1, r3
 8004930:	000b      	movs	r3, r1
 8004932:	43d9      	mvns	r1, r3
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_DMA_Init+0xec>)
 8004936:	400a      	ands	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_DMA_Init+0xec>)
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	201c      	movs	r0, #28
 8004948:	4003      	ands	r3, r0
 800494a:	409a      	lsls	r2, r3
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_DMA_Init+0xec>)
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2225      	movs	r2, #37	; 0x25
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	2100      	movs	r1, #0
 8004966:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b004      	add	sp, #16
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	bffdfff8 	.word	0xbffdfff8
 8004978:	40020000 	.word	0x40020000
 800497c:	ffff800f 	.word	0xffff800f
 8004980:	400200a8 	.word	0x400200a8

08004984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2317      	movs	r3, #23
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2224      	movs	r2, #36	; 0x24
 800499e:	5c9b      	ldrb	r3, [r3, r2]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_DMA_Start_IT+0x24>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e04f      	b.n	8004a48 <HAL_DMA_Start_IT+0xc4>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	2101      	movs	r1, #1
 80049ae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2225      	movs	r2, #37	; 0x25
 80049b4:	5c9b      	ldrb	r3, [r3, r2]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d13a      	bne.n	8004a32 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2225      	movs	r2, #37	; 0x25
 80049c0:	2102      	movs	r1, #2
 80049c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	438a      	bics	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f96a 	bl	8004cba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	210e      	movs	r1, #14
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e00f      	b.n	8004a20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	210a      	movs	r1, #10
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e007      	b.n	8004a42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2224      	movs	r2, #36	; 0x24
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a3a:	2317      	movs	r3, #23
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004a42:	2317      	movs	r3, #23
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	781b      	ldrb	r3, [r3, #0]
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	230f      	movs	r3, #15
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2225      	movs	r2, #37	; 0x25
 8004a64:	5c9b      	ldrb	r3, [r3, r2]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d008      	beq.n	8004a7e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2224      	movs	r2, #36	; 0x24
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e024      	b.n	8004ac8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	210e      	movs	r1, #14
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	438a      	bics	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	221c      	movs	r2, #28
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4091      	lsls	r1, r2
 8004aae:	000a      	movs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2225      	movs	r2, #37	; 0x25
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2224      	movs	r2, #36	; 0x24
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]

    return status;
 8004ac2:	230f      	movs	r3, #15
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b004      	add	sp, #16
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	210f      	movs	r1, #15
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2225      	movs	r2, #37	; 0x25
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d006      	beq.n	8004afa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004af2:	187b      	adds	r3, r7, r1
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e02a      	b.n	8004b50 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	210e      	movs	r1, #14
 8004b06:	438a      	bics	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	438a      	bics	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	221c      	movs	r2, #28
 8004b20:	401a      	ands	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2101      	movs	r1, #1
 8004b28:	4091      	lsls	r1, r2
 8004b2a:	000a      	movs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2225      	movs	r2, #37	; 0x25
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2224      	movs	r2, #36	; 0x24
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	0010      	movs	r0, r2
 8004b4e:	4798      	blx	r3
    }
  }
  return status;
 8004b50:	230f      	movs	r3, #15
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	781b      	ldrb	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	221c      	movs	r2, #28
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2204      	movs	r2, #4
 8004b80:	409a      	lsls	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4013      	ands	r3, r2
 8004b88:	d026      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x7a>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d107      	bne.n	8004bae <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2104      	movs	r1, #4
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	221c      	movs	r2, #28
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2104      	movs	r1, #4
 8004bbc:	4091      	lsls	r1, r2
 8004bbe:	000a      	movs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d100      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x6e>
 8004bca:	e071      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004bd6:	e06b      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	221c      	movs	r2, #28
 8004bde:	4013      	ands	r3, r2
 8004be0:	2202      	movs	r2, #2
 8004be2:	409a      	lsls	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	d02d      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xea>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d029      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d10b      	bne.n	8004c18 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	210a      	movs	r1, #10
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2225      	movs	r2, #37	; 0x25
 8004c14:	2101      	movs	r1, #1
 8004c16:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	221c      	movs	r2, #28
 8004c1e:	401a      	ands	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2102      	movs	r1, #2
 8004c26:	4091      	lsls	r1, r2
 8004c28:	000a      	movs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	2100      	movs	r1, #0
 8004c32:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d039      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	0010      	movs	r0, r2
 8004c44:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c46:	e033      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	221c      	movs	r2, #28
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2208      	movs	r2, #8
 8004c52:	409a      	lsls	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d02a      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x154>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	4013      	ands	r3, r2
 8004c62:	d026      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	210e      	movs	r1, #14
 8004c70:	438a      	bics	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	221c      	movs	r2, #28
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2101      	movs	r1, #1
 8004c82:	4091      	lsls	r1, r2
 8004c84:	000a      	movs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2225      	movs	r2, #37	; 0x25
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	0010      	movs	r0, r2
 8004cae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46c0      	nop			; (mov r8, r8)
}
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	221c      	movs	r2, #28
 8004cce:	401a      	ands	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4091      	lsls	r1, r2
 8004cd8:	000a      	movs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d108      	bne.n	8004cfe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cfc:	e007      	b.n	8004d0e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b004      	add	sp, #16
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d2e:	e155      	b.n	8004fdc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2101      	movs	r1, #1
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4091      	lsls	r1, r2
 8004d3a:	000a      	movs	r2, r1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d100      	bne.n	8004d48 <HAL_GPIO_Init+0x30>
 8004d46:	e146      	b.n	8004fd6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d005      	beq.n	8004d60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d130      	bne.n	8004dc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	0013      	movs	r3, r2
 8004d70:	43da      	mvns	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	409a      	lsls	r2, r3
 8004d82:	0013      	movs	r3, r2
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d96:	2201      	movs	r2, #1
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	2201      	movs	r2, #1
 8004dae:	401a      	ands	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	409a      	lsls	r2, r3
 8004db4:	0013      	movs	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d017      	beq.n	8004dfe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2203      	movs	r2, #3
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	0013      	movs	r3, r2
 8004dde:	43da      	mvns	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d123      	bne.n	8004e52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	08da      	lsrs	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3208      	adds	r2, #8
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	58d3      	ldr	r3, [r2, r3]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2207      	movs	r2, #7
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	220f      	movs	r2, #15
 8004e22:	409a      	lsls	r2, r3
 8004e24:	0013      	movs	r3, r2
 8004e26:	43da      	mvns	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2107      	movs	r1, #7
 8004e36:	400b      	ands	r3, r1
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	0013      	movs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	0092      	lsls	r2, r2, #2
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	0013      	movs	r3, r2
 8004e62:	43da      	mvns	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	401a      	ands	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	0013      	movs	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	23c0      	movs	r3, #192	; 0xc0
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d100      	bne.n	8004e94 <HAL_GPIO_Init+0x17c>
 8004e92:	e0a0      	b.n	8004fd6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e94:	4b57      	ldr	r3, [pc, #348]	; (8004ff4 <HAL_GPIO_Init+0x2dc>)
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_GPIO_Init+0x2dc>)
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea0:	4a55      	ldr	r2, [pc, #340]	; (8004ff8 <HAL_GPIO_Init+0x2e0>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	589b      	ldr	r3, [r3, r2]
 8004eac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	0013      	movs	r3, r2
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	23a0      	movs	r3, #160	; 0xa0
 8004ec8:	05db      	lsls	r3, r3, #23
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d01f      	beq.n	8004f0e <HAL_GPIO_Init+0x1f6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4a      	ldr	r2, [pc, #296]	; (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d019      	beq.n	8004f0a <HAL_GPIO_Init+0x1f2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a49      	ldr	r2, [pc, #292]	; (8005000 <HAL_GPIO_Init+0x2e8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_GPIO_Init+0x1ee>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a48      	ldr	r2, [pc, #288]	; (8005004 <HAL_GPIO_Init+0x2ec>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00d      	beq.n	8004f02 <HAL_GPIO_Init+0x1ea>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a47      	ldr	r2, [pc, #284]	; (8005008 <HAL_GPIO_Init+0x2f0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <HAL_GPIO_Init+0x1e6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a46      	ldr	r2, [pc, #280]	; (800500c <HAL_GPIO_Init+0x2f4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_GPIO_Init+0x1e2>
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	e00a      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004efa:	2306      	movs	r3, #6
 8004efc:	e008      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004efe:	2304      	movs	r3, #4
 8004f00:	e006      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004f02:	2303      	movs	r3, #3
 8004f04:	e004      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e002      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	2103      	movs	r1, #3
 8004f14:	400a      	ands	r2, r1
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	4093      	lsls	r3, r2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f20:	4935      	ldr	r1, [pc, #212]	; (8004ff8 <HAL_GPIO_Init+0x2e0>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	3302      	adds	r3, #2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2e:	4b38      	ldr	r3, [pc, #224]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43da      	mvns	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	035b      	lsls	r3, r3, #13
 8004f46:	4013      	ands	r3, r2
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f52:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f58:	4b2d      	ldr	r3, [pc, #180]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	039b      	lsls	r3, r3, #14
 8004f70:	4013      	ands	r3, r2
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fac:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_GPIO_Init+0x2f8>)
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	40da      	lsrs	r2, r3
 8004fe4:	1e13      	subs	r3, r2, #0
 8004fe6:	d000      	beq.n	8004fea <HAL_GPIO_Init+0x2d2>
 8004fe8:	e6a2      	b.n	8004d30 <HAL_GPIO_Init+0x18>
  }
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b006      	add	sp, #24
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	50000400 	.word	0x50000400
 8005000:	50000800 	.word	0x50000800
 8005004:	50000c00 	.word	0x50000c00
 8005008:	50001000 	.word	0x50001000
 800500c:	50001c00 	.word	0x50001c00
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e082      	b.n	800512c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2241      	movs	r2, #65	; 0x41
 800502a:	5c9b      	ldrb	r3, [r3, r2]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2240      	movs	r2, #64	; 0x40
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f7fd fe3f 	bl	8002cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2241      	movs	r2, #65	; 0x41
 8005046:	2124      	movs	r1, #36	; 0x24
 8005048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4934      	ldr	r1, [pc, #208]	; (8005134 <HAL_I2C_Init+0x120>)
 8005064:	400a      	ands	r2, r1
 8005066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4931      	ldr	r1, [pc, #196]	; (8005138 <HAL_I2C_Init+0x124>)
 8005074:	400a      	ands	r2, r1
 8005076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d108      	bne.n	8005092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	0209      	lsls	r1, r1, #8
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	e007      	b.n	80050a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2184      	movs	r1, #132	; 0x84
 800509c:	0209      	lsls	r1, r1, #8
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d104      	bne.n	80050b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	491f      	ldr	r1, [pc, #124]	; (800513c <HAL_I2C_Init+0x128>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	491a      	ldr	r1, [pc, #104]	; (8005138 <HAL_I2C_Init+0x124>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	431a      	orrs	r2, r3
 80050de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69d9      	ldr	r1, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2101      	movs	r1, #1
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2241      	movs	r2, #65	; 0x41
 8005118:	2120      	movs	r1, #32
 800511a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2242      	movs	r2, #66	; 0x42
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}
 8005134:	f0ffffff 	.word	0xf0ffffff
 8005138:	ffff7fff 	.word	0xffff7fff
 800513c:	02008000 	.word	0x02008000

08005140 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	0008      	movs	r0, r1
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	0019      	movs	r1, r3
 800514e:	230a      	movs	r3, #10
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	1c02      	adds	r2, r0, #0
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	2308      	movs	r3, #8
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	1c0a      	adds	r2, r1, #0
 800515c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2241      	movs	r2, #65	; 0x41
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d000      	beq.n	800516c <HAL_I2C_Master_Transmit+0x2c>
 800516a:	e0e7      	b.n	800533c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_I2C_Master_Transmit+0x3a>
 8005176:	2302      	movs	r3, #2
 8005178:	e0e1      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005182:	f7ff f8ad 	bl	80042e0 <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	0219      	lsls	r1, r3, #8
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2319      	movs	r3, #25
 8005196:	2201      	movs	r2, #1
 8005198:	f000 fb1e 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d001      	beq.n	80051a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0cc      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2241      	movs	r2, #65	; 0x41
 80051a8:	2121      	movs	r1, #33	; 0x21
 80051aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2242      	movs	r2, #66	; 0x42
 80051b0:	2110      	movs	r1, #16
 80051b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2208      	movs	r2, #8
 80051c4:	18ba      	adds	r2, r7, r2
 80051c6:	8812      	ldrh	r2, [r2, #0]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2bff      	cmp	r3, #255	; 0xff
 80051d8:	d911      	bls.n	80051fe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	045c      	lsls	r4, r3, #17
 80051ea:	230a      	movs	r3, #10
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	8819      	ldrh	r1, [r3, #0]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	4b55      	ldr	r3, [pc, #340]	; (8005348 <HAL_I2C_Master_Transmit+0x208>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	0023      	movs	r3, r4
 80051f8:	f000 fd48 	bl	8005c8c <I2C_TransferConfig>
 80051fc:	e075      	b.n	80052ea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	b2da      	uxtb	r2, r3
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	049c      	lsls	r4, r3, #18
 8005212:	230a      	movs	r3, #10
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	8819      	ldrh	r1, [r3, #0]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_I2C_Master_Transmit+0x208>)
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	0023      	movs	r3, r4
 8005220:	f000 fd34 	bl	8005c8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005224:	e061      	b.n	80052ea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	0018      	movs	r0, r3
 800522e:	f000 fb21 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 8005232:	1e03      	subs	r3, r0, #0
 8005234:	d001      	beq.n	800523a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e081      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d03a      	beq.n	80052ea <HAL_I2C_Master_Transmit+0x1aa>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d136      	bne.n	80052ea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800527c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	0013      	movs	r3, r2
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	f000 faa5 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e053      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2bff      	cmp	r3, #255	; 0xff
 800529e:	d911      	bls.n	80052c4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	22ff      	movs	r2, #255	; 0xff
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	045c      	lsls	r4, r3, #17
 80052b0:	230a      	movs	r3, #10
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	8819      	ldrh	r1, [r3, #0]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	0023      	movs	r3, r4
 80052be:	f000 fce5 	bl	8005c8c <I2C_TransferConfig>
 80052c2:	e012      	b.n	80052ea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	049c      	lsls	r4, r3, #18
 80052d8:	230a      	movs	r3, #10
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	8819      	ldrh	r1, [r3, #0]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	0023      	movs	r3, r4
 80052e6:	f000 fcd1 	bl	8005c8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d198      	bne.n	8005226 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 fb00 	bl	8005900 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d001      	beq.n	8005308 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e01a      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2220      	movs	r2, #32
 800530e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	490c      	ldr	r1, [pc, #48]	; (800534c <HAL_I2C_Master_Transmit+0x20c>)
 800531c:	400a      	ands	r2, r1
 800531e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2241      	movs	r2, #65	; 0x41
 8005324:	2120      	movs	r1, #32
 8005326:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2242      	movs	r2, #66	; 0x42
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e000      	b.n	800533e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
  }
}
 800533e:	0018      	movs	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	b007      	add	sp, #28
 8005344:	bd90      	pop	{r4, r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	80002000 	.word	0x80002000
 800534c:	fe00e800 	.word	0xfe00e800

08005350 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b089      	sub	sp, #36	; 0x24
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	0008      	movs	r0, r1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	0019      	movs	r1, r3
 800535e:	230a      	movs	r3, #10
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	1c02      	adds	r2, r0, #0
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	2308      	movs	r3, #8
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	1c0a      	adds	r2, r1, #0
 800536c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2241      	movs	r2, #65	; 0x41
 8005372:	5c9b      	ldrb	r3, [r3, r2]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b20      	cmp	r3, #32
 8005378:	d000      	beq.n	800537c <HAL_I2C_Master_Receive+0x2c>
 800537a:	e0e8      	b.n	800554e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	5c9b      	ldrb	r3, [r3, r2]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_I2C_Master_Receive+0x3a>
 8005386:	2302      	movs	r3, #2
 8005388:	e0e2      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2240      	movs	r2, #64	; 0x40
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005392:	f7fe ffa5 	bl	80042e0 <HAL_GetTick>
 8005396:	0003      	movs	r3, r0
 8005398:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	0219      	lsls	r1, r3, #8
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2319      	movs	r3, #25
 80053a6:	2201      	movs	r2, #1
 80053a8:	f000 fa16 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	1e03      	subs	r3, r0, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0cd      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2241      	movs	r2, #65	; 0x41
 80053b8:	2122      	movs	r1, #34	; 0x22
 80053ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2242      	movs	r2, #66	; 0x42
 80053c0:	2110      	movs	r1, #16
 80053c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2208      	movs	r2, #8
 80053d4:	18ba      	adds	r2, r7, r2
 80053d6:	8812      	ldrh	r2, [r2, #0]
 80053d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2bff      	cmp	r3, #255	; 0xff
 80053e8:	d911      	bls.n	800540e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	22ff      	movs	r2, #255	; 0xff
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	045c      	lsls	r4, r3, #17
 80053fa:	230a      	movs	r3, #10
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	8819      	ldrh	r1, [r3, #0]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	4b55      	ldr	r3, [pc, #340]	; (8005558 <HAL_I2C_Master_Receive+0x208>)
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	0023      	movs	r3, r4
 8005408:	f000 fc40 	bl	8005c8c <I2C_TransferConfig>
 800540c:	e076      	b.n	80054fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	049c      	lsls	r4, r3, #18
 8005422:	230a      	movs	r3, #10
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	8819      	ldrh	r1, [r3, #0]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <HAL_I2C_Master_Receive+0x208>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	0023      	movs	r3, r4
 8005430:	f000 fc2c 	bl	8005c8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005434:	e062      	b.n	80054fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 faa3 	bl	8005988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e082      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03a      	beq.n	80054fc <HAL_I2C_Master_Receive+0x1ac>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d136      	bne.n	80054fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800548e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	0013      	movs	r3, r2
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	f000 f99c 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	1e03      	subs	r3, r0, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e053      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2bff      	cmp	r3, #255	; 0xff
 80054b0:	d911      	bls.n	80054d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	045c      	lsls	r4, r3, #17
 80054c2:	230a      	movs	r3, #10
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	8819      	ldrh	r1, [r3, #0]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	0023      	movs	r3, r4
 80054d0:	f000 fbdc 	bl	8005c8c <I2C_TransferConfig>
 80054d4:	e012      	b.n	80054fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	049c      	lsls	r4, r3, #18
 80054ea:	230a      	movs	r3, #10
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	8819      	ldrh	r1, [r3, #0]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	0023      	movs	r3, r4
 80054f8:	f000 fbc8 	bl	8005c8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d197      	bne.n	8005436 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	0018      	movs	r0, r3
 800550e:	f000 f9f7 	bl	8005900 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005512:	1e03      	subs	r3, r0, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e01a      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2220      	movs	r2, #32
 8005520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	490b      	ldr	r1, [pc, #44]	; (800555c <HAL_I2C_Master_Receive+0x20c>)
 800552e:	400a      	ands	r2, r1
 8005530:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2241      	movs	r2, #65	; 0x41
 8005536:	2120      	movs	r1, #32
 8005538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2242      	movs	r2, #66	; 0x42
 800553e:	2100      	movs	r1, #0
 8005540:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2240      	movs	r2, #64	; 0x40
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b007      	add	sp, #28
 8005556:	bd90      	pop	{r4, r7, pc}
 8005558:	80002400 	.word	0x80002400
 800555c:	fe00e800 	.word	0xfe00e800

08005560 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	230a      	movs	r3, #10
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	1c0a      	adds	r2, r1, #0
 8005572:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2241      	movs	r2, #65	; 0x41
 800557c:	5c9b      	ldrb	r3, [r3, r2]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	d000      	beq.n	8005586 <HAL_I2C_IsDeviceReady+0x26>
 8005584:	e0fd      	b.n	8005782 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	401a      	ands	r2, r3
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	429a      	cmp	r2, r3
 8005598:	d101      	bne.n	800559e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	e0f2      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2240      	movs	r2, #64	; 0x40
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_I2C_IsDeviceReady+0x4c>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e0eb      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2240      	movs	r2, #64	; 0x40
 80055b0:	2101      	movs	r1, #1
 80055b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2241      	movs	r2, #65	; 0x41
 80055b8:	2124      	movs	r1, #36	; 0x24
 80055ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <HAL_I2C_IsDeviceReady+0x7a>
 80055ca:	230a      	movs	r3, #10
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	0d9b      	lsrs	r3, r3, #22
 80055d4:	4a6d      	ldr	r2, [pc, #436]	; (800578c <HAL_I2C_IsDeviceReady+0x22c>)
 80055d6:	431a      	orrs	r2, r3
 80055d8:	e006      	b.n	80055e8 <HAL_I2C_IsDeviceReady+0x88>
 80055da:	230a      	movs	r3, #10
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	059b      	lsls	r3, r3, #22
 80055e2:	0d9b      	lsrs	r3, r3, #22
 80055e4:	4a6a      	ldr	r2, [pc, #424]	; (8005790 <HAL_I2C_IsDeviceReady+0x230>)
 80055e6:	431a      	orrs	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055ee:	f7fe fe77 	bl	80042e0 <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2220      	movs	r2, #32
 80055fe:	4013      	ands	r3, r2
 8005600:	3b20      	subs	r3, #32
 8005602:	425a      	negs	r2, r3
 8005604:	4153      	adcs	r3, r2
 8005606:	b2da      	uxtb	r2, r3
 8005608:	231f      	movs	r3, #31
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2210      	movs	r2, #16
 8005616:	4013      	ands	r3, r2
 8005618:	3b10      	subs	r3, #16
 800561a:	425a      	negs	r2, r3
 800561c:	4153      	adcs	r3, r2
 800561e:	b2da      	uxtb	r2, r3
 8005620:	231e      	movs	r3, #30
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005626:	e035      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	d01a      	beq.n	8005664 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fe fe57 	bl	80042e0 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <HAL_I2C_IsDeviceReady+0xe4>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2241      	movs	r2, #65	; 0x41
 8005648:	2120      	movs	r1, #32
 800564a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	2220      	movs	r2, #32
 8005652:	431a      	orrs	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2240      	movs	r2, #64	; 0x40
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e08f      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2220      	movs	r2, #32
 800566c:	4013      	ands	r3, r2
 800566e:	3b20      	subs	r3, #32
 8005670:	425a      	negs	r2, r3
 8005672:	4153      	adcs	r3, r2
 8005674:	b2da      	uxtb	r2, r3
 8005676:	231f      	movs	r3, #31
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2210      	movs	r2, #16
 8005684:	4013      	ands	r3, r2
 8005686:	3b10      	subs	r3, #16
 8005688:	425a      	negs	r2, r3
 800568a:	4153      	adcs	r3, r2
 800568c:	b2da      	uxtb	r2, r3
 800568e:	231e      	movs	r3, #30
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005694:	231f      	movs	r3, #31
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_I2C_IsDeviceReady+0x148>
 800569e:	231e      	movs	r3, #30
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0bf      	beq.n	8005628 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	2210      	movs	r2, #16
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d01a      	beq.n	80056ec <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	0013      	movs	r3, r2
 80056c0:	2200      	movs	r2, #0
 80056c2:	2120      	movs	r1, #32
 80056c4:	f000 f888 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e059      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2220      	movs	r2, #32
 80056d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2241      	movs	r2, #65	; 0x41
 80056dc:	2120      	movs	r1, #32
 80056de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2240      	movs	r2, #64	; 0x40
 80056e4:	2100      	movs	r1, #0
 80056e6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e04b      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	0013      	movs	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	2120      	movs	r1, #32
 80056fa:	f000 f86d 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e03e      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2210      	movs	r2, #16
 800570c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2220      	movs	r2, #32
 8005714:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	d119      	bne.n	8005752 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	01c9      	lsls	r1, r1, #7
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	0013      	movs	r3, r2
 800573a:	2200      	movs	r2, #0
 800573c:	2120      	movs	r1, #32
 800573e:	f000 f84b 	bl	80057d8 <I2C_WaitOnFlagUntilTimeout>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01c      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d900      	bls.n	8005762 <HAL_I2C_IsDeviceReady+0x202>
 8005760:	e72f      	b.n	80055c2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2241      	movs	r2, #65	; 0x41
 8005766:	2120      	movs	r1, #32
 8005768:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	2220      	movs	r2, #32
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b008      	add	sp, #32
 800578a:	bd80      	pop	{r7, pc}
 800578c:	02002000 	.word	0x02002000
 8005790:	02002800 	.word	0x02002800

08005794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d103      	bne.n	80057b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d007      	beq.n	80057d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	430a      	orrs	r2, r1
 80057ce:	619a      	str	r2, [r3, #24]
  }
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b002      	add	sp, #8
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	1dfb      	adds	r3, r7, #7
 80057e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e8:	e030      	b.n	800584c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	d02d      	beq.n	800584c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fe fd76 	bl	80042e0 <HAL_GetTick>
 80057f4:	0002      	movs	r2, r0
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d122      	bne.n	800584c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4013      	ands	r3, r2
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	425a      	negs	r2, r3
 8005816:	4153      	adcs	r3, r2
 8005818:	b2db      	uxtb	r3, r3
 800581a:	001a      	movs	r2, r3
 800581c:	1dfb      	adds	r3, r7, #7
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d113      	bne.n	800584c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	2220      	movs	r2, #32
 800582a:	431a      	orrs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2241      	movs	r2, #65	; 0x41
 8005834:	2120      	movs	r1, #32
 8005836:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2242      	movs	r2, #66	; 0x42
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	2100      	movs	r1, #0
 8005846:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e00f      	b.n	800586c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	425a      	negs	r2, r3
 800585c:	4153      	adcs	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	001a      	movs	r2, r3
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d0bf      	beq.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b004      	add	sp, #16
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005880:	e032      	b.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	0018      	movs	r0, r3
 800588a:	f000 f8ff 	bl	8005a8c <I2C_IsErrorOccurred>
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d001      	beq.n	8005896 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e030      	b.n	80058f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	d025      	beq.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589c:	f7fe fd20 	bl	80042e0 <HAL_GetTick>
 80058a0:	0002      	movs	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d11a      	bne.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2202      	movs	r2, #2
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d013      	beq.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	2220      	movs	r2, #32
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2241      	movs	r2, #65	; 0x41
 80058d0:	2120      	movs	r1, #32
 80058d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2242      	movs	r2, #66	; 0x42
 80058d8:	2100      	movs	r1, #0
 80058da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2240      	movs	r2, #64	; 0x40
 80058e0:	2100      	movs	r1, #0
 80058e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e007      	b.n	80058f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d1c5      	bne.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800590c:	e02f      	b.n	800596e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0018      	movs	r0, r3
 8005916:	f000 f8b9 	bl	8005a8c <I2C_IsErrorOccurred>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d001      	beq.n	8005922 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e02d      	b.n	800597e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fe fcdd 	bl	80042e0 <HAL_GetTick>
 8005926:	0002      	movs	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2220      	movs	r2, #32
 8005940:	4013      	ands	r3, r2
 8005942:	2b20      	cmp	r3, #32
 8005944:	d013      	beq.n	800596e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	2220      	movs	r2, #32
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2241      	movs	r2, #65	; 0x41
 8005956:	2120      	movs	r1, #32
 8005958:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2242      	movs	r2, #66	; 0x42
 800595e:	2100      	movs	r1, #0
 8005960:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2240      	movs	r2, #64	; 0x40
 8005966:	2100      	movs	r1, #0
 8005968:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e007      	b.n	800597e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2220      	movs	r2, #32
 8005976:	4013      	ands	r3, r2
 8005978:	2b20      	cmp	r3, #32
 800597a:	d1c8      	bne.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b004      	add	sp, #16
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005994:	e06b      	b.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f875 	bl	8005a8c <I2C_IsErrorOccurred>
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e069      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2220      	movs	r2, #32
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d138      	bne.n	8005a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2204      	movs	r2, #4
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d105      	bne.n	80059d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e055      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2210      	movs	r2, #16
 80059da:	4013      	ands	r3, r2
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d107      	bne.n	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2210      	movs	r2, #16
 80059e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2204      	movs	r2, #4
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44
 80059ee:	e002      	b.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2220      	movs	r2, #32
 80059fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	491f      	ldr	r1, [pc, #124]	; (8005a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2241      	movs	r2, #65	; 0x41
 8005a12:	2120      	movs	r1, #32
 8005a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2242      	movs	r2, #66	; 0x42
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2240      	movs	r2, #64	; 0x40
 8005a22:	2100      	movs	r1, #0
 8005a24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e029      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fe fc59 	bl	80042e0 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2204      	movs	r2, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d00f      	beq.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	2220      	movs	r2, #32
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2241      	movs	r2, #65	; 0x41
 8005a5e:	2120      	movs	r1, #32
 8005a60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2240      	movs	r2, #64	; 0x40
 8005a66:	2100      	movs	r1, #0
 8005a68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e007      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	2204      	movs	r2, #4
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d18c      	bne.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b004      	add	sp, #16
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	fe00e800 	.word	0xfe00e800

08005a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b08b      	sub	sp, #44	; 0x2c
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2327      	movs	r3, #39	; 0x27
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d100      	bne.n	8005aba <I2C_IsErrorOccurred+0x2e>
 8005ab8:	e082      	b.n	8005bc0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2210      	movs	r2, #16
 8005ac0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ac2:	e060      	b.n	8005b86 <I2C_IsErrorOccurred+0xfa>
 8005ac4:	2427      	movs	r4, #39	; 0x27
 8005ac6:	193b      	adds	r3, r7, r4
 8005ac8:	193a      	adds	r2, r7, r4
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	d058      	beq.n	8005b86 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ad4:	f7fe fc04 	bl	80042e0 <HAL_GetTick>
 8005ad8:	0002      	movs	r2, r0
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d306      	bcc.n	8005af2 <I2C_IsErrorOccurred+0x66>
 8005ae4:	193b      	adds	r3, r7, r4
 8005ae6:	193a      	adds	r2, r7, r4
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d149      	bne.n	8005b86 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	4013      	ands	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b00:	2013      	movs	r0, #19
 8005b02:	183b      	adds	r3, r7, r0
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	2142      	movs	r1, #66	; 0x42
 8005b08:	5c52      	ldrb	r2, [r2, r1]
 8005b0a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	401a      	ands	r2, r3
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d126      	bne.n	8005b6e <I2C_IsErrorOccurred+0xe2>
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	01db      	lsls	r3, r3, #7
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d021      	beq.n	8005b6e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005b2a:	183b      	adds	r3, r7, r0
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d01d      	beq.n	8005b6e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	01c9      	lsls	r1, r1, #7
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b44:	f7fe fbcc 	bl	80042e0 <HAL_GetTick>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b4c:	e00f      	b.n	8005b6e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b4e:	f7fe fbc7 	bl	80042e0 <HAL_GetTick>
 8005b52:	0002      	movs	r2, r0
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b19      	cmp	r3, #25
 8005b5a:	d908      	bls.n	8005b6e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	4313      	orrs	r3, r2
 8005b62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b64:	2327      	movs	r3, #39	; 0x27
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]

              break;
 8005b6c:	e00b      	b.n	8005b86 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2220      	movs	r2, #32
 8005b76:	4013      	ands	r3, r2
 8005b78:	2127      	movs	r1, #39	; 0x27
 8005b7a:	187a      	adds	r2, r7, r1
 8005b7c:	1879      	adds	r1, r7, r1
 8005b7e:	7809      	ldrb	r1, [r1, #0]
 8005b80:	7011      	strb	r1, [r2, #0]
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d1e3      	bne.n	8005b4e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d004      	beq.n	8005b9e <I2C_IsErrorOccurred+0x112>
 8005b94:	2327      	movs	r3, #39	; 0x27
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d092      	beq.n	8005ac4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b9e:	2327      	movs	r3, #39	; 0x27
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2220      	movs	r2, #32
 8005bae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bb8:	2327      	movs	r3, #39	; 0x27
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d00c      	beq.n	8005bec <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	0052      	lsls	r2, r2, #1
 8005be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005be4:	2327      	movs	r3, #39	; 0x27
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00c      	beq.n	8005c10 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	00d2      	lsls	r2, r2, #3
 8005c06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c08:	2327      	movs	r3, #39	; 0x27
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4013      	ands	r3, r2
 8005c18:	d00c      	beq.n	8005c34 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c2c:	2327      	movs	r3, #39	; 0x27
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2201      	movs	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005c34:	2327      	movs	r3, #39	; 0x27
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01d      	beq.n	8005c7a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff fda7 	bl	8005794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	490d      	ldr	r1, [pc, #52]	; (8005c88 <I2C_IsErrorOccurred+0x1fc>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2241      	movs	r2, #65	; 0x41
 8005c66:	2120      	movs	r1, #32
 8005c68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2242      	movs	r2, #66	; 0x42
 8005c6e:	2100      	movs	r1, #0
 8005c70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2240      	movs	r2, #64	; 0x40
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005c7a:	2327      	movs	r3, #39	; 0x27
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	781b      	ldrb	r3, [r3, #0]
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b00b      	add	sp, #44	; 0x2c
 8005c86:	bd90      	pop	{r4, r7, pc}
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	0008      	movs	r0, r1
 8005c96:	0011      	movs	r1, r2
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	240a      	movs	r4, #10
 8005c9c:	193b      	adds	r3, r7, r4
 8005c9e:	1c02      	adds	r2, r0, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	2009      	movs	r0, #9
 8005ca4:	183b      	adds	r3, r7, r0
 8005ca6:	1c0a      	adds	r2, r1, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005caa:	193b      	adds	r3, r7, r4
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	059b      	lsls	r3, r3, #22
 8005cb0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	0419      	lsls	r1, r3, #16
 8005cb8:	23ff      	movs	r3, #255	; 0xff
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cbe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd6:	0d51      	lsrs	r1, r2, #21
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	00d2      	lsls	r2, r2, #3
 8005cdc:	400a      	ands	r2, r1
 8005cde:	4907      	ldr	r1, [pc, #28]	; (8005cfc <I2C_TransferConfig+0x70>)
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	43d2      	mvns	r2, r2
 8005ce4:	401a      	ands	r2, r3
 8005ce6:	0011      	movs	r1, r2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b007      	add	sp, #28
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	03ff63ff 	.word	0x03ff63ff

08005d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2241      	movs	r2, #65	; 0x41
 8005d0e:	5c9b      	ldrb	r3, [r3, r2]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d138      	bne.n	8005d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	5c9b      	ldrb	r3, [r3, r2]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e032      	b.n	8005d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2240      	movs	r2, #64	; 0x40
 8005d28:	2101      	movs	r1, #1
 8005d2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2241      	movs	r2, #65	; 0x41
 8005d30:	2124      	movs	r1, #36	; 0x24
 8005d32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2101      	movs	r1, #1
 8005d40:	438a      	bics	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4911      	ldr	r1, [pc, #68]	; (8005d94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005d50:	400a      	ands	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2241      	movs	r2, #65	; 0x41
 8005d78:	2120      	movs	r1, #32
 8005d7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2240      	movs	r2, #64	; 0x40
 8005d80:	2100      	movs	r1, #0
 8005d82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b002      	add	sp, #8
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	ffffefff 	.word	0xffffefff

08005d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2241      	movs	r2, #65	; 0x41
 8005da6:	5c9b      	ldrb	r3, [r3, r2]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d139      	bne.n	8005e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2240      	movs	r2, #64	; 0x40
 8005db2:	5c9b      	ldrb	r3, [r3, r2]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e033      	b.n	8005e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2241      	movs	r2, #65	; 0x41
 8005dc8:	2124      	movs	r1, #36	; 0x24
 8005dca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	438a      	bics	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2241      	movs	r2, #65	; 0x41
 8005e12:	2120      	movs	r1, #32
 8005e14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2240      	movs	r2, #64	; 0x40
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	fffff0ff 	.word	0xfffff0ff

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f000 fbbf 	bl	80065c2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e44:	4bc9      	ldr	r3, [pc, #804]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	220c      	movs	r2, #12
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e4e:	4bc7      	ldr	r3, [pc, #796]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	025b      	lsls	r3, r3, #9
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	4013      	ands	r3, r2
 8005e62:	d100      	bne.n	8005e66 <HAL_RCC_OscConfig+0x36>
 8005e64:	e07e      	b.n	8005f64 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d007      	beq.n	8005e7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d112      	bne.n	8005e98 <HAL_RCC_OscConfig+0x68>
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	025b      	lsls	r3, r3, #9
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d10d      	bne.n	8005e98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7c:	4bbb      	ldr	r3, [pc, #748]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	4013      	ands	r3, r2
 8005e86:	d100      	bne.n	8005e8a <HAL_RCC_OscConfig+0x5a>
 8005e88:	e06b      	b.n	8005f62 <HAL_RCC_OscConfig+0x132>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d167      	bne.n	8005f62 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f000 fb95 	bl	80065c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	025b      	lsls	r3, r3, #9
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x84>
 8005ea4:	4bb1      	ldr	r3, [pc, #708]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4bb0      	ldr	r3, [pc, #704]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005eaa:	2180      	movs	r1, #128	; 0x80
 8005eac:	0249      	lsls	r1, r1, #9
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e027      	b.n	8005f04 <HAL_RCC_OscConfig+0xd4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	23a0      	movs	r3, #160	; 0xa0
 8005eba:	02db      	lsls	r3, r3, #11
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d10e      	bne.n	8005ede <HAL_RCC_OscConfig+0xae>
 8005ec0:	4baa      	ldr	r3, [pc, #680]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4ba9      	ldr	r3, [pc, #676]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ec6:	2180      	movs	r1, #128	; 0x80
 8005ec8:	02c9      	lsls	r1, r1, #11
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	4ba7      	ldr	r3, [pc, #668]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4ba6      	ldr	r3, [pc, #664]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ed4:	2180      	movs	r1, #128	; 0x80
 8005ed6:	0249      	lsls	r1, r1, #9
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e012      	b.n	8005f04 <HAL_RCC_OscConfig+0xd4>
 8005ede:	4ba3      	ldr	r3, [pc, #652]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4ba2      	ldr	r3, [pc, #648]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005ee4:	49a2      	ldr	r1, [pc, #648]	; (8006170 <HAL_RCC_OscConfig+0x340>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	4ba0      	ldr	r3, [pc, #640]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4b9c      	ldr	r3, [pc, #624]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b9b      	ldr	r3, [pc, #620]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005efe:	499d      	ldr	r1, [pc, #628]	; (8006174 <HAL_RCC_OscConfig+0x344>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fe f9e8 	bl	80042e0 <HAL_GetTick>
 8005f10:	0003      	movs	r3, r0
 8005f12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f14:	e009      	b.n	8005f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f16:	f7fe f9e3 	bl	80042e0 <HAL_GetTick>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b64      	cmp	r3, #100	; 0x64
 8005f22:	d902      	bls.n	8005f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	f000 fb4c 	bl	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f2a:	4b90      	ldr	r3, [pc, #576]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	4013      	ands	r3, r2
 8005f34:	d0ef      	beq.n	8005f16 <HAL_RCC_OscConfig+0xe6>
 8005f36:	e015      	b.n	8005f64 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fe f9d2 	bl	80042e0 <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f42:	f7fe f9cd 	bl	80042e0 <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b64      	cmp	r3, #100	; 0x64
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e336      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f54:	4b85      	ldr	r3, [pc, #532]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	029b      	lsls	r3, r3, #10
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x112>
 8005f60:	e000      	b.n	8005f64 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d100      	bne.n	8005f70 <HAL_RCC_OscConfig+0x140>
 8005f6e:	e099      	b.n	80060a4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2220      	movs	r2, #32
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005f7e:	4b7b      	ldr	r3, [pc, #492]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b7a      	ldr	r3, [pc, #488]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005f84:	2120      	movs	r1, #32
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	4393      	bics	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d13e      	bne.n	800601c <HAL_RCC_OscConfig+0x1ec>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d13b      	bne.n	800601c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005fa4:	4b71      	ldr	r3, [pc, #452]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	4013      	ands	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x188>
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e304      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b6c      	ldr	r3, [pc, #432]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4a6e      	ldr	r2, [pc, #440]	; (8006178 <HAL_RCC_OscConfig+0x348>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	4b68      	ldr	r3, [pc, #416]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005fce:	4b67      	ldr	r3, [pc, #412]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2209      	movs	r2, #9
 8005fd4:	4393      	bics	r3, r2
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	4b64      	ldr	r3, [pc, #400]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fe0:	f000 fc42 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8005fe4:	0001      	movs	r1, r0
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	220f      	movs	r2, #15
 8005fee:	4013      	ands	r3, r2
 8005ff0:	4a62      	ldr	r2, [pc, #392]	; (800617c <HAL_RCC_OscConfig+0x34c>)
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	000a      	movs	r2, r1
 8005ff6:	40da      	lsrs	r2, r3
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <HAL_RCC_OscConfig+0x350>)
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ffc:	4b61      	ldr	r3, [pc, #388]	; (8006184 <HAL_RCC_OscConfig+0x354>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2513      	movs	r5, #19
 8006002:	197c      	adds	r4, r7, r5
 8006004:	0018      	movs	r0, r3
 8006006:	f7fe f925 	bl	8004254 <HAL_InitTick>
 800600a:	0003      	movs	r3, r0
 800600c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800600e:	197b      	adds	r3, r7, r5
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d046      	beq.n	80060a4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006016:	197b      	adds	r3, r7, r5
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	e2d2      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d027      	beq.n	8006072 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006022:	4b52      	ldr	r3, [pc, #328]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2209      	movs	r2, #9
 8006028:	4393      	bics	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	4b4f      	ldr	r3, [pc, #316]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	430a      	orrs	r2, r1
 8006032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fe f954 	bl	80042e0 <HAL_GetTick>
 8006038:	0003      	movs	r3, r0
 800603a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800603e:	f7fe f94f 	bl	80042e0 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e2b8      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006050:	4b46      	ldr	r3, [pc, #280]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2204      	movs	r2, #4
 8006056:	4013      	ands	r3, r2
 8006058:	d0f1      	beq.n	800603e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605a:	4b44      	ldr	r3, [pc, #272]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4a46      	ldr	r2, [pc, #280]	; (8006178 <HAL_RCC_OscConfig+0x348>)
 8006060:	4013      	ands	r3, r2
 8006062:	0019      	movs	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	021a      	lsls	r2, r3, #8
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	e018      	b.n	80060a4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006072:	4b3e      	ldr	r3, [pc, #248]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006078:	2101      	movs	r1, #1
 800607a:	438a      	bics	r2, r1
 800607c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607e:	f7fe f92f 	bl	80042e0 <HAL_GetTick>
 8006082:	0003      	movs	r3, r0
 8006084:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006088:	f7fe f92a 	bl	80042e0 <HAL_GetTick>
 800608c:	0002      	movs	r2, r0
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e293      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800609a:	4b34      	ldr	r3, [pc, #208]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2204      	movs	r2, #4
 80060a0:	4013      	ands	r3, r2
 80060a2:	d1f1      	bne.n	8006088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2210      	movs	r2, #16
 80060aa:	4013      	ands	r3, r2
 80060ac:	d100      	bne.n	80060b0 <HAL_RCC_OscConfig+0x280>
 80060ae:	e0a2      	b.n	80061f6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d140      	bne.n	8006138 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060b6:	4b2d      	ldr	r3, [pc, #180]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4013      	ands	r3, r2
 80060c0:	d005      	beq.n	80060ce <HAL_RCC_OscConfig+0x29e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e279      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ce:	4b27      	ldr	r3, [pc, #156]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4a2d      	ldr	r2, [pc, #180]	; (8006188 <HAL_RCC_OscConfig+0x358>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	0019      	movs	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	0a19      	lsrs	r1, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	061a      	lsls	r2, r3, #24
 80060f0:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	0b5b      	lsrs	r3, r3, #13
 80060fc:	3301      	adds	r3, #1
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	0212      	lsls	r2, r2, #8
 8006102:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	210f      	movs	r1, #15
 800610c:	400b      	ands	r3, r1
 800610e:	491b      	ldr	r1, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x34c>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006114:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <HAL_RCC_OscConfig+0x350>)
 8006116:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006118:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <HAL_RCC_OscConfig+0x354>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2513      	movs	r5, #19
 800611e:	197c      	adds	r4, r7, r5
 8006120:	0018      	movs	r0, r3
 8006122:	f7fe f897 	bl	8004254 <HAL_InitTick>
 8006126:	0003      	movs	r3, r0
 8006128:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800612a:	197b      	adds	r3, r7, r5
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d061      	beq.n	80061f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006132:	197b      	adds	r3, r7, r5
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	e244      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d040      	beq.n	80061c2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_RCC_OscConfig+0x33c>)
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	0049      	lsls	r1, r1, #1
 800614a:	430a      	orrs	r2, r1
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fe f8c7 	bl	80042e0 <HAL_GetTick>
 8006152:	0003      	movs	r3, r0
 8006154:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006156:	e019      	b.n	800618c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006158:	f7fe f8c2 	bl	80042e0 <HAL_GetTick>
 800615c:	0002      	movs	r2, r0
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d912      	bls.n	800618c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e22b      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	40021000 	.word	0x40021000
 8006170:	fffeffff 	.word	0xfffeffff
 8006174:	fffbffff 	.word	0xfffbffff
 8006178:	ffffe0ff 	.word	0xffffe0ff
 800617c:	0800df54 	.word	0x0800df54
 8006180:	20000000 	.word	0x20000000
 8006184:	2000000c 	.word	0x2000000c
 8006188:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800618c:	4bca      	ldr	r3, [pc, #808]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4013      	ands	r3, r2
 8006196:	d0df      	beq.n	8006158 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006198:	4bc7      	ldr	r3, [pc, #796]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4ac7      	ldr	r2, [pc, #796]	; (80064bc <HAL_RCC_OscConfig+0x68c>)
 800619e:	4013      	ands	r3, r2
 80061a0:	0019      	movs	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061a6:	4bc4      	ldr	r3, [pc, #784]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ac:	4bc2      	ldr	r3, [pc, #776]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	0a19      	lsrs	r1, r3, #8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	061a      	lsls	r2, r3, #24
 80061ba:	4bbf      	ldr	r3, [pc, #764]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	e019      	b.n	80061f6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061c2:	4bbd      	ldr	r3, [pc, #756]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4bbc      	ldr	r3, [pc, #752]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061c8:	49bd      	ldr	r1, [pc, #756]	; (80064c0 <HAL_RCC_OscConfig+0x690>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ce:	f7fe f887 	bl	80042e0 <HAL_GetTick>
 80061d2:	0003      	movs	r3, r0
 80061d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061d8:	f7fe f882 	bl	80042e0 <HAL_GetTick>
 80061dc:	0002      	movs	r2, r0
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1eb      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80061ea:	4bb3      	ldr	r3, [pc, #716]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4013      	ands	r3, r2
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2208      	movs	r2, #8
 80061fc:	4013      	ands	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d019      	beq.n	800623c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006208:	4bab      	ldr	r3, [pc, #684]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800620a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800620c:	4baa      	ldr	r3, [pc, #680]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800620e:	2101      	movs	r1, #1
 8006210:	430a      	orrs	r2, r1
 8006212:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006214:	f7fe f864 	bl	80042e0 <HAL_GetTick>
 8006218:	0003      	movs	r3, r0
 800621a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621e:	f7fe f85f 	bl	80042e0 <HAL_GetTick>
 8006222:	0002      	movs	r2, r0
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e1c8      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006230:	4ba1      	ldr	r3, [pc, #644]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	2202      	movs	r2, #2
 8006236:	4013      	ands	r3, r2
 8006238:	d0f1      	beq.n	800621e <HAL_RCC_OscConfig+0x3ee>
 800623a:	e018      	b.n	800626e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800623c:	4b9e      	ldr	r3, [pc, #632]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800623e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006240:	4b9d      	ldr	r3, [pc, #628]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006242:	2101      	movs	r1, #1
 8006244:	438a      	bics	r2, r1
 8006246:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006248:	f7fe f84a 	bl	80042e0 <HAL_GetTick>
 800624c:	0003      	movs	r3, r0
 800624e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006252:	f7fe f845 	bl	80042e0 <HAL_GetTick>
 8006256:	0002      	movs	r2, r0
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e1ae      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006264:	4b94      	ldr	r3, [pc, #592]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	2202      	movs	r2, #2
 800626a:	4013      	ands	r3, r2
 800626c:	d1f1      	bne.n	8006252 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2204      	movs	r2, #4
 8006274:	4013      	ands	r3, r2
 8006276:	d100      	bne.n	800627a <HAL_RCC_OscConfig+0x44a>
 8006278:	e0ae      	b.n	80063d8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800627a:	2023      	movs	r0, #35	; 0x23
 800627c:	183b      	adds	r3, r7, r0
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006282:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	055b      	lsls	r3, r3, #21
 800628a:	4013      	ands	r3, r2
 800628c:	d109      	bne.n	80062a2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628e:	4b8a      	ldr	r3, [pc, #552]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	0549      	lsls	r1, r1, #21
 8006298:	430a      	orrs	r2, r1
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800629c:	183b      	adds	r3, r7, r0
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a2:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <HAL_RCC_OscConfig+0x694>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d11a      	bne.n	80062e4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ae:	4b85      	ldr	r3, [pc, #532]	; (80064c4 <HAL_RCC_OscConfig+0x694>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b84      	ldr	r3, [pc, #528]	; (80064c4 <HAL_RCC_OscConfig+0x694>)
 80062b4:	2180      	movs	r1, #128	; 0x80
 80062b6:	0049      	lsls	r1, r1, #1
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062bc:	f7fe f810 	bl	80042e0 <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c6:	f7fe f80b 	bl	80042e0 <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b64      	cmp	r3, #100	; 0x64
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e174      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d8:	4b7a      	ldr	r3, [pc, #488]	; (80064c4 <HAL_RCC_OscConfig+0x694>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_OscConfig+0x4d0>
 80062f0:	4b71      	ldr	r3, [pc, #452]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80062f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062f4:	4b70      	ldr	r3, [pc, #448]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	0049      	lsls	r1, r1, #1
 80062fa:	430a      	orrs	r2, r1
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
 80062fe:	e031      	b.n	8006364 <HAL_RCC_OscConfig+0x534>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10c      	bne.n	8006322 <HAL_RCC_OscConfig+0x4f2>
 8006308:	4b6b      	ldr	r3, [pc, #428]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800630a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800630c:	4b6a      	ldr	r3, [pc, #424]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800630e:	496c      	ldr	r1, [pc, #432]	; (80064c0 <HAL_RCC_OscConfig+0x690>)
 8006310:	400a      	ands	r2, r1
 8006312:	651a      	str	r2, [r3, #80]	; 0x50
 8006314:	4b68      	ldr	r3, [pc, #416]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006318:	4b67      	ldr	r3, [pc, #412]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800631a:	496b      	ldr	r1, [pc, #428]	; (80064c8 <HAL_RCC_OscConfig+0x698>)
 800631c:	400a      	ands	r2, r1
 800631e:	651a      	str	r2, [r3, #80]	; 0x50
 8006320:	e020      	b.n	8006364 <HAL_RCC_OscConfig+0x534>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	23a0      	movs	r3, #160	; 0xa0
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	429a      	cmp	r2, r3
 800632c:	d10e      	bne.n	800634c <HAL_RCC_OscConfig+0x51c>
 800632e:	4b62      	ldr	r3, [pc, #392]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006332:	4b61      	ldr	r3, [pc, #388]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	00c9      	lsls	r1, r1, #3
 8006338:	430a      	orrs	r2, r1
 800633a:	651a      	str	r2, [r3, #80]	; 0x50
 800633c:	4b5e      	ldr	r3, [pc, #376]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800633e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006340:	4b5d      	ldr	r3, [pc, #372]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	0049      	lsls	r1, r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	651a      	str	r2, [r3, #80]	; 0x50
 800634a:	e00b      	b.n	8006364 <HAL_RCC_OscConfig+0x534>
 800634c:	4b5a      	ldr	r3, [pc, #360]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800634e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006350:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006352:	495b      	ldr	r1, [pc, #364]	; (80064c0 <HAL_RCC_OscConfig+0x690>)
 8006354:	400a      	ands	r2, r1
 8006356:	651a      	str	r2, [r3, #80]	; 0x50
 8006358:	4b57      	ldr	r3, [pc, #348]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800635a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800635c:	4b56      	ldr	r3, [pc, #344]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800635e:	495a      	ldr	r1, [pc, #360]	; (80064c8 <HAL_RCC_OscConfig+0x698>)
 8006360:	400a      	ands	r2, r1
 8006362:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636c:	f7fd ffb8 	bl	80042e0 <HAL_GetTick>
 8006370:	0003      	movs	r3, r0
 8006372:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006374:	e009      	b.n	800638a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fd ffb3 	bl	80042e0 <HAL_GetTick>
 800637a:	0002      	movs	r2, r0
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	4a52      	ldr	r2, [pc, #328]	; (80064cc <HAL_RCC_OscConfig+0x69c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e11b      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800638a:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800638c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4013      	ands	r3, r2
 8006394:	d0ef      	beq.n	8006376 <HAL_RCC_OscConfig+0x546>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fd ffa2 	bl	80042e0 <HAL_GetTick>
 800639c:	0003      	movs	r3, r0
 800639e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063a0:	e009      	b.n	80063b6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a2:	f7fd ff9d 	bl	80042e0 <HAL_GetTick>
 80063a6:	0002      	movs	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	4a47      	ldr	r2, [pc, #284]	; (80064cc <HAL_RCC_OscConfig+0x69c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e105      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063b6:	4b40      	ldr	r3, [pc, #256]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	d1ef      	bne.n	80063a2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063c2:	2323      	movs	r3, #35	; 0x23
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d105      	bne.n	80063d8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063cc:	4b3a      	ldr	r3, [pc, #232]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d0:	4b39      	ldr	r3, [pc, #228]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063d2:	493f      	ldr	r1, [pc, #252]	; (80064d0 <HAL_RCC_OscConfig+0x6a0>)
 80063d4:	400a      	ands	r2, r1
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2220      	movs	r2, #32
 80063de:	4013      	ands	r3, r2
 80063e0:	d049      	beq.n	8006476 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d026      	beq.n	8006438 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80063ea:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	4b32      	ldr	r3, [pc, #200]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063f0:	2101      	movs	r1, #1
 80063f2:	430a      	orrs	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 80063fc:	2101      	movs	r1, #1
 80063fe:	430a      	orrs	r2, r1
 8006400:	635a      	str	r2, [r3, #52]	; 0x34
 8006402:	4b34      	ldr	r3, [pc, #208]	; (80064d4 <HAL_RCC_OscConfig+0x6a4>)
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <HAL_RCC_OscConfig+0x6a4>)
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	0189      	lsls	r1, r1, #6
 800640c:	430a      	orrs	r2, r1
 800640e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fd ff66 	bl	80042e0 <HAL_GetTick>
 8006414:	0003      	movs	r3, r0
 8006416:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800641a:	f7fd ff61 	bl	80042e0 <HAL_GetTick>
 800641e:	0002      	movs	r2, r0
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e0ca      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800642c:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2202      	movs	r2, #2
 8006432:	4013      	ands	r3, r2
 8006434:	d0f1      	beq.n	800641a <HAL_RCC_OscConfig+0x5ea>
 8006436:	e01e      	b.n	8006476 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006438:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800643e:	2101      	movs	r1, #1
 8006440:	438a      	bics	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <HAL_RCC_OscConfig+0x6a4>)
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <HAL_RCC_OscConfig+0x6a4>)
 800644a:	4923      	ldr	r1, [pc, #140]	; (80064d8 <HAL_RCC_OscConfig+0x6a8>)
 800644c:	400a      	ands	r2, r1
 800644e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006450:	f7fd ff46 	bl	80042e0 <HAL_GetTick>
 8006454:	0003      	movs	r3, r0
 8006456:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800645a:	f7fd ff41 	bl	80042e0 <HAL_GetTick>
 800645e:	0002      	movs	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e0aa      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2202      	movs	r2, #2
 8006472:	4013      	ands	r3, r2
 8006474:	d1f1      	bne.n	800645a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d100      	bne.n	8006480 <HAL_RCC_OscConfig+0x650>
 800647e:	e09f      	b.n	80065c0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d100      	bne.n	8006488 <HAL_RCC_OscConfig+0x658>
 8006486:	e078      	b.n	800657a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	2b02      	cmp	r3, #2
 800648e:	d159      	bne.n	8006544 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_RCC_OscConfig+0x688>)
 8006496:	4911      	ldr	r1, [pc, #68]	; (80064dc <HAL_RCC_OscConfig+0x6ac>)
 8006498:	400a      	ands	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fd ff20 	bl	80042e0 <HAL_GetTick>
 80064a0:	0003      	movs	r3, r0
 80064a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064a4:	e01c      	b.n	80064e0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a6:	f7fd ff1b 	bl	80042e0 <HAL_GetTick>
 80064aa:	0002      	movs	r2, r0
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d915      	bls.n	80064e0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e084      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
 80064b8:	40021000 	.word	0x40021000
 80064bc:	ffff1fff 	.word	0xffff1fff
 80064c0:	fffffeff 	.word	0xfffffeff
 80064c4:	40007000 	.word	0x40007000
 80064c8:	fffffbff 	.word	0xfffffbff
 80064cc:	00001388 	.word	0x00001388
 80064d0:	efffffff 	.word	0xefffffff
 80064d4:	40010000 	.word	0x40010000
 80064d8:	ffffdfff 	.word	0xffffdfff
 80064dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064e0:	4b3a      	ldr	r3, [pc, #232]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	049b      	lsls	r3, r3, #18
 80064e8:	4013      	ands	r3, r2
 80064ea:	d1dc      	bne.n	80064a6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064ec:	4b37      	ldr	r3, [pc, #220]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4a37      	ldr	r2, [pc, #220]	; (80065d0 <HAL_RCC_OscConfig+0x7a0>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	0019      	movs	r1, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	431a      	orrs	r2, r3
 8006506:	4b31      	ldr	r3, [pc, #196]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 8006508:	430a      	orrs	r2, r1
 800650a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800650c:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b2e      	ldr	r3, [pc, #184]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	0449      	lsls	r1, r1, #17
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fd fee1 	bl	80042e0 <HAL_GetTick>
 800651e:	0003      	movs	r3, r0
 8006520:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006524:	f7fd fedc 	bl	80042e0 <HAL_GetTick>
 8006528:	0002      	movs	r2, r0
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e045      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006536:	4b25      	ldr	r3, [pc, #148]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	049b      	lsls	r3, r3, #18
 800653e:	4013      	ands	r3, r2
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x6f4>
 8006542:	e03d      	b.n	80065c0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b20      	ldr	r3, [pc, #128]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 800654a:	4922      	ldr	r1, [pc, #136]	; (80065d4 <HAL_RCC_OscConfig+0x7a4>)
 800654c:	400a      	ands	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006550:	f7fd fec6 	bl	80042e0 <HAL_GetTick>
 8006554:	0003      	movs	r3, r0
 8006556:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655a:	f7fd fec1 	bl	80042e0 <HAL_GetTick>
 800655e:	0002      	movs	r2, r0
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e02a      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800656c:	4b17      	ldr	r3, [pc, #92]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	049b      	lsls	r3, r3, #18
 8006574:	4013      	ands	r3, r2
 8006576:	d1f0      	bne.n	800655a <HAL_RCC_OscConfig+0x72a>
 8006578:	e022      	b.n	80065c0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e01d      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <HAL_RCC_OscConfig+0x79c>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	025b      	lsls	r3, r3, #9
 8006592:	401a      	ands	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	429a      	cmp	r2, r3
 800659a:	d10f      	bne.n	80065bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	23f0      	movs	r3, #240	; 0xf0
 80065a0:	039b      	lsls	r3, r3, #14
 80065a2:	401a      	ands	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d107      	bne.n	80065bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	23c0      	movs	r3, #192	; 0xc0
 80065b0:	041b      	lsls	r3, r3, #16
 80065b2:	401a      	ands	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d001      	beq.n	80065c0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b00a      	add	sp, #40	; 0x28
 80065c8:	bdb0      	pop	{r4, r5, r7, pc}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	40021000 	.word	0x40021000
 80065d0:	ff02ffff 	.word	0xff02ffff
 80065d4:	feffffff 	.word	0xfeffffff

080065d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d8:	b5b0      	push	{r4, r5, r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e128      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065ec:	4b96      	ldr	r3, [pc, #600]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	4013      	ands	r3, r2
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d91e      	bls.n	8006638 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fa:	4b93      	ldr	r3, [pc, #588]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4393      	bics	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	4b90      	ldr	r3, [pc, #576]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800660c:	f7fd fe68 	bl	80042e0 <HAL_GetTick>
 8006610:	0003      	movs	r3, r0
 8006612:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006614:	e009      	b.n	800662a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006616:	f7fd fe63 	bl	80042e0 <HAL_GetTick>
 800661a:	0002      	movs	r2, r0
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	4a8a      	ldr	r2, [pc, #552]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e109      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800662a:	4b87      	ldr	r3, [pc, #540]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2201      	movs	r2, #1
 8006630:	4013      	ands	r3, r2
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d1ee      	bne.n	8006616 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2202      	movs	r2, #2
 800663e:	4013      	ands	r3, r2
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006642:	4b83      	ldr	r3, [pc, #524]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	22f0      	movs	r2, #240	; 0xf0
 8006648:	4393      	bics	r3, r2
 800664a:	0019      	movs	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	4b7f      	ldr	r3, [pc, #508]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 8006652:	430a      	orrs	r2, r1
 8006654:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2201      	movs	r2, #1
 800665c:	4013      	ands	r3, r2
 800665e:	d100      	bne.n	8006662 <HAL_RCC_ClockConfig+0x8a>
 8006660:	e089      	b.n	8006776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d107      	bne.n	800667a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800666a:	4b79      	ldr	r3, [pc, #484]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	4013      	ands	r3, r2
 8006674:	d120      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e0e1      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d107      	bne.n	8006692 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006682:	4b73      	ldr	r3, [pc, #460]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	049b      	lsls	r3, r3, #18
 800668a:	4013      	ands	r3, r2
 800668c:	d114      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e0d5      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800669a:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2204      	movs	r2, #4
 80066a0:	4013      	ands	r3, r2
 80066a2:	d109      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0ca      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80066a8:	4b69      	ldr	r3, [pc, #420]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2380      	movs	r3, #128	; 0x80
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4013      	ands	r3, r2
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0c2      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066b8:	4b65      	ldr	r3, [pc, #404]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	2203      	movs	r2, #3
 80066be:	4393      	bics	r3, r2
 80066c0:	0019      	movs	r1, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	4b62      	ldr	r3, [pc, #392]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80066c8:	430a      	orrs	r2, r1
 80066ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066cc:	f7fd fe08 	bl	80042e0 <HAL_GetTick>
 80066d0:	0003      	movs	r3, r0
 80066d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d111      	bne.n	8006700 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80066dc:	e009      	b.n	80066f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066de:	f7fd fdff 	bl	80042e0 <HAL_GetTick>
 80066e2:	0002      	movs	r2, r0
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	4a58      	ldr	r2, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e0a5      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80066f2:	4b57      	ldr	r3, [pc, #348]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	220c      	movs	r2, #12
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d1ef      	bne.n	80066de <HAL_RCC_ClockConfig+0x106>
 80066fe:	e03a      	b.n	8006776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d111      	bne.n	800672c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006708:	e009      	b.n	800671e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800670a:	f7fd fde9 	bl	80042e0 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	4a4d      	ldr	r2, [pc, #308]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e08f      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800671e:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	220c      	movs	r2, #12
 8006724:	4013      	ands	r3, r2
 8006726:	2b0c      	cmp	r3, #12
 8006728:	d1ef      	bne.n	800670a <HAL_RCC_ClockConfig+0x132>
 800672a:	e024      	b.n	8006776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d11b      	bne.n	800676c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006734:	e009      	b.n	800674a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006736:	f7fd fdd3 	bl	80042e0 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	4a42      	ldr	r2, [pc, #264]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e079      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800674a:	4b41      	ldr	r3, [pc, #260]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	220c      	movs	r2, #12
 8006750:	4013      	ands	r3, r2
 8006752:	2b04      	cmp	r3, #4
 8006754:	d1ef      	bne.n	8006736 <HAL_RCC_ClockConfig+0x15e>
 8006756:	e00e      	b.n	8006776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fd fdc2 	bl	80042e0 <HAL_GetTick>
 800675c:	0002      	movs	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d901      	bls.n	800676c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e068      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800676c:	4b38      	ldr	r3, [pc, #224]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	220c      	movs	r2, #12
 8006772:	4013      	ands	r3, r2
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006776:	4b34      	ldr	r3, [pc, #208]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2201      	movs	r2, #1
 800677c:	4013      	ands	r3, r2
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d21e      	bcs.n	80067c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006784:	4b30      	ldr	r3, [pc, #192]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	4393      	bics	r3, r2
 800678c:	0019      	movs	r1, r3
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006796:	f7fd fda3 	bl	80042e0 <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	e009      	b.n	80067b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a0:	f7fd fd9e 	bl	80042e0 <HAL_GetTick>
 80067a4:	0002      	movs	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	4a28      	ldr	r2, [pc, #160]	; (800684c <HAL_RCC_ClockConfig+0x274>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e044      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b4:	4b24      	ldr	r3, [pc, #144]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d1ee      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2204      	movs	r2, #4
 80067c8:	4013      	ands	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <HAL_RCC_ClockConfig+0x27c>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	0019      	movs	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80067dc:	430a      	orrs	r2, r1
 80067de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	4013      	ands	r3, r2
 80067e8:	d00a      	beq.n	8006800 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067ea:	4b19      	ldr	r3, [pc, #100]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <HAL_RCC_ClockConfig+0x280>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	0019      	movs	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	00da      	lsls	r2, r3, #3
 80067fa:	4b15      	ldr	r3, [pc, #84]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 80067fc:	430a      	orrs	r2, r1
 80067fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006800:	f000 f832 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006804:	0001      	movs	r1, r0
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <HAL_RCC_ClockConfig+0x278>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	220f      	movs	r2, #15
 800680e:	4013      	ands	r3, r2
 8006810:	4a12      	ldr	r2, [pc, #72]	; (800685c <HAL_RCC_ClockConfig+0x284>)
 8006812:	5cd3      	ldrb	r3, [r2, r3]
 8006814:	000a      	movs	r2, r1
 8006816:	40da      	lsrs	r2, r3
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <HAL_RCC_ClockConfig+0x288>)
 800681a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800681c:	4b11      	ldr	r3, [pc, #68]	; (8006864 <HAL_RCC_ClockConfig+0x28c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	250b      	movs	r5, #11
 8006822:	197c      	adds	r4, r7, r5
 8006824:	0018      	movs	r0, r3
 8006826:	f7fd fd15 	bl	8004254 <HAL_InitTick>
 800682a:	0003      	movs	r3, r0
 800682c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800682e:	197b      	adds	r3, r7, r5
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006836:	197b      	adds	r3, r7, r5
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	e000      	b.n	800683e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bdb0      	pop	{r4, r5, r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	40022000 	.word	0x40022000
 800684c:	00001388 	.word	0x00001388
 8006850:	40021000 	.word	0x40021000
 8006854:	fffff8ff 	.word	0xfffff8ff
 8006858:	ffffc7ff 	.word	0xffffc7ff
 800685c:	0800df54 	.word	0x0800df54
 8006860:	20000000 	.word	0x20000000
 8006864:	2000000c 	.word	0x2000000c

08006868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b5b0      	push	{r4, r5, r7, lr}
 800686a:	b08e      	sub	sp, #56	; 0x38
 800686c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800686e:	4b4c      	ldr	r3, [pc, #304]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006876:	230c      	movs	r3, #12
 8006878:	4013      	ands	r3, r2
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d014      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x40>
 800687e:	d900      	bls.n	8006882 <HAL_RCC_GetSysClockFreq+0x1a>
 8006880:	e07b      	b.n	800697a <HAL_RCC_GetSysClockFreq+0x112>
 8006882:	2b04      	cmp	r3, #4
 8006884:	d002      	beq.n	800688c <HAL_RCC_GetSysClockFreq+0x24>
 8006886:	2b08      	cmp	r3, #8
 8006888:	d00b      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800688a:	e076      	b.n	800697a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800688c:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2210      	movs	r2, #16
 8006892:	4013      	ands	r3, r2
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006896:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800689a:	e07c      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800689c:	4b42      	ldr	r3, [pc, #264]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068a0:	e079      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068a2:	4b42      	ldr	r3, [pc, #264]	; (80069ac <HAL_RCC_GetSysClockFreq+0x144>)
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068a6:	e076      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	0c9a      	lsrs	r2, r3, #18
 80068ac:	230f      	movs	r3, #15
 80068ae:	401a      	ands	r2, r3
 80068b0:	4b3f      	ldr	r3, [pc, #252]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80068b2:	5c9b      	ldrb	r3, [r3, r2]
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	0d9a      	lsrs	r2, r3, #22
 80068ba:	2303      	movs	r3, #3
 80068bc:	4013      	ands	r3, r2
 80068be:	3301      	adds	r3, #1
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068c2:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	4013      	ands	r3, r2
 80068cc:	d01a      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	4a35      	ldr	r2, [pc, #212]	; (80069ac <HAL_RCC_GetSysClockFreq+0x144>)
 80068d8:	2300      	movs	r3, #0
 80068da:	69b8      	ldr	r0, [r7, #24]
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	f7f9 fe03 	bl	80004e8 <__aeabi_lmul>
 80068e2:	0002      	movs	r2, r0
 80068e4:	000b      	movs	r3, r1
 80068e6:	0010      	movs	r0, r2
 80068e8:	0019      	movs	r1, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f7f9 fdd7 	bl	80004a8 <__aeabi_uldivmod>
 80068fa:	0002      	movs	r2, r0
 80068fc:	000b      	movs	r3, r1
 80068fe:	0013      	movs	r3, r2
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
 8006902:	e037      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006904:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2210      	movs	r2, #16
 800690a:	4013      	ands	r3, r2
 800690c:	d01a      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006918:	2300      	movs	r3, #0
 800691a:	68b8      	ldr	r0, [r7, #8]
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	f7f9 fde3 	bl	80004e8 <__aeabi_lmul>
 8006922:	0002      	movs	r2, r0
 8006924:	000b      	movs	r3, r1
 8006926:	0010      	movs	r0, r2
 8006928:	0019      	movs	r1, r3
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f7f9 fdb7 	bl	80004a8 <__aeabi_uldivmod>
 800693a:	0002      	movs	r2, r0
 800693c:	000b      	movs	r3, r1
 800693e:	0013      	movs	r3, r2
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
 8006942:	e017      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	0018      	movs	r0, r3
 8006948:	2300      	movs	r3, #0
 800694a:	0019      	movs	r1, r3
 800694c:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800694e:	2300      	movs	r3, #0
 8006950:	f7f9 fdca 	bl	80004e8 <__aeabi_lmul>
 8006954:	0002      	movs	r2, r0
 8006956:	000b      	movs	r3, r1
 8006958:	0010      	movs	r0, r2
 800695a:	0019      	movs	r1, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	001c      	movs	r4, r3
 8006960:	2300      	movs	r3, #0
 8006962:	001d      	movs	r5, r3
 8006964:	0022      	movs	r2, r4
 8006966:	002b      	movs	r3, r5
 8006968:	f7f9 fd9e 	bl	80004a8 <__aeabi_uldivmod>
 800696c:	0002      	movs	r2, r0
 800696e:	000b      	movs	r3, r1
 8006970:	0013      	movs	r3, r2
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006978:	e00d      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	0b5b      	lsrs	r3, r3, #13
 8006980:	2207      	movs	r2, #7
 8006982:	4013      	ands	r3, r2
 8006984:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	3301      	adds	r3, #1
 800698a:	2280      	movs	r2, #128	; 0x80
 800698c:	0212      	lsls	r2, r2, #8
 800698e:	409a      	lsls	r2, r3
 8006990:	0013      	movs	r3, r2
 8006992:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006994:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	b00e      	add	sp, #56	; 0x38
 800699e:	bdb0      	pop	{r4, r5, r7, pc}
 80069a0:	40021000 	.word	0x40021000
 80069a4:	003d0900 	.word	0x003d0900
 80069a8:	00f42400 	.word	0x00f42400
 80069ac:	007a1200 	.word	0x007a1200
 80069b0:	0800df6c 	.word	0x0800df6c

080069b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	20000000 	.word	0x20000000

080069c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069cc:	f7ff fff2 	bl	80069b4 <HAL_RCC_GetHCLKFreq>
 80069d0:	0001      	movs	r1, r0
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	2207      	movs	r2, #7
 80069da:	4013      	ands	r3, r2
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069de:	5cd3      	ldrb	r3, [r2, r3]
 80069e0:	40d9      	lsrs	r1, r3
 80069e2:	000b      	movs	r3, r1
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	40021000 	.word	0x40021000
 80069f0:	0800df64 	.word	0x0800df64

080069f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069f8:	f7ff ffdc 	bl	80069b4 <HAL_RCC_GetHCLKFreq>
 80069fc:	0001      	movs	r1, r0
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	0adb      	lsrs	r3, r3, #11
 8006a04:	2207      	movs	r2, #7
 8006a06:	4013      	ands	r3, r2
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a0a:	5cd3      	ldrb	r3, [r2, r3]
 8006a0c:	40d9      	lsrs	r1, r3
 8006a0e:	000b      	movs	r3, r1
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	0800df64 	.word	0x0800df64

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006a28:	2017      	movs	r0, #23
 8006a2a:	183b      	adds	r3, r7, r0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2220      	movs	r2, #32
 8006a36:	4013      	ands	r3, r2
 8006a38:	d100      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006a3a:	e0c7      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3c:	4b9b      	ldr	r3, [pc, #620]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	055b      	lsls	r3, r3, #21
 8006a44:	4013      	ands	r3, r2
 8006a46:	d109      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a48:	4b98      	ldr	r3, [pc, #608]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4c:	4b97      	ldr	r3, [pc, #604]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	0549      	lsls	r1, r1, #21
 8006a52:	430a      	orrs	r2, r1
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006a56:	183b      	adds	r3, r7, r0
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5c:	4b94      	ldr	r3, [pc, #592]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4013      	ands	r3, r2
 8006a66:	d11a      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a68:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	4b90      	ldr	r3, [pc, #576]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006a6e:	2180      	movs	r1, #128	; 0x80
 8006a70:	0049      	lsls	r1, r1, #1
 8006a72:	430a      	orrs	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a76:	f7fd fc33 	bl	80042e0 <HAL_GetTick>
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7e:	e008      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a80:	f7fd fc2e 	bl	80042e0 <HAL_GetTick>
 8006a84:	0002      	movs	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e107      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a92:	4b87      	ldr	r3, [pc, #540]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006a9e:	4b83      	ldr	r3, [pc, #524]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	23c0      	movs	r3, #192	; 0xc0
 8006aa4:	039b      	lsls	r3, r3, #14
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	23c0      	movs	r3, #192	; 0xc0
 8006ab0:	039b      	lsls	r3, r3, #14
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d013      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	23c0      	movs	r3, #192	; 0xc0
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	23c0      	movs	r3, #192	; 0xc0
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d10a      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006acc:	4b77      	ldr	r3, [pc, #476]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	401a      	ands	r2, r3
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	029b      	lsls	r3, r3, #10
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e0df      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006ae2:	4b72      	ldr	r3, [pc, #456]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ae6:	23c0      	movs	r3, #192	; 0xc0
 8006ae8:	029b      	lsls	r3, r3, #10
 8006aea:	4013      	ands	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03b      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	23c0      	movs	r3, #192	; 0xc0
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	4013      	ands	r3, r2
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d033      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d02e      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006b0e:	4b67      	ldr	r3, [pc, #412]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b12:	4a68      	ldr	r2, [pc, #416]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b18:	4b64      	ldr	r3, [pc, #400]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b1c:	4b63      	ldr	r3, [pc, #396]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	0309      	lsls	r1, r1, #12
 8006b22:	430a      	orrs	r2, r1
 8006b24:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b26:	4b61      	ldr	r3, [pc, #388]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b2a:	4b60      	ldr	r3, [pc, #384]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b2c:	4962      	ldr	r1, [pc, #392]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006b2e:	400a      	ands	r2, r1
 8006b30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006b32:	4b5e      	ldr	r3, [pc, #376]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d014      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b42:	f7fd fbcd 	bl	80042e0 <HAL_GetTick>
 8006b46:	0003      	movs	r3, r0
 8006b48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fd fbc8 	bl	80042e0 <HAL_GetTick>
 8006b50:	0002      	movs	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	4a59      	ldr	r2, [pc, #356]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e0a0      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b60:	4b52      	ldr	r3, [pc, #328]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d0ef      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2220      	movs	r2, #32
 8006b72:	4013      	ands	r3, r2
 8006b74:	d01f      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	23c0      	movs	r3, #192	; 0xc0
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	401a      	ands	r2, r3
 8006b80:	23c0      	movs	r3, #192	; 0xc0
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006b88:	4b48      	ldr	r3, [pc, #288]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	23c0      	movs	r3, #192	; 0xc0
 8006b98:	039b      	lsls	r3, r3, #14
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	4b43      	ldr	r3, [pc, #268]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	4b42      	ldr	r3, [pc, #264]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006ba4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	23c0      	movs	r3, #192	; 0xc0
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	401a      	ands	r2, r3
 8006bb0:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bb6:	2317      	movs	r3, #23
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc0:	4b3a      	ldr	r3, [pc, #232]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006bc6:	493f      	ldr	r1, [pc, #252]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006bc8:	400a      	ands	r2, r1
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bd6:	4b35      	ldr	r3, [pc, #212]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4393      	bics	r3, r2
 8006bde:	0019      	movs	r1, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	4b31      	ldr	r3, [pc, #196]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006be6:	430a      	orrs	r2, r1
 8006be8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bf4:	4b2d      	ldr	r3, [pc, #180]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf8:	220c      	movs	r2, #12
 8006bfa:	4393      	bics	r3, r2
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c04:	430a      	orrs	r2, r1
 8006c06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c12:	4b26      	ldr	r3, [pc, #152]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c16:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	4b22      	ldr	r3, [pc, #136]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c22:	430a      	orrs	r2, r1
 8006c24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c34:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	0019      	movs	r1, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c40:	430a      	orrs	r2, r1
 8006c42:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c50:	4b16      	ldr	r3, [pc, #88]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c54:	4a17      	ldr	r2, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	0019      	movs	r1, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c60:	430a      	orrs	r2, r1
 8006c62:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	0019      	movs	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c90:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69da      	ldr	r2, [r3, #28]
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b006      	add	sp, #24
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40007000 	.word	0x40007000
 8006cb4:	fffcffff 	.word	0xfffcffff
 8006cb8:	fff7ffff 	.word	0xfff7ffff
 8006cbc:	00001388 	.word	0x00001388
 8006cc0:	ffcfffff 	.word	0xffcfffff
 8006cc4:	efffffff 	.word	0xefffffff
 8006cc8:	fffff3ff 	.word	0xfffff3ff
 8006ccc:	ffffcfff 	.word	0xffffcfff
 8006cd0:	fbffffff 	.word	0xfbffffff
 8006cd4:	fff3ffff 	.word	0xfff3ffff

08006cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e044      	b.n	8006d74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d107      	bne.n	8006d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2278      	movs	r2, #120	; 0x78
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7fc f825 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2224      	movs	r2, #36	; 0x24
 8006d06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	438a      	bics	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 fc34 	bl	8007588 <UART_SetConfig>
 8006d20:	0003      	movs	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e024      	b.n	8006d74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 fec5 	bl	8007ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	490d      	ldr	r1, [pc, #52]	; (8006d7c <HAL_UART_Init+0xa4>)
 8006d46:	400a      	ands	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	212a      	movs	r1, #42	; 0x2a
 8006d56:	438a      	bics	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2101      	movs	r1, #1
 8006d66:	430a      	orrs	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f000 ff5d 	bl	8007c2c <UART_CheckIdleState>
 8006d72:	0003      	movs	r3, r0
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	ffffb7ff 	.word	0xffffb7ff

08006d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	1dbb      	adds	r3, r7, #6
 8006d8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d000      	beq.n	8006d9a <HAL_UART_Transmit+0x1a>
 8006d98:	e08c      	b.n	8006eb4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_UART_Transmit+0x28>
 8006da0:	1dbb      	adds	r3, r7, #6
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e084      	b.n	8006eb6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	015b      	lsls	r3, r3, #5
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d109      	bne.n	8006dcc <HAL_UART_Transmit+0x4c>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d001      	beq.n	8006dcc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e074      	b.n	8006eb6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2284      	movs	r2, #132	; 0x84
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2221      	movs	r2, #33	; 0x21
 8006dd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dda:	f7fd fa81 	bl	80042e0 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1dba      	adds	r2, r7, #6
 8006de6:	2150      	movs	r1, #80	; 0x50
 8006de8:	8812      	ldrh	r2, [r2, #0]
 8006dea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	1dba      	adds	r2, r7, #6
 8006df0:	2152      	movs	r1, #82	; 0x52
 8006df2:	8812      	ldrh	r2, [r2, #0]
 8006df4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	015b      	lsls	r3, r3, #5
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d108      	bne.n	8006e14 <HAL_UART_Transmit+0x94>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	e003      	b.n	8006e1c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e1c:	e02f      	b.n	8006e7e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	0013      	movs	r3, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	f000 ffa6 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d004      	beq.n	8006e3e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e03b      	b.n	8006eb6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	001a      	movs	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	05d2      	lsls	r2, r2, #23
 8006e50:	0dd2      	lsrs	r2, r2, #23
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	3302      	adds	r3, #2
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	e007      	b.n	8006e6c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2252      	movs	r2, #82	; 0x52
 8006e70:	5a9b      	ldrh	r3, [r3, r2]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b299      	uxth	r1, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2252      	movs	r2, #82	; 0x52
 8006e7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2252      	movs	r2, #82	; 0x52
 8006e82:	5a9b      	ldrh	r3, [r3, r2]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1c9      	bne.n	8006e1e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	0013      	movs	r3, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	2140      	movs	r1, #64	; 0x40
 8006e98:	f000 ff70 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8006e9c:	1e03      	subs	r3, r0, #0
 8006e9e:	d004      	beq.n	8006eaa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e005      	b.n	8006eb6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e000      	b.n	8006eb6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
  }
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b008      	add	sp, #32
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	1dbb      	adds	r3, r7, #6
 8006ecc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	589b      	ldr	r3, [r3, r2]
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d14a      	bne.n	8006f6e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_Receive_DMA+0x26>
 8006ede:	1dbb      	adds	r3, r7, #6
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e042      	b.n	8006f70 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	015b      	lsls	r3, r3, #5
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d109      	bne.n	8006f0a <HAL_UART_Receive_DMA+0x4a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d105      	bne.n	8006f0a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2201      	movs	r2, #1
 8006f02:	4013      	ands	r3, r2
 8006f04:	d001      	beq.n	8006f0a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e032      	b.n	8006f70 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_UART_Receive_DMA+0xb8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d020      	beq.n	8006f5c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	4013      	ands	r3, r2
 8006f26:	d019      	beq.n	8006f5c <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f28:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	2301      	movs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f383 8810 	msr	PRIMASK, r3
}
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2180      	movs	r1, #128	; 0x80
 8006f4a:	04c9      	lsls	r1, r1, #19
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f5c:	1dbb      	adds	r3, r7, #6
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f000 ff73 	bl	8007e50 <UART_Start_Receive_DMA>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	e000      	b.n	8006f70 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b008      	add	sp, #32
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40004800 	.word	0x40004800

08006f7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b0ab      	sub	sp, #172	; 0xac
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	22a4      	movs	r2, #164	; 0xa4
 8006f8c:	18b9      	adds	r1, r7, r2
 8006f8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	20a0      	movs	r0, #160	; 0xa0
 8006f98:	1839      	adds	r1, r7, r0
 8006f9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	219c      	movs	r1, #156	; 0x9c
 8006fa4:	1879      	adds	r1, r7, r1
 8006fa6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fa8:	0011      	movs	r1, r2
 8006faa:	18bb      	adds	r3, r7, r2
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a99      	ldr	r2, [pc, #612]	; (8007214 <HAL_UART_IRQHandler+0x298>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2298      	movs	r2, #152	; 0x98
 8006fb4:	18bc      	adds	r4, r7, r2
 8006fb6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006fb8:	18bb      	adds	r3, r7, r2
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d114      	bne.n	8006fea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fc0:	187b      	adds	r3, r7, r1
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fca:	183b      	adds	r3, r7, r0
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d00a      	beq.n	8006fea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d100      	bne.n	8006fde <HAL_UART_IRQHandler+0x62>
 8006fdc:	e2a0      	b.n	8007520 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	4798      	blx	r3
      }
      return;
 8006fe8:	e29a      	b.n	8007520 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fea:	2398      	movs	r3, #152	; 0x98
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d100      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x7a>
 8006ff4:	e114      	b.n	8007220 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ff6:	239c      	movs	r3, #156	; 0x9c
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4013      	ands	r3, r2
 8007000:	d106      	bne.n	8007010 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007002:	23a0      	movs	r3, #160	; 0xa0
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a83      	ldr	r2, [pc, #524]	; (8007218 <HAL_UART_IRQHandler+0x29c>)
 800700a:	4013      	ands	r3, r2
 800700c:	d100      	bne.n	8007010 <HAL_UART_IRQHandler+0x94>
 800700e:	e107      	b.n	8007220 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007010:	23a4      	movs	r3, #164	; 0xa4
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2201      	movs	r2, #1
 8007018:	4013      	ands	r3, r2
 800701a:	d012      	beq.n	8007042 <HAL_UART_IRQHandler+0xc6>
 800701c:	23a0      	movs	r3, #160	; 0xa0
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4013      	ands	r3, r2
 8007028:	d00b      	beq.n	8007042 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2201      	movs	r2, #1
 8007030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2284      	movs	r2, #132	; 0x84
 8007036:	589b      	ldr	r3, [r3, r2]
 8007038:	2201      	movs	r2, #1
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2184      	movs	r1, #132	; 0x84
 8007040:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007042:	23a4      	movs	r3, #164	; 0xa4
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2202      	movs	r2, #2
 800704a:	4013      	ands	r3, r2
 800704c:	d011      	beq.n	8007072 <HAL_UART_IRQHandler+0xf6>
 800704e:	239c      	movs	r3, #156	; 0x9c
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	4013      	ands	r3, r2
 8007058:	d00b      	beq.n	8007072 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2202      	movs	r2, #2
 8007060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2284      	movs	r2, #132	; 0x84
 8007066:	589b      	ldr	r3, [r3, r2]
 8007068:	2204      	movs	r2, #4
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2184      	movs	r1, #132	; 0x84
 8007070:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007072:	23a4      	movs	r3, #164	; 0xa4
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2204      	movs	r2, #4
 800707a:	4013      	ands	r3, r2
 800707c:	d011      	beq.n	80070a2 <HAL_UART_IRQHandler+0x126>
 800707e:	239c      	movs	r3, #156	; 0x9c
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	4013      	ands	r3, r2
 8007088:	d00b      	beq.n	80070a2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2204      	movs	r2, #4
 8007090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2284      	movs	r2, #132	; 0x84
 8007096:	589b      	ldr	r3, [r3, r2]
 8007098:	2202      	movs	r2, #2
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2184      	movs	r1, #132	; 0x84
 80070a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070a2:	23a4      	movs	r3, #164	; 0xa4
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2208      	movs	r2, #8
 80070aa:	4013      	ands	r3, r2
 80070ac:	d017      	beq.n	80070de <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070ae:	23a0      	movs	r3, #160	; 0xa0
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2220      	movs	r2, #32
 80070b6:	4013      	ands	r3, r2
 80070b8:	d105      	bne.n	80070c6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070ba:	239c      	movs	r3, #156	; 0x9c
 80070bc:	18fb      	adds	r3, r7, r3
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2201      	movs	r2, #1
 80070c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070c4:	d00b      	beq.n	80070de <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2208      	movs	r2, #8
 80070cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2284      	movs	r2, #132	; 0x84
 80070d2:	589b      	ldr	r3, [r3, r2]
 80070d4:	2208      	movs	r2, #8
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2184      	movs	r1, #132	; 0x84
 80070dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070de:	23a4      	movs	r3, #164	; 0xa4
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	4013      	ands	r3, r2
 80070ea:	d013      	beq.n	8007114 <HAL_UART_IRQHandler+0x198>
 80070ec:	23a0      	movs	r3, #160	; 0xa0
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	04db      	lsls	r3, r3, #19
 80070f6:	4013      	ands	r3, r2
 80070f8:	d00c      	beq.n	8007114 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2280      	movs	r2, #128	; 0x80
 8007100:	0112      	lsls	r2, r2, #4
 8007102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2284      	movs	r2, #132	; 0x84
 8007108:	589b      	ldr	r3, [r3, r2]
 800710a:	2220      	movs	r2, #32
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2184      	movs	r1, #132	; 0x84
 8007112:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2284      	movs	r2, #132	; 0x84
 8007118:	589b      	ldr	r3, [r3, r2]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d100      	bne.n	8007120 <HAL_UART_IRQHandler+0x1a4>
 800711e:	e201      	b.n	8007524 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007120:	23a4      	movs	r3, #164	; 0xa4
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2220      	movs	r2, #32
 8007128:	4013      	ands	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800712c:	23a0      	movs	r3, #160	; 0xa0
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2220      	movs	r2, #32
 8007134:	4013      	ands	r3, r2
 8007136:	d008      	beq.n	800714a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	0010      	movs	r0, r2
 8007148:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2284      	movs	r2, #132	; 0x84
 800714e:	589b      	ldr	r3, [r3, r2]
 8007150:	2194      	movs	r1, #148	; 0x94
 8007152:	187a      	adds	r2, r7, r1
 8007154:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2240      	movs	r2, #64	; 0x40
 800715e:	4013      	ands	r3, r2
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d004      	beq.n	800716e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007164:	187b      	adds	r3, r7, r1
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2228      	movs	r2, #40	; 0x28
 800716a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800716c:	d047      	beq.n	80071fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 ff31 	bl	8007fd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2240      	movs	r2, #64	; 0x40
 800717e:	4013      	ands	r3, r2
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d137      	bne.n	80071f4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007184:	f3ef 8310 	mrs	r3, PRIMASK
 8007188:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800718a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718c:	2090      	movs	r0, #144	; 0x90
 800718e:	183a      	adds	r2, r7, r0
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	2301      	movs	r3, #1
 8007194:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007198:	f383 8810 	msr	PRIMASK, r3
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	438a      	bics	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]
 80071ae:	183b      	adds	r3, r7, r0
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071b6:	f383 8810 	msr	PRIMASK, r3
}
 80071ba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d012      	beq.n	80071ea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c8:	4a14      	ldr	r2, [pc, #80]	; (800721c <HAL_UART_IRQHandler+0x2a0>)
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7fd fc7d 	bl	8004ad0 <HAL_DMA_Abort_IT>
 80071d6:	1e03      	subs	r3, r0, #0
 80071d8:	d01a      	beq.n	8007210 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e4:	0018      	movs	r0, r3
 80071e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e012      	b.n	8007210 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 f9b7 	bl	8007560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f2:	e00d      	b.n	8007210 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	0018      	movs	r0, r3
 80071f8:	f000 f9b2 	bl	8007560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	e008      	b.n	8007210 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f000 f9ad 	bl	8007560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2284      	movs	r2, #132	; 0x84
 800720a:	2100      	movs	r1, #0
 800720c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800720e:	e189      	b.n	8007524 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	46c0      	nop			; (mov r8, r8)
    return;
 8007212:	e187      	b.n	8007524 <HAL_UART_IRQHandler+0x5a8>
 8007214:	0000080f 	.word	0x0000080f
 8007218:	04000120 	.word	0x04000120
 800721c:	08008297 	.word	0x08008297

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007224:	2b01      	cmp	r3, #1
 8007226:	d000      	beq.n	800722a <HAL_UART_IRQHandler+0x2ae>
 8007228:	e13b      	b.n	80074a2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800722a:	23a4      	movs	r3, #164	; 0xa4
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2210      	movs	r2, #16
 8007232:	4013      	ands	r3, r2
 8007234:	d100      	bne.n	8007238 <HAL_UART_IRQHandler+0x2bc>
 8007236:	e134      	b.n	80074a2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007238:	23a0      	movs	r3, #160	; 0xa0
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	4013      	ands	r3, r2
 8007242:	d100      	bne.n	8007246 <HAL_UART_IRQHandler+0x2ca>
 8007244:	e12d      	b.n	80074a2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2240      	movs	r2, #64	; 0x40
 8007256:	4013      	ands	r3, r2
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d000      	beq.n	800725e <HAL_UART_IRQHandler+0x2e2>
 800725c:	e0a1      	b.n	80073a2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	217e      	movs	r1, #126	; 0x7e
 8007268:	187b      	adds	r3, r7, r1
 800726a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800726c:	187b      	adds	r3, r7, r1
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d100      	bne.n	8007276 <HAL_UART_IRQHandler+0x2fa>
 8007274:	e158      	b.n	8007528 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2258      	movs	r2, #88	; 0x58
 800727a:	5a9b      	ldrh	r3, [r3, r2]
 800727c:	187a      	adds	r2, r7, r1
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d300      	bcc.n	8007286 <HAL_UART_IRQHandler+0x30a>
 8007284:	e150      	b.n	8007528 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	187a      	adds	r2, r7, r1
 800728a:	215a      	movs	r1, #90	; 0x5a
 800728c:	8812      	ldrh	r2, [r2, #0]
 800728e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2220      	movs	r2, #32
 800729a:	4013      	ands	r3, r2
 800729c:	d16f      	bne.n	800737e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80072a8:	2301      	movs	r3, #1
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	499e      	ldr	r1, [pc, #632]	; (8007538 <HAL_UART_IRQHandler+0x5bc>)
 80072c0:	400a      	ands	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	f383 8810 	msr	PRIMASK, r3
}
 80072ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d0:	f3ef 8310 	mrs	r3, PRIMASK
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d8:	677b      	str	r3, [r7, #116]	; 0x74
 80072da:	2301      	movs	r3, #1
 80072dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e0:	f383 8810 	msr	PRIMASK, r3
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2101      	movs	r1, #1
 80072f2:	438a      	bics	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fc:	f383 8810 	msr	PRIMASK, r3
}
 8007300:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007302:	f3ef 8310 	mrs	r3, PRIMASK
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007308:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	673b      	str	r3, [r7, #112]	; 0x70
 800730c:	2301      	movs	r3, #1
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007312:	f383 8810 	msr	PRIMASK, r3
}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2140      	movs	r1, #64	; 0x40
 8007324:	438a      	bics	r2, r1
 8007326:	609a      	str	r2, [r3, #8]
 8007328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800732a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732e:	f383 8810 	msr	PRIMASK, r3
}
 8007332:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	2120      	movs	r1, #32
 800733a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007342:	f3ef 8310 	mrs	r3, PRIMASK
 8007346:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007348:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800734c:	2301      	movs	r3, #1
 800734e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2110      	movs	r1, #16
 8007364:	438a      	bics	r2, r1
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736e:	f383 8810 	msr	PRIMASK, r3
}
 8007372:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007378:	0018      	movs	r0, r3
 800737a:	f7fd fb69 	bl	8004a50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2258      	movs	r2, #88	; 0x58
 8007388:	5a9a      	ldrh	r2, [r3, r2]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	215a      	movs	r1, #90	; 0x5a
 800738e:	5a5b      	ldrh	r3, [r3, r1]
 8007390:	b29b      	uxth	r3, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f8e8 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073a0:	e0c2      	b.n	8007528 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2258      	movs	r2, #88	; 0x58
 80073a6:	5a99      	ldrh	r1, [r3, r2]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	225a      	movs	r2, #90	; 0x5a
 80073ac:	5a9b      	ldrh	r3, [r3, r2]
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	208e      	movs	r0, #142	; 0x8e
 80073b2:	183b      	adds	r3, r7, r0
 80073b4:	1a8a      	subs	r2, r1, r2
 80073b6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	225a      	movs	r2, #90	; 0x5a
 80073bc:	5a9b      	ldrh	r3, [r3, r2]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d100      	bne.n	80073c6 <HAL_UART_IRQHandler+0x44a>
 80073c4:	e0b2      	b.n	800752c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80073c6:	183b      	adds	r3, r7, r0
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d100      	bne.n	80073d0 <HAL_UART_IRQHandler+0x454>
 80073ce:	e0ad      	b.n	800752c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d0:	f3ef 8310 	mrs	r3, PRIMASK
 80073d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80073d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d8:	2488      	movs	r4, #136	; 0x88
 80073da:	193a      	adds	r2, r7, r4
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	2301      	movs	r3, #1
 80073e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f383 8810 	msr	PRIMASK, r3
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4951      	ldr	r1, [pc, #324]	; (800753c <HAL_UART_IRQHandler+0x5c0>)
 80073f6:	400a      	ands	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	193b      	adds	r3, r7, r4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f383 8810 	msr	PRIMASK, r3
}
 8007406:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007408:	f3ef 8310 	mrs	r3, PRIMASK
 800740c:	61bb      	str	r3, [r7, #24]
  return(result);
 800740e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007410:	2484      	movs	r4, #132	; 0x84
 8007412:	193a      	adds	r2, r7, r4
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	2301      	movs	r3, #1
 8007418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f383 8810 	msr	PRIMASK, r3
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	438a      	bics	r2, r1
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	193b      	adds	r3, r7, r4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	f383 8810 	msr	PRIMASK, r3
}
 800743e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2280      	movs	r2, #128	; 0x80
 8007444:	2120      	movs	r1, #32
 8007446:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007454:	f3ef 8310 	mrs	r3, PRIMASK
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	2480      	movs	r4, #128	; 0x80
 800745e:	193a      	adds	r2, r7, r4
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	2301      	movs	r3, #1
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2110      	movs	r1, #16
 800747a:	438a      	bics	r2, r1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	193b      	adds	r3, r7, r4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	f383 8810 	msr	PRIMASK, r3
}
 800748a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007492:	183b      	adds	r3, r7, r0
 8007494:	881a      	ldrh	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	0011      	movs	r1, r2
 800749a:	0018      	movs	r0, r3
 800749c:	f000 f868 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074a0:	e044      	b.n	800752c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074a2:	23a4      	movs	r3, #164	; 0xa4
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	035b      	lsls	r3, r3, #13
 80074ac:	4013      	ands	r3, r2
 80074ae:	d010      	beq.n	80074d2 <HAL_UART_IRQHandler+0x556>
 80074b0:	239c      	movs	r3, #156	; 0x9c
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	03db      	lsls	r3, r3, #15
 80074ba:	4013      	ands	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2280      	movs	r2, #128	; 0x80
 80074c4:	0352      	lsls	r2, r2, #13
 80074c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 ff25 	bl	800831a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074d0:	e02f      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074d2:	23a4      	movs	r3, #164	; 0xa4
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2280      	movs	r2, #128	; 0x80
 80074da:	4013      	ands	r3, r2
 80074dc:	d00f      	beq.n	80074fe <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80074de:	23a0      	movs	r3, #160	; 0xa0
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	4013      	ands	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01e      	beq.n	8007530 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	0010      	movs	r0, r2
 80074fa:	4798      	blx	r3
    }
    return;
 80074fc:	e018      	b.n	8007530 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074fe:	23a4      	movs	r3, #164	; 0xa4
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2240      	movs	r2, #64	; 0x40
 8007506:	4013      	ands	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_UART_IRQHandler+0x5b6>
 800750a:	23a0      	movs	r3, #160	; 0xa0
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	4013      	ands	r3, r2
 8007514:	d00d      	beq.n	8007532 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	0018      	movs	r0, r3
 800751a:	f000 fed3 	bl	80082c4 <UART_EndTransmit_IT>
    return;
 800751e:	e008      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	e006      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007524:	46c0      	nop			; (mov r8, r8)
 8007526:	e004      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	e002      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
      return;
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	e000      	b.n	8007532 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007530:	46c0      	nop			; (mov r8, r8)
  }

}
 8007532:	46bd      	mov	sp, r7
 8007534:	b02b      	add	sp, #172	; 0xac
 8007536:	bd90      	pop	{r4, r7, pc}
 8007538:	fffffeff 	.word	0xfffffeff
 800753c:	fffffedf 	.word	0xfffffedf

08007540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007548:	46c0      	nop			; (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007558:	46c0      	nop			; (mov r8, r8)
 800755a:	46bd      	mov	sp, r7
 800755c:	b002      	add	sp, #8
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007568:	46c0      	nop			; (mov r8, r8)
 800756a:	46bd      	mov	sp, r7
 800756c:	b002      	add	sp, #8
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	000a      	movs	r2, r1
 800757a:	1cbb      	adds	r3, r7, #2
 800757c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	46bd      	mov	sp, r7
 8007582:	b002      	add	sp, #8
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007588:	b5b0      	push	{r4, r5, r7, lr}
 800758a:	b08e      	sub	sp, #56	; 0x38
 800758c:	af00      	add	r7, sp, #0
 800758e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007590:	231a      	movs	r3, #26
 8007592:	2218      	movs	r2, #24
 8007594:	189b      	adds	r3, r3, r2
 8007596:	19db      	adds	r3, r3, r7
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4ac3      	ldr	r2, [pc, #780]	; (80078c8 <UART_SetConfig+0x340>)
 80075bc:	4013      	ands	r3, r2
 80075be:	0019      	movs	r1, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4abe      	ldr	r2, [pc, #760]	; (80078cc <UART_SetConfig+0x344>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	0019      	movs	r1, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4ab8      	ldr	r2, [pc, #736]	; (80078d0 <UART_SetConfig+0x348>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f8:	4313      	orrs	r3, r2
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4ab4      	ldr	r2, [pc, #720]	; (80078d4 <UART_SetConfig+0x34c>)
 8007604:	4013      	ands	r3, r2
 8007606:	0019      	movs	r1, r3
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800760e:	430a      	orrs	r2, r1
 8007610:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4ab0      	ldr	r2, [pc, #704]	; (80078d8 <UART_SetConfig+0x350>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d131      	bne.n	8007680 <UART_SetConfig+0xf8>
 800761c:	4baf      	ldr	r3, [pc, #700]	; (80078dc <UART_SetConfig+0x354>)
 800761e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007620:	2203      	movs	r2, #3
 8007622:	4013      	ands	r3, r2
 8007624:	2b03      	cmp	r3, #3
 8007626:	d01d      	beq.n	8007664 <UART_SetConfig+0xdc>
 8007628:	d823      	bhi.n	8007672 <UART_SetConfig+0xea>
 800762a:	2b02      	cmp	r3, #2
 800762c:	d00c      	beq.n	8007648 <UART_SetConfig+0xc0>
 800762e:	d820      	bhi.n	8007672 <UART_SetConfig+0xea>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <UART_SetConfig+0xb2>
 8007634:	2b01      	cmp	r3, #1
 8007636:	d00e      	beq.n	8007656 <UART_SetConfig+0xce>
 8007638:	e01b      	b.n	8007672 <UART_SetConfig+0xea>
 800763a:	231b      	movs	r3, #27
 800763c:	2218      	movs	r2, #24
 800763e:	189b      	adds	r3, r3, r2
 8007640:	19db      	adds	r3, r3, r7
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e0b4      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007648:	231b      	movs	r3, #27
 800764a:	2218      	movs	r2, #24
 800764c:	189b      	adds	r3, r3, r2
 800764e:	19db      	adds	r3, r3, r7
 8007650:	2202      	movs	r2, #2
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e0ad      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007656:	231b      	movs	r3, #27
 8007658:	2218      	movs	r2, #24
 800765a:	189b      	adds	r3, r3, r2
 800765c:	19db      	adds	r3, r3, r7
 800765e:	2204      	movs	r2, #4
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e0a6      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007664:	231b      	movs	r3, #27
 8007666:	2218      	movs	r2, #24
 8007668:	189b      	adds	r3, r3, r2
 800766a:	19db      	adds	r3, r3, r7
 800766c:	2208      	movs	r2, #8
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	e09f      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007672:	231b      	movs	r3, #27
 8007674:	2218      	movs	r2, #24
 8007676:	189b      	adds	r3, r3, r2
 8007678:	19db      	adds	r3, r3, r7
 800767a:	2210      	movs	r2, #16
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e098      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a96      	ldr	r2, [pc, #600]	; (80078e0 <UART_SetConfig+0x358>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d131      	bne.n	80076ee <UART_SetConfig+0x166>
 800768a:	4b94      	ldr	r3, [pc, #592]	; (80078dc <UART_SetConfig+0x354>)
 800768c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768e:	220c      	movs	r2, #12
 8007690:	4013      	ands	r3, r2
 8007692:	2b0c      	cmp	r3, #12
 8007694:	d01d      	beq.n	80076d2 <UART_SetConfig+0x14a>
 8007696:	d823      	bhi.n	80076e0 <UART_SetConfig+0x158>
 8007698:	2b08      	cmp	r3, #8
 800769a:	d00c      	beq.n	80076b6 <UART_SetConfig+0x12e>
 800769c:	d820      	bhi.n	80076e0 <UART_SetConfig+0x158>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <UART_SetConfig+0x120>
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00e      	beq.n	80076c4 <UART_SetConfig+0x13c>
 80076a6:	e01b      	b.n	80076e0 <UART_SetConfig+0x158>
 80076a8:	231b      	movs	r3, #27
 80076aa:	2218      	movs	r2, #24
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	19db      	adds	r3, r3, r7
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e07d      	b.n	80077b2 <UART_SetConfig+0x22a>
 80076b6:	231b      	movs	r3, #27
 80076b8:	2218      	movs	r2, #24
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	19db      	adds	r3, r3, r7
 80076be:	2202      	movs	r2, #2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	e076      	b.n	80077b2 <UART_SetConfig+0x22a>
 80076c4:	231b      	movs	r3, #27
 80076c6:	2218      	movs	r2, #24
 80076c8:	189b      	adds	r3, r3, r2
 80076ca:	19db      	adds	r3, r3, r7
 80076cc:	2204      	movs	r2, #4
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e06f      	b.n	80077b2 <UART_SetConfig+0x22a>
 80076d2:	231b      	movs	r3, #27
 80076d4:	2218      	movs	r2, #24
 80076d6:	189b      	adds	r3, r3, r2
 80076d8:	19db      	adds	r3, r3, r7
 80076da:	2208      	movs	r2, #8
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e068      	b.n	80077b2 <UART_SetConfig+0x22a>
 80076e0:	231b      	movs	r3, #27
 80076e2:	2218      	movs	r2, #24
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	19db      	adds	r3, r3, r7
 80076e8:	2210      	movs	r2, #16
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e061      	b.n	80077b2 <UART_SetConfig+0x22a>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a7c      	ldr	r2, [pc, #496]	; (80078e4 <UART_SetConfig+0x35c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d106      	bne.n	8007706 <UART_SetConfig+0x17e>
 80076f8:	231b      	movs	r3, #27
 80076fa:	2218      	movs	r2, #24
 80076fc:	189b      	adds	r3, r3, r2
 80076fe:	19db      	adds	r3, r3, r7
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e055      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a77      	ldr	r2, [pc, #476]	; (80078e8 <UART_SetConfig+0x360>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d106      	bne.n	800771e <UART_SetConfig+0x196>
 8007710:	231b      	movs	r3, #27
 8007712:	2218      	movs	r2, #24
 8007714:	189b      	adds	r3, r3, r2
 8007716:	19db      	adds	r3, r3, r7
 8007718:	2200      	movs	r2, #0
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e049      	b.n	80077b2 <UART_SetConfig+0x22a>
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a6b      	ldr	r2, [pc, #428]	; (80078d0 <UART_SetConfig+0x348>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d13e      	bne.n	80077a6 <UART_SetConfig+0x21e>
 8007728:	4b6c      	ldr	r3, [pc, #432]	; (80078dc <UART_SetConfig+0x354>)
 800772a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800772c:	23c0      	movs	r3, #192	; 0xc0
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4013      	ands	r3, r2
 8007732:	22c0      	movs	r2, #192	; 0xc0
 8007734:	0112      	lsls	r2, r2, #4
 8007736:	4293      	cmp	r3, r2
 8007738:	d027      	beq.n	800778a <UART_SetConfig+0x202>
 800773a:	22c0      	movs	r2, #192	; 0xc0
 800773c:	0112      	lsls	r2, r2, #4
 800773e:	4293      	cmp	r3, r2
 8007740:	d82a      	bhi.n	8007798 <UART_SetConfig+0x210>
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	0112      	lsls	r2, r2, #4
 8007746:	4293      	cmp	r3, r2
 8007748:	d011      	beq.n	800776e <UART_SetConfig+0x1e6>
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	0112      	lsls	r2, r2, #4
 800774e:	4293      	cmp	r3, r2
 8007750:	d822      	bhi.n	8007798 <UART_SetConfig+0x210>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <UART_SetConfig+0x1d8>
 8007756:	2280      	movs	r2, #128	; 0x80
 8007758:	00d2      	lsls	r2, r2, #3
 800775a:	4293      	cmp	r3, r2
 800775c:	d00e      	beq.n	800777c <UART_SetConfig+0x1f4>
 800775e:	e01b      	b.n	8007798 <UART_SetConfig+0x210>
 8007760:	231b      	movs	r3, #27
 8007762:	2218      	movs	r2, #24
 8007764:	189b      	adds	r3, r3, r2
 8007766:	19db      	adds	r3, r3, r7
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e021      	b.n	80077b2 <UART_SetConfig+0x22a>
 800776e:	231b      	movs	r3, #27
 8007770:	2218      	movs	r2, #24
 8007772:	189b      	adds	r3, r3, r2
 8007774:	19db      	adds	r3, r3, r7
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	e01a      	b.n	80077b2 <UART_SetConfig+0x22a>
 800777c:	231b      	movs	r3, #27
 800777e:	2218      	movs	r2, #24
 8007780:	189b      	adds	r3, r3, r2
 8007782:	19db      	adds	r3, r3, r7
 8007784:	2204      	movs	r2, #4
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e013      	b.n	80077b2 <UART_SetConfig+0x22a>
 800778a:	231b      	movs	r3, #27
 800778c:	2218      	movs	r2, #24
 800778e:	189b      	adds	r3, r3, r2
 8007790:	19db      	adds	r3, r3, r7
 8007792:	2208      	movs	r2, #8
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e00c      	b.n	80077b2 <UART_SetConfig+0x22a>
 8007798:	231b      	movs	r3, #27
 800779a:	2218      	movs	r2, #24
 800779c:	189b      	adds	r3, r3, r2
 800779e:	19db      	adds	r3, r3, r7
 80077a0:	2210      	movs	r2, #16
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e005      	b.n	80077b2 <UART_SetConfig+0x22a>
 80077a6:	231b      	movs	r3, #27
 80077a8:	2218      	movs	r2, #24
 80077aa:	189b      	adds	r3, r3, r2
 80077ac:	19db      	adds	r3, r3, r7
 80077ae:	2210      	movs	r2, #16
 80077b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a46      	ldr	r2, [pc, #280]	; (80078d0 <UART_SetConfig+0x348>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d000      	beq.n	80077be <UART_SetConfig+0x236>
 80077bc:	e09a      	b.n	80078f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077be:	231b      	movs	r3, #27
 80077c0:	2218      	movs	r2, #24
 80077c2:	189b      	adds	r3, r3, r2
 80077c4:	19db      	adds	r3, r3, r7
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d01d      	beq.n	8007808 <UART_SetConfig+0x280>
 80077cc:	dc20      	bgt.n	8007810 <UART_SetConfig+0x288>
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d015      	beq.n	80077fe <UART_SetConfig+0x276>
 80077d2:	dc1d      	bgt.n	8007810 <UART_SetConfig+0x288>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <UART_SetConfig+0x256>
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d005      	beq.n	80077e8 <UART_SetConfig+0x260>
 80077dc:	e018      	b.n	8007810 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077de:	f7ff f8f3 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 80077e2:	0003      	movs	r3, r0
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e6:	e01c      	b.n	8007822 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e8:	4b3c      	ldr	r3, [pc, #240]	; (80078dc <UART_SetConfig+0x354>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2210      	movs	r2, #16
 80077ee:	4013      	ands	r3, r2
 80077f0:	d002      	beq.n	80077f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80077f2:	4b3e      	ldr	r3, [pc, #248]	; (80078ec <UART_SetConfig+0x364>)
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f6:	e014      	b.n	8007822 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80077f8:	4b3d      	ldr	r3, [pc, #244]	; (80078f0 <UART_SetConfig+0x368>)
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077fc:	e011      	b.n	8007822 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fe:	f7ff f833 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8007802:	0003      	movs	r3, r0
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007806:	e00c      	b.n	8007822 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007808:	2380      	movs	r3, #128	; 0x80
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800780e:	e008      	b.n	8007822 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007814:	231a      	movs	r3, #26
 8007816:	2218      	movs	r2, #24
 8007818:	189b      	adds	r3, r3, r2
 800781a:	19db      	adds	r3, r3, r7
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
        break;
 8007820:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	2b00      	cmp	r3, #0
 8007826:	d100      	bne.n	800782a <UART_SetConfig+0x2a2>
 8007828:	e133      	b.n	8007a92 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	0013      	movs	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	189b      	adds	r3, r3, r2
 8007834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007836:	429a      	cmp	r2, r3
 8007838:	d305      	bcc.n	8007846 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d906      	bls.n	8007854 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007846:	231a      	movs	r3, #26
 8007848:	2218      	movs	r2, #24
 800784a:	189b      	adds	r3, r3, r2
 800784c:	19db      	adds	r3, r3, r7
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e11e      	b.n	8007a92 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	6939      	ldr	r1, [r7, #16]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	000b      	movs	r3, r1
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	0010      	movs	r0, r2
 8007866:	0205      	lsls	r5, r0, #8
 8007868:	431d      	orrs	r5, r3
 800786a:	000b      	movs	r3, r1
 800786c:	021c      	lsls	r4, r3, #8
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	68b8      	ldr	r0, [r7, #8]
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	1900      	adds	r0, r0, r4
 8007880:	4169      	adcs	r1, r5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	2300      	movs	r3, #0
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f7f8 fe0a 	bl	80004a8 <__aeabi_uldivmod>
 8007894:	0002      	movs	r2, r0
 8007896:	000b      	movs	r3, r1
 8007898:	0013      	movs	r3, r2
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800789c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789e:	23c0      	movs	r3, #192	; 0xc0
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d309      	bcc.n	80078ba <UART_SetConfig+0x332>
 80078a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	035b      	lsls	r3, r3, #13
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d204      	bcs.n	80078ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	e0eb      	b.n	8007a92 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80078ba:	231a      	movs	r3, #26
 80078bc:	2218      	movs	r2, #24
 80078be:	189b      	adds	r3, r3, r2
 80078c0:	19db      	adds	r3, r3, r7
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	e0e4      	b.n	8007a92 <UART_SetConfig+0x50a>
 80078c8:	efff69f3 	.word	0xefff69f3
 80078cc:	ffffcfff 	.word	0xffffcfff
 80078d0:	40004800 	.word	0x40004800
 80078d4:	fffff4ff 	.word	0xfffff4ff
 80078d8:	40013800 	.word	0x40013800
 80078dc:	40021000 	.word	0x40021000
 80078e0:	40004400 	.word	0x40004400
 80078e4:	40004c00 	.word	0x40004c00
 80078e8:	40005000 	.word	0x40005000
 80078ec:	003d0900 	.word	0x003d0900
 80078f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	2380      	movs	r3, #128	; 0x80
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d000      	beq.n	8007902 <UART_SetConfig+0x37a>
 8007900:	e070      	b.n	80079e4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007902:	231b      	movs	r3, #27
 8007904:	2218      	movs	r2, #24
 8007906:	189b      	adds	r3, r3, r2
 8007908:	19db      	adds	r3, r3, r7
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b08      	cmp	r3, #8
 800790e:	d822      	bhi.n	8007956 <UART_SetConfig+0x3ce>
 8007910:	009a      	lsls	r2, r3, #2
 8007912:	4b67      	ldr	r3, [pc, #412]	; (8007ab0 <UART_SetConfig+0x528>)
 8007914:	18d3      	adds	r3, r2, r3
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800791a:	f7ff f855 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 800791e:	0003      	movs	r3, r0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007922:	e021      	b.n	8007968 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7ff f866 	bl	80069f4 <HAL_RCC_GetPCLK2Freq>
 8007928:	0003      	movs	r3, r0
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800792c:	e01c      	b.n	8007968 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792e:	4b61      	ldr	r3, [pc, #388]	; (8007ab4 <UART_SetConfig+0x52c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2210      	movs	r2, #16
 8007934:	4013      	ands	r3, r2
 8007936:	d002      	beq.n	800793e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007938:	4b5f      	ldr	r3, [pc, #380]	; (8007ab8 <UART_SetConfig+0x530>)
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800793c:	e014      	b.n	8007968 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800793e:	4b5f      	ldr	r3, [pc, #380]	; (8007abc <UART_SetConfig+0x534>)
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007942:	e011      	b.n	8007968 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007944:	f7fe ff90 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8007948:	0003      	movs	r3, r0
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800794c:	e00c      	b.n	8007968 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007954:	e008      	b.n	8007968 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800795a:	231a      	movs	r3, #26
 800795c:	2218      	movs	r2, #24
 800795e:	189b      	adds	r3, r3, r2
 8007960:	19db      	adds	r3, r3, r7
 8007962:	2201      	movs	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
        break;
 8007966:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d100      	bne.n	8007970 <UART_SetConfig+0x3e8>
 800796e:	e090      	b.n	8007a92 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	005a      	lsls	r2, r3, #1
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	18d2      	adds	r2, r2, r3
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	0019      	movs	r1, r3
 8007982:	0010      	movs	r0, r2
 8007984:	f7f8 fbdc 	bl	8000140 <__udivsi3>
 8007988:	0003      	movs	r3, r0
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d921      	bls.n	80079d6 <UART_SetConfig+0x44e>
 8007992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	025b      	lsls	r3, r3, #9
 8007998:	429a      	cmp	r2, r3
 800799a:	d21c      	bcs.n	80079d6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	b29a      	uxth	r2, r3
 80079a0:	200e      	movs	r0, #14
 80079a2:	2418      	movs	r4, #24
 80079a4:	1903      	adds	r3, r0, r4
 80079a6:	19db      	adds	r3, r3, r7
 80079a8:	210f      	movs	r1, #15
 80079aa:	438a      	bics	r2, r1
 80079ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2207      	movs	r2, #7
 80079b6:	4013      	ands	r3, r2
 80079b8:	b299      	uxth	r1, r3
 80079ba:	1903      	adds	r3, r0, r4
 80079bc:	19db      	adds	r3, r3, r7
 80079be:	1902      	adds	r2, r0, r4
 80079c0:	19d2      	adds	r2, r2, r7
 80079c2:	8812      	ldrh	r2, [r2, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	1902      	adds	r2, r0, r4
 80079ce:	19d2      	adds	r2, r2, r7
 80079d0:	8812      	ldrh	r2, [r2, #0]
 80079d2:	60da      	str	r2, [r3, #12]
 80079d4:	e05d      	b.n	8007a92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80079d6:	231a      	movs	r3, #26
 80079d8:	2218      	movs	r2, #24
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	19db      	adds	r3, r3, r7
 80079de:	2201      	movs	r2, #1
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e056      	b.n	8007a92 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079e4:	231b      	movs	r3, #27
 80079e6:	2218      	movs	r2, #24
 80079e8:	189b      	adds	r3, r3, r2
 80079ea:	19db      	adds	r3, r3, r7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d822      	bhi.n	8007a38 <UART_SetConfig+0x4b0>
 80079f2:	009a      	lsls	r2, r3, #2
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <UART_SetConfig+0x538>)
 80079f6:	18d3      	adds	r3, r2, r3
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fc:	f7fe ffe4 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 8007a00:	0003      	movs	r3, r0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a04:	e021      	b.n	8007a4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a06:	f7fe fff5 	bl	80069f4 <HAL_RCC_GetPCLK2Freq>
 8007a0a:	0003      	movs	r3, r0
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a0e:	e01c      	b.n	8007a4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <UART_SetConfig+0x52c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2210      	movs	r2, #16
 8007a16:	4013      	ands	r3, r2
 8007a18:	d002      	beq.n	8007a20 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a1a:	4b27      	ldr	r3, [pc, #156]	; (8007ab8 <UART_SetConfig+0x530>)
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a1e:	e014      	b.n	8007a4a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007a20:	4b26      	ldr	r3, [pc, #152]	; (8007abc <UART_SetConfig+0x534>)
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a24:	e011      	b.n	8007a4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a26:	f7fe ff1f 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8007a2a:	0003      	movs	r3, r0
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a2e:	e00c      	b.n	8007a4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a30:	2380      	movs	r3, #128	; 0x80
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a36:	e008      	b.n	8007a4a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a3c:	231a      	movs	r3, #26
 8007a3e:	2218      	movs	r2, #24
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	19db      	adds	r3, r3, r7
 8007a44:	2201      	movs	r2, #1
 8007a46:	701a      	strb	r2, [r3, #0]
        break;
 8007a48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d020      	beq.n	8007a92 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	085a      	lsrs	r2, r3, #1
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	18d2      	adds	r2, r2, r3
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	0019      	movs	r1, r3
 8007a60:	0010      	movs	r0, r2
 8007a62:	f7f8 fb6d 	bl	8000140 <__udivsi3>
 8007a66:	0003      	movs	r3, r0
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2b0f      	cmp	r3, #15
 8007a6e:	d90a      	bls.n	8007a86 <UART_SetConfig+0x4fe>
 8007a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a72:	2380      	movs	r3, #128	; 0x80
 8007a74:	025b      	lsls	r3, r3, #9
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d205      	bcs.n	8007a86 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e005      	b.n	8007a92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007a86:	231a      	movs	r3, #26
 8007a88:	2218      	movs	r2, #24
 8007a8a:	189b      	adds	r3, r3, r2
 8007a8c:	19db      	adds	r3, r3, r7
 8007a8e:	2201      	movs	r2, #1
 8007a90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2200      	movs	r2, #0
 8007a96:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a9e:	231a      	movs	r3, #26
 8007aa0:	2218      	movs	r2, #24
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	19db      	adds	r3, r3, r7
 8007aa6:	781b      	ldrb	r3, [r3, #0]
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b00e      	add	sp, #56	; 0x38
 8007aae:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab0:	0800df78 	.word	0x0800df78
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	003d0900 	.word	0x003d0900
 8007abc:	00f42400 	.word	0x00f42400
 8007ac0:	0800df9c 	.word	0x0800df9c

08007ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4a4a      	ldr	r2, [pc, #296]	; (8007c08 <UART_AdvFeatureConfig+0x144>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2202      	movs	r2, #2
 8007af4:	4013      	ands	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4a43      	ldr	r2, [pc, #268]	; (8007c0c <UART_AdvFeatureConfig+0x148>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	0019      	movs	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	2204      	movs	r2, #4
 8007b16:	4013      	ands	r3, r2
 8007b18:	d00b      	beq.n	8007b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4a3b      	ldr	r2, [pc, #236]	; (8007c10 <UART_AdvFeatureConfig+0x14c>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	0019      	movs	r1, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2208      	movs	r2, #8
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d00b      	beq.n	8007b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4a34      	ldr	r2, [pc, #208]	; (8007c14 <UART_AdvFeatureConfig+0x150>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	0019      	movs	r1, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2210      	movs	r2, #16
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <UART_AdvFeatureConfig+0x154>)
 8007b66:	4013      	ands	r3, r2
 8007b68:	0019      	movs	r1, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4a25      	ldr	r2, [pc, #148]	; (8007c1c <UART_AdvFeatureConfig+0x158>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	0019      	movs	r1, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2240      	movs	r2, #64	; 0x40
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	d01d      	beq.n	8007bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <UART_AdvFeatureConfig+0x15c>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	0019      	movs	r1, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bbe:	2380      	movs	r3, #128	; 0x80
 8007bc0:	035b      	lsls	r3, r3, #13
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d10b      	bne.n	8007bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <UART_AdvFeatureConfig+0x160>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	0019      	movs	r1, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	4013      	ands	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4a0e      	ldr	r2, [pc, #56]	; (8007c28 <UART_AdvFeatureConfig+0x164>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }
}
 8007c00:	46c0      	nop			; (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b002      	add	sp, #8
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	fffdffff 	.word	0xfffdffff
 8007c0c:	fffeffff 	.word	0xfffeffff
 8007c10:	fffbffff 	.word	0xfffbffff
 8007c14:	ffff7fff 	.word	0xffff7fff
 8007c18:	ffffefff 	.word	0xffffefff
 8007c1c:	ffffdfff 	.word	0xffffdfff
 8007c20:	ffefffff 	.word	0xffefffff
 8007c24:	ff9fffff 	.word	0xff9fffff
 8007c28:	fff7ffff 	.word	0xfff7ffff

08007c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b092      	sub	sp, #72	; 0x48
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2284      	movs	r2, #132	; 0x84
 8007c38:	2100      	movs	r1, #0
 8007c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c3c:	f7fc fb50 	bl	80042e0 <HAL_GetTick>
 8007c40:	0003      	movs	r3, r0
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d12c      	bne.n	8007cac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c54:	2280      	movs	r2, #128	; 0x80
 8007c56:	0391      	lsls	r1, r2, #14
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4a46      	ldr	r2, [pc, #280]	; (8007d74 <UART_CheckIdleState+0x148>)
 8007c5c:	9200      	str	r2, [sp, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f000 f88c 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8007c64:	1e03      	subs	r3, r0, #0
 8007c66:	d021      	beq.n	8007cac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c68:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c72:	2301      	movs	r3, #1
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	f383 8810 	msr	PRIMASK, r3
}
 8007c7c:	46c0      	nop			; (mov r8, r8)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	438a      	bics	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	f383 8810 	msr	PRIMASK, r3
}
 8007c98:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2278      	movs	r2, #120	; 0x78
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e05f      	b.n	8007d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d146      	bne.n	8007d48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	03d1      	lsls	r1, r2, #15
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4a2c      	ldr	r2, [pc, #176]	; (8007d74 <UART_CheckIdleState+0x148>)
 8007cc4:	9200      	str	r2, [sp, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f000 f858 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8007ccc:	1e03      	subs	r3, r0, #0
 8007cce:	d03b      	beq.n	8007d48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cda:	2301      	movs	r3, #1
 8007cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f383 8810 	msr	PRIMASK, r3
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4921      	ldr	r1, [pc, #132]	; (8007d78 <UART_CheckIdleState+0x14c>)
 8007cf2:	400a      	ands	r2, r1
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f383 8810 	msr	PRIMASK, r3
}
 8007d00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d02:	f3ef 8310 	mrs	r3, PRIMASK
 8007d06:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f383 8810 	msr	PRIMASK, r3
}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2101      	movs	r1, #1
 8007d24:	438a      	bics	r2, r1
 8007d26:	609a      	str	r2, [r3, #8]
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	2120      	movs	r1, #32
 8007d3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2278      	movs	r2, #120	; 0x78
 8007d40:	2100      	movs	r1, #0
 8007d42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e011      	b.n	8007d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	2120      	movs	r1, #32
 8007d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2278      	movs	r2, #120	; 0x78
 8007d66:	2100      	movs	r1, #0
 8007d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b010      	add	sp, #64	; 0x40
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	01ffffff 	.word	0x01ffffff
 8007d78:	fffffedf 	.word	0xfffffedf

08007d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	1dfb      	adds	r3, r7, #7
 8007d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8c:	e04b      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	3301      	adds	r3, #1
 8007d92:	d048      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d94:	f7fc faa4 	bl	80042e0 <HAL_GetTick>
 8007d98:	0002      	movs	r2, r0
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <UART_WaitOnFlagUntilTimeout+0x2e>
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e04b      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2204      	movs	r2, #4
 8007db6:	4013      	ands	r3, r2
 8007db8:	d035      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d111      	bne.n	8007dec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f000 f900 	bl	8007fd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2284      	movs	r2, #132	; 0x84
 8007ddc:	2108      	movs	r1, #8
 8007dde:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2278      	movs	r2, #120	; 0x78
 8007de4:	2100      	movs	r1, #0
 8007de6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e02c      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69da      	ldr	r2, [r3, #28]
 8007df2:	2380      	movs	r3, #128	; 0x80
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	401a      	ands	r2, r3
 8007df8:	2380      	movs	r3, #128	; 0x80
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d112      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	0112      	lsls	r2, r2, #4
 8007e08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 f8e3 	bl	8007fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2284      	movs	r2, #132	; 0x84
 8007e16:	2120      	movs	r1, #32
 8007e18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2278      	movs	r2, #120	; 0x78
 8007e1e:	2100      	movs	r1, #0
 8007e20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e00f      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	425a      	negs	r2, r3
 8007e36:	4153      	adcs	r3, r2
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	001a      	movs	r2, r3
 8007e3c:	1dfb      	adds	r3, r7, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d0a4      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	0018      	movs	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	b004      	add	sp, #16
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b090      	sub	sp, #64	; 0x40
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	1dbb      	adds	r3, r7, #6
 8007e5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1dba      	adds	r2, r7, #6
 8007e68:	2158      	movs	r1, #88	; 0x58
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2284      	movs	r2, #132	; 0x84
 8007e72:	2100      	movs	r1, #0
 8007e74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2280      	movs	r2, #128	; 0x80
 8007e7a:	2122      	movs	r1, #34	; 0x22
 8007e7c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d028      	beq.n	8007ed8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	4a3e      	ldr	r2, [pc, #248]	; (8007f84 <UART_Start_Receive_DMA+0x134>)
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e92:	4a3d      	ldr	r2, [pc, #244]	; (8007f88 <UART_Start_Receive_DMA+0x138>)
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	4a3c      	ldr	r2, [pc, #240]	; (8007f8c <UART_Start_Receive_DMA+0x13c>)
 8007e9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3324      	adds	r3, #36	; 0x24
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	001a      	movs	r2, r3
 8007eb8:	1dbb      	adds	r3, r7, #6
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	f7fc fd62 	bl	8004984 <HAL_DMA_Start_IT>
 8007ec0:	1e03      	subs	r3, r0, #0
 8007ec2:	d009      	beq.n	8007ed8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2284      	movs	r2, #132	; 0x84
 8007ec8:	2110      	movs	r1, #16
 8007eca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2280      	movs	r2, #128	; 0x80
 8007ed0:	2120      	movs	r1, #32
 8007ed2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e050      	b.n	8007f7a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eea:	2301      	movs	r3, #1
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	f383 8810 	msr	PRIMASK, r3
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2180      	movs	r1, #128	; 0x80
 8007f02:	0049      	lsls	r1, r1, #1
 8007f04:	430a      	orrs	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	f383 8810 	msr	PRIMASK, r3
}
 8007f12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f14:	f3ef 8310 	mrs	r3, PRIMASK
 8007f18:	613b      	str	r3, [r7, #16]
  return(result);
 8007f1a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f1e:	2301      	movs	r3, #1
 8007f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f383 8810 	msr	PRIMASK, r3
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2101      	movs	r1, #1
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f383 8810 	msr	PRIMASK, r3
}
 8007f44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f46:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f50:	2301      	movs	r3, #1
 8007f52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	f383 8810 	msr	PRIMASK, r3
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2140      	movs	r1, #64	; 0x40
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	f383 8810 	msr	PRIMASK, r3
}
 8007f76:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b010      	add	sp, #64	; 0x40
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	080080a1 	.word	0x080080a1
 8007f88:	080081d1 	.word	0x080081d1
 8007f8c:	08008213 	.word	0x08008213

08007f90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f98:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f383 8810 	msr	PRIMASK, r3
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	21c0      	movs	r1, #192	; 0xc0
 8007fba:	438a      	bics	r2, r1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b006      	add	sp, #24
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	; 0x38
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fe6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	f383 8810 	msr	PRIMASK, r3
}
 8007ff4:	46c0      	nop			; (mov r8, r8)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4926      	ldr	r1, [pc, #152]	; (800809c <UART_EndRxTransfer+0xc4>)
 8008002:	400a      	ands	r2, r1
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f383 8810 	msr	PRIMASK, r3
}
 8008010:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008012:	f3ef 8310 	mrs	r3, PRIMASK
 8008016:	623b      	str	r3, [r7, #32]
  return(result);
 8008018:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
 800801c:	2301      	movs	r3, #1
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f383 8810 	msr	PRIMASK, r3
}
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2101      	movs	r1, #1
 8008034:	438a      	bics	r2, r1
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	f383 8810 	msr	PRIMASK, r3
}
 8008042:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	2b01      	cmp	r3, #1
 800804a:	d118      	bne.n	800807e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800804c:	f3ef 8310 	mrs	r3, PRIMASK
 8008050:	60bb      	str	r3, [r7, #8]
  return(result);
 8008052:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008056:	2301      	movs	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2110      	movs	r1, #16
 800806e:	438a      	bics	r2, r1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2280      	movs	r2, #128	; 0x80
 8008082:	2120      	movs	r1, #32
 8008084:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b00e      	add	sp, #56	; 0x38
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	fffffedf 	.word	0xfffffedf

080080a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b094      	sub	sp, #80	; 0x50
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2220      	movs	r2, #32
 80080b6:	4013      	ands	r3, r2
 80080b8:	d16f      	bne.n	800819a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	225a      	movs	r2, #90	; 0x5a
 80080be:	2100      	movs	r1, #0
 80080c0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c2:	f3ef 8310 	mrs	r3, PRIMASK
 80080c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80080c8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80080cc:	2301      	movs	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f383 8810 	msr	PRIMASK, r3
}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	493a      	ldr	r1, [pc, #232]	; (80081cc <UART_DMAReceiveCplt+0x12c>)
 80080e4:	400a      	ands	r2, r1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	f383 8810 	msr	PRIMASK, r3
}
 80080f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f4:	f3ef 8310 	mrs	r3, PRIMASK
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	647b      	str	r3, [r7, #68]	; 0x44
 80080fe:	2301      	movs	r3, #1
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	f383 8810 	msr	PRIMASK, r3
}
 8008108:	46c0      	nop			; (mov r8, r8)
 800810a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2101      	movs	r1, #1
 8008116:	438a      	bics	r2, r1
 8008118:	609a      	str	r2, [r3, #8]
 800811a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	f383 8810 	msr	PRIMASK, r3
}
 8008124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008126:	f3ef 8310 	mrs	r3, PRIMASK
 800812a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812e:	643b      	str	r3, [r7, #64]	; 0x40
 8008130:	2301      	movs	r3, #1
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	f383 8810 	msr	PRIMASK, r3
}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2140      	movs	r1, #64	; 0x40
 8008148:	438a      	bics	r2, r1
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	f383 8810 	msr	PRIMASK, r3
}
 8008156:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815a:	2280      	movs	r2, #128	; 0x80
 800815c:	2120      	movs	r1, #32
 800815e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008164:	2b01      	cmp	r3, #1
 8008166:	d118      	bne.n	800819a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008168:	f3ef 8310 	mrs	r3, PRIMASK
 800816c:	60fb      	str	r3, [r7, #12]
  return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008172:	2301      	movs	r3, #1
 8008174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f383 8810 	msr	PRIMASK, r3
}
 800817c:	46c0      	nop			; (mov r8, r8)
 800817e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2110      	movs	r1, #16
 800818a:	438a      	bics	r2, r1
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f383 8810 	msr	PRIMASK, r3
}
 8008198:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800819a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819c:	2200      	movs	r2, #0
 800819e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d108      	bne.n	80081ba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	2258      	movs	r2, #88	; 0x58
 80081ac:	5a9a      	ldrh	r2, [r3, r2]
 80081ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b0:	0011      	movs	r1, r2
 80081b2:	0018      	movs	r0, r3
 80081b4:	f7ff f9dc 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081b8:	e003      	b.n	80081c2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80081ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081bc:	0018      	movs	r0, r3
 80081be:	f7fa fc4b 	bl	8002a58 <HAL_UART_RxCpltCallback>
}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	46bd      	mov	sp, r7
 80081c6:	b014      	add	sp, #80	; 0x50
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	fffffeff 	.word	0xfffffeff

080081d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10a      	bne.n	8008202 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2258      	movs	r2, #88	; 0x58
 80081f0:	5a9b      	ldrh	r3, [r3, r2]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	0011      	movs	r1, r2
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7ff f9b8 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008200:	e003      	b.n	800820a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	0018      	movs	r0, r3
 8008206:	f7ff f9a3 	bl	8007550 <HAL_UART_RxHalfCpltCallback>
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b004      	add	sp, #16
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008224:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2280      	movs	r2, #128	; 0x80
 800822a:	589b      	ldr	r3, [r3, r2]
 800822c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2280      	movs	r2, #128	; 0x80
 8008236:	4013      	ands	r3, r2
 8008238:	2b80      	cmp	r3, #128	; 0x80
 800823a:	d10a      	bne.n	8008252 <UART_DMAError+0x40>
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b21      	cmp	r3, #33	; 0x21
 8008240:	d107      	bne.n	8008252 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2252      	movs	r2, #82	; 0x52
 8008246:	2100      	movs	r1, #0
 8008248:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	0018      	movs	r0, r3
 800824e:	f7ff fe9f 	bl	8007f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2240      	movs	r2, #64	; 0x40
 800825a:	4013      	ands	r3, r2
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d10a      	bne.n	8008276 <UART_DMAError+0x64>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b22      	cmp	r3, #34	; 0x22
 8008264:	d107      	bne.n	8008276 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	225a      	movs	r2, #90	; 0x5a
 800826a:	2100      	movs	r1, #0
 800826c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	0018      	movs	r0, r3
 8008272:	f7ff feb1 	bl	8007fd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2284      	movs	r2, #132	; 0x84
 800827a:	589b      	ldr	r3, [r3, r2]
 800827c:	2210      	movs	r2, #16
 800827e:	431a      	orrs	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2184      	movs	r1, #132	; 0x84
 8008284:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	0018      	movs	r0, r3
 800828a:	f7ff f969 	bl	8007560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b006      	add	sp, #24
 8008294:	bd80      	pop	{r7, pc}

08008296 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	225a      	movs	r2, #90	; 0x5a
 80082a8:	2100      	movs	r1, #0
 80082aa:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2252      	movs	r2, #82	; 0x52
 80082b0:	2100      	movs	r1, #0
 80082b2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	0018      	movs	r0, r3
 80082b8:	f7ff f952 	bl	8007560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082bc:	46c0      	nop			; (mov r8, r8)
 80082be:	46bd      	mov	sp, r7
 80082c0:	b004      	add	sp, #16
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	2301      	movs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f383 8810 	msr	PRIMASK, r3
}
 80082e0:	46c0      	nop			; (mov r8, r8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2140      	movs	r1, #64	; 0x40
 80082ee:	438a      	bics	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f383 8810 	msr	PRIMASK, r3
}
 80082fc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	0018      	movs	r0, r3
 800830e:	f7ff f917 	bl	8007540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b006      	add	sp, #24
 8008318:	bd80      	pop	{r7, pc}

0800831a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	46bd      	mov	sp, r7
 8008326:	b002      	add	sp, #8
 8008328:	bd80      	pop	{r7, pc}

0800832a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800832a:	b580      	push	{r7, lr}
 800832c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800833a:	f3ef 8305 	mrs	r3, IPSR
 800833e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008340:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008346:	f3ef 8310 	mrs	r3, PRIMASK
 800834a:	607b      	str	r3, [r7, #4]
  return(result);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <osKernelInitialize+0x2e>
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <osKernelInitialize+0x54>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d103      	bne.n	8008362 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800835a:	2306      	movs	r3, #6
 800835c:	425b      	negs	r3, r3
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	e00c      	b.n	800837c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <osKernelInitialize+0x54>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <osKernelInitialize+0x54>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e002      	b.n	800837c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8008376:	2301      	movs	r3, #1
 8008378:	425b      	negs	r3, r3
 800837a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800837c:	68fb      	ldr	r3, [r7, #12]
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b004      	add	sp, #16
 8008384:	bd80      	pop	{r7, pc}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	20000428 	.word	0x20000428

0800838c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008392:	f3ef 8305 	mrs	r3, IPSR
 8008396:	60bb      	str	r3, [r7, #8]
  return(result);
 8008398:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800839a:	2b00      	cmp	r3, #0
 800839c:	d109      	bne.n	80083b2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839e:	f3ef 8310 	mrs	r3, PRIMASK
 80083a2:	607b      	str	r3, [r7, #4]
  return(result);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <osKernelStart+0x2e>
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <osKernelStart+0x5c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d103      	bne.n	80083ba <osKernelStart+0x2e>
    stat = osErrorISR;
 80083b2:	2306      	movs	r3, #6
 80083b4:	425b      	negs	r3, r3
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e010      	b.n	80083dc <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <osKernelStart+0x5c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083c2:	f7ff ffb2 	bl	800832a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <osKernelStart+0x5c>)
 80083c8:	2202      	movs	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083cc:	f001 f98e 	bl	80096ec <vTaskStartScheduler>
      stat = osOK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <osKernelStart+0x50>
    } else {
      stat = osError;
 80083d6:	2301      	movs	r3, #1
 80083d8:	425b      	negs	r3, r3
 80083da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083dc:	68fb      	ldr	r3, [r7, #12]
}
 80083de:	0018      	movs	r0, r3
 80083e0:	46bd      	mov	sp, r7
 80083e2:	b004      	add	sp, #16
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	20000428 	.word	0x20000428

080083ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083ec:	b5b0      	push	{r4, r5, r7, lr}
 80083ee:	b090      	sub	sp, #64	; 0x40
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	61fb      	str	r3, [r7, #28]
  return(result);
 8008402:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d000      	beq.n	800840a <osThreadNew+0x1e>
 8008408:	e08c      	b.n	8008524 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840a:	f3ef 8310 	mrs	r3, PRIMASK
 800840e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <osThreadNew+0x34>
 8008416:	4b46      	ldr	r3, [pc, #280]	; (8008530 <osThreadNew+0x144>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d100      	bne.n	8008420 <osThreadNew+0x34>
 800841e:	e081      	b.n	8008524 <osThreadNew+0x138>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d100      	bne.n	8008428 <osThreadNew+0x3c>
 8008426:	e07d      	b.n	8008524 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800842c:	2318      	movs	r3, #24
 800842e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008434:	2301      	movs	r3, #1
 8008436:	425b      	negs	r3, r3
 8008438:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d044      	beq.n	80084ca <osThreadNew+0xde>
      if (attr->name != NULL) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <osThreadNew+0x62>
        name = attr->name;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <osThreadNew+0x86>
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	2b38      	cmp	r3, #56	; 0x38
 8008466:	d804      	bhi.n	8008472 <osThreadNew+0x86>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	4013      	ands	r3, r2
 8008470:	d001      	beq.n	8008476 <osThreadNew+0x8a>
        return (NULL);
 8008472:	2300      	movs	r3, #0
 8008474:	e057      	b.n	8008526 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <osThreadNew+0xc0>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	2bbb      	cmp	r3, #187	; 0xbb
 8008494:	d90a      	bls.n	80084ac <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800849a:	2b00      	cmp	r3, #0
 800849c:	d006      	beq.n	80084ac <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <osThreadNew+0xc0>
        mem = 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	623b      	str	r3, [r7, #32]
 80084aa:	e010      	b.n	80084ce <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10c      	bne.n	80084ce <osThreadNew+0xe2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d108      	bne.n	80084ce <osThreadNew+0xe2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <osThreadNew+0xe2>
          mem = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	623b      	str	r3, [r7, #32]
 80084c8:	e001      	b.n	80084ce <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d112      	bne.n	80084fa <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084dc:	68bd      	ldr	r5, [r7, #8]
 80084de:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80084e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	002b      	movs	r3, r5
 80084ee:	0022      	movs	r2, r4
 80084f0:	f000 ff3d 	bl	800936e <xTaskCreateStatic>
 80084f4:	0003      	movs	r3, r0
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e014      	b.n	8008524 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d111      	bne.n	8008524 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	b29a      	uxth	r2, r3
 8008504:	68bc      	ldr	r4, [r7, #8]
 8008506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	2314      	movs	r3, #20
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	0023      	movs	r3, r4
 8008516:	f000 ff6e 	bl	80093f6 <xTaskCreate>
 800851a:	0003      	movs	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d001      	beq.n	8008524 <osThreadNew+0x138>
          hTask = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008524:	697b      	ldr	r3, [r7, #20]
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	b00c      	add	sp, #48	; 0x30
 800852c:	bdb0      	pop	{r4, r5, r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	20000428 	.word	0x20000428

08008534 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800853c:	f3ef 8305 	mrs	r3, IPSR
 8008540:	613b      	str	r3, [r7, #16]
  return(result);
 8008542:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008548:	f3ef 8310 	mrs	r3, PRIMASK
 800854c:	60fb      	str	r3, [r7, #12]
  return(result);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <osDelay+0x30>
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <osDelay+0x4c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d103      	bne.n	8008564 <osDelay+0x30>
    stat = osErrorISR;
 800855c:	2306      	movs	r3, #6
 800855e:	425b      	negs	r3, r3
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	e008      	b.n	8008576 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <osDelay+0x42>
      vTaskDelay(ticks);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0018      	movs	r0, r3
 8008572:	f001 f895 	bl	80096a0 <vTaskDelay>
    }
  }

  return (stat);
 8008576:	697b      	ldr	r3, [r7, #20]
}
 8008578:	0018      	movs	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	b006      	add	sp, #24
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000428 	.word	0x20000428

08008584 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b08d      	sub	sp, #52	; 0x34
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008594:	f3ef 8305 	mrs	r3, IPSR
 8008598:	61bb      	str	r3, [r7, #24]
  return(result);
 800859a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800859c:	2b00      	cmp	r3, #0
 800859e:	d000      	beq.n	80085a2 <osMessageQueueNew+0x1e>
 80085a0:	e06f      	b.n	8008682 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a2:	f3ef 8310 	mrs	r3, PRIMASK
 80085a6:	617b      	str	r3, [r7, #20]
  return(result);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <osMessageQueueNew+0x34>
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <osMessageQueueNew+0x108>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d100      	bne.n	80085b8 <osMessageQueueNew+0x34>
 80085b6:	e064      	b.n	8008682 <osMessageQueueNew+0xfe>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d100      	bne.n	80085c0 <osMessageQueueNew+0x3c>
 80085be:	e060      	b.n	8008682 <osMessageQueueNew+0xfe>
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d05d      	beq.n	8008682 <osMessageQueueNew+0xfe>
    mem = -1;
 80085c6:	2301      	movs	r3, #1
 80085c8:	425b      	negs	r3, r3
 80085ca:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d028      	beq.n	8008624 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d011      	beq.n	80085fe <osMessageQueueNew+0x7a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	2b4f      	cmp	r3, #79	; 0x4f
 80085e0:	d90d      	bls.n	80085fe <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	434b      	muls	r3, r1
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <osMessageQueueNew+0x7a>
        mem = 1;
 80085f8:	2301      	movs	r3, #1
 80085fa:	623b      	str	r3, [r7, #32]
 80085fc:	e014      	b.n	8008628 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d110      	bne.n	8008628 <osMessageQueueNew+0xa4>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008612:	2b00      	cmp	r3, #0
 8008614:	d108      	bne.n	8008628 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d104      	bne.n	8008628 <osMessageQueueNew+0xa4>
          mem = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	623b      	str	r3, [r7, #32]
 8008622:	e001      	b.n	8008628 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10c      	bne.n	8008648 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	2400      	movs	r4, #0
 800863c:	9400      	str	r4, [sp, #0]
 800863e:	f000 fa26 	bl	8008a8e <xQueueGenericCreateStatic>
 8008642:	0003      	movs	r3, r0
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
 8008646:	e00a      	b.n	800865e <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d107      	bne.n	800865e <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	0018      	movs	r0, r3
 8008656:	f000 fa66 	bl	8008b26 <xQueueGenericCreate>
 800865a:	0003      	movs	r3, r0
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <osMessageQueueNew+0xee>
        name = attr->name;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	e001      	b.n	8008676 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	0011      	movs	r1, r2
 800867c:	0018      	movs	r0, r3
 800867e:	f000 fe1b 	bl	80092b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008684:	0018      	movs	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	b00b      	add	sp, #44	; 0x2c
 800868a:	bd90      	pop	{r4, r7, pc}
 800868c:	20000428 	.word	0x20000428

08008690 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	; 0x28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	1dfb      	adds	r3, r7, #7
 800869e:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a8:	f3ef 8305 	mrs	r3, IPSR
 80086ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80086ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b4:	f3ef 8310 	mrs	r3, PRIMASK
 80086b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d028      	beq.n	8008712 <osMessageQueuePut+0x82>
 80086c0:	4b26      	ldr	r3, [pc, #152]	; (800875c <osMessageQueuePut+0xcc>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d124      	bne.n	8008712 <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <osMessageQueuePut+0x4a>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <osMessageQueuePut+0x4a>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 80086da:	2304      	movs	r3, #4
 80086dc:	425b      	negs	r3, r3
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086e0:	e035      	b.n	800874e <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80086e6:	2314      	movs	r3, #20
 80086e8:	18fa      	adds	r2, r7, r3
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	6a38      	ldr	r0, [r7, #32]
 80086ee:	2300      	movs	r3, #0
 80086f0:	f000 fb3c 	bl	8008d6c <xQueueGenericSendFromISR>
 80086f4:	0003      	movs	r3, r0
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d003      	beq.n	8008702 <osMessageQueuePut+0x72>
        stat = osErrorResource;
 80086fa:	2303      	movs	r3, #3
 80086fc:	425b      	negs	r3, r3
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008700:	e025      	b.n	800874e <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d022      	beq.n	800874e <osMessageQueuePut+0xbe>
 8008708:	4b15      	ldr	r3, [pc, #84]	; (8008760 <osMessageQueuePut+0xd0>)
 800870a:	2280      	movs	r2, #128	; 0x80
 800870c:	0552      	lsls	r2, r2, #21
 800870e:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008710:	e01d      	b.n	800874e <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <osMessageQueuePut+0x8e>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800871e:	2304      	movs	r3, #4
 8008720:	425b      	negs	r3, r3
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
 8008724:	e014      	b.n	8008750 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	6a38      	ldr	r0, [r7, #32]
 800872c:	2300      	movs	r3, #0
 800872e:	f000 fa59 	bl	8008be4 <xQueueGenericSend>
 8008732:	0003      	movs	r3, r0
 8008734:	2b01      	cmp	r3, #1
 8008736:	d00b      	beq.n	8008750 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800873e:	2302      	movs	r3, #2
 8008740:	425b      	negs	r3, r3
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
 8008744:	e004      	b.n	8008750 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 8008746:	2303      	movs	r3, #3
 8008748:	425b      	negs	r3, r3
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
 800874c:	e000      	b.n	8008750 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800874e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008752:	0018      	movs	r0, r3
 8008754:	46bd      	mov	sp, r7
 8008756:	b00a      	add	sp, #40	; 0x28
 8008758:	bd80      	pop	{r7, pc}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	20000428 	.word	0x20000428
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	; 0x28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800877a:	f3ef 8305 	mrs	r3, IPSR
 800877e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008780:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008786:	f3ef 8310 	mrs	r3, PRIMASK
 800878a:	61bb      	str	r3, [r7, #24]
  return(result);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d028      	beq.n	80087e4 <osMessageQueueGet+0x80>
 8008792:	4b26      	ldr	r3, [pc, #152]	; (800882c <osMessageQueueGet+0xc8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d124      	bne.n	80087e4 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <osMessageQueueGet+0x48>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <osMessageQueueGet+0x48>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 80087ac:	2304      	movs	r3, #4
 80087ae:	425b      	negs	r3, r3
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087b2:	e035      	b.n	8008820 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80087b8:	2314      	movs	r3, #20
 80087ba:	18fa      	adds	r2, r7, r3
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	0018      	movs	r0, r3
 80087c2:	f000 fbf9 	bl	8008fb8 <xQueueReceiveFromISR>
 80087c6:	0003      	movs	r3, r0
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d003      	beq.n	80087d4 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 80087cc:	2303      	movs	r3, #3
 80087ce:	425b      	negs	r3, r3
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087d2:	e025      	b.n	8008820 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d022      	beq.n	8008820 <osMessageQueueGet+0xbc>
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <osMessageQueueGet+0xcc>)
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	0552      	lsls	r2, r2, #21
 80087e0:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087e2:	e01d      	b.n	8008820 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <osMessageQueueGet+0x8c>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d103      	bne.n	80087f8 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 80087f0:	2304      	movs	r3, #4
 80087f2:	425b      	negs	r3, r3
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
 80087f6:	e014      	b.n	8008822 <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	0018      	movs	r0, r3
 8008800:	f000 fb25 	bl	8008e4e <xQueueReceive>
 8008804:	0003      	movs	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d00b      	beq.n	8008822 <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 8008810:	2302      	movs	r3, #2
 8008812:	425b      	negs	r3, r3
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
 8008816:	e004      	b.n	8008822 <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 8008818:	2303      	movs	r3, #3
 800881a:	425b      	negs	r3, r3
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	e000      	b.n	8008822 <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008820:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008824:	0018      	movs	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	b00a      	add	sp, #40	; 0x28
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20000428 	.word	0x20000428
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a06      	ldr	r2, [pc, #24]	; (800885c <vApplicationGetIdleTaskMemory+0x28>)
 8008844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4a05      	ldr	r2, [pc, #20]	; (8008860 <vApplicationGetIdleTaskMemory+0x2c>)
 800884a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2280      	movs	r2, #128	; 0x80
 8008850:	601a      	str	r2, [r3, #0]
}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	46bd      	mov	sp, r7
 8008856:	b004      	add	sp, #16
 8008858:	bd80      	pop	{r7, pc}
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	2000042c 	.word	0x2000042c
 8008860:	200004e8 	.word	0x200004e8

08008864 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4a06      	ldr	r2, [pc, #24]	; (800888c <vApplicationGetTimerTaskMemory+0x28>)
 8008874:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4a05      	ldr	r2, [pc, #20]	; (8008890 <vApplicationGetTimerTaskMemory+0x2c>)
 800887a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2280      	movs	r2, #128	; 0x80
 8008880:	0052      	lsls	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	46c0      	nop			; (mov r8, r8)
 8008886:	46bd      	mov	sp, r7
 8008888:	b004      	add	sp, #16
 800888a:	bd80      	pop	{r7, pc}
 800888c:	200006e8 	.word	0x200006e8
 8008890:	200007a4 	.word	0x200007a4

08008894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3308      	adds	r3, #8
 80088a0:	001a      	movs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	4252      	negs	r2, r2
 80088ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3308      	adds	r3, #8
 80088b2:	001a      	movs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3308      	adds	r3, #8
 80088bc:	001a      	movs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088c8:	46c0      	nop			; (mov r8, r8)
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b002      	add	sp, #8
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b002      	add	sp, #8
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	601a      	str	r2, [r3, #0]
}
 8008922:	46c0      	nop			; (mov r8, r8)
 8008924:	46bd      	mov	sp, r7
 8008926:	b004      	add	sp, #16
 8008928:	bd80      	pop	{r7, pc}

0800892a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3301      	adds	r3, #1
 800893e:	d103      	bne.n	8008948 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e00c      	b.n	8008962 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3308      	adds	r3, #8
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	e002      	b.n	8008956 <vListInsert+0x2c>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	429a      	cmp	r2, r3
 8008960:	d2f6      	bcs.n	8008950 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	46bd      	mov	sp, r7
 8008992:	b004      	add	sp, #16
 8008994:	bd80      	pop	{r7, pc}

08008996 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6892      	ldr	r2, [r2, #8]
 80089ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6852      	ldr	r2, [r2, #4]
 80089b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d103      	bne.n	80089ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
}
 80089de:	0018      	movs	r0, r3
 80089e0:	46bd      	mov	sp, r7
 80089e2:	b004      	add	sp, #16
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <xQueueGenericReset+0x18>
 80089fa:	b672      	cpsid	i
 80089fc:	e7fe      	b.n	80089fc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80089fe:	f001 fed7 	bl	800a7b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	434b      	muls	r3, r1
 8008a10:	18d2      	adds	r2, r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2c:	1e59      	subs	r1, r3, #1
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	434b      	muls	r3, r1
 8008a34:	18d2      	adds	r2, r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2244      	movs	r2, #68	; 0x44
 8008a3e:	21ff      	movs	r1, #255	; 0xff
 8008a40:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2245      	movs	r2, #69	; 0x45
 8008a46:	21ff      	movs	r1, #255	; 0xff
 8008a48:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10d      	bne.n	8008a6c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d013      	beq.n	8008a80 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3310      	adds	r3, #16
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f001 f897 	bl	8009b90 <xTaskRemoveFromEventList>
 8008a62:	1e03      	subs	r3, r0, #0
 8008a64:	d00c      	beq.n	8008a80 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a66:	f001 fe93 	bl	800a790 <vPortYield>
 8008a6a:	e009      	b.n	8008a80 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3310      	adds	r3, #16
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff ff0f 	bl	8008894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3324      	adds	r3, #36	; 0x24
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7ff ff0a 	bl	8008894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a80:	f001 fea8 	bl	800a7d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a84:	2301      	movs	r3, #1
}
 8008a86:	0018      	movs	r0, r3
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b004      	add	sp, #16
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a8e:	b590      	push	{r4, r7, lr}
 8008a90:	b089      	sub	sp, #36	; 0x24
 8008a92:	af02      	add	r7, sp, #8
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <xQueueGenericCreateStatic+0x18>
 8008aa2:	b672      	cpsid	i
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <xQueueGenericCreateStatic+0x22>
 8008aac:	b672      	cpsid	i
 8008aae:	e7fe      	b.n	8008aae <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <xQueueGenericCreateStatic+0x2e>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <xQueueGenericCreateStatic+0x32>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e000      	b.n	8008ac2 <xQueueGenericCreateStatic+0x34>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xQueueGenericCreateStatic+0x3c>
 8008ac6:	b672      	cpsid	i
 8008ac8:	e7fe      	b.n	8008ac8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <xQueueGenericCreateStatic+0x48>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <xQueueGenericCreateStatic+0x4c>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <xQueueGenericCreateStatic+0x4e>
 8008ada:	2300      	movs	r3, #0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <xQueueGenericCreateStatic+0x56>
 8008ae0:	b672      	cpsid	i
 8008ae2:	e7fe      	b.n	8008ae2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ae4:	2350      	movs	r3, #80	; 0x50
 8008ae6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	2b50      	cmp	r3, #80	; 0x50
 8008aec:	d001      	beq.n	8008af2 <xQueueGenericCreateStatic+0x64>
 8008aee:	b672      	cpsid	i
 8008af0:	e7fe      	b.n	8008af0 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008af2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00e      	beq.n	8008b1c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2246      	movs	r2, #70	; 0x46
 8008b02:	2101      	movs	r1, #1
 8008b04:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b06:	2328      	movs	r3, #40	; 0x28
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	781c      	ldrb	r4, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	0023      	movs	r3, r4
 8008b18:	f000 f83d 	bl	8008b96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b1c:	697b      	ldr	r3, [r7, #20]
	}
 8008b1e:	0018      	movs	r0, r3
 8008b20:	46bd      	mov	sp, r7
 8008b22:	b007      	add	sp, #28
 8008b24:	bd90      	pop	{r4, r7, pc}

08008b26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b26:	b590      	push	{r4, r7, lr}
 8008b28:	b08b      	sub	sp, #44	; 0x2c
 8008b2a:	af02      	add	r7, sp, #8
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	1dfb      	adds	r3, r7, #7
 8008b32:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <xQueueGenericCreate+0x18>
 8008b3a:	b672      	cpsid	i
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e003      	b.n	8008b52 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	4353      	muls	r3, r2
 8008b50:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3350      	adds	r3, #80	; 0x50
 8008b56:	0018      	movs	r0, r3
 8008b58:	f001 fec2 	bl	800a8e0 <pvPortMalloc>
 8008b5c:	0003      	movs	r3, r0
 8008b5e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d012      	beq.n	8008b8c <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3350      	adds	r3, #80	; 0x50
 8008b6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2246      	movs	r2, #70	; 0x46
 8008b74:	2100      	movs	r1, #0
 8008b76:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b78:	1dfb      	adds	r3, r7, #7
 8008b7a:	781c      	ldrb	r4, [r3, #0]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	0023      	movs	r3, r4
 8008b88:	f000 f805 	bl	8008b96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8008b8e:	0018      	movs	r0, r3
 8008b90:	46bd      	mov	sp, r7
 8008b92:	b009      	add	sp, #36	; 0x24
 8008b94:	bd90      	pop	{r4, r7, pc}

08008b96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	001a      	movs	r2, r3
 8008ba4:	1cfb      	adds	r3, r7, #3
 8008ba6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d103      	bne.n	8008bb6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e002      	b.n	8008bbc <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2101      	movs	r1, #1
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff ff0a 	bl	80089e6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	1cfa      	adds	r2, r7, #3
 8008bd6:	214c      	movs	r1, #76	; 0x4c
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b004      	add	sp, #16
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <xQueueGenericSend+0x20>
 8008c00:	b672      	cpsid	i
 8008c02:	e7fe      	b.n	8008c02 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <xQueueGenericSend+0x2e>
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <xQueueGenericSend+0x32>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <xQueueGenericSend+0x34>
 8008c16:	2300      	movs	r3, #0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <xQueueGenericSend+0x3c>
 8008c1c:	b672      	cpsid	i
 8008c1e:	e7fe      	b.n	8008c1e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d103      	bne.n	8008c2e <xQueueGenericSend+0x4a>
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <xQueueGenericSend+0x4e>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <xQueueGenericSend+0x50>
 8008c32:	2300      	movs	r3, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <xQueueGenericSend+0x58>
 8008c38:	b672      	cpsid	i
 8008c3a:	e7fe      	b.n	8008c3a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c3c:	f001 f940 	bl	8009ec0 <xTaskGetSchedulerState>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d102      	bne.n	8008c4a <xQueueGenericSend+0x66>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <xQueueGenericSend+0x6a>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <xQueueGenericSend+0x6c>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <xQueueGenericSend+0x74>
 8008c54:	b672      	cpsid	i
 8008c56:	e7fe      	b.n	8008c56 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c58:	f001 fdaa 	bl	800a7b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <xQueueGenericSend+0x8a>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d11e      	bne.n	8008cac <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	0018      	movs	r0, r3
 8008c76:	f000 fa02 	bl	800907e <prvCopyDataToQueue>
 8008c7a:	0003      	movs	r3, r0
 8008c7c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 ff80 	bl	8009b90 <xTaskRemoveFromEventList>
 8008c90:	1e03      	subs	r3, r0, #0
 8008c92:	d007      	beq.n	8008ca4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c94:	f001 fd7c 	bl	800a790 <vPortYield>
 8008c98:	e004      	b.n	8008ca4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ca0:	f001 fd76 	bl	800a790 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ca4:	f001 fd96 	bl	800a7d4 <vPortExitCritical>
				return pdPASS;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e05b      	b.n	8008d64 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d103      	bne.n	8008cba <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cb2:	f001 fd8f 	bl	800a7d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e054      	b.n	8008d64 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d106      	bne.n	8008cce <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cc0:	2314      	movs	r3, #20
 8008cc2:	18fb      	adds	r3, r7, r3
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 ffbf 	bl	8009c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cce:	f001 fd81 	bl	800a7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cd2:	f000 fd69 	bl	80097a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cd6:	f001 fd6b 	bl	800a7b0 <vPortEnterCritical>
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	2244      	movs	r2, #68	; 0x44
 8008cde:	5c9b      	ldrb	r3, [r3, r2]
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	d103      	bne.n	8008cee <xQueueGenericSend+0x10a>
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	2244      	movs	r2, #68	; 0x44
 8008cea:	2100      	movs	r1, #0
 8008cec:	5499      	strb	r1, [r3, r2]
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2245      	movs	r2, #69	; 0x45
 8008cf2:	5c9b      	ldrb	r3, [r3, r2]
 8008cf4:	b25b      	sxtb	r3, r3
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	d103      	bne.n	8008d02 <xQueueGenericSend+0x11e>
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	2245      	movs	r2, #69	; 0x45
 8008cfe:	2100      	movs	r1, #0
 8008d00:	5499      	strb	r1, [r3, r2]
 8008d02:	f001 fd67 	bl	800a7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d06:	1d3a      	adds	r2, r7, #4
 8008d08:	2314      	movs	r3, #20
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	0011      	movs	r1, r2
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f000 ffae 	bl	8009c70 <xTaskCheckForTimeOut>
 8008d14:	1e03      	subs	r3, r0, #0
 8008d16:	d11e      	bne.n	8008d56 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f000 fab4 	bl	8009288 <prvIsQueueFull>
 8008d20:	1e03      	subs	r3, r0, #0
 8008d22:	d011      	beq.n	8008d48 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	3310      	adds	r3, #16
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	0011      	movs	r1, r2
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f000 feeb 	bl	8009b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	0018      	movs	r0, r3
 8008d36:	f000 fa33 	bl	80091a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d3a:	f000 fd41 	bl	80097c0 <xTaskResumeAll>
 8008d3e:	1e03      	subs	r3, r0, #0
 8008d40:	d18a      	bne.n	8008c58 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008d42:	f001 fd25 	bl	800a790 <vPortYield>
 8008d46:	e787      	b.n	8008c58 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f000 fa28 	bl	80091a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d50:	f000 fd36 	bl	80097c0 <xTaskResumeAll>
 8008d54:	e780      	b.n	8008c58 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fa21 	bl	80091a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d5e:	f000 fd2f 	bl	80097c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d64:	0018      	movs	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b00a      	add	sp, #40	; 0x28
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b089      	sub	sp, #36	; 0x24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <xQueueGenericSendFromISR+0x1c>
 8008d84:	b672      	cpsid	i
 8008d86:	e7fe      	b.n	8008d86 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <xQueueGenericSendFromISR+0x2a>
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <xQueueGenericSendFromISR+0x2e>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueGenericSendFromISR+0x30>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <xQueueGenericSendFromISR+0x38>
 8008da0:	b672      	cpsid	i
 8008da2:	e7fe      	b.n	8008da2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d103      	bne.n	8008db2 <xQueueGenericSendFromISR+0x46>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <xQueueGenericSendFromISR+0x4a>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <xQueueGenericSendFromISR+0x4c>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <xQueueGenericSendFromISR+0x54>
 8008dbc:	b672      	cpsid	i
 8008dbe:	e7fe      	b.n	8008dbe <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dc0:	f001 fd20 	bl	800a804 <ulSetInterruptMaskFromISR>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d302      	bcc.n	8008dda <xQueueGenericSendFromISR+0x6e>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d12e      	bne.n	8008e38 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dda:	2413      	movs	r4, #19
 8008ddc:	193b      	adds	r3, r7, r4
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	2145      	movs	r1, #69	; 0x45
 8008de2:	5c52      	ldrb	r2, [r2, r1]
 8008de4:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	0018      	movs	r0, r3
 8008dee:	f000 f946 	bl	800907e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008df2:	193b      	adds	r3, r7, r4
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	3301      	adds	r3, #1
 8008dfa:	d111      	bne.n	8008e20 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d016      	beq.n	8008e32 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	3324      	adds	r3, #36	; 0x24
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f000 fec1 	bl	8009b90 <xTaskRemoveFromEventList>
 8008e0e:	1e03      	subs	r3, r0, #0
 8008e10:	d00f      	beq.n	8008e32 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00c      	beq.n	8008e32 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e008      	b.n	8008e32 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e20:	2313      	movs	r3, #19
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	b259      	sxtb	r1, r3
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2245      	movs	r2, #69	; 0x45
 8008e30:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008e32:	2301      	movs	r3, #1
 8008e34:	61fb      	str	r3, [r7, #28]
		{
 8008e36:	e001      	b.n	8008e3c <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f001 fce6 	bl	800a810 <vClearInterruptMaskFromISR>

	return xReturn;
 8008e44:	69fb      	ldr	r3, [r7, #28]
}
 8008e46:	0018      	movs	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b009      	add	sp, #36	; 0x24
 8008e4c:	bd90      	pop	{r4, r7, pc}

08008e4e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b08a      	sub	sp, #40	; 0x28
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <xQueueReceive+0x1e>
 8008e68:	b672      	cpsid	i
 8008e6a:	e7fe      	b.n	8008e6a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <xQueueReceive+0x2c>
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <xQueueReceive+0x30>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <xQueueReceive+0x32>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <xQueueReceive+0x3a>
 8008e84:	b672      	cpsid	i
 8008e86:	e7fe      	b.n	8008e86 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e88:	f001 f81a 	bl	8009ec0 <xTaskGetSchedulerState>
 8008e8c:	1e03      	subs	r3, r0, #0
 8008e8e:	d102      	bne.n	8008e96 <xQueueReceive+0x48>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <xQueueReceive+0x4c>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <xQueueReceive+0x4e>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <xQueueReceive+0x56>
 8008ea0:	b672      	cpsid	i
 8008ea2:	e7fe      	b.n	8008ea2 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ea4:	f001 fc84 	bl	800a7b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	0011      	movs	r1, r2
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f000 f94a 	bl	8009154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	1e5a      	subs	r2, r3, #1
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d008      	beq.n	8008ee2 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	3310      	adds	r3, #16
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f000 fe5b 	bl	8009b90 <xTaskRemoveFromEventList>
 8008eda:	1e03      	subs	r3, r0, #0
 8008edc:	d001      	beq.n	8008ee2 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ede:	f001 fc57 	bl	800a790 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ee2:	f001 fc77 	bl	800a7d4 <vPortExitCritical>
				return pdPASS;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e062      	b.n	8008fb0 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d103      	bne.n	8008ef8 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef0:	f001 fc70 	bl	800a7d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e05b      	b.n	8008fb0 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008efe:	2314      	movs	r3, #20
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	0018      	movs	r0, r3
 8008f04:	f000 fea0 	bl	8009c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f0c:	f001 fc62 	bl	800a7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f10:	f000 fc4a 	bl	80097a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f14:	f001 fc4c 	bl	800a7b0 <vPortEnterCritical>
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2244      	movs	r2, #68	; 0x44
 8008f1c:	5c9b      	ldrb	r3, [r3, r2]
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	3301      	adds	r3, #1
 8008f22:	d103      	bne.n	8008f2c <xQueueReceive+0xde>
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2244      	movs	r2, #68	; 0x44
 8008f28:	2100      	movs	r1, #0
 8008f2a:	5499      	strb	r1, [r3, r2]
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	2245      	movs	r2, #69	; 0x45
 8008f30:	5c9b      	ldrb	r3, [r3, r2]
 8008f32:	b25b      	sxtb	r3, r3
 8008f34:	3301      	adds	r3, #1
 8008f36:	d103      	bne.n	8008f40 <xQueueReceive+0xf2>
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	2245      	movs	r2, #69	; 0x45
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	5499      	strb	r1, [r3, r2]
 8008f40:	f001 fc48 	bl	800a7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f44:	1d3a      	adds	r2, r7, #4
 8008f46:	2314      	movs	r3, #20
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	0011      	movs	r1, r2
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f000 fe8f 	bl	8009c70 <xTaskCheckForTimeOut>
 8008f52:	1e03      	subs	r3, r0, #0
 8008f54:	d11e      	bne.n	8008f94 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 f97f 	bl	800925c <prvIsQueueEmpty>
 8008f5e:	1e03      	subs	r3, r0, #0
 8008f60:	d011      	beq.n	8008f86 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	3324      	adds	r3, #36	; 0x24
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	0011      	movs	r1, r2
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f000 fdcc 	bl	8009b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 f914 	bl	80091a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f78:	f000 fc22 	bl	80097c0 <xTaskResumeAll>
 8008f7c:	1e03      	subs	r3, r0, #0
 8008f7e:	d191      	bne.n	8008ea4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008f80:	f001 fc06 	bl	800a790 <vPortYield>
 8008f84:	e78e      	b.n	8008ea4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 f909 	bl	80091a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f8e:	f000 fc17 	bl	80097c0 <xTaskResumeAll>
 8008f92:	e787      	b.n	8008ea4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 f902 	bl	80091a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f9c:	f000 fc10 	bl	80097c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f000 f95a 	bl	800925c <prvIsQueueEmpty>
 8008fa8:	1e03      	subs	r3, r0, #0
 8008faa:	d100      	bne.n	8008fae <xQueueReceive+0x160>
 8008fac:	e77a      	b.n	8008ea4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	b00a      	add	sp, #40	; 0x28
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b08b      	sub	sp, #44	; 0x2c
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <xQueueReceiveFromISR+0x1a>
 8008fce:	b672      	cpsid	i
 8008fd0:	e7fe      	b.n	8008fd0 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <xQueueReceiveFromISR+0x28>
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <xQueueReceiveFromISR+0x2c>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e000      	b.n	8008fe6 <xQueueReceiveFromISR+0x2e>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <xQueueReceiveFromISR+0x36>
 8008fea:	b672      	cpsid	i
 8008fec:	e7fe      	b.n	8008fec <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fee:	f001 fc09 	bl	800a804 <ulSetInterruptMaskFromISR>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d032      	beq.n	8009068 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009002:	2417      	movs	r4, #23
 8009004:	193b      	adds	r3, r7, r4
 8009006:	6a3a      	ldr	r2, [r7, #32]
 8009008:	2144      	movs	r1, #68	; 0x44
 800900a:	5c52      	ldrb	r2, [r2, r1]
 800900c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	0011      	movs	r1, r2
 8009014:	0018      	movs	r0, r3
 8009016:	f000 f89d 	bl	8009154 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	1e5a      	subs	r2, r3, #1
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009022:	193b      	adds	r3, r7, r4
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	b25b      	sxtb	r3, r3
 8009028:	3301      	adds	r3, #1
 800902a:	d111      	bne.n	8009050 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d016      	beq.n	8009062 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	3310      	adds	r3, #16
 8009038:	0018      	movs	r0, r3
 800903a:	f000 fda9 	bl	8009b90 <xTaskRemoveFromEventList>
 800903e:	1e03      	subs	r3, r0, #0
 8009040:	d00f      	beq.n	8009062 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e008      	b.n	8009062 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009050:	2317      	movs	r3, #23
 8009052:	18fb      	adds	r3, r7, r3
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	b259      	sxtb	r1, r3
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	2244      	movs	r2, #68	; 0x44
 8009060:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8009062:	2301      	movs	r3, #1
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
 8009066:	e001      	b.n	800906c <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8009068:	2300      	movs	r3, #0
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	0018      	movs	r0, r3
 8009070:	f001 fbce 	bl	800a810 <vClearInterruptMaskFromISR>

	return xReturn;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b00b      	add	sp, #44	; 0x2c
 800907c:	bd90      	pop	{r4, r7, pc}

0800907e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10e      	bne.n	80090ba <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d14e      	bne.n	8009142 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 ff25 	bl	8009ef8 <xTaskPriorityDisinherit>
 80090ae:	0003      	movs	r3, r0
 80090b0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	609a      	str	r2, [r3, #8]
 80090b8:	e043      	b.n	8009142 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d119      	bne.n	80090f4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6858      	ldr	r0, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	0019      	movs	r1, r3
 80090cc:	f001 fedd 	bl	800ae8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	18d2      	adds	r2, r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d32b      	bcc.n	8009142 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
 80090f2:	e026      	b.n	8009142 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68d8      	ldr	r0, [r3, #12]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	0019      	movs	r1, r3
 8009100:	f001 fec3 	bl	800ae8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910c:	425b      	negs	r3, r3
 800910e:	18d2      	adds	r2, r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d207      	bcs.n	8009130 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	425b      	negs	r3, r3
 800912a:	18d2      	adds	r2, r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d105      	bne.n	8009142 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3b01      	subs	r3, #1
 8009140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800914a:	697b      	ldr	r3, [r7, #20]
}
 800914c:	0018      	movs	r0, r3
 800914e:	46bd      	mov	sp, r7
 8009150:	b006      	add	sp, #24
 8009152:	bd80      	pop	{r7, pc}

08009154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d018      	beq.n	8009198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	18d2      	adds	r2, r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	429a      	cmp	r2, r3
 800917e:	d303      	bcc.n	8009188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68d9      	ldr	r1, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	0018      	movs	r0, r3
 8009194:	f001 fe79 	bl	800ae8a <memcpy>
	}
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	46bd      	mov	sp, r7
 800919c:	b002      	add	sp, #8
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091a8:	f001 fb02 	bl	800a7b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091ac:	230f      	movs	r3, #15
 80091ae:	18fb      	adds	r3, r7, r3
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	2145      	movs	r1, #69	; 0x45
 80091b4:	5c52      	ldrb	r2, [r2, r1]
 80091b6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091b8:	e013      	b.n	80091e2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d016      	beq.n	80091f0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3324      	adds	r3, #36	; 0x24
 80091c6:	0018      	movs	r0, r3
 80091c8:	f000 fce2 	bl	8009b90 <xTaskRemoveFromEventList>
 80091cc:	1e03      	subs	r3, r0, #0
 80091ce:	d001      	beq.n	80091d4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091d0:	f000 fd9e 	bl	8009d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091d4:	210f      	movs	r1, #15
 80091d6:	187b      	adds	r3, r7, r1
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	3b01      	subs	r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	187b      	adds	r3, r7, r1
 80091e0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091e2:	230f      	movs	r3, #15
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	b25b      	sxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dce5      	bgt.n	80091ba <prvUnlockQueue+0x1a>
 80091ee:	e000      	b.n	80091f2 <prvUnlockQueue+0x52>
					break;
 80091f0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2245      	movs	r2, #69	; 0x45
 80091f6:	21ff      	movs	r1, #255	; 0xff
 80091f8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80091fa:	f001 faeb 	bl	800a7d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091fe:	f001 fad7 	bl	800a7b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009202:	230e      	movs	r3, #14
 8009204:	18fb      	adds	r3, r7, r3
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	2144      	movs	r1, #68	; 0x44
 800920a:	5c52      	ldrb	r2, [r2, r1]
 800920c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800920e:	e013      	b.n	8009238 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3310      	adds	r3, #16
 800921c:	0018      	movs	r0, r3
 800921e:	f000 fcb7 	bl	8009b90 <xTaskRemoveFromEventList>
 8009222:	1e03      	subs	r3, r0, #0
 8009224:	d001      	beq.n	800922a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8009226:	f000 fd73 	bl	8009d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800922a:	210e      	movs	r1, #14
 800922c:	187b      	adds	r3, r7, r1
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	3b01      	subs	r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	187b      	adds	r3, r7, r1
 8009236:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009238:	230e      	movs	r3, #14
 800923a:	18fb      	adds	r3, r7, r3
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b25b      	sxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	dce5      	bgt.n	8009210 <prvUnlockQueue+0x70>
 8009244:	e000      	b.n	8009248 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8009246:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2244      	movs	r2, #68	; 0x44
 800924c:	21ff      	movs	r1, #255	; 0xff
 800924e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009250:	f001 fac0 	bl	800a7d4 <vPortExitCritical>
}
 8009254:	46c0      	nop			; (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	b004      	add	sp, #16
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009264:	f001 faa4 	bl	800a7b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e001      	b.n	800927a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927a:	f001 faab 	bl	800a7d4 <vPortExitCritical>

	return xReturn;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	0018      	movs	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	b004      	add	sp, #16
 8009286:	bd80      	pop	{r7, pc}

08009288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009290:	f001 fa8e 	bl	800a7b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929c:	429a      	cmp	r2, r3
 800929e:	d102      	bne.n	80092a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e001      	b.n	80092aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092aa:	f001 fa93 	bl	800a7d4 <vPortExitCritical>

	return xReturn;
 80092ae:	68fb      	ldr	r3, [r7, #12]
}
 80092b0:	0018      	movs	r0, r3
 80092b2:	46bd      	mov	sp, r7
 80092b4:	b004      	add	sp, #16
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	e015      	b.n	80092f4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092c8:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	00d2      	lsls	r2, r2, #3
 80092ce:	58d3      	ldr	r3, [r2, r3]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10c      	bne.n	80092ee <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	00d2      	lsls	r2, r2, #3
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092de:	4a09      	ldr	r2, [pc, #36]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	18d3      	adds	r3, r2, r3
 80092e6:	3304      	adds	r3, #4
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092ec:	e006      	b.n	80092fc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b07      	cmp	r3, #7
 80092f8:	d9e6      	bls.n	80092c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	b004      	add	sp, #16
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000ba4 	.word	0x20000ba4

08009308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009318:	f001 fa4a 	bl	800a7b0 <vPortEnterCritical>
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2244      	movs	r2, #68	; 0x44
 8009320:	5c9b      	ldrb	r3, [r3, r2]
 8009322:	b25b      	sxtb	r3, r3
 8009324:	3301      	adds	r3, #1
 8009326:	d103      	bne.n	8009330 <vQueueWaitForMessageRestricted+0x28>
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2244      	movs	r2, #68	; 0x44
 800932c:	2100      	movs	r1, #0
 800932e:	5499      	strb	r1, [r3, r2]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2245      	movs	r2, #69	; 0x45
 8009334:	5c9b      	ldrb	r3, [r3, r2]
 8009336:	b25b      	sxtb	r3, r3
 8009338:	3301      	adds	r3, #1
 800933a:	d103      	bne.n	8009344 <vQueueWaitForMessageRestricted+0x3c>
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2245      	movs	r2, #69	; 0x45
 8009340:	2100      	movs	r1, #0
 8009342:	5499      	strb	r1, [r3, r2]
 8009344:	f001 fa46 	bl	800a7d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	3324      	adds	r3, #36	; 0x24
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	0018      	movs	r0, r3
 800935a:	f000 fbf3 	bl	8009b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff ff1d 	bl	80091a0 <prvUnlockQueue>
	}
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	46bd      	mov	sp, r7
 800936a:	b006      	add	sp, #24
 800936c:	bd80      	pop	{r7, pc}

0800936e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800936e:	b590      	push	{r4, r7, lr}
 8009370:	b08d      	sub	sp, #52	; 0x34
 8009372:	af04      	add	r7, sp, #16
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <xTaskCreateStatic+0x18>
 8009382:	b672      	cpsid	i
 8009384:	e7fe      	b.n	8009384 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <xTaskCreateStatic+0x22>
 800938c:	b672      	cpsid	i
 800938e:	e7fe      	b.n	800938e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009390:	23bc      	movs	r3, #188	; 0xbc
 8009392:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2bbc      	cmp	r3, #188	; 0xbc
 8009398:	d001      	beq.n	800939e <xTaskCreateStatic+0x30>
 800939a:	b672      	cpsid	i
 800939c:	e7fe      	b.n	800939c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800939e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d020      	beq.n	80093e8 <xTaskCreateStatic+0x7a>
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01d      	beq.n	80093e8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	22b9      	movs	r2, #185	; 0xb9
 80093ba:	2102      	movs	r1, #2
 80093bc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093be:	683c      	ldr	r4, [r7, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	9302      	str	r3, [sp, #8]
 80093ce:	2318      	movs	r3, #24
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	9301      	str	r3, [sp, #4]
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	0023      	movs	r3, r4
 80093da:	f000 f859 	bl	8009490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	0018      	movs	r0, r3
 80093e2:	f000 f8f5 	bl	80095d0 <prvAddNewTaskToReadyList>
 80093e6:	e001      	b.n	80093ec <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093ec:	69bb      	ldr	r3, [r7, #24]
	}
 80093ee:	0018      	movs	r0, r3
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b009      	add	sp, #36	; 0x24
 80093f4:	bd90      	pop	{r4, r7, pc}

080093f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093f6:	b590      	push	{r4, r7, lr}
 80093f8:	b08d      	sub	sp, #52	; 0x34
 80093fa:	af04      	add	r7, sp, #16
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	1dbb      	adds	r3, r7, #6
 8009404:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009406:	1dbb      	adds	r3, r7, #6
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	0018      	movs	r0, r3
 800940e:	f001 fa67 	bl	800a8e0 <pvPortMalloc>
 8009412:	0003      	movs	r3, r0
 8009414:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d010      	beq.n	800943e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800941c:	20bc      	movs	r0, #188	; 0xbc
 800941e:	f001 fa5f 	bl	800a8e0 <pvPortMalloc>
 8009422:	0003      	movs	r3, r0
 8009424:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	631a      	str	r2, [r3, #48]	; 0x30
 8009432:	e006      	b.n	8009442 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	0018      	movs	r0, r3
 8009438:	f001 faf8 	bl	800aa2c <vPortFree>
 800943c:	e001      	b.n	8009442 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01a      	beq.n	800947e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	22b9      	movs	r2, #185	; 0xb9
 800944c:	2100      	movs	r1, #0
 800944e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009450:	1dbb      	adds	r3, r7, #6
 8009452:	881a      	ldrh	r2, [r3, #0]
 8009454:	683c      	ldr	r4, [r7, #0]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	2300      	movs	r3, #0
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	9302      	str	r3, [sp, #8]
 8009462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	0023      	movs	r3, r4
 800946c:	f000 f810 	bl	8009490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	0018      	movs	r0, r3
 8009474:	f000 f8ac 	bl	80095d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009478:	2301      	movs	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	e002      	b.n	8009484 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800947e:	2301      	movs	r3, #1
 8009480:	425b      	negs	r3, r3
 8009482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009484:	69bb      	ldr	r3, [r7, #24]
	}
 8009486:	0018      	movs	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	b009      	add	sp, #36	; 0x24
 800948c:	bd90      	pop	{r4, r7, pc}
	...

08009490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	001a      	movs	r2, r3
 80094a8:	21a5      	movs	r1, #165	; 0xa5
 80094aa:	f001 fcf7 	bl	800ae9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4942      	ldr	r1, [pc, #264]	; (80095c0 <prvInitialiseNewTask+0x130>)
 80094b6:	468c      	mov	ip, r1
 80094b8:	4463      	add	r3, ip
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	18d3      	adds	r3, r2, r3
 80094be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2207      	movs	r2, #7
 80094c4:	4393      	bics	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2207      	movs	r2, #7
 80094cc:	4013      	ands	r3, r2
 80094ce:	d001      	beq.n	80094d4 <prvInitialiseNewTask+0x44>
 80094d0:	b672      	cpsid	i
 80094d2:	e7fe      	b.n	80094d2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d020      	beq.n	800951c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e013      	b.n	8009508 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	18d3      	adds	r3, r2, r3
 80094e6:	7818      	ldrb	r0, [r3, #0]
 80094e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ea:	2134      	movs	r1, #52	; 0x34
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	185b      	adds	r3, r3, r1
 80094f2:	1c02      	adds	r2, r0, #0
 80094f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	18d3      	adds	r3, r2, r3
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d006      	beq.n	8009510 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	3301      	adds	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2b0f      	cmp	r3, #15
 800950c:	d9e8      	bls.n	80094e0 <prvInitialiseNewTask+0x50>
 800950e:	e000      	b.n	8009512 <prvInitialiseNewTask+0x82>
			{
				break;
 8009510:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	2243      	movs	r2, #67	; 0x43
 8009516:	2100      	movs	r1, #0
 8009518:	5499      	strb	r1, [r3, r2]
 800951a:	e003      	b.n	8009524 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2234      	movs	r2, #52	; 0x34
 8009520:	2100      	movs	r1, #0
 8009522:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	2b37      	cmp	r3, #55	; 0x37
 8009528:	d901      	bls.n	800952e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800952a:	2337      	movs	r3, #55	; 0x37
 800952c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	6a3a      	ldr	r2, [r7, #32]
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	6a3a      	ldr	r2, [r7, #32]
 8009538:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	2200      	movs	r2, #0
 800953e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	3304      	adds	r3, #4
 8009544:	0018      	movs	r0, r3
 8009546:	f7ff f9c3 	bl	80088d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	3318      	adds	r3, #24
 800954e:	0018      	movs	r0, r3
 8009550:	f7ff f9be 	bl	80088d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009558:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	2238      	movs	r2, #56	; 0x38
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009568:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	22b4      	movs	r2, #180	; 0xb4
 800956e:	2100      	movs	r1, #0
 8009570:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	22b8      	movs	r2, #184	; 0xb8
 8009576:	2100      	movs	r1, #0
 8009578:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	3354      	adds	r3, #84	; 0x54
 800957e:	2260      	movs	r2, #96	; 0x60
 8009580:	2100      	movs	r1, #0
 8009582:	0018      	movs	r0, r3
 8009584:	f001 fc8a 	bl	800ae9c <memset>
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	4a0e      	ldr	r2, [pc, #56]	; (80095c4 <prvInitialiseNewTask+0x134>)
 800958c:	659a      	str	r2, [r3, #88]	; 0x58
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	4a0d      	ldr	r2, [pc, #52]	; (80095c8 <prvInitialiseNewTask+0x138>)
 8009592:	65da      	str	r2, [r3, #92]	; 0x5c
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	4a0d      	ldr	r2, [pc, #52]	; (80095cc <prvInitialiseNewTask+0x13c>)
 8009598:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	68f9      	ldr	r1, [r7, #12]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	0018      	movs	r0, r3
 80095a2:	f001 f86b 	bl	800a67c <pxPortInitialiseStack>
 80095a6:	0002      	movs	r2, r0
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095b8:	46c0      	nop			; (mov r8, r8)
 80095ba:	46bd      	mov	sp, r7
 80095bc:	b006      	add	sp, #24
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	3fffffff 	.word	0x3fffffff
 80095c4:	0800e008 	.word	0x0800e008
 80095c8:	0800e028 	.word	0x0800e028
 80095cc:	0800dfe8 	.word	0x0800dfe8

080095d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095d8:	f001 f8ea 	bl	800a7b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095dc:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	4b29      	ldr	r3, [pc, #164]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095e4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80095e6:	4b29      	ldr	r3, [pc, #164]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095ee:	4b27      	ldr	r3, [pc, #156]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d110      	bne.n	800961e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095fc:	f000 fba2 	bl	8009d44 <prvInitialiseTaskLists>
 8009600:	e00d      	b.n	800961e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009602:	4b23      	ldr	r3, [pc, #140]	; (8009690 <prvAddNewTaskToReadyList+0xc0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800960a:	4b20      	ldr	r3, [pc, #128]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	429a      	cmp	r2, r3
 8009616:	d802      	bhi.n	800961e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009618:	4b1c      	ldr	r3, [pc, #112]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <prvAddNewTaskToReadyList+0xc4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <prvAddNewTaskToReadyList+0xc4>)
 8009626:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <prvAddNewTaskToReadyList+0xc4>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	4b18      	ldr	r3, [pc, #96]	; (8009698 <prvAddNewTaskToReadyList+0xc8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d903      	bls.n	8009644 <prvAddNewTaskToReadyList+0x74>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009640:	4b15      	ldr	r3, [pc, #84]	; (8009698 <prvAddNewTaskToReadyList+0xc8>)
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	0013      	movs	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	189b      	adds	r3, r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4a12      	ldr	r2, [pc, #72]	; (800969c <prvAddNewTaskToReadyList+0xcc>)
 8009652:	189a      	adds	r2, r3, r2
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	0019      	movs	r1, r3
 800965a:	0010      	movs	r0, r2
 800965c:	f7ff f943 	bl	80088e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009660:	f001 f8b8 	bl	800a7d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <prvAddNewTaskToReadyList+0xc0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	429a      	cmp	r2, r3
 8009678:	d201      	bcs.n	800967e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800967a:	f001 f889 	bl	800a790 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	46bd      	mov	sp, r7
 8009682:	b002      	add	sp, #8
 8009684:	bd80      	pop	{r7, pc}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	200010b8 	.word	0x200010b8
 800968c:	20000be4 	.word	0x20000be4
 8009690:	200010c4 	.word	0x200010c4
 8009694:	200010d4 	.word	0x200010d4
 8009698:	200010c0 	.word	0x200010c0
 800969c:	20000be8 	.word	0x20000be8

080096a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d010      	beq.n	80096d4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <vTaskDelay+0x48>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <vTaskDelay+0x1e>
 80096ba:	b672      	cpsid	i
 80096bc:	e7fe      	b.n	80096bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80096be:	f000 f873 	bl	80097a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2100      	movs	r1, #0
 80096c6:	0018      	movs	r0, r3
 80096c8:	f000 fc72 	bl	8009fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096cc:	f000 f878 	bl	80097c0 <xTaskResumeAll>
 80096d0:	0003      	movs	r3, r0
 80096d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80096da:	f001 f859 	bl	800a790 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b004      	add	sp, #16
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	200010e0 	.word	0x200010e0

080096ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b089      	sub	sp, #36	; 0x24
 80096f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096fa:	003a      	movs	r2, r7
 80096fc:	1d39      	adds	r1, r7, #4
 80096fe:	2308      	movs	r3, #8
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	0018      	movs	r0, r3
 8009704:	f7ff f896 	bl	8008834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009708:	683c      	ldr	r4, [r7, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	491e      	ldr	r1, [pc, #120]	; (8009788 <vTaskStartScheduler+0x9c>)
 8009710:	481e      	ldr	r0, [pc, #120]	; (800978c <vTaskStartScheduler+0xa0>)
 8009712:	9202      	str	r2, [sp, #8]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	2300      	movs	r3, #0
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	2300      	movs	r3, #0
 800971c:	0022      	movs	r2, r4
 800971e:	f7ff fe26 	bl	800936e <xTaskCreateStatic>
 8009722:	0002      	movs	r2, r0
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <vTaskStartScheduler+0xa4>)
 8009726:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <vTaskStartScheduler+0xa4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009730:	2301      	movs	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e001      	b.n	800973a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d103      	bne.n	8009748 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8009740:	f000 fc8a 	bl	800a058 <xTimerCreateTimerTask>
 8009744:	0003      	movs	r3, r0
 8009746:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d113      	bne.n	8009776 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800974e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <vTaskStartScheduler+0xa8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3354      	adds	r3, #84	; 0x54
 8009756:	001a      	movs	r2, r3
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <vTaskStartScheduler+0xac>)
 800975a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <vTaskStartScheduler+0xb0>)
 800975e:	2201      	movs	r2, #1
 8009760:	4252      	negs	r2, r2
 8009762:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <vTaskStartScheduler+0xb4>)
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800976a:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <vTaskStartScheduler+0xb8>)
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009770:	f000 ffea 	bl	800a748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009774:	e004      	b.n	8009780 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3301      	adds	r3, #1
 800977a:	d101      	bne.n	8009780 <vTaskStartScheduler+0x94>
 800977c:	b672      	cpsid	i
 800977e:	e7fe      	b.n	800977e <vTaskStartScheduler+0x92>
}
 8009780:	46c0      	nop			; (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	b005      	add	sp, #20
 8009786:	bd90      	pop	{r4, r7, pc}
 8009788:	0800de34 	.word	0x0800de34
 800978c:	08009d25 	.word	0x08009d25
 8009790:	200010dc 	.word	0x200010dc
 8009794:	20000be4 	.word	0x20000be4
 8009798:	20000018 	.word	0x20000018
 800979c:	200010d8 	.word	0x200010d8
 80097a0:	200010c4 	.word	0x200010c4
 80097a4:	200010bc 	.word	0x200010bc

080097a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <vTaskSuspendAll+0x14>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	4b02      	ldr	r3, [pc, #8]	; (80097bc <vTaskSuspendAll+0x14>)
 80097b4:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200010e0 	.word	0x200010e0

080097c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097ce:	4b3a      	ldr	r3, [pc, #232]	; (80098b8 <xTaskResumeAll+0xf8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <xTaskResumeAll+0x1a>
 80097d6:	b672      	cpsid	i
 80097d8:	e7fe      	b.n	80097d8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097da:	f000 ffe9 	bl	800a7b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097de:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <xTaskResumeAll+0xf8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1e5a      	subs	r2, r3, #1
 80097e4:	4b34      	ldr	r3, [pc, #208]	; (80098b8 <xTaskResumeAll+0xf8>)
 80097e6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097e8:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <xTaskResumeAll+0xf8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d15b      	bne.n	80098a8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097f0:	4b32      	ldr	r3, [pc, #200]	; (80098bc <xTaskResumeAll+0xfc>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d057      	beq.n	80098a8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097f8:	e02f      	b.n	800985a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <xTaskResumeAll+0x100>)
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3318      	adds	r3, #24
 8009806:	0018      	movs	r0, r3
 8009808:	f7ff f8c5 	bl	8008996 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3304      	adds	r3, #4
 8009810:	0018      	movs	r0, r3
 8009812:	f7ff f8c0 	bl	8008996 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4b2a      	ldr	r3, [pc, #168]	; (80098c4 <xTaskResumeAll+0x104>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d903      	bls.n	800982a <xTaskResumeAll+0x6a>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <xTaskResumeAll+0x104>)
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982e:	0013      	movs	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	189b      	adds	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4a24      	ldr	r2, [pc, #144]	; (80098c8 <xTaskResumeAll+0x108>)
 8009838:	189a      	adds	r2, r3, r2
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3304      	adds	r3, #4
 800983e:	0019      	movs	r1, r3
 8009840:	0010      	movs	r0, r2
 8009842:	f7ff f850 	bl	80088e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4b20      	ldr	r3, [pc, #128]	; (80098cc <xTaskResumeAll+0x10c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009854:	4b1e      	ldr	r3, [pc, #120]	; (80098d0 <xTaskResumeAll+0x110>)
 8009856:	2201      	movs	r2, #1
 8009858:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <xTaskResumeAll+0x100>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1cb      	bne.n	80097fa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009868:	f000 fb0c 	bl	8009e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800986c:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <xTaskResumeAll+0x114>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00f      	beq.n	8009898 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009878:	f000 f83c 	bl	80098f4 <xTaskIncrementTick>
 800987c:	1e03      	subs	r3, r0, #0
 800987e:	d002      	beq.n	8009886 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8009880:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <xTaskResumeAll+0x110>)
 8009882:	2201      	movs	r2, #1
 8009884:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3b01      	subs	r3, #1
 800988a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f2      	bne.n	8009878 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8009892:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <xTaskResumeAll+0x114>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009898:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <xTaskResumeAll+0x110>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098a0:	2301      	movs	r3, #1
 80098a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098a4:	f000 ff74 	bl	800a790 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098a8:	f000 ff94 	bl	800a7d4 <vPortExitCritical>

	return xAlreadyYielded;
 80098ac:	68bb      	ldr	r3, [r7, #8]
}
 80098ae:	0018      	movs	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b004      	add	sp, #16
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	200010e0 	.word	0x200010e0
 80098bc:	200010b8 	.word	0x200010b8
 80098c0:	20001078 	.word	0x20001078
 80098c4:	200010c0 	.word	0x200010c0
 80098c8:	20000be8 	.word	0x20000be8
 80098cc:	20000be4 	.word	0x20000be4
 80098d0:	200010cc 	.word	0x200010cc
 80098d4:	200010c8 	.word	0x200010c8

080098d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <xTaskGetTickCount+0x18>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098e4:	687b      	ldr	r3, [r7, #4]
}
 80098e6:	0018      	movs	r0, r3
 80098e8:	46bd      	mov	sp, r7
 80098ea:	b002      	add	sp, #8
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	200010bc 	.word	0x200010bc

080098f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098fe:	4b4a      	ldr	r3, [pc, #296]	; (8009a28 <xTaskIncrementTick+0x134>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d000      	beq.n	8009908 <xTaskIncrementTick+0x14>
 8009906:	e07e      	b.n	8009a06 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009908:	4b48      	ldr	r3, [pc, #288]	; (8009a2c <xTaskIncrementTick+0x138>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3301      	adds	r3, #1
 800990e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009910:	4b46      	ldr	r3, [pc, #280]	; (8009a2c <xTaskIncrementTick+0x138>)
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d117      	bne.n	800994c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800991c:	4b44      	ldr	r3, [pc, #272]	; (8009a30 <xTaskIncrementTick+0x13c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <xTaskIncrementTick+0x36>
 8009926:	b672      	cpsid	i
 8009928:	e7fe      	b.n	8009928 <xTaskIncrementTick+0x34>
 800992a:	4b41      	ldr	r3, [pc, #260]	; (8009a30 <xTaskIncrementTick+0x13c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	4b40      	ldr	r3, [pc, #256]	; (8009a34 <xTaskIncrementTick+0x140>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	4b3e      	ldr	r3, [pc, #248]	; (8009a30 <xTaskIncrementTick+0x13c>)
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	4b3e      	ldr	r3, [pc, #248]	; (8009a34 <xTaskIncrementTick+0x140>)
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	4b3e      	ldr	r3, [pc, #248]	; (8009a38 <xTaskIncrementTick+0x144>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	4b3c      	ldr	r3, [pc, #240]	; (8009a38 <xTaskIncrementTick+0x144>)
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f000 fa9c 	bl	8009e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800994c:	4b3b      	ldr	r3, [pc, #236]	; (8009a3c <xTaskIncrementTick+0x148>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	429a      	cmp	r2, r3
 8009954:	d349      	bcc.n	80099ea <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009956:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <xTaskIncrementTick+0x13c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d104      	bne.n	800996a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009960:	4b36      	ldr	r3, [pc, #216]	; (8009a3c <xTaskIncrementTick+0x148>)
 8009962:	2201      	movs	r2, #1
 8009964:	4252      	negs	r2, r2
 8009966:	601a      	str	r2, [r3, #0]
					break;
 8009968:	e03f      	b.n	80099ea <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996a:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <xTaskIncrementTick+0x13c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	429a      	cmp	r2, r3
 8009980:	d203      	bcs.n	800998a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009982:	4b2e      	ldr	r3, [pc, #184]	; (8009a3c <xTaskIncrementTick+0x148>)
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009988:	e02f      	b.n	80099ea <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3304      	adds	r3, #4
 800998e:	0018      	movs	r0, r3
 8009990:	f7ff f801 	bl	8008996 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3318      	adds	r3, #24
 80099a0:	0018      	movs	r0, r3
 80099a2:	f7fe fff8 	bl	8008996 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <xTaskIncrementTick+0x14c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d903      	bls.n	80099ba <xTaskIncrementTick+0xc6>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b6:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <xTaskIncrementTick+0x14c>)
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099be:	0013      	movs	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <xTaskIncrementTick+0x150>)
 80099c8:	189a      	adds	r2, r3, r2
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	3304      	adds	r3, #4
 80099ce:	0019      	movs	r1, r3
 80099d0:	0010      	movs	r0, r2
 80099d2:	f7fe ff88 	bl	80088e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <xTaskIncrementTick+0x154>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d3b8      	bcc.n	8009956 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e8:	e7b5      	b.n	8009956 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099ea:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <xTaskIncrementTick+0x154>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	4914      	ldr	r1, [pc, #80]	; (8009a44 <xTaskIncrementTick+0x150>)
 80099f2:	0013      	movs	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	189b      	adds	r3, r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	585b      	ldr	r3, [r3, r1]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d907      	bls.n	8009a10 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	e004      	b.n	8009a10 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a06:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <xTaskIncrementTick+0x158>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <xTaskIncrementTick+0x158>)
 8009a0e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <xTaskIncrementTick+0x15c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a1c:	697b      	ldr	r3, [r7, #20]
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b006      	add	sp, #24
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			; (mov r8, r8)
 8009a28:	200010e0 	.word	0x200010e0
 8009a2c:	200010bc 	.word	0x200010bc
 8009a30:	20001070 	.word	0x20001070
 8009a34:	20001074 	.word	0x20001074
 8009a38:	200010d0 	.word	0x200010d0
 8009a3c:	200010d8 	.word	0x200010d8
 8009a40:	200010c0 	.word	0x200010c0
 8009a44:	20000be8 	.word	0x20000be8
 8009a48:	20000be4 	.word	0x20000be4
 8009a4c:	200010c8 	.word	0x200010c8
 8009a50:	200010cc 	.word	0x200010cc

08009a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a5a:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <vTaskSwitchContext+0x9c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <vTaskSwitchContext+0xa0>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a68:	e03d      	b.n	8009ae6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8009a6a:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <vTaskSwitchContext+0xa0>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a70:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <vTaskSwitchContext+0xa4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	607b      	str	r3, [r7, #4]
 8009a76:	e007      	b.n	8009a88 <vTaskSwitchContext+0x34>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <vTaskSwitchContext+0x2e>
 8009a7e:	b672      	cpsid	i
 8009a80:	e7fe      	b.n	8009a80 <vTaskSwitchContext+0x2c>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	607b      	str	r3, [r7, #4]
 8009a88:	491c      	ldr	r1, [pc, #112]	; (8009afc <vTaskSwitchContext+0xa8>)
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	0013      	movs	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	189b      	adds	r3, r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	585b      	ldr	r3, [r3, r1]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ee      	beq.n	8009a78 <vTaskSwitchContext+0x24>
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	0013      	movs	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4a15      	ldr	r2, [pc, #84]	; (8009afc <vTaskSwitchContext+0xa8>)
 8009aa6:	189b      	adds	r3, r3, r2
 8009aa8:	603b      	str	r3, [r7, #0]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d104      	bne.n	8009aca <vTaskSwitchContext+0x76>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	605a      	str	r2, [r3, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <vTaskSwitchContext+0xac>)
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <vTaskSwitchContext+0xa4>)
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <vTaskSwitchContext+0xac>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3354      	adds	r3, #84	; 0x54
 8009ae0:	001a      	movs	r2, r3
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <vTaskSwitchContext+0xb0>)
 8009ae4:	601a      	str	r2, [r3, #0]
}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b002      	add	sp, #8
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	200010e0 	.word	0x200010e0
 8009af4:	200010cc 	.word	0x200010cc
 8009af8:	200010c0 	.word	0x200010c0
 8009afc:	20000be8 	.word	0x20000be8
 8009b00:	20000be4 	.word	0x20000be4
 8009b04:	20000018 	.word	0x20000018

08009b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <vTaskPlaceOnEventList+0x14>
 8009b18:	b672      	cpsid	i
 8009b1a:	e7fe      	b.n	8009b1a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b1c:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <vTaskPlaceOnEventList+0x38>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3318      	adds	r3, #24
 8009b22:	001a      	movs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	0011      	movs	r1, r2
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f7fe fefe 	bl	800892a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2101      	movs	r1, #1
 8009b32:	0018      	movs	r0, r3
 8009b34:	f000 fa3c 	bl	8009fb0 <prvAddCurrentTaskToDelayedList>
}
 8009b38:	46c0      	nop			; (mov r8, r8)
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	b002      	add	sp, #8
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000be4 	.word	0x20000be4

08009b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <vTaskPlaceOnEventListRestricted+0x16>
 8009b56:	b672      	cpsid	i
 8009b58:	e7fe      	b.n	8009b58 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <vTaskPlaceOnEventListRestricted+0x48>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3318      	adds	r3, #24
 8009b60:	001a      	movs	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	0011      	movs	r1, r2
 8009b66:	0018      	movs	r0, r3
 8009b68:	f7fe febd 	bl	80088e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8009b72:	2301      	movs	r3, #1
 8009b74:	425b      	negs	r3, r3
 8009b76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	0011      	movs	r1, r2
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f000 fa16 	bl	8009fb0 <prvAddCurrentTaskToDelayedList>
	}
 8009b84:	46c0      	nop			; (mov r8, r8)
 8009b86:	46bd      	mov	sp, r7
 8009b88:	b004      	add	sp, #16
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000be4 	.word	0x20000be4

08009b90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <xTaskRemoveFromEventList+0x1a>
 8009ba6:	b672      	cpsid	i
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	3318      	adds	r3, #24
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f7fe fef1 	bl	8008996 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb4:	4b1e      	ldr	r3, [pc, #120]	; (8009c30 <xTaskRemoveFromEventList+0xa0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d11d      	bne.n	8009bf8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7fe fee8 	bl	8008996 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <xTaskRemoveFromEventList+0xa4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d903      	bls.n	8009bda <xTaskRemoveFromEventList+0x4a>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd6:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <xTaskRemoveFromEventList+0xa4>)
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bde:	0013      	movs	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	189b      	adds	r3, r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <xTaskRemoveFromEventList+0xa8>)
 8009be8:	189a      	adds	r2, r3, r2
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	3304      	adds	r3, #4
 8009bee:	0019      	movs	r1, r3
 8009bf0:	0010      	movs	r0, r2
 8009bf2:	f7fe fe78 	bl	80088e6 <vListInsertEnd>
 8009bf6:	e007      	b.n	8009c08 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	001a      	movs	r2, r3
 8009bfe:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <xTaskRemoveFromEventList+0xac>)
 8009c00:	0011      	movs	r1, r2
 8009c02:	0018      	movs	r0, r3
 8009c04:	f7fe fe6f 	bl	80088e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <xTaskRemoveFromEventList+0xb0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d905      	bls.n	8009c22 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c16:	2301      	movs	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <xTaskRemoveFromEventList+0xb4>)
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e001      	b.n	8009c26 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009c26:	68fb      	ldr	r3, [r7, #12]
}
 8009c28:	0018      	movs	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	b004      	add	sp, #16
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	200010e0 	.word	0x200010e0
 8009c34:	200010c0 	.word	0x200010c0
 8009c38:	20000be8 	.word	0x20000be8
 8009c3c:	20001078 	.word	0x20001078
 8009c40:	20000be4 	.word	0x20000be4
 8009c44:	200010cc 	.word	0x200010cc

08009c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <vTaskInternalSetTimeOutState+0x20>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <vTaskInternalSetTimeOutState+0x24>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	605a      	str	r2, [r3, #4]
}
 8009c60:	46c0      	nop			; (mov r8, r8)
 8009c62:	46bd      	mov	sp, r7
 8009c64:	b002      	add	sp, #8
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	200010d0 	.word	0x200010d0
 8009c6c:	200010bc 	.word	0x200010bc

08009c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <xTaskCheckForTimeOut+0x14>
 8009c80:	b672      	cpsid	i
 8009c82:	e7fe      	b.n	8009c82 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <xTaskCheckForTimeOut+0x1e>
 8009c8a:	b672      	cpsid	i
 8009c8c:	e7fe      	b.n	8009c8c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009c8e:	f000 fd8f 	bl	800a7b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c92:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <xTaskCheckForTimeOut+0x98>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	d102      	bne.n	8009cb0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
 8009cae:	e024      	b.n	8009cfa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <xTaskCheckForTimeOut+0x9c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d007      	beq.n	8009ccc <xTaskCheckForTimeOut+0x5c>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d302      	bcc.n	8009ccc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	e016      	b.n	8009cfa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d20c      	bcs.n	8009cf0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1ad2      	subs	r2, r2, r3
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	f7ff ffaf 	bl	8009c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]
 8009cee:	e004      	b.n	8009cfa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009cfa:	f000 fd6b 	bl	800a7d4 <vPortExitCritical>

	return xReturn;
 8009cfe:	697b      	ldr	r3, [r7, #20]
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b006      	add	sp, #24
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	200010bc 	.word	0x200010bc
 8009d0c:	200010d0 	.word	0x200010d0

08009d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <vTaskMissedYield+0x10>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200010cc 	.word	0x200010cc

08009d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d2c:	f000 f84e 	bl	8009dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d30:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <prvIdleTask+0x1c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d9f9      	bls.n	8009d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d38:	f000 fd2a 	bl	800a790 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009d3c:	e7f6      	b.n	8009d2c <prvIdleTask+0x8>
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	20000be8 	.word	0x20000be8

08009d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	e00c      	b.n	8009d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	0013      	movs	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	189b      	adds	r3, r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4a14      	ldr	r2, [pc, #80]	; (8009dac <prvInitialiseTaskLists+0x68>)
 8009d5c:	189b      	adds	r3, r3, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7fe fd98 	bl	8008894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3301      	adds	r3, #1
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b37      	cmp	r3, #55	; 0x37
 8009d6e:	d9ef      	bls.n	8009d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d70:	4b0f      	ldr	r3, [pc, #60]	; (8009db0 <prvInitialiseTaskLists+0x6c>)
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7fe fd8e 	bl	8008894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d78:	4b0e      	ldr	r3, [pc, #56]	; (8009db4 <prvInitialiseTaskLists+0x70>)
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f7fe fd8a 	bl	8008894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <prvInitialiseTaskLists+0x74>)
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7fe fd86 	bl	8008894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <prvInitialiseTaskLists+0x78>)
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7fe fd82 	bl	8008894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <prvInitialiseTaskLists+0x7c>)
 8009d92:	0018      	movs	r0, r3
 8009d94:	f7fe fd7e 	bl	8008894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvInitialiseTaskLists+0x80>)
 8009d9a:	4a05      	ldr	r2, [pc, #20]	; (8009db0 <prvInitialiseTaskLists+0x6c>)
 8009d9c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <prvInitialiseTaskLists+0x84>)
 8009da0:	4a04      	ldr	r2, [pc, #16]	; (8009db4 <prvInitialiseTaskLists+0x70>)
 8009da2:	601a      	str	r2, [r3, #0]
}
 8009da4:	46c0      	nop			; (mov r8, r8)
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b002      	add	sp, #8
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000be8 	.word	0x20000be8
 8009db0:	20001048 	.word	0x20001048
 8009db4:	2000105c 	.word	0x2000105c
 8009db8:	20001078 	.word	0x20001078
 8009dbc:	2000108c 	.word	0x2000108c
 8009dc0:	200010a4 	.word	0x200010a4
 8009dc4:	20001070 	.word	0x20001070
 8009dc8:	20001074 	.word	0x20001074

08009dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dd2:	e01a      	b.n	8009e0a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009dd4:	f000 fcec 	bl	800a7b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd8:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <prvCheckTasksWaitingTermination+0x50>)
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3304      	adds	r3, #4
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7fe fdd6 	bl	8008996 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <prvCheckTasksWaitingTermination+0x54>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	1e5a      	subs	r2, r3, #1
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <prvCheckTasksWaitingTermination+0x54>)
 8009df2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <prvCheckTasksWaitingTermination+0x58>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	1e5a      	subs	r2, r3, #1
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <prvCheckTasksWaitingTermination+0x58>)
 8009dfc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009dfe:	f000 fce9 	bl	800a7d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 f80f 	bl	8009e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <prvCheckTasksWaitingTermination+0x58>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e0      	bne.n	8009dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	46c0      	nop			; (mov r8, r8)
 8009e16:	46bd      	mov	sp, r7
 8009e18:	b002      	add	sp, #8
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2000108c 	.word	0x2000108c
 8009e20:	200010b8 	.word	0x200010b8
 8009e24:	200010a0 	.word	0x200010a0

08009e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3354      	adds	r3, #84	; 0x54
 8009e34:	0018      	movs	r0, r3
 8009e36:	f001 fd4d 	bl	800b8d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	22b9      	movs	r2, #185	; 0xb9
 8009e3e:	5c9b      	ldrb	r3, [r3, r2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d109      	bne.n	8009e58 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fdef 	bl	800aa2c <vPortFree>
				vPortFree( pxTCB );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fdeb 	bl	800aa2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e56:	e010      	b.n	8009e7a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	22b9      	movs	r2, #185	; 0xb9
 8009e5c:	5c9b      	ldrb	r3, [r3, r2]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d104      	bne.n	8009e6c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	0018      	movs	r0, r3
 8009e66:	f000 fde1 	bl	800aa2c <vPortFree>
	}
 8009e6a:	e006      	b.n	8009e7a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	22b9      	movs	r2, #185	; 0xb9
 8009e70:	5c9b      	ldrb	r3, [r3, r2]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d001      	beq.n	8009e7a <prvDeleteTCB+0x52>
 8009e76:	b672      	cpsid	i
 8009e78:	e7fe      	b.n	8009e78 <prvDeleteTCB+0x50>
	}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	b002      	add	sp, #8
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e8a:	4b0b      	ldr	r3, [pc, #44]	; (8009eb8 <prvResetNextTaskUnblockTime+0x34>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e94:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	4252      	negs	r2, r2
 8009e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e9c:	e008      	b.n	8009eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9e:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <prvResetNextTaskUnblockTime+0x34>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20001070 	.word	0x20001070
 8009ebc:	200010d8 	.word	0x200010d8

08009ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <xTaskGetSchedulerState+0x30>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	e008      	b.n	8009ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ed4:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <xTaskGetSchedulerState+0x34>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009edc:	2302      	movs	r3, #2
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	e001      	b.n	8009ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ee6:	687b      	ldr	r3, [r7, #4]
	}
 8009ee8:	0018      	movs	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b002      	add	sp, #8
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200010c4 	.word	0x200010c4
 8009ef4:	200010e0 	.word	0x200010e0

08009ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d044      	beq.n	8009f98 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f0e:	4b25      	ldr	r3, [pc, #148]	; (8009fa4 <xTaskPriorityDisinherit+0xac>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d001      	beq.n	8009f1c <xTaskPriorityDisinherit+0x24>
 8009f18:	b672      	cpsid	i
 8009f1a:	e7fe      	b.n	8009f1a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <xTaskPriorityDisinherit+0x30>
 8009f24:	b672      	cpsid	i
 8009f26:	e7fe      	b.n	8009f26 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2c:	1e5a      	subs	r2, r3, #1
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d02c      	beq.n	8009f98 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d128      	bne.n	8009f98 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7fe fd23 	bl	8008996 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	2238      	movs	r2, #56	; 0x38
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f68:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <xTaskPriorityDisinherit+0xb0>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d903      	bls.n	8009f78 <xTaskPriorityDisinherit+0x80>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f74:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <xTaskPriorityDisinherit+0xb0>)
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7c:	0013      	movs	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	189b      	adds	r3, r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4a09      	ldr	r2, [pc, #36]	; (8009fac <xTaskPriorityDisinherit+0xb4>)
 8009f86:	189a      	adds	r2, r3, r2
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	0019      	movs	r1, r3
 8009f8e:	0010      	movs	r0, r2
 8009f90:	f7fe fca9 	bl	80088e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f98:	68fb      	ldr	r3, [r7, #12]
	}
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	b004      	add	sp, #16
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	20000be4 	.word	0x20000be4
 8009fa8:	200010c0 	.word	0x200010c0
 8009fac:	20000be8 	.word	0x20000be8

08009fb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fc0:	4b20      	ldr	r3, [pc, #128]	; (800a044 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f7fe fce5 	bl	8008996 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	d10b      	bne.n	8009fea <prvAddCurrentTaskToDelayedList+0x3a>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d008      	beq.n	8009fea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	1d1a      	adds	r2, r3, #4
 8009fde:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fe0:	0011      	movs	r1, r2
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f7fe fc7f 	bl	80088e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fe8:	e026      	b.n	800a038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	18d3      	adds	r3, r2, r3
 8009ff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ff2:	4b14      	ldr	r3, [pc, #80]	; (800a044 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d209      	bcs.n	800a016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <prvAddCurrentTaskToDelayedList+0x94>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3304      	adds	r3, #4
 800a00c:	0019      	movs	r1, r3
 800a00e:	0010      	movs	r0, r2
 800a010:	f7fe fc8b 	bl	800892a <vListInsert>
}
 800a014:	e010      	b.n	800a038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a016:	4b0e      	ldr	r3, [pc, #56]	; (800a050 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <prvAddCurrentTaskToDelayedList+0x94>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3304      	adds	r3, #4
 800a020:	0019      	movs	r1, r3
 800a022:	0010      	movs	r0, r2
 800a024:	f7fe fc81 	bl	800892a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d202      	bcs.n	800a038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	601a      	str	r2, [r3, #0]
}
 800a038:	46c0      	nop			; (mov r8, r8)
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b004      	add	sp, #16
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	200010bc 	.word	0x200010bc
 800a044:	20000be4 	.word	0x20000be4
 800a048:	200010a4 	.word	0x200010a4
 800a04c:	20001074 	.word	0x20001074
 800a050:	20001070 	.word	0x20001070
 800a054:	200010d8 	.word	0x200010d8

0800a058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b089      	sub	sp, #36	; 0x24
 800a05c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a062:	f000 fac9 	bl	800a5f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a066:	4b17      	ldr	r3, [pc, #92]	; (800a0c4 <xTimerCreateTimerTask+0x6c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d020      	beq.n	800a0b0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a076:	003a      	movs	r2, r7
 800a078:	1d39      	adds	r1, r7, #4
 800a07a:	2308      	movs	r3, #8
 800a07c:	18fb      	adds	r3, r7, r3
 800a07e:	0018      	movs	r0, r3
 800a080:	f7fe fbf0 	bl	8008864 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a084:	683c      	ldr	r4, [r7, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	490f      	ldr	r1, [pc, #60]	; (800a0c8 <xTimerCreateTimerTask+0x70>)
 800a08c:	480f      	ldr	r0, [pc, #60]	; (800a0cc <xTimerCreateTimerTask+0x74>)
 800a08e:	9202      	str	r2, [sp, #8]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2302      	movs	r3, #2
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	0022      	movs	r2, r4
 800a09a:	f7ff f968 	bl	800936e <xTaskCreateStatic>
 800a09e:	0002      	movs	r2, r0
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <xTimerCreateTimerTask+0x78>)
 800a0a2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <xTimerCreateTimerTask+0x78>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <xTimerCreateTimerTask+0x62>
 800a0b6:	b672      	cpsid	i
 800a0b8:	e7fe      	b.n	800a0b8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	0018      	movs	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	b005      	add	sp, #20
 800a0c2:	bd90      	pop	{r4, r7, pc}
 800a0c4:	20001114 	.word	0x20001114
 800a0c8:	0800de3c 	.word	0x0800de3c
 800a0cc:	0800a1f1 	.word	0x0800a1f1
 800a0d0:	20001118 	.word	0x20001118

0800a0d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0d4:	b590      	push	{r4, r7, lr}
 800a0d6:	b08b      	sub	sp, #44	; 0x2c
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <xTimerGenericCommand+0x1c>
 800a0ec:	b672      	cpsid	i
 800a0ee:	e7fe      	b.n	800a0ee <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0f0:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <xTimerGenericCommand+0x90>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d030      	beq.n	800a15a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0f8:	2414      	movs	r4, #20
 800a0fa:	193b      	adds	r3, r7, r4
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a100:	193b      	adds	r3, r7, r4
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a106:	193b      	adds	r3, r7, r4
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	dc19      	bgt.n	800a146 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a112:	f7ff fed5 	bl	8009ec0 <xTaskGetSchedulerState>
 800a116:	0003      	movs	r3, r0
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d109      	bne.n	800a130 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <xTimerGenericCommand+0x90>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a122:	1939      	adds	r1, r7, r4
 800a124:	2300      	movs	r3, #0
 800a126:	f7fe fd5d 	bl	8008be4 <xQueueGenericSend>
 800a12a:	0003      	movs	r3, r0
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
 800a12e:	e014      	b.n	800a15a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a130:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <xTimerGenericCommand+0x90>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	2314      	movs	r3, #20
 800a136:	18f9      	adds	r1, r7, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	f7fe fd52 	bl	8008be4 <xQueueGenericSend>
 800a140:	0003      	movs	r3, r0
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
 800a144:	e009      	b.n	800a15a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <xTimerGenericCommand+0x90>)
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	2314      	movs	r3, #20
 800a14e:	18f9      	adds	r1, r7, r3
 800a150:	2300      	movs	r3, #0
 800a152:	f7fe fe0b 	bl	8008d6c <xQueueGenericSendFromISR>
 800a156:	0003      	movs	r3, r0
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a15c:	0018      	movs	r0, r3
 800a15e:	46bd      	mov	sp, r7
 800a160:	b00b      	add	sp, #44	; 0x2c
 800a162:	bd90      	pop	{r4, r7, pc}
 800a164:	20001114 	.word	0x20001114

0800a168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a172:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <prvProcessExpiredTimer+0x84>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3304      	adds	r3, #4
 800a180:	0018      	movs	r0, r3
 800a182:	f7fe fc08 	bl	8008996 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2228      	movs	r2, #40	; 0x28
 800a18a:	5c9b      	ldrb	r3, [r3, r2]
 800a18c:	001a      	movs	r2, r3
 800a18e:	2304      	movs	r3, #4
 800a190:	4013      	ands	r3, r2
 800a192:	d019      	beq.n	800a1c8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	18d1      	adds	r1, r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f8c3 	bl	800a32c <prvInsertTimerInActiveList>
 800a1a6:	1e03      	subs	r3, r0, #0
 800a1a8:	d017      	beq.n	800a1da <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	f7ff ff8d 	bl	800a0d4 <xTimerGenericCommand>
 800a1ba:	0003      	movs	r3, r0
 800a1bc:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <prvProcessExpiredTimer+0x72>
 800a1c4:	b672      	cpsid	i
 800a1c6:	e7fe      	b.n	800a1c6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2228      	movs	r2, #40	; 0x28
 800a1cc:	5c9b      	ldrb	r3, [r3, r2]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4393      	bics	r3, r2
 800a1d2:	b2d9      	uxtb	r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2228      	movs	r2, #40	; 0x28
 800a1d8:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	0010      	movs	r0, r2
 800a1e2:	4798      	blx	r3
}
 800a1e4:	46c0      	nop			; (mov r8, r8)
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	b004      	add	sp, #16
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	2000110c 	.word	0x2000110c

0800a1f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	18fb      	adds	r3, r7, r3
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 f853 	bl	800a2a8 <prvGetNextExpireTime>
 800a202:	0003      	movs	r3, r0
 800a204:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	0011      	movs	r1, r2
 800a20c:	0018      	movs	r0, r3
 800a20e:	f000 f803 	bl	800a218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a212:	f000 f8cd 	bl	800a3b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a216:	e7ef      	b.n	800a1f8 <prvTimerTask+0x8>

0800a218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a222:	f7ff fac1 	bl	80097a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a226:	2308      	movs	r3, #8
 800a228:	18fb      	adds	r3, r7, r3
 800a22a:	0018      	movs	r0, r3
 800a22c:	f000 f85e 	bl	800a2ec <prvSampleTimeNow>
 800a230:	0003      	movs	r3, r0
 800a232:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d12b      	bne.n	800a292 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10c      	bne.n	800a25a <prvProcessTimerOrBlockTask+0x42>
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	429a      	cmp	r2, r3
 800a246:	d808      	bhi.n	800a25a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a248:	f7ff faba 	bl	80097c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0011      	movs	r1, r2
 800a252:	0018      	movs	r0, r3
 800a254:	f7ff ff88 	bl	800a168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a258:	e01d      	b.n	800a296 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d008      	beq.n	800a272 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a260:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <prvProcessTimerOrBlockTask+0x88>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <prvProcessTimerOrBlockTask+0x56>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e000      	b.n	800a270 <prvProcessTimerOrBlockTask+0x58>
 800a26e:	2300      	movs	r3, #0
 800a270:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a272:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <prvProcessTimerOrBlockTask+0x8c>)
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	0019      	movs	r1, r3
 800a280:	f7ff f842 	bl	8009308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a284:	f7ff fa9c 	bl	80097c0 <xTaskResumeAll>
 800a288:	1e03      	subs	r3, r0, #0
 800a28a:	d104      	bne.n	800a296 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a28c:	f000 fa80 	bl	800a790 <vPortYield>
}
 800a290:	e001      	b.n	800a296 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a292:	f7ff fa95 	bl	80097c0 <xTaskResumeAll>
}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	46bd      	mov	sp, r7
 800a29a:	b004      	add	sp, #16
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	46c0      	nop			; (mov r8, r8)
 800a2a0:	20001110 	.word	0x20001110
 800a2a4:	20001114 	.word	0x20001114

0800a2a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2b0:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <prvGetNextExpireTime+0x40>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <prvGetNextExpireTime+0x16>
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	e000      	b.n	800a2c0 <prvGetNextExpireTime+0x18>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d105      	bne.n	800a2d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <prvGetNextExpireTime+0x40>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e001      	b.n	800a2dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
}
 800a2de:	0018      	movs	r0, r3
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b004      	add	sp, #16
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	2000110c 	.word	0x2000110c

0800a2ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2f4:	f7ff faf0 	bl	80098d8 <xTaskGetTickCount>
 800a2f8:	0003      	movs	r3, r0
 800a2fa:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <prvSampleTimeNow+0x3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	429a      	cmp	r2, r3
 800a304:	d205      	bcs.n	800a312 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a306:	f000 f919 	bl	800a53c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	e002      	b.n	800a318 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a318:	4b03      	ldr	r3, [pc, #12]	; (800a328 <prvSampleTimeNow+0x3c>)
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a31e:	68fb      	ldr	r3, [r7, #12]
}
 800a320:	0018      	movs	r0, r3
 800a322:	46bd      	mov	sp, r7
 800a324:	b004      	add	sp, #16
 800a326:	bd80      	pop	{r7, pc}
 800a328:	2000111c 	.word	0x2000111c

0800a32c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d812      	bhi.n	800a378 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d302      	bcc.n	800a366 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	e01b      	b.n	800a39e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <prvInsertTimerInActiveList+0x7c>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3304      	adds	r3, #4
 800a36e:	0019      	movs	r1, r3
 800a370:	0010      	movs	r0, r2
 800a372:	f7fe fada 	bl	800892a <vListInsert>
 800a376:	e012      	b.n	800a39e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d206      	bcs.n	800a38e <prvInsertTimerInActiveList+0x62>
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d302      	bcc.n	800a38e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a388:	2301      	movs	r3, #1
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	e007      	b.n	800a39e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a38e:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <prvInsertTimerInActiveList+0x80>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3304      	adds	r3, #4
 800a396:	0019      	movs	r1, r3
 800a398:	0010      	movs	r0, r2
 800a39a:	f7fe fac6 	bl	800892a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b006      	add	sp, #24
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20001110 	.word	0x20001110
 800a3ac:	2000110c 	.word	0x2000110c

0800a3b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3b0:	b590      	push	{r4, r7, lr}
 800a3b2:	b08d      	sub	sp, #52	; 0x34
 800a3b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3b6:	e0ac      	b.n	800a512 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	18bb      	adds	r3, r7, r2
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da0f      	bge.n	800a3e2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3c2:	18bb      	adds	r3, r7, r2
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <prvProcessReceivedCommands+0x22>
 800a3ce:	b672      	cpsid	i
 800a3d0:	e7fe      	b.n	800a3d0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	6858      	ldr	r0, [r3, #4]
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	0019      	movs	r1, r3
 800a3e0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	18bb      	adds	r3, r7, r2
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	da00      	bge.n	800a3ee <prvProcessReceivedCommands+0x3e>
 800a3ec:	e090      	b.n	800a510 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3ee:	18bb      	adds	r3, r7, r2
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	3304      	adds	r3, #4
 800a400:	0018      	movs	r0, r3
 800a402:	f7fe fac8 	bl	8008996 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	0018      	movs	r0, r3
 800a40a:	f7ff ff6f 	bl	800a2ec <prvSampleTimeNow>
 800a40e:	0003      	movs	r3, r0
 800a410:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a412:	2308      	movs	r3, #8
 800a414:	18fb      	adds	r3, r7, r3
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b09      	cmp	r3, #9
 800a41a:	d900      	bls.n	800a41e <prvProcessReceivedCommands+0x6e>
 800a41c:	e079      	b.n	800a512 <prvProcessReceivedCommands+0x162>
 800a41e:	009a      	lsls	r2, r3, #2
 800a420:	4b44      	ldr	r3, [pc, #272]	; (800a534 <prvProcessReceivedCommands+0x184>)
 800a422:	18d3      	adds	r3, r2, r3
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	2228      	movs	r2, #40	; 0x28
 800a42c:	5c9b      	ldrb	r3, [r3, r2]
 800a42e:	2201      	movs	r2, #1
 800a430:	4313      	orrs	r3, r2
 800a432:	b2d9      	uxtb	r1, r3
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2228      	movs	r2, #40	; 0x28
 800a438:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a43a:	2408      	movs	r4, #8
 800a43c:	193b      	adds	r3, r7, r4
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	18d1      	adds	r1, r2, r3
 800a446:	193b      	adds	r3, r7, r4
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	6a38      	ldr	r0, [r7, #32]
 800a44e:	f7ff ff6d 	bl	800a32c <prvInsertTimerInActiveList>
 800a452:	1e03      	subs	r3, r0, #0
 800a454:	d05d      	beq.n	800a512 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	6a3a      	ldr	r2, [r7, #32]
 800a45c:	0010      	movs	r0, r2
 800a45e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	2228      	movs	r2, #40	; 0x28
 800a464:	5c9b      	ldrb	r3, [r3, r2]
 800a466:	001a      	movs	r2, r3
 800a468:	2304      	movs	r3, #4
 800a46a:	4013      	ands	r3, r2
 800a46c:	d051      	beq.n	800a512 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a46e:	193b      	adds	r3, r7, r4
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	18d2      	adds	r2, r2, r3
 800a478:	6a38      	ldr	r0, [r7, #32]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2300      	movs	r3, #0
 800a480:	2100      	movs	r1, #0
 800a482:	f7ff fe27 	bl	800a0d4 <xTimerGenericCommand>
 800a486:	0003      	movs	r3, r0
 800a488:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d140      	bne.n	800a512 <prvProcessReceivedCommands+0x162>
 800a490:	b672      	cpsid	i
 800a492:	e7fe      	b.n	800a492 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	2228      	movs	r2, #40	; 0x28
 800a498:	5c9b      	ldrb	r3, [r3, r2]
 800a49a:	2201      	movs	r2, #1
 800a49c:	4393      	bics	r3, r2
 800a49e:	b2d9      	uxtb	r1, r3
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2228      	movs	r2, #40	; 0x28
 800a4a4:	5499      	strb	r1, [r3, r2]
					break;
 800a4a6:	e034      	b.n	800a512 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	2228      	movs	r2, #40	; 0x28
 800a4ac:	5c9b      	ldrb	r3, [r3, r2]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b2d9      	uxtb	r1, r3
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	2228      	movs	r2, #40	; 0x28
 800a4b8:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <prvProcessReceivedCommands+0x120>
 800a4cc:	b672      	cpsid	i
 800a4ce:	e7fe      	b.n	800a4ce <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	18d1      	adds	r1, r2, r3
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	6a38      	ldr	r0, [r7, #32]
 800a4de:	f7ff ff25 	bl	800a32c <prvInsertTimerInActiveList>
					break;
 800a4e2:	e016      	b.n	800a512 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4e4:	6a3b      	ldr	r3, [r7, #32]
 800a4e6:	2228      	movs	r2, #40	; 0x28
 800a4e8:	5c9b      	ldrb	r3, [r3, r2]
 800a4ea:	001a      	movs	r2, r3
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	d104      	bne.n	800a4fc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 fa99 	bl	800aa2c <vPortFree>
 800a4fa:	e00a      	b.n	800a512 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	2228      	movs	r2, #40	; 0x28
 800a500:	5c9b      	ldrb	r3, [r3, r2]
 800a502:	2201      	movs	r2, #1
 800a504:	4393      	bics	r3, r2
 800a506:	b2d9      	uxtb	r1, r3
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	2228      	movs	r2, #40	; 0x28
 800a50c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a50e:	e000      	b.n	800a512 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a510:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <prvProcessReceivedCommands+0x188>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2208      	movs	r2, #8
 800a518:	18b9      	adds	r1, r7, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	0018      	movs	r0, r3
 800a51e:	f7fe fc96 	bl	8008e4e <xQueueReceive>
 800a522:	1e03      	subs	r3, r0, #0
 800a524:	d000      	beq.n	800a528 <prvProcessReceivedCommands+0x178>
 800a526:	e747      	b.n	800a3b8 <prvProcessReceivedCommands+0x8>
	}
}
 800a528:	46c0      	nop			; (mov r8, r8)
 800a52a:	46c0      	nop			; (mov r8, r8)
 800a52c:	46bd      	mov	sp, r7
 800a52e:	b00b      	add	sp, #44	; 0x2c
 800a530:	bd90      	pop	{r4, r7, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	0800dfc0 	.word	0x0800dfc0
 800a538:	20001114 	.word	0x20001114

0800a53c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a542:	e041      	b.n	800a5c8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a544:	4b2a      	ldr	r3, [pc, #168]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54e:	4b28      	ldr	r3, [pc, #160]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3304      	adds	r3, #4
 800a55c:	0018      	movs	r0, r3
 800a55e:	f7fe fa1a 	bl	8008996 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	0010      	movs	r0, r2
 800a56a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2228      	movs	r2, #40	; 0x28
 800a570:	5c9b      	ldrb	r3, [r3, r2]
 800a572:	001a      	movs	r2, r3
 800a574:	2304      	movs	r3, #4
 800a576:	4013      	ands	r3, r2
 800a578:	d026      	beq.n	800a5c8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	18d3      	adds	r3, r2, r3
 800a582:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d90e      	bls.n	800a5aa <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a598:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	0019      	movs	r1, r3
 800a5a2:	0010      	movs	r0, r2
 800a5a4:	f7fe f9c1 	bl	800892a <vListInsert>
 800a5a8:	e00e      	b.n	800a5c8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	f7ff fd8d 	bl	800a0d4 <xTimerGenericCommand>
 800a5ba:	0003      	movs	r3, r0
 800a5bc:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <prvSwitchTimerLists+0x8c>
 800a5c4:	b672      	cpsid	i
 800a5c6:	e7fe      	b.n	800a5c6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1b8      	bne.n	800a544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <prvSwitchTimerLists+0xb8>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <prvSwitchTimerLists+0xb4>)
 800a5de:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800a5e0:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <prvSwitchTimerLists+0xb8>)
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	b006      	add	sp, #24
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	46c0      	nop			; (mov r8, r8)
 800a5f0:	2000110c 	.word	0x2000110c
 800a5f4:	20001110 	.word	0x20001110

0800a5f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5fe:	f000 f8d7 	bl	800a7b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a602:	4b16      	ldr	r3, [pc, #88]	; (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d123      	bne.n	800a652 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800a60a:	4b15      	ldr	r3, [pc, #84]	; (800a660 <prvCheckForValidListAndQueue+0x68>)
 800a60c:	0018      	movs	r0, r3
 800a60e:	f7fe f941 	bl	8008894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a612:	4b14      	ldr	r3, [pc, #80]	; (800a664 <prvCheckForValidListAndQueue+0x6c>)
 800a614:	0018      	movs	r0, r3
 800a616:	f7fe f93d 	bl	8008894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a61a:	4b13      	ldr	r3, [pc, #76]	; (800a668 <prvCheckForValidListAndQueue+0x70>)
 800a61c:	4a10      	ldr	r2, [pc, #64]	; (800a660 <prvCheckForValidListAndQueue+0x68>)
 800a61e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <prvCheckForValidListAndQueue+0x74>)
 800a622:	4a10      	ldr	r2, [pc, #64]	; (800a664 <prvCheckForValidListAndQueue+0x6c>)
 800a624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a626:	4b12      	ldr	r3, [pc, #72]	; (800a670 <prvCheckForValidListAndQueue+0x78>)
 800a628:	4a12      	ldr	r2, [pc, #72]	; (800a674 <prvCheckForValidListAndQueue+0x7c>)
 800a62a:	2100      	movs	r1, #0
 800a62c:	9100      	str	r1, [sp, #0]
 800a62e:	2110      	movs	r1, #16
 800a630:	200a      	movs	r0, #10
 800a632:	f7fe fa2c 	bl	8008a8e <xQueueGenericCreateStatic>
 800a636:	0002      	movs	r2, r0
 800a638:	4b08      	ldr	r3, [pc, #32]	; (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a63a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d006      	beq.n	800a652 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a0b      	ldr	r2, [pc, #44]	; (800a678 <prvCheckForValidListAndQueue+0x80>)
 800a64a:	0011      	movs	r1, r2
 800a64c:	0018      	movs	r0, r3
 800a64e:	f7fe fe33 	bl	80092b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f000 f8bf 	bl	800a7d4 <vPortExitCritical>
}
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20001114 	.word	0x20001114
 800a660:	200010e4 	.word	0x200010e4
 800a664:	200010f8 	.word	0x200010f8
 800a668:	2000110c 	.word	0x2000110c
 800a66c:	20001110 	.word	0x20001110
 800a670:	200011c0 	.word	0x200011c0
 800a674:	20001120 	.word	0x20001120
 800a678:	0800de44 	.word	0x0800de44

0800a67c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3b04      	subs	r3, #4
 800a68c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2280      	movs	r2, #128	; 0x80
 800a692:	0452      	lsls	r2, r2, #17
 800a694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3b04      	subs	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3b04      	subs	r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6a8:	4a08      	ldr	r2, [pc, #32]	; (800a6cc <pxPortInitialiseStack+0x50>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3b14      	subs	r3, #20
 800a6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3b20      	subs	r3, #32
 800a6be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
}
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	b004      	add	sp, #16
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	46c0      	nop			; (mov r8, r8)
 800a6cc:	0800a6d1 	.word	0x0800a6d1

0800a6d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <prvTaskExitError+0x2c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	d001      	beq.n	800a6e6 <prvTaskExitError+0x16>
 800a6e2:	b672      	cpsid	i
 800a6e4:	e7fe      	b.n	800a6e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a6e6:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0fc      	beq.n	800a6ea <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6f0:	46c0      	nop			; (mov r8, r8)
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	b002      	add	sp, #8
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	20000014 	.word	0x20000014

0800a700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a704:	46c0      	nop			; (mov r8, r8)
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	0000      	movs	r0, r0
 800a70c:	0000      	movs	r0, r0
	...

0800a710 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a710:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <pxCurrentTCBConst2>)
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	3020      	adds	r0, #32
 800a718:	f380 8809 	msr	PSP, r0
 800a71c:	2002      	movs	r0, #2
 800a71e:	f380 8814 	msr	CONTROL, r0
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a728:	46ae      	mov	lr, r5
 800a72a:	bc08      	pop	{r3}
 800a72c:	bc04      	pop	{r2}
 800a72e:	b662      	cpsie	i
 800a730:	4718      	bx	r3
 800a732:	46c0      	nop			; (mov r8, r8)
 800a734:	46c0      	nop			; (mov r8, r8)
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	46c0      	nop			; (mov r8, r8)
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	46c0      	nop			; (mov r8, r8)
 800a73e:	46c0      	nop			; (mov r8, r8)

0800a740 <pxCurrentTCBConst2>:
 800a740:	20000be4 	.word	0x20000be4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a744:	46c0      	nop			; (mov r8, r8)
 800a746:	46c0      	nop			; (mov r8, r8)

0800a748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800a74c:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <xPortStartScheduler+0x40>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <xPortStartScheduler+0x40>)
 800a752:	21ff      	movs	r1, #255	; 0xff
 800a754:	0409      	lsls	r1, r1, #16
 800a756:	430a      	orrs	r2, r1
 800a758:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <xPortStartScheduler+0x40>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <xPortStartScheduler+0x40>)
 800a760:	21ff      	movs	r1, #255	; 0xff
 800a762:	0609      	lsls	r1, r1, #24
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800a768:	f000 f898 	bl	800a89c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a76c:	4b07      	ldr	r3, [pc, #28]	; (800a78c <xPortStartScheduler+0x44>)
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a772:	f7ff ffcd 	bl	800a710 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a776:	f7ff f96d 	bl	8009a54 <vTaskSwitchContext>
	prvTaskExitError();
 800a77a:	f7ff ffa9 	bl	800a6d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	0018      	movs	r0, r3
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	e000ed20 	.word	0xe000ed20
 800a78c:	20000014 	.word	0x20000014

0800a790 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <vPortYield+0x1c>)
 800a796:	2280      	movs	r2, #128	; 0x80
 800a798:	0552      	lsls	r2, r2, #21
 800a79a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a79c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a7a0:	f3bf 8f6f 	isb	sy
}
 800a7a4:	46c0      	nop			; (mov r8, r8)
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a7b4:	b672      	cpsid	i
    uxCriticalNesting++;
 800a7b6:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <vPortEnterCritical+0x20>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	4b04      	ldr	r3, [pc, #16]	; (800a7d0 <vPortEnterCritical+0x20>)
 800a7be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a7c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a7c4:	f3bf 8f6f 	isb	sy
}
 800a7c8:	46c0      	nop			; (mov r8, r8)
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	46c0      	nop			; (mov r8, r8)
 800a7d0:	20000014 	.word	0x20000014

0800a7d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <vPortExitCritical+0x2c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <vPortExitCritical+0x10>
 800a7e0:	b672      	cpsid	i
 800a7e2:	e7fe      	b.n	800a7e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <vPortExitCritical+0x2c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <vPortExitCritical+0x2c>)
 800a7ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800a7ee:	4b04      	ldr	r3, [pc, #16]	; (800a800 <vPortExitCritical+0x2c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d100      	bne.n	800a7f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800a7f6:	b662      	cpsie	i
    }
}
 800a7f8:	46c0      	nop			; (mov r8, r8)
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	20000014 	.word	0x20000014

0800a804 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a804:	f3ef 8010 	mrs	r0, PRIMASK
 800a808:	b672      	cpsid	i
 800a80a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800a80c:	46c0      	nop			; (mov r8, r8)
 800a80e:	0018      	movs	r0, r3

0800a810 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a810:	f380 8810 	msr	PRIMASK, r0
 800a814:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800a816:	46c0      	nop			; (mov r8, r8)
	...

0800a820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a820:	f3ef 8009 	mrs	r0, PSP
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <pxCurrentTCBConst>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	3820      	subs	r0, #32
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a82e:	4644      	mov	r4, r8
 800a830:	464d      	mov	r5, r9
 800a832:	4656      	mov	r6, sl
 800a834:	465f      	mov	r7, fp
 800a836:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a838:	b508      	push	{r3, lr}
 800a83a:	b672      	cpsid	i
 800a83c:	f7ff f90a 	bl	8009a54 <vTaskSwitchContext>
 800a840:	b662      	cpsie	i
 800a842:	bc0c      	pop	{r2, r3}
 800a844:	6811      	ldr	r1, [r2, #0]
 800a846:	6808      	ldr	r0, [r1, #0]
 800a848:	3010      	adds	r0, #16
 800a84a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a84c:	46a0      	mov	r8, r4
 800a84e:	46a9      	mov	r9, r5
 800a850:	46b2      	mov	sl, r6
 800a852:	46bb      	mov	fp, r7
 800a854:	f380 8809 	msr	PSP, r0
 800a858:	3820      	subs	r0, #32
 800a85a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a85c:	4718      	bx	r3
 800a85e:	46c0      	nop			; (mov r8, r8)

0800a860 <pxCurrentTCBConst>:
 800a860:	20000be4 	.word	0x20000be4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a864:	46c0      	nop			; (mov r8, r8)
 800a866:	46c0      	nop			; (mov r8, r8)

0800a868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a86e:	f7ff ffc9 	bl	800a804 <ulSetInterruptMaskFromISR>
 800a872:	0003      	movs	r3, r0
 800a874:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a876:	f7ff f83d 	bl	80098f4 <xTaskIncrementTick>
 800a87a:	1e03      	subs	r3, r0, #0
 800a87c:	d003      	beq.n	800a886 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <xPortSysTickHandler+0x30>)
 800a880:	2280      	movs	r2, #128	; 0x80
 800a882:	0552      	lsls	r2, r2, #21
 800a884:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	0018      	movs	r0, r3
 800a88a:	f7ff ffc1 	bl	800a810 <vClearInterruptMaskFromISR>
}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	46bd      	mov	sp, r7
 800a892:	b002      	add	sp, #8
 800a894:	bd80      	pop	{r7, pc}
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <prvSetupTimerInterrupt+0x34>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <prvSetupTimerInterrupt+0x38>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <prvSetupTimerInterrupt+0x3c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	22fa      	movs	r2, #250	; 0xfa
 800a8b2:	0091      	lsls	r1, r2, #2
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f7f5 fc43 	bl	8000140 <__udivsi3>
 800a8ba:	0003      	movs	r3, r0
 800a8bc:	001a      	movs	r2, r3
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <prvSetupTimerInterrupt+0x40>)
 800a8c0:	3a01      	subs	r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800a8c4:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <prvSetupTimerInterrupt+0x34>)
 800a8c6:	2207      	movs	r2, #7
 800a8c8:	601a      	str	r2, [r3, #0]
}
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	e000e010 	.word	0xe000e010
 800a8d4:	e000e018 	.word	0xe000e018
 800a8d8:	20000000 	.word	0x20000000
 800a8dc:	e000e014 	.word	0xe000e014

0800a8e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a8ec:	f7fe ff5c 	bl	80097a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8f0:	4b49      	ldr	r3, [pc, #292]	; (800aa18 <pvPortMalloc+0x138>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8f8:	f000 f8e0 	bl	800aabc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8fc:	4b47      	ldr	r3, [pc, #284]	; (800aa1c <pvPortMalloc+0x13c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	4013      	ands	r3, r2
 800a904:	d000      	beq.n	800a908 <pvPortMalloc+0x28>
 800a906:	e079      	b.n	800a9fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d012      	beq.n	800a934 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a90e:	2208      	movs	r2, #8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	189b      	adds	r3, r3, r2
 800a914:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2207      	movs	r2, #7
 800a91a:	4013      	ands	r3, r2
 800a91c:	d00a      	beq.n	800a934 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2207      	movs	r2, #7
 800a922:	4393      	bics	r3, r2
 800a924:	3308      	adds	r3, #8
 800a926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2207      	movs	r2, #7
 800a92c:	4013      	ands	r3, r2
 800a92e:	d001      	beq.n	800a934 <pvPortMalloc+0x54>
 800a930:	b672      	cpsid	i
 800a932:	e7fe      	b.n	800a932 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d060      	beq.n	800a9fc <pvPortMalloc+0x11c>
 800a93a:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <pvPortMalloc+0x140>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	d85b      	bhi.n	800a9fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a944:	4b37      	ldr	r3, [pc, #220]	; (800aa24 <pvPortMalloc+0x144>)
 800a946:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a948:	4b36      	ldr	r3, [pc, #216]	; (800aa24 <pvPortMalloc+0x144>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a94e:	e004      	b.n	800a95a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <pvPortMalloc+0x8c>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f1      	bne.n	800a950 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a96c:	4b2a      	ldr	r3, [pc, #168]	; (800aa18 <pvPortMalloc+0x138>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	429a      	cmp	r2, r3
 800a974:	d042      	beq.n	800a9fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2208      	movs	r2, #8
 800a97c:	189b      	adds	r3, r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	1ad2      	subs	r2, r2, r3
 800a990:	2308      	movs	r3, #8
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	429a      	cmp	r2, r3
 800a996:	d916      	bls.n	800a9c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	18d3      	adds	r3, r2, r3
 800a99e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2207      	movs	r2, #7
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d001      	beq.n	800a9ac <pvPortMalloc+0xcc>
 800a9a8:	b672      	cpsid	i
 800a9aa:	e7fe      	b.n	800a9aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	f000 f8db 	bl	800ab7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9c6:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <pvPortMalloc+0x140>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	4b13      	ldr	r3, [pc, #76]	; (800aa20 <pvPortMalloc+0x140>)
 800a9d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9d4:	4b12      	ldr	r3, [pc, #72]	; (800aa20 <pvPortMalloc+0x140>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	4b13      	ldr	r3, [pc, #76]	; (800aa28 <pvPortMalloc+0x148>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d203      	bcs.n	800a9e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <pvPortMalloc+0x140>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	4b10      	ldr	r3, [pc, #64]	; (800aa28 <pvPortMalloc+0x148>)
 800a9e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <pvPortMalloc+0x13c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9fc:	f7fe fee0 	bl	80097c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2207      	movs	r2, #7
 800aa04:	4013      	ands	r3, r2
 800aa06:	d001      	beq.n	800aa0c <pvPortMalloc+0x12c>
 800aa08:	b672      	cpsid	i
 800aa0a:	e7fe      	b.n	800aa0a <pvPortMalloc+0x12a>
	return pvReturn;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	0018      	movs	r0, r3
 800aa10:	46bd      	mov	sp, r7
 800aa12:	b006      	add	sp, #24
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	20001e18 	.word	0x20001e18
 800aa1c:	20001e24 	.word	0x20001e24
 800aa20:	20001e1c 	.word	0x20001e1c
 800aa24:	20001e10 	.word	0x20001e10
 800aa28:	20001e20 	.word	0x20001e20

0800aa2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d035      	beq.n	800aaaa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa3e:	2308      	movs	r3, #8
 800aa40:	425b      	negs	r3, r3
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	18d3      	adds	r3, r2, r3
 800aa46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	4b18      	ldr	r3, [pc, #96]	; (800aab4 <vPortFree+0x88>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4013      	ands	r3, r2
 800aa56:	d101      	bne.n	800aa5c <vPortFree+0x30>
 800aa58:	b672      	cpsid	i
 800aa5a:	e7fe      	b.n	800aa5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <vPortFree+0x3c>
 800aa64:	b672      	cpsid	i
 800aa66:	e7fe      	b.n	800aa66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <vPortFree+0x88>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4013      	ands	r3, r2
 800aa72:	d01a      	beq.n	800aaaa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d116      	bne.n	800aaaa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <vPortFree+0x88>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	43db      	mvns	r3, r3
 800aa86:	401a      	ands	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa8c:	f7fe fe8c 	bl	80097a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	4b08      	ldr	r3, [pc, #32]	; (800aab8 <vPortFree+0x8c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	18d2      	adds	r2, r2, r3
 800aa9a:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <vPortFree+0x8c>)
 800aa9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f000 f86b 	bl	800ab7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aaa6:	f7fe fe8b 	bl	80097c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	46bd      	mov	sp, r7
 800aaae:	b004      	add	sp, #16
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	46c0      	nop			; (mov r8, r8)
 800aab4:	20001e24 	.word	0x20001e24
 800aab8:	20001e1c 	.word	0x20001e1c

0800aabc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aac2:	23c0      	movs	r3, #192	; 0xc0
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aac8:	4b26      	ldr	r3, [pc, #152]	; (800ab64 <prvHeapInit+0xa8>)
 800aaca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2207      	movs	r2, #7
 800aad0:	4013      	ands	r3, r2
 800aad2:	d00c      	beq.n	800aaee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3307      	adds	r3, #7
 800aad8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2207      	movs	r2, #7
 800aade:	4393      	bics	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	1ad2      	subs	r2, r2, r3
 800aae8:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <prvHeapInit+0xa8>)
 800aaea:	18d3      	adds	r3, r2, r3
 800aaec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <prvHeapInit+0xac>)
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aaf8:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <prvHeapInit+0xac>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	18d3      	adds	r3, r2, r3
 800ab04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab06:	2208      	movs	r2, #8
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2207      	movs	r2, #7
 800ab12:	4393      	bics	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <prvHeapInit+0xb0>)
 800ab1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800ab1c:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <prvHeapInit+0xb0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2200      	movs	r2, #0
 800ab22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab24:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <prvHeapInit+0xb0>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	1ad2      	subs	r2, r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab3a:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <prvHeapInit+0xb0>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <prvHeapInit+0xb4>)
 800ab48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <prvHeapInit+0xb8>)
 800ab50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab52:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <prvHeapInit+0xbc>)
 800ab54:	2280      	movs	r2, #128	; 0x80
 800ab56:	0612      	lsls	r2, r2, #24
 800ab58:	601a      	str	r2, [r3, #0]
}
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	b004      	add	sp, #16
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	20001210 	.word	0x20001210
 800ab68:	20001e10 	.word	0x20001e10
 800ab6c:	20001e18 	.word	0x20001e18
 800ab70:	20001e20 	.word	0x20001e20
 800ab74:	20001e1c 	.word	0x20001e1c
 800ab78:	20001e24 	.word	0x20001e24

0800ab7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab84:	4b27      	ldr	r3, [pc, #156]	; (800ac24 <prvInsertBlockIntoFreeList+0xa8>)
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e002      	b.n	800ab90 <prvInsertBlockIntoFreeList+0x14>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d8f7      	bhi.n	800ab8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	18d3      	adds	r3, r2, r3
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d108      	bne.n	800abbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	18d2      	adds	r2, r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	18d2      	adds	r2, r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d118      	bne.n	800ac04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <prvInsertBlockIntoFreeList+0xac>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d00d      	beq.n	800abfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	18d2      	adds	r2, r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e008      	b.n	800ac0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abfa:	4b0b      	ldr	r3, [pc, #44]	; (800ac28 <prvInsertBlockIntoFreeList+0xac>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e003      	b.n	800ac0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d002      	beq.n	800ac1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	b004      	add	sp, #16
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	20001e10 	.word	0x20001e10
 800ac28:	20001e18 	.word	0x20001e18

0800ac2c <__errno>:
 800ac2c:	4b01      	ldr	r3, [pc, #4]	; (800ac34 <__errno+0x8>)
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	4770      	bx	lr
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	20000018 	.word	0x20000018

0800ac38 <std>:
 800ac38:	2300      	movs	r3, #0
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	0004      	movs	r4, r0
 800ac3e:	6003      	str	r3, [r0, #0]
 800ac40:	6043      	str	r3, [r0, #4]
 800ac42:	6083      	str	r3, [r0, #8]
 800ac44:	8181      	strh	r1, [r0, #12]
 800ac46:	6643      	str	r3, [r0, #100]	; 0x64
 800ac48:	0019      	movs	r1, r3
 800ac4a:	81c2      	strh	r2, [r0, #14]
 800ac4c:	6103      	str	r3, [r0, #16]
 800ac4e:	6143      	str	r3, [r0, #20]
 800ac50:	6183      	str	r3, [r0, #24]
 800ac52:	2208      	movs	r2, #8
 800ac54:	305c      	adds	r0, #92	; 0x5c
 800ac56:	f000 f921 	bl	800ae9c <memset>
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <std+0x38>)
 800ac5c:	6224      	str	r4, [r4, #32]
 800ac5e:	6263      	str	r3, [r4, #36]	; 0x24
 800ac60:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <std+0x3c>)
 800ac62:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac64:	4b04      	ldr	r3, [pc, #16]	; (800ac78 <std+0x40>)
 800ac66:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <std+0x44>)
 800ac6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac6c:	bd10      	pop	{r4, pc}
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	0800ba05 	.word	0x0800ba05
 800ac74:	0800ba2d 	.word	0x0800ba2d
 800ac78:	0800ba65 	.word	0x0800ba65
 800ac7c:	0800ba91 	.word	0x0800ba91

0800ac80 <_cleanup_r>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4902      	ldr	r1, [pc, #8]	; (800ac8c <_cleanup_r+0xc>)
 800ac84:	f000 f8ba 	bl	800adfc <_fwalk_reent>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	0800c94d 	.word	0x0800c94d

0800ac90 <__sfmoreglue>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	2568      	movs	r5, #104	; 0x68
 800ac94:	1e4a      	subs	r2, r1, #1
 800ac96:	4355      	muls	r5, r2
 800ac98:	000e      	movs	r6, r1
 800ac9a:	0029      	movs	r1, r5
 800ac9c:	3174      	adds	r1, #116	; 0x74
 800ac9e:	f000 f927 	bl	800aef0 <_malloc_r>
 800aca2:	1e04      	subs	r4, r0, #0
 800aca4:	d008      	beq.n	800acb8 <__sfmoreglue+0x28>
 800aca6:	2100      	movs	r1, #0
 800aca8:	002a      	movs	r2, r5
 800acaa:	6001      	str	r1, [r0, #0]
 800acac:	6046      	str	r6, [r0, #4]
 800acae:	300c      	adds	r0, #12
 800acb0:	60a0      	str	r0, [r4, #8]
 800acb2:	3268      	adds	r2, #104	; 0x68
 800acb4:	f000 f8f2 	bl	800ae9c <memset>
 800acb8:	0020      	movs	r0, r4
 800acba:	bd70      	pop	{r4, r5, r6, pc}

0800acbc <__sfp_lock_acquire>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	4802      	ldr	r0, [pc, #8]	; (800acc8 <__sfp_lock_acquire+0xc>)
 800acc0:	f000 f8e1 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800acc4:	bd10      	pop	{r4, pc}
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	20001e29 	.word	0x20001e29

0800accc <__sfp_lock_release>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4802      	ldr	r0, [pc, #8]	; (800acd8 <__sfp_lock_release+0xc>)
 800acd0:	f000 f8da 	bl	800ae88 <__retarget_lock_release_recursive>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	20001e29 	.word	0x20001e29

0800acdc <__sinit_lock_acquire>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	4802      	ldr	r0, [pc, #8]	; (800ace8 <__sinit_lock_acquire+0xc>)
 800ace0:	f000 f8d1 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	20001e2a 	.word	0x20001e2a

0800acec <__sinit_lock_release>:
 800acec:	b510      	push	{r4, lr}
 800acee:	4802      	ldr	r0, [pc, #8]	; (800acf8 <__sinit_lock_release+0xc>)
 800acf0:	f000 f8ca 	bl	800ae88 <__retarget_lock_release_recursive>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	20001e2a 	.word	0x20001e2a

0800acfc <__sinit>:
 800acfc:	b513      	push	{r0, r1, r4, lr}
 800acfe:	0004      	movs	r4, r0
 800ad00:	f7ff ffec 	bl	800acdc <__sinit_lock_acquire>
 800ad04:	69a3      	ldr	r3, [r4, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <__sinit+0x14>
 800ad0a:	f7ff ffef 	bl	800acec <__sinit_lock_release>
 800ad0e:	bd13      	pop	{r0, r1, r4, pc}
 800ad10:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad12:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad14:	6523      	str	r3, [r4, #80]	; 0x50
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <__sinit+0x68>)
 800ad18:	4a13      	ldr	r2, [pc, #76]	; (800ad68 <__sinit+0x6c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d101      	bne.n	800ad28 <__sinit+0x2c>
 800ad24:	2301      	movs	r3, #1
 800ad26:	61a3      	str	r3, [r4, #24]
 800ad28:	0020      	movs	r0, r4
 800ad2a:	f000 f81f 	bl	800ad6c <__sfp>
 800ad2e:	6060      	str	r0, [r4, #4]
 800ad30:	0020      	movs	r0, r4
 800ad32:	f000 f81b 	bl	800ad6c <__sfp>
 800ad36:	60a0      	str	r0, [r4, #8]
 800ad38:	0020      	movs	r0, r4
 800ad3a:	f000 f817 	bl	800ad6c <__sfp>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2104      	movs	r1, #4
 800ad42:	60e0      	str	r0, [r4, #12]
 800ad44:	6860      	ldr	r0, [r4, #4]
 800ad46:	f7ff ff77 	bl	800ac38 <std>
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	2109      	movs	r1, #9
 800ad4e:	68a0      	ldr	r0, [r4, #8]
 800ad50:	f7ff ff72 	bl	800ac38 <std>
 800ad54:	2202      	movs	r2, #2
 800ad56:	2112      	movs	r1, #18
 800ad58:	68e0      	ldr	r0, [r4, #12]
 800ad5a:	f7ff ff6d 	bl	800ac38 <std>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	61a3      	str	r3, [r4, #24]
 800ad62:	e7d2      	b.n	800ad0a <__sinit+0xe>
 800ad64:	0800e048 	.word	0x0800e048
 800ad68:	0800ac81 	.word	0x0800ac81

0800ad6c <__sfp>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	0007      	movs	r7, r0
 800ad70:	f7ff ffa4 	bl	800acbc <__sfp_lock_acquire>
 800ad74:	4b1f      	ldr	r3, [pc, #124]	; (800adf4 <__sfp+0x88>)
 800ad76:	681e      	ldr	r6, [r3, #0]
 800ad78:	69b3      	ldr	r3, [r6, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <__sfp+0x18>
 800ad7e:	0030      	movs	r0, r6
 800ad80:	f7ff ffbc 	bl	800acfc <__sinit>
 800ad84:	3648      	adds	r6, #72	; 0x48
 800ad86:	68b4      	ldr	r4, [r6, #8]
 800ad88:	6873      	ldr	r3, [r6, #4]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	d504      	bpl.n	800ad98 <__sfp+0x2c>
 800ad8e:	6833      	ldr	r3, [r6, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d022      	beq.n	800adda <__sfp+0x6e>
 800ad94:	6836      	ldr	r6, [r6, #0]
 800ad96:	e7f6      	b.n	800ad86 <__sfp+0x1a>
 800ad98:	220c      	movs	r2, #12
 800ad9a:	5ea5      	ldrsh	r5, [r4, r2]
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	d11a      	bne.n	800add6 <__sfp+0x6a>
 800ada0:	0020      	movs	r0, r4
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <__sfp+0x8c>)
 800ada4:	3058      	adds	r0, #88	; 0x58
 800ada6:	60e3      	str	r3, [r4, #12]
 800ada8:	6665      	str	r5, [r4, #100]	; 0x64
 800adaa:	f000 f86b 	bl	800ae84 <__retarget_lock_init_recursive>
 800adae:	f7ff ff8d 	bl	800accc <__sfp_lock_release>
 800adb2:	0020      	movs	r0, r4
 800adb4:	2208      	movs	r2, #8
 800adb6:	0029      	movs	r1, r5
 800adb8:	6025      	str	r5, [r4, #0]
 800adba:	60a5      	str	r5, [r4, #8]
 800adbc:	6065      	str	r5, [r4, #4]
 800adbe:	6125      	str	r5, [r4, #16]
 800adc0:	6165      	str	r5, [r4, #20]
 800adc2:	61a5      	str	r5, [r4, #24]
 800adc4:	305c      	adds	r0, #92	; 0x5c
 800adc6:	f000 f869 	bl	800ae9c <memset>
 800adca:	6365      	str	r5, [r4, #52]	; 0x34
 800adcc:	63a5      	str	r5, [r4, #56]	; 0x38
 800adce:	64a5      	str	r5, [r4, #72]	; 0x48
 800add0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800add2:	0020      	movs	r0, r4
 800add4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add6:	3468      	adds	r4, #104	; 0x68
 800add8:	e7d7      	b.n	800ad8a <__sfp+0x1e>
 800adda:	2104      	movs	r1, #4
 800addc:	0038      	movs	r0, r7
 800adde:	f7ff ff57 	bl	800ac90 <__sfmoreglue>
 800ade2:	1e04      	subs	r4, r0, #0
 800ade4:	6030      	str	r0, [r6, #0]
 800ade6:	d1d5      	bne.n	800ad94 <__sfp+0x28>
 800ade8:	f7ff ff70 	bl	800accc <__sfp_lock_release>
 800adec:	230c      	movs	r3, #12
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	e7ef      	b.n	800add2 <__sfp+0x66>
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	0800e048 	.word	0x0800e048
 800adf8:	ffff0001 	.word	0xffff0001

0800adfc <_fwalk_reent>:
 800adfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adfe:	0004      	movs	r4, r0
 800ae00:	0006      	movs	r6, r0
 800ae02:	2700      	movs	r7, #0
 800ae04:	9101      	str	r1, [sp, #4]
 800ae06:	3448      	adds	r4, #72	; 0x48
 800ae08:	6863      	ldr	r3, [r4, #4]
 800ae0a:	68a5      	ldr	r5, [r4, #8]
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	d504      	bpl.n	800ae20 <_fwalk_reent+0x24>
 800ae16:	6824      	ldr	r4, [r4, #0]
 800ae18:	2c00      	cmp	r4, #0
 800ae1a:	d1f5      	bne.n	800ae08 <_fwalk_reent+0xc>
 800ae1c:	0038      	movs	r0, r7
 800ae1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae20:	89ab      	ldrh	r3, [r5, #12]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d908      	bls.n	800ae38 <_fwalk_reent+0x3c>
 800ae26:	220e      	movs	r2, #14
 800ae28:	5eab      	ldrsh	r3, [r5, r2]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	d004      	beq.n	800ae38 <_fwalk_reent+0x3c>
 800ae2e:	0029      	movs	r1, r5
 800ae30:	0030      	movs	r0, r6
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	4798      	blx	r3
 800ae36:	4307      	orrs	r7, r0
 800ae38:	3568      	adds	r5, #104	; 0x68
 800ae3a:	e7e8      	b.n	800ae0e <_fwalk_reent+0x12>

0800ae3c <__libc_init_array>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	2600      	movs	r6, #0
 800ae40:	4d0c      	ldr	r5, [pc, #48]	; (800ae74 <__libc_init_array+0x38>)
 800ae42:	4c0d      	ldr	r4, [pc, #52]	; (800ae78 <__libc_init_array+0x3c>)
 800ae44:	1b64      	subs	r4, r4, r5
 800ae46:	10a4      	asrs	r4, r4, #2
 800ae48:	42a6      	cmp	r6, r4
 800ae4a:	d109      	bne.n	800ae60 <__libc_init_array+0x24>
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	f002 ff2d 	bl	800dcac <_init>
 800ae52:	4d0a      	ldr	r5, [pc, #40]	; (800ae7c <__libc_init_array+0x40>)
 800ae54:	4c0a      	ldr	r4, [pc, #40]	; (800ae80 <__libc_init_array+0x44>)
 800ae56:	1b64      	subs	r4, r4, r5
 800ae58:	10a4      	asrs	r4, r4, #2
 800ae5a:	42a6      	cmp	r6, r4
 800ae5c:	d105      	bne.n	800ae6a <__libc_init_array+0x2e>
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	00b3      	lsls	r3, r6, #2
 800ae62:	58eb      	ldr	r3, [r5, r3]
 800ae64:	4798      	blx	r3
 800ae66:	3601      	adds	r6, #1
 800ae68:	e7ee      	b.n	800ae48 <__libc_init_array+0xc>
 800ae6a:	00b3      	lsls	r3, r6, #2
 800ae6c:	58eb      	ldr	r3, [r5, r3]
 800ae6e:	4798      	blx	r3
 800ae70:	3601      	adds	r6, #1
 800ae72:	e7f2      	b.n	800ae5a <__libc_init_array+0x1e>
 800ae74:	0800e3cc 	.word	0x0800e3cc
 800ae78:	0800e3cc 	.word	0x0800e3cc
 800ae7c:	0800e3cc 	.word	0x0800e3cc
 800ae80:	0800e3d0 	.word	0x0800e3d0

0800ae84 <__retarget_lock_init_recursive>:
 800ae84:	4770      	bx	lr

0800ae86 <__retarget_lock_acquire_recursive>:
 800ae86:	4770      	bx	lr

0800ae88 <__retarget_lock_release_recursive>:
 800ae88:	4770      	bx	lr

0800ae8a <memcpy>:
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d100      	bne.n	800ae94 <memcpy+0xa>
 800ae92:	bd10      	pop	{r4, pc}
 800ae94:	5ccc      	ldrb	r4, [r1, r3]
 800ae96:	54c4      	strb	r4, [r0, r3]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	e7f8      	b.n	800ae8e <memcpy+0x4>

0800ae9c <memset>:
 800ae9c:	0003      	movs	r3, r0
 800ae9e:	1882      	adds	r2, r0, r2
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d100      	bne.n	800aea6 <memset+0xa>
 800aea4:	4770      	bx	lr
 800aea6:	7019      	strb	r1, [r3, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	e7f9      	b.n	800aea0 <memset+0x4>

0800aeac <sbrk_aligned>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	4e0f      	ldr	r6, [pc, #60]	; (800aeec <sbrk_aligned+0x40>)
 800aeb0:	000d      	movs	r5, r1
 800aeb2:	6831      	ldr	r1, [r6, #0]
 800aeb4:	0004      	movs	r4, r0
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	d102      	bne.n	800aec0 <sbrk_aligned+0x14>
 800aeba:	f000 fd71 	bl	800b9a0 <_sbrk_r>
 800aebe:	6030      	str	r0, [r6, #0]
 800aec0:	0029      	movs	r1, r5
 800aec2:	0020      	movs	r0, r4
 800aec4:	f000 fd6c 	bl	800b9a0 <_sbrk_r>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d00a      	beq.n	800aee2 <sbrk_aligned+0x36>
 800aecc:	2303      	movs	r3, #3
 800aece:	1cc5      	adds	r5, r0, #3
 800aed0:	439d      	bics	r5, r3
 800aed2:	42a8      	cmp	r0, r5
 800aed4:	d007      	beq.n	800aee6 <sbrk_aligned+0x3a>
 800aed6:	1a29      	subs	r1, r5, r0
 800aed8:	0020      	movs	r0, r4
 800aeda:	f000 fd61 	bl	800b9a0 <_sbrk_r>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d101      	bne.n	800aee6 <sbrk_aligned+0x3a>
 800aee2:	2501      	movs	r5, #1
 800aee4:	426d      	negs	r5, r5
 800aee6:	0028      	movs	r0, r5
 800aee8:	bd70      	pop	{r4, r5, r6, pc}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	20001e30 	.word	0x20001e30

0800aef0 <_malloc_r>:
 800aef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef2:	2203      	movs	r2, #3
 800aef4:	1ccb      	adds	r3, r1, #3
 800aef6:	4393      	bics	r3, r2
 800aef8:	3308      	adds	r3, #8
 800aefa:	0006      	movs	r6, r0
 800aefc:	001f      	movs	r7, r3
 800aefe:	2b0c      	cmp	r3, #12
 800af00:	d232      	bcs.n	800af68 <_malloc_r+0x78>
 800af02:	270c      	movs	r7, #12
 800af04:	42b9      	cmp	r1, r7
 800af06:	d831      	bhi.n	800af6c <_malloc_r+0x7c>
 800af08:	0030      	movs	r0, r6
 800af0a:	f001 fd8d 	bl	800ca28 <__malloc_lock>
 800af0e:	4d32      	ldr	r5, [pc, #200]	; (800afd8 <_malloc_r+0xe8>)
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	001c      	movs	r4, r3
 800af14:	2c00      	cmp	r4, #0
 800af16:	d12e      	bne.n	800af76 <_malloc_r+0x86>
 800af18:	0039      	movs	r1, r7
 800af1a:	0030      	movs	r0, r6
 800af1c:	f7ff ffc6 	bl	800aeac <sbrk_aligned>
 800af20:	0004      	movs	r4, r0
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d11e      	bne.n	800af64 <_malloc_r+0x74>
 800af26:	682c      	ldr	r4, [r5, #0]
 800af28:	0025      	movs	r5, r4
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	d14a      	bne.n	800afc4 <_malloc_r+0xd4>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0029      	movs	r1, r5
 800af32:	18e3      	adds	r3, r4, r3
 800af34:	0030      	movs	r0, r6
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f000 fd32 	bl	800b9a0 <_sbrk_r>
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	4283      	cmp	r3, r0
 800af40:	d143      	bne.n	800afca <_malloc_r+0xda>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	3703      	adds	r7, #3
 800af46:	1aff      	subs	r7, r7, r3
 800af48:	2303      	movs	r3, #3
 800af4a:	439f      	bics	r7, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	2f0c      	cmp	r7, #12
 800af50:	d200      	bcs.n	800af54 <_malloc_r+0x64>
 800af52:	270c      	movs	r7, #12
 800af54:	0039      	movs	r1, r7
 800af56:	0030      	movs	r0, r6
 800af58:	f7ff ffa8 	bl	800aeac <sbrk_aligned>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d034      	beq.n	800afca <_malloc_r+0xda>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	19df      	adds	r7, r3, r7
 800af64:	6027      	str	r7, [r4, #0]
 800af66:	e013      	b.n	800af90 <_malloc_r+0xa0>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dacb      	bge.n	800af04 <_malloc_r+0x14>
 800af6c:	230c      	movs	r3, #12
 800af6e:	2500      	movs	r5, #0
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	0028      	movs	r0, r5
 800af74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	1bd1      	subs	r1, r2, r7
 800af7a:	d420      	bmi.n	800afbe <_malloc_r+0xce>
 800af7c:	290b      	cmp	r1, #11
 800af7e:	d917      	bls.n	800afb0 <_malloc_r+0xc0>
 800af80:	19e2      	adds	r2, r4, r7
 800af82:	6027      	str	r7, [r4, #0]
 800af84:	42a3      	cmp	r3, r4
 800af86:	d111      	bne.n	800afac <_malloc_r+0xbc>
 800af88:	602a      	str	r2, [r5, #0]
 800af8a:	6863      	ldr	r3, [r4, #4]
 800af8c:	6011      	str	r1, [r2, #0]
 800af8e:	6053      	str	r3, [r2, #4]
 800af90:	0030      	movs	r0, r6
 800af92:	0025      	movs	r5, r4
 800af94:	f001 fd50 	bl	800ca38 <__malloc_unlock>
 800af98:	2207      	movs	r2, #7
 800af9a:	350b      	adds	r5, #11
 800af9c:	1d23      	adds	r3, r4, #4
 800af9e:	4395      	bics	r5, r2
 800afa0:	1aea      	subs	r2, r5, r3
 800afa2:	429d      	cmp	r5, r3
 800afa4:	d0e5      	beq.n	800af72 <_malloc_r+0x82>
 800afa6:	1b5b      	subs	r3, r3, r5
 800afa8:	50a3      	str	r3, [r4, r2]
 800afaa:	e7e2      	b.n	800af72 <_malloc_r+0x82>
 800afac:	605a      	str	r2, [r3, #4]
 800afae:	e7ec      	b.n	800af8a <_malloc_r+0x9a>
 800afb0:	6862      	ldr	r2, [r4, #4]
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	d101      	bne.n	800afba <_malloc_r+0xca>
 800afb6:	602a      	str	r2, [r5, #0]
 800afb8:	e7ea      	b.n	800af90 <_malloc_r+0xa0>
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	e7e8      	b.n	800af90 <_malloc_r+0xa0>
 800afbe:	0023      	movs	r3, r4
 800afc0:	6864      	ldr	r4, [r4, #4]
 800afc2:	e7a7      	b.n	800af14 <_malloc_r+0x24>
 800afc4:	002c      	movs	r4, r5
 800afc6:	686d      	ldr	r5, [r5, #4]
 800afc8:	e7af      	b.n	800af2a <_malloc_r+0x3a>
 800afca:	230c      	movs	r3, #12
 800afcc:	0030      	movs	r0, r6
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	f001 fd32 	bl	800ca38 <__malloc_unlock>
 800afd4:	e7cd      	b.n	800af72 <_malloc_r+0x82>
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	20001e2c 	.word	0x20001e2c

0800afdc <__cvt>:
 800afdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afde:	001e      	movs	r6, r3
 800afe0:	2300      	movs	r3, #0
 800afe2:	0014      	movs	r4, r2
 800afe4:	b08b      	sub	sp, #44	; 0x2c
 800afe6:	429e      	cmp	r6, r3
 800afe8:	da04      	bge.n	800aff4 <__cvt+0x18>
 800afea:	2180      	movs	r1, #128	; 0x80
 800afec:	0609      	lsls	r1, r1, #24
 800afee:	1873      	adds	r3, r6, r1
 800aff0:	001e      	movs	r6, r3
 800aff2:	232d      	movs	r3, #45	; 0x2d
 800aff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aff6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aff8:	7013      	strb	r3, [r2, #0]
 800affa:	2320      	movs	r3, #32
 800affc:	2203      	movs	r2, #3
 800affe:	439f      	bics	r7, r3
 800b000:	2f46      	cmp	r7, #70	; 0x46
 800b002:	d007      	beq.n	800b014 <__cvt+0x38>
 800b004:	003b      	movs	r3, r7
 800b006:	3b45      	subs	r3, #69	; 0x45
 800b008:	4259      	negs	r1, r3
 800b00a:	414b      	adcs	r3, r1
 800b00c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b00e:	3a01      	subs	r2, #1
 800b010:	18cb      	adds	r3, r1, r3
 800b012:	9310      	str	r3, [sp, #64]	; 0x40
 800b014:	ab09      	add	r3, sp, #36	; 0x24
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	ab08      	add	r3, sp, #32
 800b01a:	9303      	str	r3, [sp, #12]
 800b01c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b01e:	9200      	str	r2, [sp, #0]
 800b020:	9302      	str	r3, [sp, #8]
 800b022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b024:	0022      	movs	r2, r4
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	0033      	movs	r3, r6
 800b02a:	f000 fde9 	bl	800bc00 <_dtoa_r>
 800b02e:	0005      	movs	r5, r0
 800b030:	2f47      	cmp	r7, #71	; 0x47
 800b032:	d102      	bne.n	800b03a <__cvt+0x5e>
 800b034:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b036:	07db      	lsls	r3, r3, #31
 800b038:	d528      	bpl.n	800b08c <__cvt+0xb0>
 800b03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b03c:	18eb      	adds	r3, r5, r3
 800b03e:	9307      	str	r3, [sp, #28]
 800b040:	2f46      	cmp	r7, #70	; 0x46
 800b042:	d114      	bne.n	800b06e <__cvt+0x92>
 800b044:	782b      	ldrb	r3, [r5, #0]
 800b046:	2b30      	cmp	r3, #48	; 0x30
 800b048:	d10c      	bne.n	800b064 <__cvt+0x88>
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	0020      	movs	r0, r4
 800b050:	0031      	movs	r1, r6
 800b052:	f7f5 f9fb 	bl	800044c <__aeabi_dcmpeq>
 800b056:	2800      	cmp	r0, #0
 800b058:	d104      	bne.n	800b064 <__cvt+0x88>
 800b05a:	2301      	movs	r3, #1
 800b05c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b05e:	1a9b      	subs	r3, r3, r2
 800b060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b066:	9a07      	ldr	r2, [sp, #28]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	18d3      	adds	r3, r2, r3
 800b06c:	9307      	str	r3, [sp, #28]
 800b06e:	2200      	movs	r2, #0
 800b070:	2300      	movs	r3, #0
 800b072:	0020      	movs	r0, r4
 800b074:	0031      	movs	r1, r6
 800b076:	f7f5 f9e9 	bl	800044c <__aeabi_dcmpeq>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d001      	beq.n	800b082 <__cvt+0xa6>
 800b07e:	9b07      	ldr	r3, [sp, #28]
 800b080:	9309      	str	r3, [sp, #36]	; 0x24
 800b082:	2230      	movs	r2, #48	; 0x30
 800b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b086:	9907      	ldr	r1, [sp, #28]
 800b088:	428b      	cmp	r3, r1
 800b08a:	d306      	bcc.n	800b09a <__cvt+0xbe>
 800b08c:	0028      	movs	r0, r5
 800b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b090:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b092:	1b5b      	subs	r3, r3, r5
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	b00b      	add	sp, #44	; 0x2c
 800b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09a:	1c59      	adds	r1, r3, #1
 800b09c:	9109      	str	r1, [sp, #36]	; 0x24
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	e7f0      	b.n	800b084 <__cvt+0xa8>

0800b0a2 <__exponent>:
 800b0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a4:	1c83      	adds	r3, r0, #2
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	0005      	movs	r5, r0
 800b0ac:	000c      	movs	r4, r1
 800b0ae:	232b      	movs	r3, #43	; 0x2b
 800b0b0:	7002      	strb	r2, [r0, #0]
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	da01      	bge.n	800b0ba <__exponent+0x18>
 800b0b6:	424c      	negs	r4, r1
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	706b      	strb	r3, [r5, #1]
 800b0bc:	2c09      	cmp	r4, #9
 800b0be:	dd31      	ble.n	800b124 <__exponent+0x82>
 800b0c0:	270a      	movs	r7, #10
 800b0c2:	ab04      	add	r3, sp, #16
 800b0c4:	1dde      	adds	r6, r3, #7
 800b0c6:	0020      	movs	r0, r4
 800b0c8:	0039      	movs	r1, r7
 800b0ca:	9601      	str	r6, [sp, #4]
 800b0cc:	f7f5 f9a8 	bl	8000420 <__aeabi_idivmod>
 800b0d0:	3e01      	subs	r6, #1
 800b0d2:	3130      	adds	r1, #48	; 0x30
 800b0d4:	0020      	movs	r0, r4
 800b0d6:	7031      	strb	r1, [r6, #0]
 800b0d8:	0039      	movs	r1, r7
 800b0da:	9402      	str	r4, [sp, #8]
 800b0dc:	f7f5 f8ba 	bl	8000254 <__divsi3>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	0004      	movs	r4, r0
 800b0e4:	2b63      	cmp	r3, #99	; 0x63
 800b0e6:	dcee      	bgt.n	800b0c6 <__exponent+0x24>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	3430      	adds	r4, #48	; 0x30
 800b0ec:	1e9a      	subs	r2, r3, #2
 800b0ee:	0013      	movs	r3, r2
 800b0f0:	9903      	ldr	r1, [sp, #12]
 800b0f2:	7014      	strb	r4, [r2, #0]
 800b0f4:	a804      	add	r0, sp, #16
 800b0f6:	3007      	adds	r0, #7
 800b0f8:	4298      	cmp	r0, r3
 800b0fa:	d80e      	bhi.n	800b11a <__exponent+0x78>
 800b0fc:	ab04      	add	r3, sp, #16
 800b0fe:	3307      	adds	r3, #7
 800b100:	2000      	movs	r0, #0
 800b102:	429a      	cmp	r2, r3
 800b104:	d804      	bhi.n	800b110 <__exponent+0x6e>
 800b106:	ab04      	add	r3, sp, #16
 800b108:	3009      	adds	r0, #9
 800b10a:	18c0      	adds	r0, r0, r3
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	1ac0      	subs	r0, r0, r3
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	1818      	adds	r0, r3, r0
 800b114:	1b40      	subs	r0, r0, r5
 800b116:	b007      	add	sp, #28
 800b118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b11a:	7818      	ldrb	r0, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	7008      	strb	r0, [r1, #0]
 800b120:	3101      	adds	r1, #1
 800b122:	e7e7      	b.n	800b0f4 <__exponent+0x52>
 800b124:	2330      	movs	r3, #48	; 0x30
 800b126:	18e4      	adds	r4, r4, r3
 800b128:	70ab      	strb	r3, [r5, #2]
 800b12a:	1d28      	adds	r0, r5, #4
 800b12c:	70ec      	strb	r4, [r5, #3]
 800b12e:	e7f1      	b.n	800b114 <__exponent+0x72>

0800b130 <_printf_float>:
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	b095      	sub	sp, #84	; 0x54
 800b134:	000c      	movs	r4, r1
 800b136:	9209      	str	r2, [sp, #36]	; 0x24
 800b138:	001e      	movs	r6, r3
 800b13a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b13c:	0007      	movs	r7, r0
 800b13e:	f001 fc45 	bl	800c9cc <_localeconv_r>
 800b142:	6803      	ldr	r3, [r0, #0]
 800b144:	0018      	movs	r0, r3
 800b146:	930c      	str	r3, [sp, #48]	; 0x30
 800b148:	f7f4 ffde 	bl	8000108 <strlen>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9312      	str	r3, [sp, #72]	; 0x48
 800b150:	7e23      	ldrb	r3, [r4, #24]
 800b152:	2207      	movs	r2, #7
 800b154:	930a      	str	r3, [sp, #40]	; 0x28
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	900e      	str	r0, [sp, #56]	; 0x38
 800b15a:	930d      	str	r3, [sp, #52]	; 0x34
 800b15c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	05c9      	lsls	r1, r1, #23
 800b162:	d547      	bpl.n	800b1f4 <_printf_float+0xc4>
 800b164:	189b      	adds	r3, r3, r2
 800b166:	4393      	bics	r3, r2
 800b168:	001a      	movs	r2, r3
 800b16a:	3208      	adds	r2, #8
 800b16c:	602a      	str	r2, [r5, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	64a2      	str	r2, [r4, #72]	; 0x48
 800b174:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b176:	2201      	movs	r2, #1
 800b178:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b17a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b17c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b17e:	006b      	lsls	r3, r5, #1
 800b180:	085b      	lsrs	r3, r3, #1
 800b182:	930f      	str	r3, [sp, #60]	; 0x3c
 800b184:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b186:	4ba7      	ldr	r3, [pc, #668]	; (800b424 <_printf_float+0x2f4>)
 800b188:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b18a:	4252      	negs	r2, r2
 800b18c:	f7f7 f956 	bl	800243c <__aeabi_dcmpun>
 800b190:	2800      	cmp	r0, #0
 800b192:	d131      	bne.n	800b1f8 <_printf_float+0xc8>
 800b194:	2201      	movs	r2, #1
 800b196:	4ba3      	ldr	r3, [pc, #652]	; (800b424 <_printf_float+0x2f4>)
 800b198:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b19a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b19c:	4252      	negs	r2, r2
 800b19e:	f7f5 f965 	bl	800046c <__aeabi_dcmple>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d128      	bne.n	800b1f8 <_printf_float+0xc8>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	0029      	movs	r1, r5
 800b1ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b1ae:	f7f5 f953 	bl	8000458 <__aeabi_dcmplt>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d003      	beq.n	800b1be <_printf_float+0x8e>
 800b1b6:	0023      	movs	r3, r4
 800b1b8:	222d      	movs	r2, #45	; 0x2d
 800b1ba:	3343      	adds	r3, #67	; 0x43
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c0:	4d99      	ldr	r5, [pc, #612]	; (800b428 <_printf_float+0x2f8>)
 800b1c2:	2b47      	cmp	r3, #71	; 0x47
 800b1c4:	d900      	bls.n	800b1c8 <_printf_float+0x98>
 800b1c6:	4d99      	ldr	r5, [pc, #612]	; (800b42c <_printf_float+0x2fc>)
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	439a      	bics	r2, r3
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6022      	str	r2, [r4, #0]
 800b1d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1da:	0021      	movs	r1, r4
 800b1dc:	0038      	movs	r0, r7
 800b1de:	9600      	str	r6, [sp, #0]
 800b1e0:	aa13      	add	r2, sp, #76	; 0x4c
 800b1e2:	f000 f9e7 	bl	800b5b4 <_printf_common>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d000      	beq.n	800b1ec <_printf_float+0xbc>
 800b1ea:	e0a2      	b.n	800b332 <_printf_float+0x202>
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	4240      	negs	r0, r0
 800b1f0:	b015      	add	sp, #84	; 0x54
 800b1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f4:	3307      	adds	r3, #7
 800b1f6:	e7b6      	b.n	800b166 <_printf_float+0x36>
 800b1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1fa:	002b      	movs	r3, r5
 800b1fc:	0010      	movs	r0, r2
 800b1fe:	0029      	movs	r1, r5
 800b200:	f7f7 f91c 	bl	800243c <__aeabi_dcmpun>
 800b204:	2800      	cmp	r0, #0
 800b206:	d00b      	beq.n	800b220 <_printf_float+0xf0>
 800b208:	2d00      	cmp	r5, #0
 800b20a:	da03      	bge.n	800b214 <_printf_float+0xe4>
 800b20c:	0023      	movs	r3, r4
 800b20e:	222d      	movs	r2, #45	; 0x2d
 800b210:	3343      	adds	r3, #67	; 0x43
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b216:	4d86      	ldr	r5, [pc, #536]	; (800b430 <_printf_float+0x300>)
 800b218:	2b47      	cmp	r3, #71	; 0x47
 800b21a:	d9d5      	bls.n	800b1c8 <_printf_float+0x98>
 800b21c:	4d85      	ldr	r5, [pc, #532]	; (800b434 <_printf_float+0x304>)
 800b21e:	e7d3      	b.n	800b1c8 <_printf_float+0x98>
 800b220:	2220      	movs	r2, #32
 800b222:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b224:	6863      	ldr	r3, [r4, #4]
 800b226:	4391      	bics	r1, r2
 800b228:	910f      	str	r1, [sp, #60]	; 0x3c
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	d149      	bne.n	800b2c2 <_printf_float+0x192>
 800b22e:	3307      	adds	r3, #7
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	2380      	movs	r3, #128	; 0x80
 800b234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	4313      	orrs	r3, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	9206      	str	r2, [sp, #24]
 800b23e:	aa12      	add	r2, sp, #72	; 0x48
 800b240:	9205      	str	r2, [sp, #20]
 800b242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b244:	a908      	add	r1, sp, #32
 800b246:	9204      	str	r2, [sp, #16]
 800b248:	aa11      	add	r2, sp, #68	; 0x44
 800b24a:	9203      	str	r2, [sp, #12]
 800b24c:	2223      	movs	r2, #35	; 0x23
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	6863      	ldr	r3, [r4, #4]
 800b254:	1852      	adds	r2, r2, r1
 800b256:	9202      	str	r2, [sp, #8]
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	0038      	movs	r0, r7
 800b25c:	002b      	movs	r3, r5
 800b25e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b260:	f7ff febc 	bl	800afdc <__cvt>
 800b264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b266:	0005      	movs	r5, r0
 800b268:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b26a:	2b47      	cmp	r3, #71	; 0x47
 800b26c:	d108      	bne.n	800b280 <_printf_float+0x150>
 800b26e:	1ccb      	adds	r3, r1, #3
 800b270:	db02      	blt.n	800b278 <_printf_float+0x148>
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	4299      	cmp	r1, r3
 800b276:	dd48      	ble.n	800b30a <_printf_float+0x1da>
 800b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27a:	3b02      	subs	r3, #2
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	930a      	str	r3, [sp, #40]	; 0x28
 800b280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b282:	2b65      	cmp	r3, #101	; 0x65
 800b284:	d824      	bhi.n	800b2d0 <_printf_float+0x1a0>
 800b286:	0020      	movs	r0, r4
 800b288:	001a      	movs	r2, r3
 800b28a:	3901      	subs	r1, #1
 800b28c:	3050      	adds	r0, #80	; 0x50
 800b28e:	9111      	str	r1, [sp, #68]	; 0x44
 800b290:	f7ff ff07 	bl	800b0a2 <__exponent>
 800b294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b296:	900b      	str	r0, [sp, #44]	; 0x2c
 800b298:	1813      	adds	r3, r2, r0
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	2a01      	cmp	r2, #1
 800b29e:	dc02      	bgt.n	800b2a6 <_printf_float+0x176>
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	07d2      	lsls	r2, r2, #31
 800b2a4:	d501      	bpl.n	800b2aa <_printf_float+0x17a>
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	2323      	movs	r3, #35	; 0x23
 800b2ac:	aa08      	add	r2, sp, #32
 800b2ae:	189b      	adds	r3, r3, r2
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d100      	bne.n	800b2b8 <_printf_float+0x188>
 800b2b6:	e78f      	b.n	800b1d8 <_printf_float+0xa8>
 800b2b8:	0023      	movs	r3, r4
 800b2ba:	222d      	movs	r2, #45	; 0x2d
 800b2bc:	3343      	adds	r3, #67	; 0x43
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e78a      	b.n	800b1d8 <_printf_float+0xa8>
 800b2c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2c4:	2a47      	cmp	r2, #71	; 0x47
 800b2c6:	d1b4      	bne.n	800b232 <_printf_float+0x102>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1b2      	bne.n	800b232 <_printf_float+0x102>
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	e7af      	b.n	800b230 <_printf_float+0x100>
 800b2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d2:	2b66      	cmp	r3, #102	; 0x66
 800b2d4:	d11b      	bne.n	800b30e <_printf_float+0x1de>
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	dd0d      	ble.n	800b2f8 <_printf_float+0x1c8>
 800b2dc:	6121      	str	r1, [r4, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d102      	bne.n	800b2e8 <_printf_float+0x1b8>
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	07d2      	lsls	r2, r2, #31
 800b2e6:	d502      	bpl.n	800b2ee <_printf_float+0x1be>
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	1859      	adds	r1, r3, r1
 800b2ec:	6121      	str	r1, [r4, #16]
 800b2ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2f0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f6:	e7d8      	b.n	800b2aa <_printf_float+0x17a>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d103      	bne.n	800b304 <_printf_float+0x1d4>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	6821      	ldr	r1, [r4, #0]
 800b300:	4211      	tst	r1, r2
 800b302:	d000      	beq.n	800b306 <_printf_float+0x1d6>
 800b304:	1c9a      	adds	r2, r3, #2
 800b306:	6122      	str	r2, [r4, #16]
 800b308:	e7f1      	b.n	800b2ee <_printf_float+0x1be>
 800b30a:	2367      	movs	r3, #103	; 0x67
 800b30c:	930a      	str	r3, [sp, #40]	; 0x28
 800b30e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b312:	4293      	cmp	r3, r2
 800b314:	db06      	blt.n	800b324 <_printf_float+0x1f4>
 800b316:	6822      	ldr	r2, [r4, #0]
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	07d2      	lsls	r2, r2, #31
 800b31c:	d5e7      	bpl.n	800b2ee <_printf_float+0x1be>
 800b31e:	3301      	adds	r3, #1
 800b320:	6123      	str	r3, [r4, #16]
 800b322:	e7e4      	b.n	800b2ee <_printf_float+0x1be>
 800b324:	2101      	movs	r1, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	dc01      	bgt.n	800b32e <_printf_float+0x1fe>
 800b32a:	1849      	adds	r1, r1, r1
 800b32c:	1ac9      	subs	r1, r1, r3
 800b32e:	1852      	adds	r2, r2, r1
 800b330:	e7e9      	b.n	800b306 <_printf_float+0x1d6>
 800b332:	6822      	ldr	r2, [r4, #0]
 800b334:	0553      	lsls	r3, r2, #21
 800b336:	d407      	bmi.n	800b348 <_printf_float+0x218>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	002a      	movs	r2, r5
 800b33c:	0038      	movs	r0, r7
 800b33e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b340:	47b0      	blx	r6
 800b342:	1c43      	adds	r3, r0, #1
 800b344:	d128      	bne.n	800b398 <_printf_float+0x268>
 800b346:	e751      	b.n	800b1ec <_printf_float+0xbc>
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	2b65      	cmp	r3, #101	; 0x65
 800b34c:	d800      	bhi.n	800b350 <_printf_float+0x220>
 800b34e:	e0e1      	b.n	800b514 <_printf_float+0x3e4>
 800b350:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b352:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b354:	2200      	movs	r2, #0
 800b356:	2300      	movs	r3, #0
 800b358:	f7f5 f878 	bl	800044c <__aeabi_dcmpeq>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d031      	beq.n	800b3c4 <_printf_float+0x294>
 800b360:	2301      	movs	r3, #1
 800b362:	0038      	movs	r0, r7
 800b364:	4a34      	ldr	r2, [pc, #208]	; (800b438 <_printf_float+0x308>)
 800b366:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b368:	47b0      	blx	r6
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d100      	bne.n	800b370 <_printf_float+0x240>
 800b36e:	e73d      	b.n	800b1ec <_printf_float+0xbc>
 800b370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b372:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b374:	4293      	cmp	r3, r2
 800b376:	db02      	blt.n	800b37e <_printf_float+0x24e>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	07db      	lsls	r3, r3, #31
 800b37c:	d50c      	bpl.n	800b398 <_printf_float+0x268>
 800b37e:	0038      	movs	r0, r7
 800b380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b386:	47b0      	blx	r6
 800b388:	2500      	movs	r5, #0
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d100      	bne.n	800b390 <_printf_float+0x260>
 800b38e:	e72d      	b.n	800b1ec <_printf_float+0xbc>
 800b390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b392:	3b01      	subs	r3, #1
 800b394:	42ab      	cmp	r3, r5
 800b396:	dc0a      	bgt.n	800b3ae <_printf_float+0x27e>
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	079b      	lsls	r3, r3, #30
 800b39c:	d500      	bpl.n	800b3a0 <_printf_float+0x270>
 800b39e:	e106      	b.n	800b5ae <_printf_float+0x47e>
 800b3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3a2:	68e0      	ldr	r0, [r4, #12]
 800b3a4:	4298      	cmp	r0, r3
 800b3a6:	db00      	blt.n	800b3aa <_printf_float+0x27a>
 800b3a8:	e722      	b.n	800b1f0 <_printf_float+0xc0>
 800b3aa:	0018      	movs	r0, r3
 800b3ac:	e720      	b.n	800b1f0 <_printf_float+0xc0>
 800b3ae:	0022      	movs	r2, r4
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	0038      	movs	r0, r7
 800b3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3b6:	321a      	adds	r2, #26
 800b3b8:	47b0      	blx	r6
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	d100      	bne.n	800b3c0 <_printf_float+0x290>
 800b3be:	e715      	b.n	800b1ec <_printf_float+0xbc>
 800b3c0:	3501      	adds	r5, #1
 800b3c2:	e7e5      	b.n	800b390 <_printf_float+0x260>
 800b3c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	dc38      	bgt.n	800b43c <_printf_float+0x30c>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	0038      	movs	r0, r7
 800b3ce:	4a1a      	ldr	r2, [pc, #104]	; (800b438 <_printf_float+0x308>)
 800b3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3d2:	47b0      	blx	r6
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d100      	bne.n	800b3da <_printf_float+0x2aa>
 800b3d8:	e708      	b.n	800b1ec <_printf_float+0xbc>
 800b3da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	d102      	bne.n	800b3e8 <_printf_float+0x2b8>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	07db      	lsls	r3, r3, #31
 800b3e6:	d5d7      	bpl.n	800b398 <_printf_float+0x268>
 800b3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ea:	0038      	movs	r0, r7
 800b3ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f0:	47b0      	blx	r6
 800b3f2:	1c43      	adds	r3, r0, #1
 800b3f4:	d100      	bne.n	800b3f8 <_printf_float+0x2c8>
 800b3f6:	e6f9      	b.n	800b1ec <_printf_float+0xbc>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b3fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b400:	425b      	negs	r3, r3
 800b402:	4293      	cmp	r3, r2
 800b404:	dc01      	bgt.n	800b40a <_printf_float+0x2da>
 800b406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b408:	e797      	b.n	800b33a <_printf_float+0x20a>
 800b40a:	0022      	movs	r2, r4
 800b40c:	2301      	movs	r3, #1
 800b40e:	0038      	movs	r0, r7
 800b410:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b412:	321a      	adds	r2, #26
 800b414:	47b0      	blx	r6
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d100      	bne.n	800b41c <_printf_float+0x2ec>
 800b41a:	e6e7      	b.n	800b1ec <_printf_float+0xbc>
 800b41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41e:	3301      	adds	r3, #1
 800b420:	e7eb      	b.n	800b3fa <_printf_float+0x2ca>
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	7fefffff 	.word	0x7fefffff
 800b428:	0800e04c 	.word	0x0800e04c
 800b42c:	0800e050 	.word	0x0800e050
 800b430:	0800e054 	.word	0x0800e054
 800b434:	0800e058 	.word	0x0800e058
 800b438:	0800e05c 	.word	0x0800e05c
 800b43c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b43e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b440:	920a      	str	r2, [sp, #40]	; 0x28
 800b442:	429a      	cmp	r2, r3
 800b444:	dd00      	ble.n	800b448 <_printf_float+0x318>
 800b446:	930a      	str	r3, [sp, #40]	; 0x28
 800b448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dc3c      	bgt.n	800b4c8 <_printf_float+0x398>
 800b44e:	2300      	movs	r3, #0
 800b450:	930d      	str	r3, [sp, #52]	; 0x34
 800b452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b454:	43db      	mvns	r3, r3
 800b456:	17db      	asrs	r3, r3, #31
 800b458:	930f      	str	r3, [sp, #60]	; 0x3c
 800b45a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b45c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b45e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	4013      	ands	r3, r2
 800b464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b46a:	4293      	cmp	r3, r2
 800b46c:	dc34      	bgt.n	800b4d8 <_printf_float+0x3a8>
 800b46e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b472:	4293      	cmp	r3, r2
 800b474:	db3d      	blt.n	800b4f2 <_printf_float+0x3c2>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	07db      	lsls	r3, r3, #31
 800b47a:	d43a      	bmi.n	800b4f2 <_printf_float+0x3c2>
 800b47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b480:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	1a52      	subs	r2, r2, r1
 800b486:	920a      	str	r2, [sp, #40]	; 0x28
 800b488:	429a      	cmp	r2, r3
 800b48a:	dd00      	ble.n	800b48e <_printf_float+0x35e>
 800b48c:	930a      	str	r3, [sp, #40]	; 0x28
 800b48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b490:	2b00      	cmp	r3, #0
 800b492:	dc36      	bgt.n	800b502 <_printf_float+0x3d2>
 800b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b496:	2500      	movs	r5, #0
 800b498:	43db      	mvns	r3, r3
 800b49a:	17db      	asrs	r3, r3, #31
 800b49c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b49e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4a8:	400a      	ands	r2, r1
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	42ab      	cmp	r3, r5
 800b4ae:	dc00      	bgt.n	800b4b2 <_printf_float+0x382>
 800b4b0:	e772      	b.n	800b398 <_printf_float+0x268>
 800b4b2:	0022      	movs	r2, r4
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	0038      	movs	r0, r7
 800b4b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ba:	321a      	adds	r2, #26
 800b4bc:	47b0      	blx	r6
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	d100      	bne.n	800b4c4 <_printf_float+0x394>
 800b4c2:	e693      	b.n	800b1ec <_printf_float+0xbc>
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	e7ea      	b.n	800b49e <_printf_float+0x36e>
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ca:	002a      	movs	r2, r5
 800b4cc:	0038      	movs	r0, r7
 800b4ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4d0:	47b0      	blx	r6
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d1bb      	bne.n	800b44e <_printf_float+0x31e>
 800b4d6:	e689      	b.n	800b1ec <_printf_float+0xbc>
 800b4d8:	0022      	movs	r2, r4
 800b4da:	2301      	movs	r3, #1
 800b4dc:	0038      	movs	r0, r7
 800b4de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4e0:	321a      	adds	r2, #26
 800b4e2:	47b0      	blx	r6
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d100      	bne.n	800b4ea <_printf_float+0x3ba>
 800b4e8:	e680      	b.n	800b1ec <_printf_float+0xbc>
 800b4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b4f0:	e7b3      	b.n	800b45a <_printf_float+0x32a>
 800b4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f4:	0038      	movs	r0, r7
 800b4f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4fa:	47b0      	blx	r6
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d1bd      	bne.n	800b47c <_printf_float+0x34c>
 800b500:	e674      	b.n	800b1ec <_printf_float+0xbc>
 800b502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b504:	0038      	movs	r0, r7
 800b506:	18ea      	adds	r2, r5, r3
 800b508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b50c:	47b0      	blx	r6
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d1c0      	bne.n	800b494 <_printf_float+0x364>
 800b512:	e66b      	b.n	800b1ec <_printf_float+0xbc>
 800b514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b516:	2b01      	cmp	r3, #1
 800b518:	dc02      	bgt.n	800b520 <_printf_float+0x3f0>
 800b51a:	2301      	movs	r3, #1
 800b51c:	421a      	tst	r2, r3
 800b51e:	d034      	beq.n	800b58a <_printf_float+0x45a>
 800b520:	2301      	movs	r3, #1
 800b522:	002a      	movs	r2, r5
 800b524:	0038      	movs	r0, r7
 800b526:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b528:	47b0      	blx	r6
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d100      	bne.n	800b530 <_printf_float+0x400>
 800b52e:	e65d      	b.n	800b1ec <_printf_float+0xbc>
 800b530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b532:	0038      	movs	r0, r7
 800b534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b536:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b538:	47b0      	blx	r6
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	d100      	bne.n	800b540 <_printf_float+0x410>
 800b53e:	e655      	b.n	800b1ec <_printf_float+0xbc>
 800b540:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b542:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b544:	2200      	movs	r2, #0
 800b546:	2300      	movs	r3, #0
 800b548:	f7f4 ff80 	bl	800044c <__aeabi_dcmpeq>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d11a      	bne.n	800b586 <_printf_float+0x456>
 800b550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b552:	1c6a      	adds	r2, r5, #1
 800b554:	3b01      	subs	r3, #1
 800b556:	0038      	movs	r0, r7
 800b558:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b55a:	47b0      	blx	r6
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d10e      	bne.n	800b57e <_printf_float+0x44e>
 800b560:	e644      	b.n	800b1ec <_printf_float+0xbc>
 800b562:	0022      	movs	r2, r4
 800b564:	2301      	movs	r3, #1
 800b566:	0038      	movs	r0, r7
 800b568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b56a:	321a      	adds	r2, #26
 800b56c:	47b0      	blx	r6
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d100      	bne.n	800b574 <_printf_float+0x444>
 800b572:	e63b      	b.n	800b1ec <_printf_float+0xbc>
 800b574:	3501      	adds	r5, #1
 800b576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b578:	3b01      	subs	r3, #1
 800b57a:	42ab      	cmp	r3, r5
 800b57c:	dcf1      	bgt.n	800b562 <_printf_float+0x432>
 800b57e:	0022      	movs	r2, r4
 800b580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b582:	3250      	adds	r2, #80	; 0x50
 800b584:	e6da      	b.n	800b33c <_printf_float+0x20c>
 800b586:	2500      	movs	r5, #0
 800b588:	e7f5      	b.n	800b576 <_printf_float+0x446>
 800b58a:	002a      	movs	r2, r5
 800b58c:	e7e3      	b.n	800b556 <_printf_float+0x426>
 800b58e:	0022      	movs	r2, r4
 800b590:	2301      	movs	r3, #1
 800b592:	0038      	movs	r0, r7
 800b594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b596:	3219      	adds	r2, #25
 800b598:	47b0      	blx	r6
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d100      	bne.n	800b5a0 <_printf_float+0x470>
 800b59e:	e625      	b.n	800b1ec <_printf_float+0xbc>
 800b5a0:	3501      	adds	r5, #1
 800b5a2:	68e3      	ldr	r3, [r4, #12]
 800b5a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b5a6:	1a9b      	subs	r3, r3, r2
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	dcf0      	bgt.n	800b58e <_printf_float+0x45e>
 800b5ac:	e6f8      	b.n	800b3a0 <_printf_float+0x270>
 800b5ae:	2500      	movs	r5, #0
 800b5b0:	e7f7      	b.n	800b5a2 <_printf_float+0x472>
 800b5b2:	46c0      	nop			; (mov r8, r8)

0800b5b4 <_printf_common>:
 800b5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b6:	0015      	movs	r5, r2
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	688a      	ldr	r2, [r1, #8]
 800b5bc:	690b      	ldr	r3, [r1, #16]
 800b5be:	000c      	movs	r4, r1
 800b5c0:	9000      	str	r0, [sp, #0]
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	da00      	bge.n	800b5c8 <_printf_common+0x14>
 800b5c6:	0013      	movs	r3, r2
 800b5c8:	0022      	movs	r2, r4
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	3243      	adds	r2, #67	; 0x43
 800b5ce:	7812      	ldrb	r2, [r2, #0]
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	d001      	beq.n	800b5d8 <_printf_common+0x24>
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	069b      	lsls	r3, r3, #26
 800b5dc:	d502      	bpl.n	800b5e4 <_printf_common+0x30>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	3302      	adds	r3, #2
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	6822      	ldr	r2, [r4, #0]
 800b5e6:	2306      	movs	r3, #6
 800b5e8:	0017      	movs	r7, r2
 800b5ea:	401f      	ands	r7, r3
 800b5ec:	421a      	tst	r2, r3
 800b5ee:	d027      	beq.n	800b640 <_printf_common+0x8c>
 800b5f0:	0023      	movs	r3, r4
 800b5f2:	3343      	adds	r3, #67	; 0x43
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	1e5a      	subs	r2, r3, #1
 800b5f8:	4193      	sbcs	r3, r2
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	0692      	lsls	r2, r2, #26
 800b5fe:	d430      	bmi.n	800b662 <_printf_common+0xae>
 800b600:	0022      	movs	r2, r4
 800b602:	9901      	ldr	r1, [sp, #4]
 800b604:	9800      	ldr	r0, [sp, #0]
 800b606:	9e08      	ldr	r6, [sp, #32]
 800b608:	3243      	adds	r2, #67	; 0x43
 800b60a:	47b0      	blx	r6
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d025      	beq.n	800b65c <_printf_common+0xa8>
 800b610:	2306      	movs	r3, #6
 800b612:	6820      	ldr	r0, [r4, #0]
 800b614:	682a      	ldr	r2, [r5, #0]
 800b616:	68e1      	ldr	r1, [r4, #12]
 800b618:	2500      	movs	r5, #0
 800b61a:	4003      	ands	r3, r0
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d103      	bne.n	800b628 <_printf_common+0x74>
 800b620:	1a8d      	subs	r5, r1, r2
 800b622:	43eb      	mvns	r3, r5
 800b624:	17db      	asrs	r3, r3, #31
 800b626:	401d      	ands	r5, r3
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	6922      	ldr	r2, [r4, #16]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	dd01      	ble.n	800b634 <_printf_common+0x80>
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	18ed      	adds	r5, r5, r3
 800b634:	2700      	movs	r7, #0
 800b636:	42bd      	cmp	r5, r7
 800b638:	d120      	bne.n	800b67c <_printf_common+0xc8>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e010      	b.n	800b660 <_printf_common+0xac>
 800b63e:	3701      	adds	r7, #1
 800b640:	68e3      	ldr	r3, [r4, #12]
 800b642:	682a      	ldr	r2, [r5, #0]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	42bb      	cmp	r3, r7
 800b648:	ddd2      	ble.n	800b5f0 <_printf_common+0x3c>
 800b64a:	0022      	movs	r2, r4
 800b64c:	2301      	movs	r3, #1
 800b64e:	9901      	ldr	r1, [sp, #4]
 800b650:	9800      	ldr	r0, [sp, #0]
 800b652:	9e08      	ldr	r6, [sp, #32]
 800b654:	3219      	adds	r2, #25
 800b656:	47b0      	blx	r6
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d1f0      	bne.n	800b63e <_printf_common+0x8a>
 800b65c:	2001      	movs	r0, #1
 800b65e:	4240      	negs	r0, r0
 800b660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b662:	2030      	movs	r0, #48	; 0x30
 800b664:	18e1      	adds	r1, r4, r3
 800b666:	3143      	adds	r1, #67	; 0x43
 800b668:	7008      	strb	r0, [r1, #0]
 800b66a:	0021      	movs	r1, r4
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	3145      	adds	r1, #69	; 0x45
 800b670:	7809      	ldrb	r1, [r1, #0]
 800b672:	18a2      	adds	r2, r4, r2
 800b674:	3243      	adds	r2, #67	; 0x43
 800b676:	3302      	adds	r3, #2
 800b678:	7011      	strb	r1, [r2, #0]
 800b67a:	e7c1      	b.n	800b600 <_printf_common+0x4c>
 800b67c:	0022      	movs	r2, r4
 800b67e:	2301      	movs	r3, #1
 800b680:	9901      	ldr	r1, [sp, #4]
 800b682:	9800      	ldr	r0, [sp, #0]
 800b684:	9e08      	ldr	r6, [sp, #32]
 800b686:	321a      	adds	r2, #26
 800b688:	47b0      	blx	r6
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	d0e6      	beq.n	800b65c <_printf_common+0xa8>
 800b68e:	3701      	adds	r7, #1
 800b690:	e7d1      	b.n	800b636 <_printf_common+0x82>
	...

0800b694 <_printf_i>:
 800b694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b696:	b08b      	sub	sp, #44	; 0x2c
 800b698:	9206      	str	r2, [sp, #24]
 800b69a:	000a      	movs	r2, r1
 800b69c:	3243      	adds	r2, #67	; 0x43
 800b69e:	9307      	str	r3, [sp, #28]
 800b6a0:	9005      	str	r0, [sp, #20]
 800b6a2:	9204      	str	r2, [sp, #16]
 800b6a4:	7e0a      	ldrb	r2, [r1, #24]
 800b6a6:	000c      	movs	r4, r1
 800b6a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6aa:	2a78      	cmp	r2, #120	; 0x78
 800b6ac:	d807      	bhi.n	800b6be <_printf_i+0x2a>
 800b6ae:	2a62      	cmp	r2, #98	; 0x62
 800b6b0:	d809      	bhi.n	800b6c6 <_printf_i+0x32>
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	d100      	bne.n	800b6b8 <_printf_i+0x24>
 800b6b6:	e0c1      	b.n	800b83c <_printf_i+0x1a8>
 800b6b8:	2a58      	cmp	r2, #88	; 0x58
 800b6ba:	d100      	bne.n	800b6be <_printf_i+0x2a>
 800b6bc:	e08c      	b.n	800b7d8 <_printf_i+0x144>
 800b6be:	0026      	movs	r6, r4
 800b6c0:	3642      	adds	r6, #66	; 0x42
 800b6c2:	7032      	strb	r2, [r6, #0]
 800b6c4:	e022      	b.n	800b70c <_printf_i+0x78>
 800b6c6:	0010      	movs	r0, r2
 800b6c8:	3863      	subs	r0, #99	; 0x63
 800b6ca:	2815      	cmp	r0, #21
 800b6cc:	d8f7      	bhi.n	800b6be <_printf_i+0x2a>
 800b6ce:	f7f4 fd2d 	bl	800012c <__gnu_thumb1_case_shi>
 800b6d2:	0016      	.short	0x0016
 800b6d4:	fff6001f 	.word	0xfff6001f
 800b6d8:	fff6fff6 	.word	0xfff6fff6
 800b6dc:	001ffff6 	.word	0x001ffff6
 800b6e0:	fff6fff6 	.word	0xfff6fff6
 800b6e4:	fff6fff6 	.word	0xfff6fff6
 800b6e8:	003600a8 	.word	0x003600a8
 800b6ec:	fff6009a 	.word	0xfff6009a
 800b6f0:	00b9fff6 	.word	0x00b9fff6
 800b6f4:	0036fff6 	.word	0x0036fff6
 800b6f8:	fff6fff6 	.word	0xfff6fff6
 800b6fc:	009e      	.short	0x009e
 800b6fe:	0026      	movs	r6, r4
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	3642      	adds	r6, #66	; 0x42
 800b704:	1d11      	adds	r1, r2, #4
 800b706:	6019      	str	r1, [r3, #0]
 800b708:	6813      	ldr	r3, [r2, #0]
 800b70a:	7033      	strb	r3, [r6, #0]
 800b70c:	2301      	movs	r3, #1
 800b70e:	e0a7      	b.n	800b860 <_printf_i+0x1cc>
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	1d0a      	adds	r2, r1, #4
 800b716:	0605      	lsls	r5, r0, #24
 800b718:	d50b      	bpl.n	800b732 <_printf_i+0x9e>
 800b71a:	680d      	ldr	r5, [r1, #0]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	2d00      	cmp	r5, #0
 800b720:	da03      	bge.n	800b72a <_printf_i+0x96>
 800b722:	232d      	movs	r3, #45	; 0x2d
 800b724:	9a04      	ldr	r2, [sp, #16]
 800b726:	426d      	negs	r5, r5
 800b728:	7013      	strb	r3, [r2, #0]
 800b72a:	4b61      	ldr	r3, [pc, #388]	; (800b8b0 <_printf_i+0x21c>)
 800b72c:	270a      	movs	r7, #10
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	e01b      	b.n	800b76a <_printf_i+0xd6>
 800b732:	680d      	ldr	r5, [r1, #0]
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	0641      	lsls	r1, r0, #25
 800b738:	d5f1      	bpl.n	800b71e <_printf_i+0x8a>
 800b73a:	b22d      	sxth	r5, r5
 800b73c:	e7ef      	b.n	800b71e <_printf_i+0x8a>
 800b73e:	680d      	ldr	r5, [r1, #0]
 800b740:	6819      	ldr	r1, [r3, #0]
 800b742:	1d08      	adds	r0, r1, #4
 800b744:	6018      	str	r0, [r3, #0]
 800b746:	062e      	lsls	r6, r5, #24
 800b748:	d501      	bpl.n	800b74e <_printf_i+0xba>
 800b74a:	680d      	ldr	r5, [r1, #0]
 800b74c:	e003      	b.n	800b756 <_printf_i+0xc2>
 800b74e:	066d      	lsls	r5, r5, #25
 800b750:	d5fb      	bpl.n	800b74a <_printf_i+0xb6>
 800b752:	680d      	ldr	r5, [r1, #0]
 800b754:	b2ad      	uxth	r5, r5
 800b756:	4b56      	ldr	r3, [pc, #344]	; (800b8b0 <_printf_i+0x21c>)
 800b758:	2708      	movs	r7, #8
 800b75a:	9303      	str	r3, [sp, #12]
 800b75c:	2a6f      	cmp	r2, #111	; 0x6f
 800b75e:	d000      	beq.n	800b762 <_printf_i+0xce>
 800b760:	3702      	adds	r7, #2
 800b762:	0023      	movs	r3, r4
 800b764:	2200      	movs	r2, #0
 800b766:	3343      	adds	r3, #67	; 0x43
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	6863      	ldr	r3, [r4, #4]
 800b76c:	60a3      	str	r3, [r4, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	db03      	blt.n	800b77a <_printf_i+0xe6>
 800b772:	2204      	movs	r2, #4
 800b774:	6821      	ldr	r1, [r4, #0]
 800b776:	4391      	bics	r1, r2
 800b778:	6021      	str	r1, [r4, #0]
 800b77a:	2d00      	cmp	r5, #0
 800b77c:	d102      	bne.n	800b784 <_printf_i+0xf0>
 800b77e:	9e04      	ldr	r6, [sp, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00c      	beq.n	800b79e <_printf_i+0x10a>
 800b784:	9e04      	ldr	r6, [sp, #16]
 800b786:	0028      	movs	r0, r5
 800b788:	0039      	movs	r1, r7
 800b78a:	f7f4 fd5f 	bl	800024c <__aeabi_uidivmod>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	3e01      	subs	r6, #1
 800b792:	5c5b      	ldrb	r3, [r3, r1]
 800b794:	7033      	strb	r3, [r6, #0]
 800b796:	002b      	movs	r3, r5
 800b798:	0005      	movs	r5, r0
 800b79a:	429f      	cmp	r7, r3
 800b79c:	d9f3      	bls.n	800b786 <_printf_i+0xf2>
 800b79e:	2f08      	cmp	r7, #8
 800b7a0:	d109      	bne.n	800b7b6 <_printf_i+0x122>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	07db      	lsls	r3, r3, #31
 800b7a6:	d506      	bpl.n	800b7b6 <_printf_i+0x122>
 800b7a8:	6863      	ldr	r3, [r4, #4]
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	dc02      	bgt.n	800b7b6 <_printf_i+0x122>
 800b7b0:	2330      	movs	r3, #48	; 0x30
 800b7b2:	3e01      	subs	r6, #1
 800b7b4:	7033      	strb	r3, [r6, #0]
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	1b9b      	subs	r3, r3, r6
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	0021      	movs	r1, r4
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	9805      	ldr	r0, [sp, #20]
 800b7c4:	9b06      	ldr	r3, [sp, #24]
 800b7c6:	aa09      	add	r2, sp, #36	; 0x24
 800b7c8:	f7ff fef4 	bl	800b5b4 <_printf_common>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d14c      	bne.n	800b86a <_printf_i+0x1d6>
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	4240      	negs	r0, r0
 800b7d4:	b00b      	add	sp, #44	; 0x2c
 800b7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d8:	3145      	adds	r1, #69	; 0x45
 800b7da:	700a      	strb	r2, [r1, #0]
 800b7dc:	4a34      	ldr	r2, [pc, #208]	; (800b8b0 <_printf_i+0x21c>)
 800b7de:	9203      	str	r2, [sp, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	6821      	ldr	r1, [r4, #0]
 800b7e4:	ca20      	ldmia	r2!, {r5}
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	0608      	lsls	r0, r1, #24
 800b7ea:	d516      	bpl.n	800b81a <_printf_i+0x186>
 800b7ec:	07cb      	lsls	r3, r1, #31
 800b7ee:	d502      	bpl.n	800b7f6 <_printf_i+0x162>
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	4319      	orrs	r1, r3
 800b7f4:	6021      	str	r1, [r4, #0]
 800b7f6:	2710      	movs	r7, #16
 800b7f8:	2d00      	cmp	r5, #0
 800b7fa:	d1b2      	bne.n	800b762 <_printf_i+0xce>
 800b7fc:	2320      	movs	r3, #32
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	439a      	bics	r2, r3
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	e7ad      	b.n	800b762 <_printf_i+0xce>
 800b806:	2220      	movs	r2, #32
 800b808:	6809      	ldr	r1, [r1, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	6022      	str	r2, [r4, #0]
 800b80e:	0022      	movs	r2, r4
 800b810:	2178      	movs	r1, #120	; 0x78
 800b812:	3245      	adds	r2, #69	; 0x45
 800b814:	7011      	strb	r1, [r2, #0]
 800b816:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <_printf_i+0x220>)
 800b818:	e7e1      	b.n	800b7de <_printf_i+0x14a>
 800b81a:	0648      	lsls	r0, r1, #25
 800b81c:	d5e6      	bpl.n	800b7ec <_printf_i+0x158>
 800b81e:	b2ad      	uxth	r5, r5
 800b820:	e7e4      	b.n	800b7ec <_printf_i+0x158>
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	680d      	ldr	r5, [r1, #0]
 800b826:	1d10      	adds	r0, r2, #4
 800b828:	6949      	ldr	r1, [r1, #20]
 800b82a:	6018      	str	r0, [r3, #0]
 800b82c:	6813      	ldr	r3, [r2, #0]
 800b82e:	062e      	lsls	r6, r5, #24
 800b830:	d501      	bpl.n	800b836 <_printf_i+0x1a2>
 800b832:	6019      	str	r1, [r3, #0]
 800b834:	e002      	b.n	800b83c <_printf_i+0x1a8>
 800b836:	066d      	lsls	r5, r5, #25
 800b838:	d5fb      	bpl.n	800b832 <_printf_i+0x19e>
 800b83a:	8019      	strh	r1, [r3, #0]
 800b83c:	2300      	movs	r3, #0
 800b83e:	9e04      	ldr	r6, [sp, #16]
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	e7bb      	b.n	800b7bc <_printf_i+0x128>
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	1d11      	adds	r1, r2, #4
 800b848:	6019      	str	r1, [r3, #0]
 800b84a:	6816      	ldr	r6, [r2, #0]
 800b84c:	2100      	movs	r1, #0
 800b84e:	0030      	movs	r0, r6
 800b850:	6862      	ldr	r2, [r4, #4]
 800b852:	f001 f8dd 	bl	800ca10 <memchr>
 800b856:	2800      	cmp	r0, #0
 800b858:	d001      	beq.n	800b85e <_printf_i+0x1ca>
 800b85a:	1b80      	subs	r0, r0, r6
 800b85c:	6060      	str	r0, [r4, #4]
 800b85e:	6863      	ldr	r3, [r4, #4]
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	2300      	movs	r3, #0
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	7013      	strb	r3, [r2, #0]
 800b868:	e7a8      	b.n	800b7bc <_printf_i+0x128>
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	0032      	movs	r2, r6
 800b86e:	9906      	ldr	r1, [sp, #24]
 800b870:	9805      	ldr	r0, [sp, #20]
 800b872:	9d07      	ldr	r5, [sp, #28]
 800b874:	47a8      	blx	r5
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d0aa      	beq.n	800b7d0 <_printf_i+0x13c>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	079b      	lsls	r3, r3, #30
 800b87e:	d415      	bmi.n	800b8ac <_printf_i+0x218>
 800b880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b882:	68e0      	ldr	r0, [r4, #12]
 800b884:	4298      	cmp	r0, r3
 800b886:	daa5      	bge.n	800b7d4 <_printf_i+0x140>
 800b888:	0018      	movs	r0, r3
 800b88a:	e7a3      	b.n	800b7d4 <_printf_i+0x140>
 800b88c:	0022      	movs	r2, r4
 800b88e:	2301      	movs	r3, #1
 800b890:	9906      	ldr	r1, [sp, #24]
 800b892:	9805      	ldr	r0, [sp, #20]
 800b894:	9e07      	ldr	r6, [sp, #28]
 800b896:	3219      	adds	r2, #25
 800b898:	47b0      	blx	r6
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d098      	beq.n	800b7d0 <_printf_i+0x13c>
 800b89e:	3501      	adds	r5, #1
 800b8a0:	68e3      	ldr	r3, [r4, #12]
 800b8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	42ab      	cmp	r3, r5
 800b8a8:	dcf0      	bgt.n	800b88c <_printf_i+0x1f8>
 800b8aa:	e7e9      	b.n	800b880 <_printf_i+0x1ec>
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	e7f7      	b.n	800b8a0 <_printf_i+0x20c>
 800b8b0:	0800e05e 	.word	0x0800e05e
 800b8b4:	0800e06f 	.word	0x0800e06f

0800b8b8 <cleanup_glue>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	000d      	movs	r5, r1
 800b8bc:	6809      	ldr	r1, [r1, #0]
 800b8be:	0004      	movs	r4, r0
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	d001      	beq.n	800b8c8 <cleanup_glue+0x10>
 800b8c4:	f7ff fff8 	bl	800b8b8 <cleanup_glue>
 800b8c8:	0029      	movs	r1, r5
 800b8ca:	0020      	movs	r0, r4
 800b8cc:	f001 fc84 	bl	800d1d8 <_free_r>
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d4 <_reclaim_reent>:
 800b8d4:	4b31      	ldr	r3, [pc, #196]	; (800b99c <_reclaim_reent+0xc8>)
 800b8d6:	b570      	push	{r4, r5, r6, lr}
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	0004      	movs	r4, r0
 800b8dc:	4283      	cmp	r3, r0
 800b8de:	d049      	beq.n	800b974 <_reclaim_reent+0xa0>
 800b8e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <_reclaim_reent+0x28>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	42ab      	cmp	r3, r5
 800b8ec:	d147      	bne.n	800b97e <_reclaim_reent+0xaa>
 800b8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	d002      	beq.n	800b8fc <_reclaim_reent+0x28>
 800b8f6:	0020      	movs	r0, r4
 800b8f8:	f001 fc6e 	bl	800d1d8 <_free_r>
 800b8fc:	6961      	ldr	r1, [r4, #20]
 800b8fe:	2900      	cmp	r1, #0
 800b900:	d002      	beq.n	800b908 <_reclaim_reent+0x34>
 800b902:	0020      	movs	r0, r4
 800b904:	f001 fc68 	bl	800d1d8 <_free_r>
 800b908:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b90a:	2900      	cmp	r1, #0
 800b90c:	d002      	beq.n	800b914 <_reclaim_reent+0x40>
 800b90e:	0020      	movs	r0, r4
 800b910:	f001 fc62 	bl	800d1d8 <_free_r>
 800b914:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b916:	2900      	cmp	r1, #0
 800b918:	d002      	beq.n	800b920 <_reclaim_reent+0x4c>
 800b91a:	0020      	movs	r0, r4
 800b91c:	f001 fc5c 	bl	800d1d8 <_free_r>
 800b920:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b922:	2900      	cmp	r1, #0
 800b924:	d002      	beq.n	800b92c <_reclaim_reent+0x58>
 800b926:	0020      	movs	r0, r4
 800b928:	f001 fc56 	bl	800d1d8 <_free_r>
 800b92c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b92e:	2900      	cmp	r1, #0
 800b930:	d002      	beq.n	800b938 <_reclaim_reent+0x64>
 800b932:	0020      	movs	r0, r4
 800b934:	f001 fc50 	bl	800d1d8 <_free_r>
 800b938:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b93a:	2900      	cmp	r1, #0
 800b93c:	d002      	beq.n	800b944 <_reclaim_reent+0x70>
 800b93e:	0020      	movs	r0, r4
 800b940:	f001 fc4a 	bl	800d1d8 <_free_r>
 800b944:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b946:	2900      	cmp	r1, #0
 800b948:	d002      	beq.n	800b950 <_reclaim_reent+0x7c>
 800b94a:	0020      	movs	r0, r4
 800b94c:	f001 fc44 	bl	800d1d8 <_free_r>
 800b950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b952:	2900      	cmp	r1, #0
 800b954:	d002      	beq.n	800b95c <_reclaim_reent+0x88>
 800b956:	0020      	movs	r0, r4
 800b958:	f001 fc3e 	bl	800d1d8 <_free_r>
 800b95c:	69a3      	ldr	r3, [r4, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <_reclaim_reent+0xa0>
 800b962:	0020      	movs	r0, r4
 800b964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b966:	4798      	blx	r3
 800b968:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b96a:	2900      	cmp	r1, #0
 800b96c:	d002      	beq.n	800b974 <_reclaim_reent+0xa0>
 800b96e:	0020      	movs	r0, r4
 800b970:	f7ff ffa2 	bl	800b8b8 <cleanup_glue>
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	5949      	ldr	r1, [r1, r5]
 800b978:	2900      	cmp	r1, #0
 800b97a:	d108      	bne.n	800b98e <_reclaim_reent+0xba>
 800b97c:	3504      	adds	r5, #4
 800b97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b980:	68d9      	ldr	r1, [r3, #12]
 800b982:	2d80      	cmp	r5, #128	; 0x80
 800b984:	d1f7      	bne.n	800b976 <_reclaim_reent+0xa2>
 800b986:	0020      	movs	r0, r4
 800b988:	f001 fc26 	bl	800d1d8 <_free_r>
 800b98c:	e7af      	b.n	800b8ee <_reclaim_reent+0x1a>
 800b98e:	680e      	ldr	r6, [r1, #0]
 800b990:	0020      	movs	r0, r4
 800b992:	f001 fc21 	bl	800d1d8 <_free_r>
 800b996:	0031      	movs	r1, r6
 800b998:	e7ee      	b.n	800b978 <_reclaim_reent+0xa4>
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	20000018 	.word	0x20000018

0800b9a0 <_sbrk_r>:
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	b570      	push	{r4, r5, r6, lr}
 800b9a4:	4d06      	ldr	r5, [pc, #24]	; (800b9c0 <_sbrk_r+0x20>)
 800b9a6:	0004      	movs	r4, r0
 800b9a8:	0008      	movs	r0, r1
 800b9aa:	602b      	str	r3, [r5, #0]
 800b9ac:	f7f7 fb2e 	bl	800300c <_sbrk>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d103      	bne.n	800b9bc <_sbrk_r+0x1c>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d000      	beq.n	800b9bc <_sbrk_r+0x1c>
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	20001e34 	.word	0x20001e34

0800b9c4 <siprintf>:
 800b9c4:	b40e      	push	{r1, r2, r3}
 800b9c6:	b500      	push	{lr}
 800b9c8:	490b      	ldr	r1, [pc, #44]	; (800b9f8 <siprintf+0x34>)
 800b9ca:	b09c      	sub	sp, #112	; 0x70
 800b9cc:	ab1d      	add	r3, sp, #116	; 0x74
 800b9ce:	9002      	str	r0, [sp, #8]
 800b9d0:	9006      	str	r0, [sp, #24]
 800b9d2:	9107      	str	r1, [sp, #28]
 800b9d4:	9104      	str	r1, [sp, #16]
 800b9d6:	4809      	ldr	r0, [pc, #36]	; (800b9fc <siprintf+0x38>)
 800b9d8:	4909      	ldr	r1, [pc, #36]	; (800ba00 <siprintf+0x3c>)
 800b9da:	cb04      	ldmia	r3!, {r2}
 800b9dc:	9105      	str	r1, [sp, #20]
 800b9de:	6800      	ldr	r0, [r0, #0]
 800b9e0:	a902      	add	r1, sp, #8
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	f001 fca4 	bl	800d330 <_svfiprintf_r>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9a02      	ldr	r2, [sp, #8]
 800b9ec:	7013      	strb	r3, [r2, #0]
 800b9ee:	b01c      	add	sp, #112	; 0x70
 800b9f0:	bc08      	pop	{r3}
 800b9f2:	b003      	add	sp, #12
 800b9f4:	4718      	bx	r3
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	7fffffff 	.word	0x7fffffff
 800b9fc:	20000018 	.word	0x20000018
 800ba00:	ffff0208 	.word	0xffff0208

0800ba04 <__sread>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	000c      	movs	r4, r1
 800ba08:	250e      	movs	r5, #14
 800ba0a:	5f49      	ldrsh	r1, [r1, r5]
 800ba0c:	f001 fd90 	bl	800d530 <_read_r>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	db03      	blt.n	800ba1c <__sread+0x18>
 800ba14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ba16:	181b      	adds	r3, r3, r0
 800ba18:	6563      	str	r3, [r4, #84]	; 0x54
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	4a02      	ldr	r2, [pc, #8]	; (800ba28 <__sread+0x24>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	e7f9      	b.n	800ba1a <__sread+0x16>
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	ffffefff 	.word	0xffffefff

0800ba2c <__swrite>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	001f      	movs	r7, r3
 800ba30:	898b      	ldrh	r3, [r1, #12]
 800ba32:	0005      	movs	r5, r0
 800ba34:	000c      	movs	r4, r1
 800ba36:	0016      	movs	r6, r2
 800ba38:	05db      	lsls	r3, r3, #23
 800ba3a:	d505      	bpl.n	800ba48 <__swrite+0x1c>
 800ba3c:	230e      	movs	r3, #14
 800ba3e:	5ec9      	ldrsh	r1, [r1, r3]
 800ba40:	2200      	movs	r2, #0
 800ba42:	2302      	movs	r3, #2
 800ba44:	f000 ffc6 	bl	800c9d4 <_lseek_r>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	4a05      	ldr	r2, [pc, #20]	; (800ba60 <__swrite+0x34>)
 800ba4c:	0028      	movs	r0, r5
 800ba4e:	4013      	ands	r3, r2
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	0032      	movs	r2, r6
 800ba54:	230e      	movs	r3, #14
 800ba56:	5ee1      	ldrsh	r1, [r4, r3]
 800ba58:	003b      	movs	r3, r7
 800ba5a:	f000 f81f 	bl	800ba9c <_write_r>
 800ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba60:	ffffefff 	.word	0xffffefff

0800ba64 <__sseek>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	000c      	movs	r4, r1
 800ba68:	250e      	movs	r5, #14
 800ba6a:	5f49      	ldrsh	r1, [r1, r5]
 800ba6c:	f000 ffb2 	bl	800c9d4 <_lseek_r>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	1c42      	adds	r2, r0, #1
 800ba74:	d103      	bne.n	800ba7e <__sseek+0x1a>
 800ba76:	4a05      	ldr	r2, [pc, #20]	; (800ba8c <__sseek+0x28>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	2280      	movs	r2, #128	; 0x80
 800ba80:	0152      	lsls	r2, r2, #5
 800ba82:	4313      	orrs	r3, r2
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	6560      	str	r0, [r4, #84]	; 0x54
 800ba88:	e7f8      	b.n	800ba7c <__sseek+0x18>
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	ffffefff 	.word	0xffffefff

0800ba90 <__sclose>:
 800ba90:	b510      	push	{r4, lr}
 800ba92:	230e      	movs	r3, #14
 800ba94:	5ec9      	ldrsh	r1, [r1, r3]
 800ba96:	f000 f815 	bl	800bac4 <_close_r>
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <_write_r>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	0004      	movs	r4, r0
 800baa0:	0008      	movs	r0, r1
 800baa2:	0011      	movs	r1, r2
 800baa4:	001a      	movs	r2, r3
 800baa6:	2300      	movs	r3, #0
 800baa8:	4d05      	ldr	r5, [pc, #20]	; (800bac0 <_write_r+0x24>)
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f7 fa65 	bl	8002f7a <_write>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d103      	bne.n	800babc <_write_r+0x20>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d000      	beq.n	800babc <_write_r+0x20>
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	20001e34 	.word	0x20001e34

0800bac4 <_close_r>:
 800bac4:	2300      	movs	r3, #0
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <_close_r+0x20>)
 800baca:	0004      	movs	r4, r0
 800bacc:	0008      	movs	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f7 fa6f 	bl	8002fb2 <_close>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d103      	bne.n	800bae0 <_close_r+0x1c>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d000      	beq.n	800bae0 <_close_r+0x1c>
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	20001e34 	.word	0x20001e34

0800bae8 <quorem>:
 800bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baea:	0006      	movs	r6, r0
 800baec:	690b      	ldr	r3, [r1, #16]
 800baee:	6932      	ldr	r2, [r6, #16]
 800baf0:	b087      	sub	sp, #28
 800baf2:	2000      	movs	r0, #0
 800baf4:	9103      	str	r1, [sp, #12]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	db65      	blt.n	800bbc6 <quorem+0xde>
 800bafa:	3b01      	subs	r3, #1
 800bafc:	009c      	lsls	r4, r3, #2
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	000b      	movs	r3, r1
 800bb02:	3314      	adds	r3, #20
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	191b      	adds	r3, r3, r4
 800bb08:	9304      	str	r3, [sp, #16]
 800bb0a:	0033      	movs	r3, r6
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	9302      	str	r3, [sp, #8]
 800bb10:	191c      	adds	r4, r3, r4
 800bb12:	9b04      	ldr	r3, [sp, #16]
 800bb14:	6827      	ldr	r7, [r4, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	0038      	movs	r0, r7
 800bb1a:	1c5d      	adds	r5, r3, #1
 800bb1c:	0029      	movs	r1, r5
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f7f4 fb0e 	bl	8000140 <__udivsi3>
 800bb24:	9001      	str	r0, [sp, #4]
 800bb26:	42af      	cmp	r7, r5
 800bb28:	d324      	bcc.n	800bb74 <quorem+0x8c>
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	46ac      	mov	ip, r5
 800bb2e:	9802      	ldr	r0, [sp, #8]
 800bb30:	9f05      	ldr	r7, [sp, #20]
 800bb32:	cf08      	ldmia	r7!, {r3}
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	b299      	uxth	r1, r3
 800bb38:	4351      	muls	r1, r2
 800bb3a:	0c1b      	lsrs	r3, r3, #16
 800bb3c:	4353      	muls	r3, r2
 800bb3e:	1949      	adds	r1, r1, r5
 800bb40:	0c0a      	lsrs	r2, r1, #16
 800bb42:	189b      	adds	r3, r3, r2
 800bb44:	6802      	ldr	r2, [r0, #0]
 800bb46:	b289      	uxth	r1, r1
 800bb48:	b292      	uxth	r2, r2
 800bb4a:	4462      	add	r2, ip
 800bb4c:	1a52      	subs	r2, r2, r1
 800bb4e:	6801      	ldr	r1, [r0, #0]
 800bb50:	0c1d      	lsrs	r5, r3, #16
 800bb52:	0c09      	lsrs	r1, r1, #16
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	1acb      	subs	r3, r1, r3
 800bb58:	1411      	asrs	r1, r2, #16
 800bb5a:	185b      	adds	r3, r3, r1
 800bb5c:	1419      	asrs	r1, r3, #16
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	041b      	lsls	r3, r3, #16
 800bb62:	431a      	orrs	r2, r3
 800bb64:	9b04      	ldr	r3, [sp, #16]
 800bb66:	468c      	mov	ip, r1
 800bb68:	c004      	stmia	r0!, {r2}
 800bb6a:	42bb      	cmp	r3, r7
 800bb6c:	d2e1      	bcs.n	800bb32 <quorem+0x4a>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d030      	beq.n	800bbd6 <quorem+0xee>
 800bb74:	0030      	movs	r0, r6
 800bb76:	9903      	ldr	r1, [sp, #12]
 800bb78:	f001 f9ea 	bl	800cf50 <__mcmp>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	db21      	blt.n	800bbc4 <quorem+0xdc>
 800bb80:	0030      	movs	r0, r6
 800bb82:	2400      	movs	r4, #0
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	9903      	ldr	r1, [sp, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	3014      	adds	r0, #20
 800bb8e:	3114      	adds	r1, #20
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	c920      	ldmia	r1!, {r5}
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	1914      	adds	r4, r2, r4
 800bb98:	b2aa      	uxth	r2, r5
 800bb9a:	1aa2      	subs	r2, r4, r2
 800bb9c:	0c1b      	lsrs	r3, r3, #16
 800bb9e:	0c2d      	lsrs	r5, r5, #16
 800bba0:	1414      	asrs	r4, r2, #16
 800bba2:	1b5b      	subs	r3, r3, r5
 800bba4:	191b      	adds	r3, r3, r4
 800bba6:	141c      	asrs	r4, r3, #16
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	041b      	lsls	r3, r3, #16
 800bbac:	4313      	orrs	r3, r2
 800bbae:	c008      	stmia	r0!, {r3}
 800bbb0:	9b04      	ldr	r3, [sp, #16]
 800bbb2:	428b      	cmp	r3, r1
 800bbb4:	d2ec      	bcs.n	800bb90 <quorem+0xa8>
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	9a02      	ldr	r2, [sp, #8]
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	18d3      	adds	r3, r2, r3
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d015      	beq.n	800bbf0 <quorem+0x108>
 800bbc4:	9801      	ldr	r0, [sp, #4]
 800bbc6:	b007      	add	sp, #28
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d106      	bne.n	800bbde <quorem+0xf6>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	9b02      	ldr	r3, [sp, #8]
 800bbd8:	3c04      	subs	r4, #4
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	d3f5      	bcc.n	800bbca <quorem+0xe2>
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	6133      	str	r3, [r6, #16]
 800bbe2:	e7c7      	b.n	800bb74 <quorem+0x8c>
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	d106      	bne.n	800bbf8 <quorem+0x110>
 800bbea:	9a00      	ldr	r2, [sp, #0]
 800bbec:	3a01      	subs	r2, #1
 800bbee:	9200      	str	r2, [sp, #0]
 800bbf0:	9a02      	ldr	r2, [sp, #8]
 800bbf2:	3b04      	subs	r3, #4
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d3f5      	bcc.n	800bbe4 <quorem+0xfc>
 800bbf8:	9b00      	ldr	r3, [sp, #0]
 800bbfa:	6133      	str	r3, [r6, #16]
 800bbfc:	e7e2      	b.n	800bbc4 <quorem+0xdc>
	...

0800bc00 <_dtoa_r>:
 800bc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc02:	b09d      	sub	sp, #116	; 0x74
 800bc04:	9202      	str	r2, [sp, #8]
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	9c03      	ldr	r4, [sp, #12]
 800bc0c:	9308      	str	r3, [sp, #32]
 800bc0e:	9409      	str	r4, [sp, #36]	; 0x24
 800bc10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bc12:	0007      	movs	r7, r0
 800bc14:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	d10e      	bne.n	800bc38 <_dtoa_r+0x38>
 800bc1a:	2010      	movs	r0, #16
 800bc1c:	f000 feee 	bl	800c9fc <malloc>
 800bc20:	1e02      	subs	r2, r0, #0
 800bc22:	6278      	str	r0, [r7, #36]	; 0x24
 800bc24:	d104      	bne.n	800bc30 <_dtoa_r+0x30>
 800bc26:	21ea      	movs	r1, #234	; 0xea
 800bc28:	4bc7      	ldr	r3, [pc, #796]	; (800bf48 <_dtoa_r+0x348>)
 800bc2a:	48c8      	ldr	r0, [pc, #800]	; (800bf4c <_dtoa_r+0x34c>)
 800bc2c:	f001 fc94 	bl	800d558 <__assert_func>
 800bc30:	6044      	str	r4, [r0, #4]
 800bc32:	6084      	str	r4, [r0, #8]
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	60c4      	str	r4, [r0, #12]
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	6819      	ldr	r1, [r3, #0]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d00a      	beq.n	800bc56 <_dtoa_r+0x56>
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	2301      	movs	r3, #1
 800bc44:	4093      	lsls	r3, r2
 800bc46:	604a      	str	r2, [r1, #4]
 800bc48:	608b      	str	r3, [r1, #8]
 800bc4a:	0038      	movs	r0, r7
 800bc4c:	f000 ff40 	bl	800cad0 <_Bfree>
 800bc50:	2200      	movs	r2, #0
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da20      	bge.n	800bc9e <_dtoa_r+0x9e>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	085b      	lsrs	r3, r3, #1
 800bc66:	9309      	str	r3, [sp, #36]	; 0x24
 800bc68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc6a:	4bb9      	ldr	r3, [pc, #740]	; (800bf50 <_dtoa_r+0x350>)
 800bc6c:	4ab8      	ldr	r2, [pc, #736]	; (800bf50 <_dtoa_r+0x350>)
 800bc6e:	402b      	ands	r3, r5
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d117      	bne.n	800bca4 <_dtoa_r+0xa4>
 800bc74:	4bb7      	ldr	r3, [pc, #732]	; (800bf54 <_dtoa_r+0x354>)
 800bc76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc78:	0328      	lsls	r0, r5, #12
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	0b00      	lsrs	r0, r0, #12
 800bc80:	4318      	orrs	r0, r3
 800bc82:	d101      	bne.n	800bc88 <_dtoa_r+0x88>
 800bc84:	f000 fdbf 	bl	800c806 <_dtoa_r+0xc06>
 800bc88:	48b3      	ldr	r0, [pc, #716]	; (800bf58 <_dtoa_r+0x358>)
 800bc8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc8c:	9006      	str	r0, [sp, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <_dtoa_r+0x98>
 800bc92:	4bb2      	ldr	r3, [pc, #712]	; (800bf5c <_dtoa_r+0x35c>)
 800bc94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	9806      	ldr	r0, [sp, #24]
 800bc9a:	b01d      	add	sp, #116	; 0x74
 800bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc9e:	2300      	movs	r3, #0
 800bca0:	602b      	str	r3, [r5, #0]
 800bca2:	e7e1      	b.n	800bc68 <_dtoa_r+0x68>
 800bca4:	9b08      	ldr	r3, [sp, #32]
 800bca6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bca8:	9312      	str	r3, [sp, #72]	; 0x48
 800bcaa:	9413      	str	r4, [sp, #76]	; 0x4c
 800bcac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f7f4 fbca 	bl	800044c <__aeabi_dcmpeq>
 800bcb8:	1e04      	subs	r4, r0, #0
 800bcba:	d009      	beq.n	800bcd0 <_dtoa_r+0xd0>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	4ba7      	ldr	r3, [pc, #668]	; (800bf60 <_dtoa_r+0x360>)
 800bcc4:	9306      	str	r3, [sp, #24]
 800bcc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0e5      	beq.n	800bc98 <_dtoa_r+0x98>
 800bccc:	4ba5      	ldr	r3, [pc, #660]	; (800bf64 <_dtoa_r+0x364>)
 800bcce:	e7e1      	b.n	800bc94 <_dtoa_r+0x94>
 800bcd0:	ab1a      	add	r3, sp, #104	; 0x68
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	ab1b      	add	r3, sp, #108	; 0x6c
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	0038      	movs	r0, r7
 800bcda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcde:	f001 f9eb 	bl	800d0b8 <__d2b>
 800bce2:	006e      	lsls	r6, r5, #1
 800bce4:	9005      	str	r0, [sp, #20]
 800bce6:	0d76      	lsrs	r6, r6, #21
 800bce8:	d100      	bne.n	800bcec <_dtoa_r+0xec>
 800bcea:	e07c      	b.n	800bde6 <_dtoa_r+0x1e6>
 800bcec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcf2:	4a9d      	ldr	r2, [pc, #628]	; (800bf68 <_dtoa_r+0x368>)
 800bcf4:	031b      	lsls	r3, r3, #12
 800bcf6:	0b1b      	lsrs	r3, r3, #12
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	0011      	movs	r1, r2
 800bcfc:	4b9b      	ldr	r3, [pc, #620]	; (800bf6c <_dtoa_r+0x36c>)
 800bcfe:	9418      	str	r4, [sp, #96]	; 0x60
 800bd00:	18f6      	adds	r6, r6, r3
 800bd02:	2200      	movs	r2, #0
 800bd04:	4b9a      	ldr	r3, [pc, #616]	; (800bf70 <_dtoa_r+0x370>)
 800bd06:	f7f6 f807 	bl	8001d18 <__aeabi_dsub>
 800bd0a:	4a9a      	ldr	r2, [pc, #616]	; (800bf74 <_dtoa_r+0x374>)
 800bd0c:	4b9a      	ldr	r3, [pc, #616]	; (800bf78 <_dtoa_r+0x378>)
 800bd0e:	f7f5 fd97 	bl	8001840 <__aeabi_dmul>
 800bd12:	4a9a      	ldr	r2, [pc, #616]	; (800bf7c <_dtoa_r+0x37c>)
 800bd14:	4b9a      	ldr	r3, [pc, #616]	; (800bf80 <_dtoa_r+0x380>)
 800bd16:	f7f4 fe55 	bl	80009c4 <__aeabi_dadd>
 800bd1a:	0004      	movs	r4, r0
 800bd1c:	0030      	movs	r0, r6
 800bd1e:	000d      	movs	r5, r1
 800bd20:	f7f6 fbe0 	bl	80024e4 <__aeabi_i2d>
 800bd24:	4a97      	ldr	r2, [pc, #604]	; (800bf84 <_dtoa_r+0x384>)
 800bd26:	4b98      	ldr	r3, [pc, #608]	; (800bf88 <_dtoa_r+0x388>)
 800bd28:	f7f5 fd8a 	bl	8001840 <__aeabi_dmul>
 800bd2c:	0002      	movs	r2, r0
 800bd2e:	000b      	movs	r3, r1
 800bd30:	0020      	movs	r0, r4
 800bd32:	0029      	movs	r1, r5
 800bd34:	f7f4 fe46 	bl	80009c4 <__aeabi_dadd>
 800bd38:	0004      	movs	r4, r0
 800bd3a:	000d      	movs	r5, r1
 800bd3c:	f7f6 fb9c 	bl	8002478 <__aeabi_d2iz>
 800bd40:	2200      	movs	r2, #0
 800bd42:	9002      	str	r0, [sp, #8]
 800bd44:	2300      	movs	r3, #0
 800bd46:	0020      	movs	r0, r4
 800bd48:	0029      	movs	r1, r5
 800bd4a:	f7f4 fb85 	bl	8000458 <__aeabi_dcmplt>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d00b      	beq.n	800bd6a <_dtoa_r+0x16a>
 800bd52:	9802      	ldr	r0, [sp, #8]
 800bd54:	f7f6 fbc6 	bl	80024e4 <__aeabi_i2d>
 800bd58:	002b      	movs	r3, r5
 800bd5a:	0022      	movs	r2, r4
 800bd5c:	f7f4 fb76 	bl	800044c <__aeabi_dcmpeq>
 800bd60:	4243      	negs	r3, r0
 800bd62:	4158      	adcs	r0, r3
 800bd64:	9b02      	ldr	r3, [sp, #8]
 800bd66:	1a1b      	subs	r3, r3, r0
 800bd68:	9302      	str	r3, [sp, #8]
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	9316      	str	r3, [sp, #88]	; 0x58
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	2b16      	cmp	r3, #22
 800bd72:	d80f      	bhi.n	800bd94 <_dtoa_r+0x194>
 800bd74:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bd76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd78:	00da      	lsls	r2, r3, #3
 800bd7a:	4b84      	ldr	r3, [pc, #528]	; (800bf8c <_dtoa_r+0x38c>)
 800bd7c:	189b      	adds	r3, r3, r2
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	f7f4 fb69 	bl	8000458 <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d049      	beq.n	800be1e <_dtoa_r+0x21e>
 800bd8a:	9b02      	ldr	r3, [sp, #8]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	9302      	str	r3, [sp, #8]
 800bd90:	2300      	movs	r3, #0
 800bd92:	9316      	str	r3, [sp, #88]	; 0x58
 800bd94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bd96:	1b9e      	subs	r6, r3, r6
 800bd98:	2300      	movs	r3, #0
 800bd9a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd9c:	0033      	movs	r3, r6
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	930d      	str	r3, [sp, #52]	; 0x34
 800bda2:	d504      	bpl.n	800bdae <_dtoa_r+0x1ae>
 800bda4:	2301      	movs	r3, #1
 800bda6:	1b9b      	subs	r3, r3, r6
 800bda8:	930a      	str	r3, [sp, #40]	; 0x28
 800bdaa:	2300      	movs	r3, #0
 800bdac:	930d      	str	r3, [sp, #52]	; 0x34
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	db36      	blt.n	800be22 <_dtoa_r+0x222>
 800bdb4:	9a02      	ldr	r2, [sp, #8]
 800bdb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb8:	4694      	mov	ip, r2
 800bdba:	4463      	add	r3, ip
 800bdbc:	930d      	str	r3, [sp, #52]	; 0x34
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9215      	str	r2, [sp, #84]	; 0x54
 800bdc2:	930e      	str	r3, [sp, #56]	; 0x38
 800bdc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdc6:	2401      	movs	r4, #1
 800bdc8:	2b09      	cmp	r3, #9
 800bdca:	d864      	bhi.n	800be96 <_dtoa_r+0x296>
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	dd02      	ble.n	800bdd6 <_dtoa_r+0x1d6>
 800bdd0:	2400      	movs	r4, #0
 800bdd2:	3b04      	subs	r3, #4
 800bdd4:	9322      	str	r3, [sp, #136]	; 0x88
 800bdd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdd8:	1e98      	subs	r0, r3, #2
 800bdda:	2803      	cmp	r0, #3
 800bddc:	d864      	bhi.n	800bea8 <_dtoa_r+0x2a8>
 800bdde:	f7f4 f99b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bde2:	3829      	.short	0x3829
 800bde4:	5836      	.short	0x5836
 800bde6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bde8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bdea:	189e      	adds	r6, r3, r2
 800bdec:	4b68      	ldr	r3, [pc, #416]	; (800bf90 <_dtoa_r+0x390>)
 800bdee:	18f2      	adds	r2, r6, r3
 800bdf0:	2a20      	cmp	r2, #32
 800bdf2:	dd0f      	ble.n	800be14 <_dtoa_r+0x214>
 800bdf4:	2340      	movs	r3, #64	; 0x40
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	409d      	lsls	r5, r3
 800bdfa:	4b66      	ldr	r3, [pc, #408]	; (800bf94 <_dtoa_r+0x394>)
 800bdfc:	9802      	ldr	r0, [sp, #8]
 800bdfe:	18f3      	adds	r3, r6, r3
 800be00:	40d8      	lsrs	r0, r3
 800be02:	4328      	orrs	r0, r5
 800be04:	f7f6 fb9e 	bl	8002544 <__aeabi_ui2d>
 800be08:	2301      	movs	r3, #1
 800be0a:	4c63      	ldr	r4, [pc, #396]	; (800bf98 <_dtoa_r+0x398>)
 800be0c:	3e01      	subs	r6, #1
 800be0e:	1909      	adds	r1, r1, r4
 800be10:	9318      	str	r3, [sp, #96]	; 0x60
 800be12:	e776      	b.n	800bd02 <_dtoa_r+0x102>
 800be14:	2320      	movs	r3, #32
 800be16:	9802      	ldr	r0, [sp, #8]
 800be18:	1a9b      	subs	r3, r3, r2
 800be1a:	4098      	lsls	r0, r3
 800be1c:	e7f2      	b.n	800be04 <_dtoa_r+0x204>
 800be1e:	9016      	str	r0, [sp, #88]	; 0x58
 800be20:	e7b8      	b.n	800bd94 <_dtoa_r+0x194>
 800be22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be24:	9a02      	ldr	r2, [sp, #8]
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	930a      	str	r3, [sp, #40]	; 0x28
 800be2a:	4253      	negs	r3, r2
 800be2c:	930e      	str	r3, [sp, #56]	; 0x38
 800be2e:	2300      	movs	r3, #0
 800be30:	9315      	str	r3, [sp, #84]	; 0x54
 800be32:	e7c7      	b.n	800bdc4 <_dtoa_r+0x1c4>
 800be34:	2300      	movs	r3, #0
 800be36:	930f      	str	r3, [sp, #60]	; 0x3c
 800be38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be3a:	930c      	str	r3, [sp, #48]	; 0x30
 800be3c:	9307      	str	r3, [sp, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	dc13      	bgt.n	800be6a <_dtoa_r+0x26a>
 800be42:	2301      	movs	r3, #1
 800be44:	001a      	movs	r2, r3
 800be46:	930c      	str	r3, [sp, #48]	; 0x30
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	9223      	str	r2, [sp, #140]	; 0x8c
 800be4c:	e00d      	b.n	800be6a <_dtoa_r+0x26a>
 800be4e:	2301      	movs	r3, #1
 800be50:	e7f1      	b.n	800be36 <_dtoa_r+0x236>
 800be52:	2300      	movs	r3, #0
 800be54:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800be56:	930f      	str	r3, [sp, #60]	; 0x3c
 800be58:	4694      	mov	ip, r2
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	4463      	add	r3, ip
 800be5e:	930c      	str	r3, [sp, #48]	; 0x30
 800be60:	3301      	adds	r3, #1
 800be62:	9307      	str	r3, [sp, #28]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc00      	bgt.n	800be6a <_dtoa_r+0x26a>
 800be68:	2301      	movs	r3, #1
 800be6a:	2200      	movs	r2, #0
 800be6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be6e:	6042      	str	r2, [r0, #4]
 800be70:	3204      	adds	r2, #4
 800be72:	0015      	movs	r5, r2
 800be74:	3514      	adds	r5, #20
 800be76:	6841      	ldr	r1, [r0, #4]
 800be78:	429d      	cmp	r5, r3
 800be7a:	d919      	bls.n	800beb0 <_dtoa_r+0x2b0>
 800be7c:	0038      	movs	r0, r7
 800be7e:	f000 fde3 	bl	800ca48 <_Balloc>
 800be82:	9006      	str	r0, [sp, #24]
 800be84:	2800      	cmp	r0, #0
 800be86:	d117      	bne.n	800beb8 <_dtoa_r+0x2b8>
 800be88:	21d5      	movs	r1, #213	; 0xd5
 800be8a:	0002      	movs	r2, r0
 800be8c:	4b43      	ldr	r3, [pc, #268]	; (800bf9c <_dtoa_r+0x39c>)
 800be8e:	0049      	lsls	r1, r1, #1
 800be90:	e6cb      	b.n	800bc2a <_dtoa_r+0x2a>
 800be92:	2301      	movs	r3, #1
 800be94:	e7de      	b.n	800be54 <_dtoa_r+0x254>
 800be96:	2300      	movs	r3, #0
 800be98:	940f      	str	r4, [sp, #60]	; 0x3c
 800be9a:	9322      	str	r3, [sp, #136]	; 0x88
 800be9c:	3b01      	subs	r3, #1
 800be9e:	930c      	str	r3, [sp, #48]	; 0x30
 800bea0:	9307      	str	r3, [sp, #28]
 800bea2:	2200      	movs	r2, #0
 800bea4:	3313      	adds	r3, #19
 800bea6:	e7d0      	b.n	800be4a <_dtoa_r+0x24a>
 800bea8:	2301      	movs	r3, #1
 800beaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800beac:	3b02      	subs	r3, #2
 800beae:	e7f6      	b.n	800be9e <_dtoa_r+0x29e>
 800beb0:	3101      	adds	r1, #1
 800beb2:	6041      	str	r1, [r0, #4]
 800beb4:	0052      	lsls	r2, r2, #1
 800beb6:	e7dc      	b.n	800be72 <_dtoa_r+0x272>
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	9a06      	ldr	r2, [sp, #24]
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	9b07      	ldr	r3, [sp, #28]
 800bec0:	2b0e      	cmp	r3, #14
 800bec2:	d900      	bls.n	800bec6 <_dtoa_r+0x2c6>
 800bec4:	e0eb      	b.n	800c09e <_dtoa_r+0x49e>
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d100      	bne.n	800becc <_dtoa_r+0x2cc>
 800beca:	e0e8      	b.n	800c09e <_dtoa_r+0x49e>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dd68      	ble.n	800bfa4 <_dtoa_r+0x3a4>
 800bed2:	001a      	movs	r2, r3
 800bed4:	210f      	movs	r1, #15
 800bed6:	4b2d      	ldr	r3, [pc, #180]	; (800bf8c <_dtoa_r+0x38c>)
 800bed8:	400a      	ands	r2, r1
 800beda:	00d2      	lsls	r2, r2, #3
 800bedc:	189b      	adds	r3, r3, r2
 800bede:	681d      	ldr	r5, [r3, #0]
 800bee0:	685e      	ldr	r6, [r3, #4]
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	111c      	asrs	r4, r3, #4
 800bee6:	2302      	movs	r3, #2
 800bee8:	9310      	str	r3, [sp, #64]	; 0x40
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	05db      	lsls	r3, r3, #23
 800beee:	d50b      	bpl.n	800bf08 <_dtoa_r+0x308>
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <_dtoa_r+0x3a0>)
 800bef2:	400c      	ands	r4, r1
 800bef4:	6a1a      	ldr	r2, [r3, #32]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800befa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800befc:	f7f5 f89e 	bl	800103c <__aeabi_ddiv>
 800bf00:	2303      	movs	r3, #3
 800bf02:	9008      	str	r0, [sp, #32]
 800bf04:	9109      	str	r1, [sp, #36]	; 0x24
 800bf06:	9310      	str	r3, [sp, #64]	; 0x40
 800bf08:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <_dtoa_r+0x3a0>)
 800bf0a:	9314      	str	r3, [sp, #80]	; 0x50
 800bf0c:	2c00      	cmp	r4, #0
 800bf0e:	d108      	bne.n	800bf22 <_dtoa_r+0x322>
 800bf10:	9808      	ldr	r0, [sp, #32]
 800bf12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf14:	002a      	movs	r2, r5
 800bf16:	0033      	movs	r3, r6
 800bf18:	f7f5 f890 	bl	800103c <__aeabi_ddiv>
 800bf1c:	9008      	str	r0, [sp, #32]
 800bf1e:	9109      	str	r1, [sp, #36]	; 0x24
 800bf20:	e05c      	b.n	800bfdc <_dtoa_r+0x3dc>
 800bf22:	2301      	movs	r3, #1
 800bf24:	421c      	tst	r4, r3
 800bf26:	d00b      	beq.n	800bf40 <_dtoa_r+0x340>
 800bf28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf2a:	0028      	movs	r0, r5
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	9310      	str	r3, [sp, #64]	; 0x40
 800bf30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf32:	0031      	movs	r1, r6
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	f7f5 fc82 	bl	8001840 <__aeabi_dmul>
 800bf3c:	0005      	movs	r5, r0
 800bf3e:	000e      	movs	r6, r1
 800bf40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf42:	1064      	asrs	r4, r4, #1
 800bf44:	3308      	adds	r3, #8
 800bf46:	e7e0      	b.n	800bf0a <_dtoa_r+0x30a>
 800bf48:	0800e08d 	.word	0x0800e08d
 800bf4c:	0800e0a4 	.word	0x0800e0a4
 800bf50:	7ff00000 	.word	0x7ff00000
 800bf54:	0000270f 	.word	0x0000270f
 800bf58:	0800e089 	.word	0x0800e089
 800bf5c:	0800e08c 	.word	0x0800e08c
 800bf60:	0800e05c 	.word	0x0800e05c
 800bf64:	0800e05d 	.word	0x0800e05d
 800bf68:	3ff00000 	.word	0x3ff00000
 800bf6c:	fffffc01 	.word	0xfffffc01
 800bf70:	3ff80000 	.word	0x3ff80000
 800bf74:	636f4361 	.word	0x636f4361
 800bf78:	3fd287a7 	.word	0x3fd287a7
 800bf7c:	8b60c8b3 	.word	0x8b60c8b3
 800bf80:	3fc68a28 	.word	0x3fc68a28
 800bf84:	509f79fb 	.word	0x509f79fb
 800bf88:	3fd34413 	.word	0x3fd34413
 800bf8c:	0800e198 	.word	0x0800e198
 800bf90:	00000432 	.word	0x00000432
 800bf94:	00000412 	.word	0x00000412
 800bf98:	fe100000 	.word	0xfe100000
 800bf9c:	0800e0ff 	.word	0x0800e0ff
 800bfa0:	0800e170 	.word	0x0800e170
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	9310      	str	r3, [sp, #64]	; 0x40
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d016      	beq.n	800bfdc <_dtoa_r+0x3dc>
 800bfae:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bfb2:	425c      	negs	r4, r3
 800bfb4:	230f      	movs	r3, #15
 800bfb6:	4ab6      	ldr	r2, [pc, #728]	; (800c290 <_dtoa_r+0x690>)
 800bfb8:	4023      	ands	r3, r4
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	18d3      	adds	r3, r2, r3
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	f7f5 fc3d 	bl	8001840 <__aeabi_dmul>
 800bfc6:	2601      	movs	r6, #1
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9008      	str	r0, [sp, #32]
 800bfcc:	9109      	str	r1, [sp, #36]	; 0x24
 800bfce:	4db1      	ldr	r5, [pc, #708]	; (800c294 <_dtoa_r+0x694>)
 800bfd0:	1124      	asrs	r4, r4, #4
 800bfd2:	2c00      	cmp	r4, #0
 800bfd4:	d000      	beq.n	800bfd8 <_dtoa_r+0x3d8>
 800bfd6:	e094      	b.n	800c102 <_dtoa_r+0x502>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d19f      	bne.n	800bf1c <_dtoa_r+0x31c>
 800bfdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d100      	bne.n	800bfe4 <_dtoa_r+0x3e4>
 800bfe2:	e09b      	b.n	800c11c <_dtoa_r+0x51c>
 800bfe4:	9c08      	ldr	r4, [sp, #32]
 800bfe6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bfe8:	2200      	movs	r2, #0
 800bfea:	0020      	movs	r0, r4
 800bfec:	0029      	movs	r1, r5
 800bfee:	4baa      	ldr	r3, [pc, #680]	; (800c298 <_dtoa_r+0x698>)
 800bff0:	f7f4 fa32 	bl	8000458 <__aeabi_dcmplt>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d100      	bne.n	800bffa <_dtoa_r+0x3fa>
 800bff8:	e090      	b.n	800c11c <_dtoa_r+0x51c>
 800bffa:	9b07      	ldr	r3, [sp, #28]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d100      	bne.n	800c002 <_dtoa_r+0x402>
 800c000:	e08c      	b.n	800c11c <_dtoa_r+0x51c>
 800c002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c004:	2b00      	cmp	r3, #0
 800c006:	dd46      	ble.n	800c096 <_dtoa_r+0x496>
 800c008:	9b02      	ldr	r3, [sp, #8]
 800c00a:	2200      	movs	r2, #0
 800c00c:	0020      	movs	r0, r4
 800c00e:	0029      	movs	r1, r5
 800c010:	1e5e      	subs	r6, r3, #1
 800c012:	4ba2      	ldr	r3, [pc, #648]	; (800c29c <_dtoa_r+0x69c>)
 800c014:	f7f5 fc14 	bl	8001840 <__aeabi_dmul>
 800c018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01a:	9008      	str	r0, [sp, #32]
 800c01c:	9109      	str	r1, [sp, #36]	; 0x24
 800c01e:	3301      	adds	r3, #1
 800c020:	9310      	str	r3, [sp, #64]	; 0x40
 800c022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c024:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c026:	9c08      	ldr	r4, [sp, #32]
 800c028:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c02a:	9314      	str	r3, [sp, #80]	; 0x50
 800c02c:	f7f6 fa5a 	bl	80024e4 <__aeabi_i2d>
 800c030:	0022      	movs	r2, r4
 800c032:	002b      	movs	r3, r5
 800c034:	f7f5 fc04 	bl	8001840 <__aeabi_dmul>
 800c038:	2200      	movs	r2, #0
 800c03a:	4b99      	ldr	r3, [pc, #612]	; (800c2a0 <_dtoa_r+0x6a0>)
 800c03c:	f7f4 fcc2 	bl	80009c4 <__aeabi_dadd>
 800c040:	9010      	str	r0, [sp, #64]	; 0x40
 800c042:	9111      	str	r1, [sp, #68]	; 0x44
 800c044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c048:	9208      	str	r2, [sp, #32]
 800c04a:	9309      	str	r3, [sp, #36]	; 0x24
 800c04c:	4a95      	ldr	r2, [pc, #596]	; (800c2a4 <_dtoa_r+0x6a4>)
 800c04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c050:	4694      	mov	ip, r2
 800c052:	4463      	add	r3, ip
 800c054:	9317      	str	r3, [sp, #92]	; 0x5c
 800c056:	9309      	str	r3, [sp, #36]	; 0x24
 800c058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d161      	bne.n	800c122 <_dtoa_r+0x522>
 800c05e:	2200      	movs	r2, #0
 800c060:	0020      	movs	r0, r4
 800c062:	0029      	movs	r1, r5
 800c064:	4b90      	ldr	r3, [pc, #576]	; (800c2a8 <_dtoa_r+0x6a8>)
 800c066:	f7f5 fe57 	bl	8001d18 <__aeabi_dsub>
 800c06a:	9a08      	ldr	r2, [sp, #32]
 800c06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c06e:	0004      	movs	r4, r0
 800c070:	000d      	movs	r5, r1
 800c072:	f7f4 fa05 	bl	8000480 <__aeabi_dcmpgt>
 800c076:	2800      	cmp	r0, #0
 800c078:	d000      	beq.n	800c07c <_dtoa_r+0x47c>
 800c07a:	e2af      	b.n	800c5dc <_dtoa_r+0x9dc>
 800c07c:	488b      	ldr	r0, [pc, #556]	; (800c2ac <_dtoa_r+0x6ac>)
 800c07e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c080:	4684      	mov	ip, r0
 800c082:	4461      	add	r1, ip
 800c084:	000b      	movs	r3, r1
 800c086:	0020      	movs	r0, r4
 800c088:	0029      	movs	r1, r5
 800c08a:	9a08      	ldr	r2, [sp, #32]
 800c08c:	f7f4 f9e4 	bl	8000458 <__aeabi_dcmplt>
 800c090:	2800      	cmp	r0, #0
 800c092:	d000      	beq.n	800c096 <_dtoa_r+0x496>
 800c094:	e29f      	b.n	800c5d6 <_dtoa_r+0x9d6>
 800c096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c098:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c09a:	9308      	str	r3, [sp, #32]
 800c09c:	9409      	str	r4, [sp, #36]	; 0x24
 800c09e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da00      	bge.n	800c0a6 <_dtoa_r+0x4a6>
 800c0a4:	e172      	b.n	800c38c <_dtoa_r+0x78c>
 800c0a6:	9a02      	ldr	r2, [sp, #8]
 800c0a8:	2a0e      	cmp	r2, #14
 800c0aa:	dd00      	ble.n	800c0ae <_dtoa_r+0x4ae>
 800c0ac:	e16e      	b.n	800c38c <_dtoa_r+0x78c>
 800c0ae:	4b78      	ldr	r3, [pc, #480]	; (800c290 <_dtoa_r+0x690>)
 800c0b0:	00d2      	lsls	r2, r2, #3
 800c0b2:	189b      	adds	r3, r3, r2
 800c0b4:	685c      	ldr	r4, [r3, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c0ba:	940b      	str	r4, [sp, #44]	; 0x2c
 800c0bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	db00      	blt.n	800c0c4 <_dtoa_r+0x4c4>
 800c0c2:	e0f7      	b.n	800c2b4 <_dtoa_r+0x6b4>
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dd00      	ble.n	800c0cc <_dtoa_r+0x4cc>
 800c0ca:	e0f3      	b.n	800c2b4 <_dtoa_r+0x6b4>
 800c0cc:	d000      	beq.n	800c0d0 <_dtoa_r+0x4d0>
 800c0ce:	e282      	b.n	800c5d6 <_dtoa_r+0x9d6>
 800c0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4b74      	ldr	r3, [pc, #464]	; (800c2a8 <_dtoa_r+0x6a8>)
 800c0d8:	f7f5 fbb2 	bl	8001840 <__aeabi_dmul>
 800c0dc:	9a08      	ldr	r2, [sp, #32]
 800c0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e0:	f7f4 f9d8 	bl	8000494 <__aeabi_dcmpge>
 800c0e4:	9e07      	ldr	r6, [sp, #28]
 800c0e6:	0035      	movs	r5, r6
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d000      	beq.n	800c0ee <_dtoa_r+0x4ee>
 800c0ec:	e259      	b.n	800c5a2 <_dtoa_r+0x9a2>
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	9a06      	ldr	r2, [sp, #24]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	9308      	str	r3, [sp, #32]
 800c0f6:	2331      	movs	r3, #49	; 0x31
 800c0f8:	7013      	strb	r3, [r2, #0]
 800c0fa:	9b02      	ldr	r3, [sp, #8]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	9302      	str	r3, [sp, #8]
 800c100:	e254      	b.n	800c5ac <_dtoa_r+0x9ac>
 800c102:	4234      	tst	r4, r6
 800c104:	d007      	beq.n	800c116 <_dtoa_r+0x516>
 800c106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c108:	3301      	adds	r3, #1
 800c10a:	9310      	str	r3, [sp, #64]	; 0x40
 800c10c:	682a      	ldr	r2, [r5, #0]
 800c10e:	686b      	ldr	r3, [r5, #4]
 800c110:	f7f5 fb96 	bl	8001840 <__aeabi_dmul>
 800c114:	0033      	movs	r3, r6
 800c116:	1064      	asrs	r4, r4, #1
 800c118:	3508      	adds	r5, #8
 800c11a:	e75a      	b.n	800bfd2 <_dtoa_r+0x3d2>
 800c11c:	9e02      	ldr	r6, [sp, #8]
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	e780      	b.n	800c024 <_dtoa_r+0x424>
 800c122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c126:	1e5a      	subs	r2, r3, #1
 800c128:	4b59      	ldr	r3, [pc, #356]	; (800c290 <_dtoa_r+0x690>)
 800c12a:	00d2      	lsls	r2, r2, #3
 800c12c:	189b      	adds	r3, r3, r2
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	2900      	cmp	r1, #0
 800c134:	d051      	beq.n	800c1da <_dtoa_r+0x5da>
 800c136:	2000      	movs	r0, #0
 800c138:	495d      	ldr	r1, [pc, #372]	; (800c2b0 <_dtoa_r+0x6b0>)
 800c13a:	f7f4 ff7f 	bl	800103c <__aeabi_ddiv>
 800c13e:	9a08      	ldr	r2, [sp, #32]
 800c140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c142:	f7f5 fde9 	bl	8001d18 <__aeabi_dsub>
 800c146:	9a06      	ldr	r2, [sp, #24]
 800c148:	9b06      	ldr	r3, [sp, #24]
 800c14a:	4694      	mov	ip, r2
 800c14c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c14e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c150:	9010      	str	r0, [sp, #64]	; 0x40
 800c152:	9111      	str	r1, [sp, #68]	; 0x44
 800c154:	4463      	add	r3, ip
 800c156:	9319      	str	r3, [sp, #100]	; 0x64
 800c158:	0029      	movs	r1, r5
 800c15a:	0020      	movs	r0, r4
 800c15c:	f7f6 f98c 	bl	8002478 <__aeabi_d2iz>
 800c160:	9014      	str	r0, [sp, #80]	; 0x50
 800c162:	f7f6 f9bf 	bl	80024e4 <__aeabi_i2d>
 800c166:	0002      	movs	r2, r0
 800c168:	000b      	movs	r3, r1
 800c16a:	0020      	movs	r0, r4
 800c16c:	0029      	movs	r1, r5
 800c16e:	f7f5 fdd3 	bl	8001d18 <__aeabi_dsub>
 800c172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c176:	3301      	adds	r3, #1
 800c178:	9308      	str	r3, [sp, #32]
 800c17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c17c:	0004      	movs	r4, r0
 800c17e:	3330      	adds	r3, #48	; 0x30
 800c180:	7013      	strb	r3, [r2, #0]
 800c182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c186:	000d      	movs	r5, r1
 800c188:	f7f4 f966 	bl	8000458 <__aeabi_dcmplt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d175      	bne.n	800c27c <_dtoa_r+0x67c>
 800c190:	0022      	movs	r2, r4
 800c192:	002b      	movs	r3, r5
 800c194:	2000      	movs	r0, #0
 800c196:	4940      	ldr	r1, [pc, #256]	; (800c298 <_dtoa_r+0x698>)
 800c198:	f7f5 fdbe 	bl	8001d18 <__aeabi_dsub>
 800c19c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1a0:	f7f4 f95a 	bl	8000458 <__aeabi_dcmplt>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d000      	beq.n	800c1aa <_dtoa_r+0x5aa>
 800c1a8:	e0d2      	b.n	800c350 <_dtoa_r+0x750>
 800c1aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1ac:	9a08      	ldr	r2, [sp, #32]
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d100      	bne.n	800c1b4 <_dtoa_r+0x5b4>
 800c1b2:	e770      	b.n	800c096 <_dtoa_r+0x496>
 800c1b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c1b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4b38      	ldr	r3, [pc, #224]	; (800c29c <_dtoa_r+0x69c>)
 800c1bc:	f7f5 fb40 	bl	8001840 <__aeabi_dmul>
 800c1c0:	4b36      	ldr	r3, [pc, #216]	; (800c29c <_dtoa_r+0x69c>)
 800c1c2:	9010      	str	r0, [sp, #64]	; 0x40
 800c1c4:	9111      	str	r1, [sp, #68]	; 0x44
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	0020      	movs	r0, r4
 800c1ca:	0029      	movs	r1, r5
 800c1cc:	f7f5 fb38 	bl	8001840 <__aeabi_dmul>
 800c1d0:	9b08      	ldr	r3, [sp, #32]
 800c1d2:	0004      	movs	r4, r0
 800c1d4:	000d      	movs	r5, r1
 800c1d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1d8:	e7be      	b.n	800c158 <_dtoa_r+0x558>
 800c1da:	9808      	ldr	r0, [sp, #32]
 800c1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1de:	f7f5 fb2f 	bl	8001840 <__aeabi_dmul>
 800c1e2:	9a06      	ldr	r2, [sp, #24]
 800c1e4:	9b06      	ldr	r3, [sp, #24]
 800c1e6:	4694      	mov	ip, r2
 800c1e8:	9308      	str	r3, [sp, #32]
 800c1ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ec:	9010      	str	r0, [sp, #64]	; 0x40
 800c1ee:	9111      	str	r1, [sp, #68]	; 0x44
 800c1f0:	4463      	add	r3, ip
 800c1f2:	9319      	str	r3, [sp, #100]	; 0x64
 800c1f4:	0029      	movs	r1, r5
 800c1f6:	0020      	movs	r0, r4
 800c1f8:	f7f6 f93e 	bl	8002478 <__aeabi_d2iz>
 800c1fc:	9017      	str	r0, [sp, #92]	; 0x5c
 800c1fe:	f7f6 f971 	bl	80024e4 <__aeabi_i2d>
 800c202:	0002      	movs	r2, r0
 800c204:	000b      	movs	r3, r1
 800c206:	0020      	movs	r0, r4
 800c208:	0029      	movs	r1, r5
 800c20a:	f7f5 fd85 	bl	8001d18 <__aeabi_dsub>
 800c20e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c210:	9a08      	ldr	r2, [sp, #32]
 800c212:	3330      	adds	r3, #48	; 0x30
 800c214:	7013      	strb	r3, [r2, #0]
 800c216:	0013      	movs	r3, r2
 800c218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c21a:	3301      	adds	r3, #1
 800c21c:	0004      	movs	r4, r0
 800c21e:	000d      	movs	r5, r1
 800c220:	9308      	str	r3, [sp, #32]
 800c222:	4293      	cmp	r3, r2
 800c224:	d12c      	bne.n	800c280 <_dtoa_r+0x680>
 800c226:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c228:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c22a:	9a06      	ldr	r2, [sp, #24]
 800c22c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c22e:	4694      	mov	ip, r2
 800c230:	4463      	add	r3, ip
 800c232:	2200      	movs	r2, #0
 800c234:	9308      	str	r3, [sp, #32]
 800c236:	4b1e      	ldr	r3, [pc, #120]	; (800c2b0 <_dtoa_r+0x6b0>)
 800c238:	f7f4 fbc4 	bl	80009c4 <__aeabi_dadd>
 800c23c:	0002      	movs	r2, r0
 800c23e:	000b      	movs	r3, r1
 800c240:	0020      	movs	r0, r4
 800c242:	0029      	movs	r1, r5
 800c244:	f7f4 f91c 	bl	8000480 <__aeabi_dcmpgt>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d000      	beq.n	800c24e <_dtoa_r+0x64e>
 800c24c:	e080      	b.n	800c350 <_dtoa_r+0x750>
 800c24e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c252:	2000      	movs	r0, #0
 800c254:	4916      	ldr	r1, [pc, #88]	; (800c2b0 <_dtoa_r+0x6b0>)
 800c256:	f7f5 fd5f 	bl	8001d18 <__aeabi_dsub>
 800c25a:	0002      	movs	r2, r0
 800c25c:	000b      	movs	r3, r1
 800c25e:	0020      	movs	r0, r4
 800c260:	0029      	movs	r1, r5
 800c262:	f7f4 f8f9 	bl	8000458 <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d100      	bne.n	800c26c <_dtoa_r+0x66c>
 800c26a:	e714      	b.n	800c096 <_dtoa_r+0x496>
 800c26c:	9b08      	ldr	r3, [sp, #32]
 800c26e:	001a      	movs	r2, r3
 800c270:	3a01      	subs	r2, #1
 800c272:	9208      	str	r2, [sp, #32]
 800c274:	7812      	ldrb	r2, [r2, #0]
 800c276:	2a30      	cmp	r2, #48	; 0x30
 800c278:	d0f8      	beq.n	800c26c <_dtoa_r+0x66c>
 800c27a:	9308      	str	r3, [sp, #32]
 800c27c:	9602      	str	r6, [sp, #8]
 800c27e:	e055      	b.n	800c32c <_dtoa_r+0x72c>
 800c280:	2200      	movs	r2, #0
 800c282:	4b06      	ldr	r3, [pc, #24]	; (800c29c <_dtoa_r+0x69c>)
 800c284:	f7f5 fadc 	bl	8001840 <__aeabi_dmul>
 800c288:	0004      	movs	r4, r0
 800c28a:	000d      	movs	r5, r1
 800c28c:	e7b2      	b.n	800c1f4 <_dtoa_r+0x5f4>
 800c28e:	46c0      	nop			; (mov r8, r8)
 800c290:	0800e198 	.word	0x0800e198
 800c294:	0800e170 	.word	0x0800e170
 800c298:	3ff00000 	.word	0x3ff00000
 800c29c:	40240000 	.word	0x40240000
 800c2a0:	401c0000 	.word	0x401c0000
 800c2a4:	fcc00000 	.word	0xfcc00000
 800c2a8:	40140000 	.word	0x40140000
 800c2ac:	7cc00000 	.word	0x7cc00000
 800c2b0:	3fe00000 	.word	0x3fe00000
 800c2b4:	9b07      	ldr	r3, [sp, #28]
 800c2b6:	9e06      	ldr	r6, [sp, #24]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	199b      	adds	r3, r3, r6
 800c2bc:	930c      	str	r3, [sp, #48]	; 0x30
 800c2be:	9c08      	ldr	r4, [sp, #32]
 800c2c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c6:	0020      	movs	r0, r4
 800c2c8:	0029      	movs	r1, r5
 800c2ca:	f7f4 feb7 	bl	800103c <__aeabi_ddiv>
 800c2ce:	f7f6 f8d3 	bl	8002478 <__aeabi_d2iz>
 800c2d2:	9007      	str	r0, [sp, #28]
 800c2d4:	f7f6 f906 	bl	80024e4 <__aeabi_i2d>
 800c2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2dc:	f7f5 fab0 	bl	8001840 <__aeabi_dmul>
 800c2e0:	0002      	movs	r2, r0
 800c2e2:	000b      	movs	r3, r1
 800c2e4:	0020      	movs	r0, r4
 800c2e6:	0029      	movs	r1, r5
 800c2e8:	f7f5 fd16 	bl	8001d18 <__aeabi_dsub>
 800c2ec:	0033      	movs	r3, r6
 800c2ee:	9a07      	ldr	r2, [sp, #28]
 800c2f0:	3601      	adds	r6, #1
 800c2f2:	3230      	adds	r2, #48	; 0x30
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2f8:	9608      	str	r6, [sp, #32]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d139      	bne.n	800c372 <_dtoa_r+0x772>
 800c2fe:	0002      	movs	r2, r0
 800c300:	000b      	movs	r3, r1
 800c302:	f7f4 fb5f 	bl	80009c4 <__aeabi_dadd>
 800c306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c30a:	0004      	movs	r4, r0
 800c30c:	000d      	movs	r5, r1
 800c30e:	f7f4 f8b7 	bl	8000480 <__aeabi_dcmpgt>
 800c312:	2800      	cmp	r0, #0
 800c314:	d11b      	bne.n	800c34e <_dtoa_r+0x74e>
 800c316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c31a:	0020      	movs	r0, r4
 800c31c:	0029      	movs	r1, r5
 800c31e:	f7f4 f895 	bl	800044c <__aeabi_dcmpeq>
 800c322:	2800      	cmp	r0, #0
 800c324:	d002      	beq.n	800c32c <_dtoa_r+0x72c>
 800c326:	9b07      	ldr	r3, [sp, #28]
 800c328:	07db      	lsls	r3, r3, #31
 800c32a:	d410      	bmi.n	800c34e <_dtoa_r+0x74e>
 800c32c:	0038      	movs	r0, r7
 800c32e:	9905      	ldr	r1, [sp, #20]
 800c330:	f000 fbce 	bl	800cad0 <_Bfree>
 800c334:	2300      	movs	r3, #0
 800c336:	9a08      	ldr	r2, [sp, #32]
 800c338:	9802      	ldr	r0, [sp, #8]
 800c33a:	7013      	strb	r3, [r2, #0]
 800c33c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c33e:	3001      	adds	r0, #1
 800c340:	6018      	str	r0, [r3, #0]
 800c342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c344:	2b00      	cmp	r3, #0
 800c346:	d100      	bne.n	800c34a <_dtoa_r+0x74a>
 800c348:	e4a6      	b.n	800bc98 <_dtoa_r+0x98>
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	e4a4      	b.n	800bc98 <_dtoa_r+0x98>
 800c34e:	9e02      	ldr	r6, [sp, #8]
 800c350:	9b08      	ldr	r3, [sp, #32]
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	3b01      	subs	r3, #1
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	2a39      	cmp	r2, #57	; 0x39
 800c35a:	d106      	bne.n	800c36a <_dtoa_r+0x76a>
 800c35c:	9a06      	ldr	r2, [sp, #24]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d1f7      	bne.n	800c352 <_dtoa_r+0x752>
 800c362:	2230      	movs	r2, #48	; 0x30
 800c364:	9906      	ldr	r1, [sp, #24]
 800c366:	3601      	adds	r6, #1
 800c368:	700a      	strb	r2, [r1, #0]
 800c36a:	781a      	ldrb	r2, [r3, #0]
 800c36c:	3201      	adds	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	e784      	b.n	800c27c <_dtoa_r+0x67c>
 800c372:	2200      	movs	r2, #0
 800c374:	4baa      	ldr	r3, [pc, #680]	; (800c620 <_dtoa_r+0xa20>)
 800c376:	f7f5 fa63 	bl	8001840 <__aeabi_dmul>
 800c37a:	2200      	movs	r2, #0
 800c37c:	2300      	movs	r3, #0
 800c37e:	0004      	movs	r4, r0
 800c380:	000d      	movs	r5, r1
 800c382:	f7f4 f863 	bl	800044c <__aeabi_dcmpeq>
 800c386:	2800      	cmp	r0, #0
 800c388:	d09b      	beq.n	800c2c2 <_dtoa_r+0x6c2>
 800c38a:	e7cf      	b.n	800c32c <_dtoa_r+0x72c>
 800c38c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c38e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c390:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c392:	2d00      	cmp	r5, #0
 800c394:	d012      	beq.n	800c3bc <_dtoa_r+0x7bc>
 800c396:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c398:	2a01      	cmp	r2, #1
 800c39a:	dc66      	bgt.n	800c46a <_dtoa_r+0x86a>
 800c39c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	d05d      	beq.n	800c45e <_dtoa_r+0x85e>
 800c3a2:	4aa0      	ldr	r2, [pc, #640]	; (800c624 <_dtoa_r+0xa24>)
 800c3a4:	189b      	adds	r3, r3, r2
 800c3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	18d2      	adds	r2, r2, r3
 800c3ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c3ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3b0:	0038      	movs	r0, r7
 800c3b2:	18d3      	adds	r3, r2, r3
 800c3b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c3b6:	f000 fc3b 	bl	800cc30 <__i2b>
 800c3ba:	0005      	movs	r5, r0
 800c3bc:	2c00      	cmp	r4, #0
 800c3be:	dd0e      	ble.n	800c3de <_dtoa_r+0x7de>
 800c3c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	dd0b      	ble.n	800c3de <_dtoa_r+0x7de>
 800c3c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3c8:	0023      	movs	r3, r4
 800c3ca:	4294      	cmp	r4, r2
 800c3cc:	dd00      	ble.n	800c3d0 <_dtoa_r+0x7d0>
 800c3ce:	0013      	movs	r3, r2
 800c3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3d2:	1ae4      	subs	r4, r4, r3
 800c3d4:	1ad2      	subs	r2, r2, r3
 800c3d6:	920a      	str	r2, [sp, #40]	; 0x28
 800c3d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	930d      	str	r3, [sp, #52]	; 0x34
 800c3de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01f      	beq.n	800c424 <_dtoa_r+0x824>
 800c3e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d054      	beq.n	800c494 <_dtoa_r+0x894>
 800c3ea:	2e00      	cmp	r6, #0
 800c3ec:	dd11      	ble.n	800c412 <_dtoa_r+0x812>
 800c3ee:	0029      	movs	r1, r5
 800c3f0:	0032      	movs	r2, r6
 800c3f2:	0038      	movs	r0, r7
 800c3f4:	f000 fce2 	bl	800cdbc <__pow5mult>
 800c3f8:	9a05      	ldr	r2, [sp, #20]
 800c3fa:	0001      	movs	r1, r0
 800c3fc:	0005      	movs	r5, r0
 800c3fe:	0038      	movs	r0, r7
 800c400:	f000 fc2c 	bl	800cc5c <__multiply>
 800c404:	9905      	ldr	r1, [sp, #20]
 800c406:	9014      	str	r0, [sp, #80]	; 0x50
 800c408:	0038      	movs	r0, r7
 800c40a:	f000 fb61 	bl	800cad0 <_Bfree>
 800c40e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c410:	9305      	str	r3, [sp, #20]
 800c412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c414:	1b9a      	subs	r2, r3, r6
 800c416:	42b3      	cmp	r3, r6
 800c418:	d004      	beq.n	800c424 <_dtoa_r+0x824>
 800c41a:	0038      	movs	r0, r7
 800c41c:	9905      	ldr	r1, [sp, #20]
 800c41e:	f000 fccd 	bl	800cdbc <__pow5mult>
 800c422:	9005      	str	r0, [sp, #20]
 800c424:	2101      	movs	r1, #1
 800c426:	0038      	movs	r0, r7
 800c428:	f000 fc02 	bl	800cc30 <__i2b>
 800c42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c42e:	0006      	movs	r6, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	dd31      	ble.n	800c498 <_dtoa_r+0x898>
 800c434:	001a      	movs	r2, r3
 800c436:	0001      	movs	r1, r0
 800c438:	0038      	movs	r0, r7
 800c43a:	f000 fcbf 	bl	800cdbc <__pow5mult>
 800c43e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c440:	0006      	movs	r6, r0
 800c442:	2b01      	cmp	r3, #1
 800c444:	dd2d      	ble.n	800c4a2 <_dtoa_r+0x8a2>
 800c446:	2300      	movs	r3, #0
 800c448:	930e      	str	r3, [sp, #56]	; 0x38
 800c44a:	6933      	ldr	r3, [r6, #16]
 800c44c:	3303      	adds	r3, #3
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	18f3      	adds	r3, r6, r3
 800c452:	6858      	ldr	r0, [r3, #4]
 800c454:	f000 fba4 	bl	800cba0 <__hi0bits>
 800c458:	2320      	movs	r3, #32
 800c45a:	1a18      	subs	r0, r3, r0
 800c45c:	e039      	b.n	800c4d2 <_dtoa_r+0x8d2>
 800c45e:	2336      	movs	r3, #54	; 0x36
 800c460:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c462:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c464:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c466:	1a9b      	subs	r3, r3, r2
 800c468:	e79d      	b.n	800c3a6 <_dtoa_r+0x7a6>
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	1e5e      	subs	r6, r3, #1
 800c46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c470:	42b3      	cmp	r3, r6
 800c472:	db07      	blt.n	800c484 <_dtoa_r+0x884>
 800c474:	1b9e      	subs	r6, r3, r6
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	da93      	bge.n	800c3a6 <_dtoa_r+0x7a6>
 800c47e:	1ae4      	subs	r4, r4, r3
 800c480:	2300      	movs	r3, #0
 800c482:	e790      	b.n	800c3a6 <_dtoa_r+0x7a6>
 800c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c488:	1af3      	subs	r3, r6, r3
 800c48a:	18d3      	adds	r3, r2, r3
 800c48c:	960e      	str	r6, [sp, #56]	; 0x38
 800c48e:	9315      	str	r3, [sp, #84]	; 0x54
 800c490:	2600      	movs	r6, #0
 800c492:	e7f0      	b.n	800c476 <_dtoa_r+0x876>
 800c494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c496:	e7c0      	b.n	800c41a <_dtoa_r+0x81a>
 800c498:	2300      	movs	r3, #0
 800c49a:	930e      	str	r3, [sp, #56]	; 0x38
 800c49c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	dc13      	bgt.n	800c4ca <_dtoa_r+0x8ca>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10e      	bne.n	800c4ca <_dtoa_r+0x8ca>
 800c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ae:	031b      	lsls	r3, r3, #12
 800c4b0:	d10b      	bne.n	800c4ca <_dtoa_r+0x8ca>
 800c4b2:	4b5d      	ldr	r3, [pc, #372]	; (800c628 <_dtoa_r+0xa28>)
 800c4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4b6:	4213      	tst	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <_dtoa_r+0x8ca>
 800c4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4bc:	3301      	adds	r3, #1
 800c4be:	930a      	str	r3, [sp, #40]	; 0x28
 800c4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1bb      	bne.n	800c44a <_dtoa_r+0x84a>
 800c4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4d4:	221f      	movs	r2, #31
 800c4d6:	1818      	adds	r0, r3, r0
 800c4d8:	0003      	movs	r3, r0
 800c4da:	4013      	ands	r3, r2
 800c4dc:	4210      	tst	r0, r2
 800c4de:	d046      	beq.n	800c56e <_dtoa_r+0x96e>
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	2a04      	cmp	r2, #4
 800c4e6:	dd3f      	ble.n	800c568 <_dtoa_r+0x968>
 800c4e8:	221c      	movs	r2, #28
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ee:	18e4      	adds	r4, r4, r3
 800c4f0:	18d2      	adds	r2, r2, r3
 800c4f2:	920a      	str	r2, [sp, #40]	; 0x28
 800c4f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4f6:	18d3      	adds	r3, r2, r3
 800c4f8:	930d      	str	r3, [sp, #52]	; 0x34
 800c4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd05      	ble.n	800c50c <_dtoa_r+0x90c>
 800c500:	001a      	movs	r2, r3
 800c502:	0038      	movs	r0, r7
 800c504:	9905      	ldr	r1, [sp, #20]
 800c506:	f000 fcb5 	bl	800ce74 <__lshift>
 800c50a:	9005      	str	r0, [sp, #20]
 800c50c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dd05      	ble.n	800c51e <_dtoa_r+0x91e>
 800c512:	0031      	movs	r1, r6
 800c514:	001a      	movs	r2, r3
 800c516:	0038      	movs	r0, r7
 800c518:	f000 fcac 	bl	800ce74 <__lshift>
 800c51c:	0006      	movs	r6, r0
 800c51e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c520:	2b00      	cmp	r3, #0
 800c522:	d026      	beq.n	800c572 <_dtoa_r+0x972>
 800c524:	0031      	movs	r1, r6
 800c526:	9805      	ldr	r0, [sp, #20]
 800c528:	f000 fd12 	bl	800cf50 <__mcmp>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	da20      	bge.n	800c572 <_dtoa_r+0x972>
 800c530:	9b02      	ldr	r3, [sp, #8]
 800c532:	220a      	movs	r2, #10
 800c534:	3b01      	subs	r3, #1
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	0038      	movs	r0, r7
 800c53a:	2300      	movs	r3, #0
 800c53c:	9905      	ldr	r1, [sp, #20]
 800c53e:	f000 faeb 	bl	800cb18 <__multadd>
 800c542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c544:	9005      	str	r0, [sp, #20]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d100      	bne.n	800c54c <_dtoa_r+0x94c>
 800c54a:	e166      	b.n	800c81a <_dtoa_r+0xc1a>
 800c54c:	2300      	movs	r3, #0
 800c54e:	0029      	movs	r1, r5
 800c550:	220a      	movs	r2, #10
 800c552:	0038      	movs	r0, r7
 800c554:	f000 fae0 	bl	800cb18 <__multadd>
 800c558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c55a:	0005      	movs	r5, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dc47      	bgt.n	800c5f0 <_dtoa_r+0x9f0>
 800c560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c562:	2b02      	cmp	r3, #2
 800c564:	dc0d      	bgt.n	800c582 <_dtoa_r+0x982>
 800c566:	e043      	b.n	800c5f0 <_dtoa_r+0x9f0>
 800c568:	2a04      	cmp	r2, #4
 800c56a:	d0c6      	beq.n	800c4fa <_dtoa_r+0x8fa>
 800c56c:	0013      	movs	r3, r2
 800c56e:	331c      	adds	r3, #28
 800c570:	e7bc      	b.n	800c4ec <_dtoa_r+0x8ec>
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dc35      	bgt.n	800c5e4 <_dtoa_r+0x9e4>
 800c578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	dd32      	ble.n	800c5e4 <_dtoa_r+0x9e4>
 800c57e:	9b07      	ldr	r3, [sp, #28]
 800c580:	930c      	str	r3, [sp, #48]	; 0x30
 800c582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10c      	bne.n	800c5a2 <_dtoa_r+0x9a2>
 800c588:	0031      	movs	r1, r6
 800c58a:	2205      	movs	r2, #5
 800c58c:	0038      	movs	r0, r7
 800c58e:	f000 fac3 	bl	800cb18 <__multadd>
 800c592:	0006      	movs	r6, r0
 800c594:	0001      	movs	r1, r0
 800c596:	9805      	ldr	r0, [sp, #20]
 800c598:	f000 fcda 	bl	800cf50 <__mcmp>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	dd00      	ble.n	800c5a2 <_dtoa_r+0x9a2>
 800c5a0:	e5a5      	b.n	800c0ee <_dtoa_r+0x4ee>
 800c5a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5a4:	43db      	mvns	r3, r3
 800c5a6:	9302      	str	r3, [sp, #8]
 800c5a8:	9b06      	ldr	r3, [sp, #24]
 800c5aa:	9308      	str	r3, [sp, #32]
 800c5ac:	2400      	movs	r4, #0
 800c5ae:	0031      	movs	r1, r6
 800c5b0:	0038      	movs	r0, r7
 800c5b2:	f000 fa8d 	bl	800cad0 <_Bfree>
 800c5b6:	2d00      	cmp	r5, #0
 800c5b8:	d100      	bne.n	800c5bc <_dtoa_r+0x9bc>
 800c5ba:	e6b7      	b.n	800c32c <_dtoa_r+0x72c>
 800c5bc:	2c00      	cmp	r4, #0
 800c5be:	d005      	beq.n	800c5cc <_dtoa_r+0x9cc>
 800c5c0:	42ac      	cmp	r4, r5
 800c5c2:	d003      	beq.n	800c5cc <_dtoa_r+0x9cc>
 800c5c4:	0021      	movs	r1, r4
 800c5c6:	0038      	movs	r0, r7
 800c5c8:	f000 fa82 	bl	800cad0 <_Bfree>
 800c5cc:	0029      	movs	r1, r5
 800c5ce:	0038      	movs	r0, r7
 800c5d0:	f000 fa7e 	bl	800cad0 <_Bfree>
 800c5d4:	e6aa      	b.n	800c32c <_dtoa_r+0x72c>
 800c5d6:	2600      	movs	r6, #0
 800c5d8:	0035      	movs	r5, r6
 800c5da:	e7e2      	b.n	800c5a2 <_dtoa_r+0x9a2>
 800c5dc:	9602      	str	r6, [sp, #8]
 800c5de:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c5e0:	0035      	movs	r5, r6
 800c5e2:	e584      	b.n	800c0ee <_dtoa_r+0x4ee>
 800c5e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d100      	bne.n	800c5ec <_dtoa_r+0x9ec>
 800c5ea:	e0ce      	b.n	800c78a <_dtoa_r+0xb8a>
 800c5ec:	9b07      	ldr	r3, [sp, #28]
 800c5ee:	930c      	str	r3, [sp, #48]	; 0x30
 800c5f0:	2c00      	cmp	r4, #0
 800c5f2:	dd05      	ble.n	800c600 <_dtoa_r+0xa00>
 800c5f4:	0029      	movs	r1, r5
 800c5f6:	0022      	movs	r2, r4
 800c5f8:	0038      	movs	r0, r7
 800c5fa:	f000 fc3b 	bl	800ce74 <__lshift>
 800c5fe:	0005      	movs	r5, r0
 800c600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c602:	0028      	movs	r0, r5
 800c604:	2b00      	cmp	r3, #0
 800c606:	d022      	beq.n	800c64e <_dtoa_r+0xa4e>
 800c608:	0038      	movs	r0, r7
 800c60a:	6869      	ldr	r1, [r5, #4]
 800c60c:	f000 fa1c 	bl	800ca48 <_Balloc>
 800c610:	1e04      	subs	r4, r0, #0
 800c612:	d10f      	bne.n	800c634 <_dtoa_r+0xa34>
 800c614:	0002      	movs	r2, r0
 800c616:	4b05      	ldr	r3, [pc, #20]	; (800c62c <_dtoa_r+0xa2c>)
 800c618:	4905      	ldr	r1, [pc, #20]	; (800c630 <_dtoa_r+0xa30>)
 800c61a:	f7ff fb06 	bl	800bc2a <_dtoa_r+0x2a>
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	40240000 	.word	0x40240000
 800c624:	00000433 	.word	0x00000433
 800c628:	7ff00000 	.word	0x7ff00000
 800c62c:	0800e0ff 	.word	0x0800e0ff
 800c630:	000002ea 	.word	0x000002ea
 800c634:	0029      	movs	r1, r5
 800c636:	692b      	ldr	r3, [r5, #16]
 800c638:	310c      	adds	r1, #12
 800c63a:	1c9a      	adds	r2, r3, #2
 800c63c:	0092      	lsls	r2, r2, #2
 800c63e:	300c      	adds	r0, #12
 800c640:	f7fe fc23 	bl	800ae8a <memcpy>
 800c644:	2201      	movs	r2, #1
 800c646:	0021      	movs	r1, r4
 800c648:	0038      	movs	r0, r7
 800c64a:	f000 fc13 	bl	800ce74 <__lshift>
 800c64e:	9b06      	ldr	r3, [sp, #24]
 800c650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c652:	930a      	str	r3, [sp, #40]	; 0x28
 800c654:	3b01      	subs	r3, #1
 800c656:	189b      	adds	r3, r3, r2
 800c658:	2201      	movs	r2, #1
 800c65a:	002c      	movs	r4, r5
 800c65c:	0005      	movs	r5, r0
 800c65e:	9314      	str	r3, [sp, #80]	; 0x50
 800c660:	9b08      	ldr	r3, [sp, #32]
 800c662:	4013      	ands	r3, r2
 800c664:	930f      	str	r3, [sp, #60]	; 0x3c
 800c666:	0031      	movs	r1, r6
 800c668:	9805      	ldr	r0, [sp, #20]
 800c66a:	f7ff fa3d 	bl	800bae8 <quorem>
 800c66e:	0003      	movs	r3, r0
 800c670:	0021      	movs	r1, r4
 800c672:	3330      	adds	r3, #48	; 0x30
 800c674:	900d      	str	r0, [sp, #52]	; 0x34
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	9307      	str	r3, [sp, #28]
 800c67a:	f000 fc69 	bl	800cf50 <__mcmp>
 800c67e:	002a      	movs	r2, r5
 800c680:	900e      	str	r0, [sp, #56]	; 0x38
 800c682:	0031      	movs	r1, r6
 800c684:	0038      	movs	r0, r7
 800c686:	f000 fc7f 	bl	800cf88 <__mdiff>
 800c68a:	68c3      	ldr	r3, [r0, #12]
 800c68c:	9008      	str	r0, [sp, #32]
 800c68e:	9310      	str	r3, [sp, #64]	; 0x40
 800c690:	2301      	movs	r3, #1
 800c692:	930c      	str	r3, [sp, #48]	; 0x30
 800c694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c696:	2b00      	cmp	r3, #0
 800c698:	d104      	bne.n	800c6a4 <_dtoa_r+0xaa4>
 800c69a:	0001      	movs	r1, r0
 800c69c:	9805      	ldr	r0, [sp, #20]
 800c69e:	f000 fc57 	bl	800cf50 <__mcmp>
 800c6a2:	900c      	str	r0, [sp, #48]	; 0x30
 800c6a4:	0038      	movs	r0, r7
 800c6a6:	9908      	ldr	r1, [sp, #32]
 800c6a8:	f000 fa12 	bl	800cad0 <_Bfree>
 800c6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	9308      	str	r3, [sp, #32]
 800c6b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	d10c      	bne.n	800c6d8 <_dtoa_r+0xad8>
 800c6be:	9b07      	ldr	r3, [sp, #28]
 800c6c0:	2b39      	cmp	r3, #57	; 0x39
 800c6c2:	d026      	beq.n	800c712 <_dtoa_r+0xb12>
 800c6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dd02      	ble.n	800c6d0 <_dtoa_r+0xad0>
 800c6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6cc:	3331      	adds	r3, #49	; 0x31
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d2:	9a07      	ldr	r2, [sp, #28]
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e76a      	b.n	800c5ae <_dtoa_r+0x9ae>
 800c6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	db04      	blt.n	800c6e8 <_dtoa_r+0xae8>
 800c6de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	d11f      	bne.n	800c728 <_dtoa_r+0xb28>
 800c6e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	ddf0      	ble.n	800c6d0 <_dtoa_r+0xad0>
 800c6ee:	9905      	ldr	r1, [sp, #20]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	0038      	movs	r0, r7
 800c6f4:	f000 fbbe 	bl	800ce74 <__lshift>
 800c6f8:	0031      	movs	r1, r6
 800c6fa:	9005      	str	r0, [sp, #20]
 800c6fc:	f000 fc28 	bl	800cf50 <__mcmp>
 800c700:	2800      	cmp	r0, #0
 800c702:	dc03      	bgt.n	800c70c <_dtoa_r+0xb0c>
 800c704:	d1e4      	bne.n	800c6d0 <_dtoa_r+0xad0>
 800c706:	9b07      	ldr	r3, [sp, #28]
 800c708:	07db      	lsls	r3, r3, #31
 800c70a:	d5e1      	bpl.n	800c6d0 <_dtoa_r+0xad0>
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	2b39      	cmp	r3, #57	; 0x39
 800c710:	d1db      	bne.n	800c6ca <_dtoa_r+0xaca>
 800c712:	2339      	movs	r3, #57	; 0x39
 800c714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c716:	7013      	strb	r3, [r2, #0]
 800c718:	9b08      	ldr	r3, [sp, #32]
 800c71a:	9308      	str	r3, [sp, #32]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	781a      	ldrb	r2, [r3, #0]
 800c720:	2a39      	cmp	r2, #57	; 0x39
 800c722:	d068      	beq.n	800c7f6 <_dtoa_r+0xbf6>
 800c724:	3201      	adds	r2, #1
 800c726:	e7d5      	b.n	800c6d4 <_dtoa_r+0xad4>
 800c728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dd07      	ble.n	800c73e <_dtoa_r+0xb3e>
 800c72e:	9b07      	ldr	r3, [sp, #28]
 800c730:	2b39      	cmp	r3, #57	; 0x39
 800c732:	d0ee      	beq.n	800c712 <_dtoa_r+0xb12>
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c738:	3301      	adds	r3, #1
 800c73a:	7013      	strb	r3, [r2, #0]
 800c73c:	e737      	b.n	800c5ae <_dtoa_r+0x9ae>
 800c73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c740:	9a07      	ldr	r2, [sp, #28]
 800c742:	701a      	strb	r2, [r3, #0]
 800c744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c748:	4293      	cmp	r3, r2
 800c74a:	d03e      	beq.n	800c7ca <_dtoa_r+0xbca>
 800c74c:	2300      	movs	r3, #0
 800c74e:	220a      	movs	r2, #10
 800c750:	9905      	ldr	r1, [sp, #20]
 800c752:	0038      	movs	r0, r7
 800c754:	f000 f9e0 	bl	800cb18 <__multadd>
 800c758:	2300      	movs	r3, #0
 800c75a:	9005      	str	r0, [sp, #20]
 800c75c:	220a      	movs	r2, #10
 800c75e:	0021      	movs	r1, r4
 800c760:	0038      	movs	r0, r7
 800c762:	42ac      	cmp	r4, r5
 800c764:	d106      	bne.n	800c774 <_dtoa_r+0xb74>
 800c766:	f000 f9d7 	bl	800cb18 <__multadd>
 800c76a:	0004      	movs	r4, r0
 800c76c:	0005      	movs	r5, r0
 800c76e:	9b08      	ldr	r3, [sp, #32]
 800c770:	930a      	str	r3, [sp, #40]	; 0x28
 800c772:	e778      	b.n	800c666 <_dtoa_r+0xa66>
 800c774:	f000 f9d0 	bl	800cb18 <__multadd>
 800c778:	0029      	movs	r1, r5
 800c77a:	0004      	movs	r4, r0
 800c77c:	2300      	movs	r3, #0
 800c77e:	220a      	movs	r2, #10
 800c780:	0038      	movs	r0, r7
 800c782:	f000 f9c9 	bl	800cb18 <__multadd>
 800c786:	0005      	movs	r5, r0
 800c788:	e7f1      	b.n	800c76e <_dtoa_r+0xb6e>
 800c78a:	9b07      	ldr	r3, [sp, #28]
 800c78c:	930c      	str	r3, [sp, #48]	; 0x30
 800c78e:	2400      	movs	r4, #0
 800c790:	0031      	movs	r1, r6
 800c792:	9805      	ldr	r0, [sp, #20]
 800c794:	f7ff f9a8 	bl	800bae8 <quorem>
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	3030      	adds	r0, #48	; 0x30
 800c79c:	5518      	strb	r0, [r3, r4]
 800c79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a0:	3401      	adds	r4, #1
 800c7a2:	9007      	str	r0, [sp, #28]
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	dd07      	ble.n	800c7b8 <_dtoa_r+0xbb8>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	220a      	movs	r2, #10
 800c7ac:	0038      	movs	r0, r7
 800c7ae:	9905      	ldr	r1, [sp, #20]
 800c7b0:	f000 f9b2 	bl	800cb18 <__multadd>
 800c7b4:	9005      	str	r0, [sp, #20]
 800c7b6:	e7eb      	b.n	800c790 <_dtoa_r+0xb90>
 800c7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd00      	ble.n	800c7c2 <_dtoa_r+0xbc2>
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	2400      	movs	r4, #0
 800c7c4:	9b06      	ldr	r3, [sp, #24]
 800c7c6:	181b      	adds	r3, r3, r0
 800c7c8:	9308      	str	r3, [sp, #32]
 800c7ca:	9905      	ldr	r1, [sp, #20]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	0038      	movs	r0, r7
 800c7d0:	f000 fb50 	bl	800ce74 <__lshift>
 800c7d4:	0031      	movs	r1, r6
 800c7d6:	9005      	str	r0, [sp, #20]
 800c7d8:	f000 fbba 	bl	800cf50 <__mcmp>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	dc9b      	bgt.n	800c718 <_dtoa_r+0xb18>
 800c7e0:	d102      	bne.n	800c7e8 <_dtoa_r+0xbe8>
 800c7e2:	9b07      	ldr	r3, [sp, #28]
 800c7e4:	07db      	lsls	r3, r3, #31
 800c7e6:	d497      	bmi.n	800c718 <_dtoa_r+0xb18>
 800c7e8:	9b08      	ldr	r3, [sp, #32]
 800c7ea:	9308      	str	r3, [sp, #32]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	781a      	ldrb	r2, [r3, #0]
 800c7f0:	2a30      	cmp	r2, #48	; 0x30
 800c7f2:	d0fa      	beq.n	800c7ea <_dtoa_r+0xbea>
 800c7f4:	e6db      	b.n	800c5ae <_dtoa_r+0x9ae>
 800c7f6:	9a06      	ldr	r2, [sp, #24]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d18e      	bne.n	800c71a <_dtoa_r+0xb1a>
 800c7fc:	9b02      	ldr	r3, [sp, #8]
 800c7fe:	3301      	adds	r3, #1
 800c800:	9302      	str	r3, [sp, #8]
 800c802:	2331      	movs	r3, #49	; 0x31
 800c804:	e799      	b.n	800c73a <_dtoa_r+0xb3a>
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <_dtoa_r+0xc2c>)
 800c808:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c80a:	9306      	str	r3, [sp, #24]
 800c80c:	4b08      	ldr	r3, [pc, #32]	; (800c830 <_dtoa_r+0xc30>)
 800c80e:	2a00      	cmp	r2, #0
 800c810:	d001      	beq.n	800c816 <_dtoa_r+0xc16>
 800c812:	f7ff fa3f 	bl	800bc94 <_dtoa_r+0x94>
 800c816:	f7ff fa3f 	bl	800bc98 <_dtoa_r+0x98>
 800c81a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	dcb6      	bgt.n	800c78e <_dtoa_r+0xb8e>
 800c820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c822:	2b02      	cmp	r3, #2
 800c824:	dd00      	ble.n	800c828 <_dtoa_r+0xc28>
 800c826:	e6ac      	b.n	800c582 <_dtoa_r+0x982>
 800c828:	e7b1      	b.n	800c78e <_dtoa_r+0xb8e>
 800c82a:	46c0      	nop			; (mov r8, r8)
 800c82c:	0800e080 	.word	0x0800e080
 800c830:	0800e088 	.word	0x0800e088

0800c834 <__sflush_r>:
 800c834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c836:	898b      	ldrh	r3, [r1, #12]
 800c838:	0005      	movs	r5, r0
 800c83a:	000c      	movs	r4, r1
 800c83c:	071a      	lsls	r2, r3, #28
 800c83e:	d45f      	bmi.n	800c900 <__sflush_r+0xcc>
 800c840:	684a      	ldr	r2, [r1, #4]
 800c842:	2a00      	cmp	r2, #0
 800c844:	dc04      	bgt.n	800c850 <__sflush_r+0x1c>
 800c846:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c848:	2a00      	cmp	r2, #0
 800c84a:	dc01      	bgt.n	800c850 <__sflush_r+0x1c>
 800c84c:	2000      	movs	r0, #0
 800c84e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c850:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c852:	2f00      	cmp	r7, #0
 800c854:	d0fa      	beq.n	800c84c <__sflush_r+0x18>
 800c856:	2200      	movs	r2, #0
 800c858:	2180      	movs	r1, #128	; 0x80
 800c85a:	682e      	ldr	r6, [r5, #0]
 800c85c:	602a      	str	r2, [r5, #0]
 800c85e:	001a      	movs	r2, r3
 800c860:	0149      	lsls	r1, r1, #5
 800c862:	400a      	ands	r2, r1
 800c864:	420b      	tst	r3, r1
 800c866:	d034      	beq.n	800c8d2 <__sflush_r+0x9e>
 800c868:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	075b      	lsls	r3, r3, #29
 800c86e:	d506      	bpl.n	800c87e <__sflush_r+0x4a>
 800c870:	6863      	ldr	r3, [r4, #4]
 800c872:	1ac0      	subs	r0, r0, r3
 800c874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <__sflush_r+0x4a>
 800c87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c87c:	1ac0      	subs	r0, r0, r3
 800c87e:	0002      	movs	r2, r0
 800c880:	6a21      	ldr	r1, [r4, #32]
 800c882:	2300      	movs	r3, #0
 800c884:	0028      	movs	r0, r5
 800c886:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c888:	47b8      	blx	r7
 800c88a:	89a1      	ldrh	r1, [r4, #12]
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d106      	bne.n	800c89e <__sflush_r+0x6a>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	2b1d      	cmp	r3, #29
 800c894:	d831      	bhi.n	800c8fa <__sflush_r+0xc6>
 800c896:	4a2c      	ldr	r2, [pc, #176]	; (800c948 <__sflush_r+0x114>)
 800c898:	40da      	lsrs	r2, r3
 800c89a:	07d3      	lsls	r3, r2, #31
 800c89c:	d52d      	bpl.n	800c8fa <__sflush_r+0xc6>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	6063      	str	r3, [r4, #4]
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	04cb      	lsls	r3, r1, #19
 800c8a8:	d505      	bpl.n	800c8b6 <__sflush_r+0x82>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <__sflush_r+0x80>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d100      	bne.n	800c8b6 <__sflush_r+0x82>
 800c8b4:	6560      	str	r0, [r4, #84]	; 0x54
 800c8b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b8:	602e      	str	r6, [r5, #0]
 800c8ba:	2900      	cmp	r1, #0
 800c8bc:	d0c6      	beq.n	800c84c <__sflush_r+0x18>
 800c8be:	0023      	movs	r3, r4
 800c8c0:	3344      	adds	r3, #68	; 0x44
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	d002      	beq.n	800c8cc <__sflush_r+0x98>
 800c8c6:	0028      	movs	r0, r5
 800c8c8:	f000 fc86 	bl	800d1d8 <_free_r>
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	6360      	str	r0, [r4, #52]	; 0x34
 800c8d0:	e7bd      	b.n	800c84e <__sflush_r+0x1a>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	0028      	movs	r0, r5
 800c8d6:	6a21      	ldr	r1, [r4, #32]
 800c8d8:	47b8      	blx	r7
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	d1c5      	bne.n	800c86a <__sflush_r+0x36>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0c2      	beq.n	800c86a <__sflush_r+0x36>
 800c8e4:	2b1d      	cmp	r3, #29
 800c8e6:	d001      	beq.n	800c8ec <__sflush_r+0xb8>
 800c8e8:	2b16      	cmp	r3, #22
 800c8ea:	d101      	bne.n	800c8f0 <__sflush_r+0xbc>
 800c8ec:	602e      	str	r6, [r5, #0]
 800c8ee:	e7ad      	b.n	800c84c <__sflush_r+0x18>
 800c8f0:	2340      	movs	r3, #64	; 0x40
 800c8f2:	89a2      	ldrh	r2, [r4, #12]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	81a3      	strh	r3, [r4, #12]
 800c8f8:	e7a9      	b.n	800c84e <__sflush_r+0x1a>
 800c8fa:	2340      	movs	r3, #64	; 0x40
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	e7fa      	b.n	800c8f6 <__sflush_r+0xc2>
 800c900:	690f      	ldr	r7, [r1, #16]
 800c902:	2f00      	cmp	r7, #0
 800c904:	d0a2      	beq.n	800c84c <__sflush_r+0x18>
 800c906:	680a      	ldr	r2, [r1, #0]
 800c908:	600f      	str	r7, [r1, #0]
 800c90a:	1bd2      	subs	r2, r2, r7
 800c90c:	9201      	str	r2, [sp, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	079b      	lsls	r3, r3, #30
 800c912:	d100      	bne.n	800c916 <__sflush_r+0xe2>
 800c914:	694a      	ldr	r2, [r1, #20]
 800c916:	60a2      	str	r2, [r4, #8]
 800c918:	9b01      	ldr	r3, [sp, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	dc00      	bgt.n	800c920 <__sflush_r+0xec>
 800c91e:	e795      	b.n	800c84c <__sflush_r+0x18>
 800c920:	003a      	movs	r2, r7
 800c922:	0028      	movs	r0, r5
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	6a21      	ldr	r1, [r4, #32]
 800c928:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c92a:	47b0      	blx	r6
 800c92c:	2800      	cmp	r0, #0
 800c92e:	dc06      	bgt.n	800c93e <__sflush_r+0x10a>
 800c930:	2340      	movs	r3, #64	; 0x40
 800c932:	2001      	movs	r0, #1
 800c934:	89a2      	ldrh	r2, [r4, #12]
 800c936:	4240      	negs	r0, r0
 800c938:	4313      	orrs	r3, r2
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	e787      	b.n	800c84e <__sflush_r+0x1a>
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	183f      	adds	r7, r7, r0
 800c942:	1a1b      	subs	r3, r3, r0
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	e7e7      	b.n	800c918 <__sflush_r+0xe4>
 800c948:	20400001 	.word	0x20400001

0800c94c <_fflush_r>:
 800c94c:	690b      	ldr	r3, [r1, #16]
 800c94e:	b570      	push	{r4, r5, r6, lr}
 800c950:	0005      	movs	r5, r0
 800c952:	000c      	movs	r4, r1
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <_fflush_r+0x12>
 800c958:	2500      	movs	r5, #0
 800c95a:	0028      	movs	r0, r5
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	2800      	cmp	r0, #0
 800c960:	d004      	beq.n	800c96c <_fflush_r+0x20>
 800c962:	6983      	ldr	r3, [r0, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <_fflush_r+0x20>
 800c968:	f7fe f9c8 	bl	800acfc <__sinit>
 800c96c:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <_fflush_r+0x74>)
 800c96e:	429c      	cmp	r4, r3
 800c970:	d11b      	bne.n	800c9aa <_fflush_r+0x5e>
 800c972:	686c      	ldr	r4, [r5, #4]
 800c974:	220c      	movs	r2, #12
 800c976:	5ea3      	ldrsh	r3, [r4, r2]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d0ed      	beq.n	800c958 <_fflush_r+0xc>
 800c97c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c97e:	07d2      	lsls	r2, r2, #31
 800c980:	d404      	bmi.n	800c98c <_fflush_r+0x40>
 800c982:	059b      	lsls	r3, r3, #22
 800c984:	d402      	bmi.n	800c98c <_fflush_r+0x40>
 800c986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c988:	f7fe fa7d 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800c98c:	0028      	movs	r0, r5
 800c98e:	0021      	movs	r1, r4
 800c990:	f7ff ff50 	bl	800c834 <__sflush_r>
 800c994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c996:	0005      	movs	r5, r0
 800c998:	07db      	lsls	r3, r3, #31
 800c99a:	d4de      	bmi.n	800c95a <_fflush_r+0xe>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	059b      	lsls	r3, r3, #22
 800c9a0:	d4db      	bmi.n	800c95a <_fflush_r+0xe>
 800c9a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a4:	f7fe fa70 	bl	800ae88 <__retarget_lock_release_recursive>
 800c9a8:	e7d7      	b.n	800c95a <_fflush_r+0xe>
 800c9aa:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <_fflush_r+0x78>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	d101      	bne.n	800c9b4 <_fflush_r+0x68>
 800c9b0:	68ac      	ldr	r4, [r5, #8]
 800c9b2:	e7df      	b.n	800c974 <_fflush_r+0x28>
 800c9b4:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <_fflush_r+0x7c>)
 800c9b6:	429c      	cmp	r4, r3
 800c9b8:	d1dc      	bne.n	800c974 <_fflush_r+0x28>
 800c9ba:	68ec      	ldr	r4, [r5, #12]
 800c9bc:	e7da      	b.n	800c974 <_fflush_r+0x28>
 800c9be:	46c0      	nop			; (mov r8, r8)
 800c9c0:	0800e008 	.word	0x0800e008
 800c9c4:	0800e028 	.word	0x0800e028
 800c9c8:	0800dfe8 	.word	0x0800dfe8

0800c9cc <_localeconv_r>:
 800c9cc:	4800      	ldr	r0, [pc, #0]	; (800c9d0 <_localeconv_r+0x4>)
 800c9ce:	4770      	bx	lr
 800c9d0:	2000016c 	.word	0x2000016c

0800c9d4 <_lseek_r>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	0004      	movs	r4, r0
 800c9d8:	0008      	movs	r0, r1
 800c9da:	0011      	movs	r1, r2
 800c9dc:	001a      	movs	r2, r3
 800c9de:	2300      	movs	r3, #0
 800c9e0:	4d05      	ldr	r5, [pc, #20]	; (800c9f8 <_lseek_r+0x24>)
 800c9e2:	602b      	str	r3, [r5, #0]
 800c9e4:	f7f6 fb06 	bl	8002ff4 <_lseek>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d103      	bne.n	800c9f4 <_lseek_r+0x20>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d000      	beq.n	800c9f4 <_lseek_r+0x20>
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	46c0      	nop			; (mov r8, r8)
 800c9f8:	20001e34 	.word	0x20001e34

0800c9fc <malloc>:
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <malloc+0x10>)
 800ca00:	0001      	movs	r1, r0
 800ca02:	6818      	ldr	r0, [r3, #0]
 800ca04:	f7fe fa74 	bl	800aef0 <_malloc_r>
 800ca08:	bd10      	pop	{r4, pc}
 800ca0a:	46c0      	nop			; (mov r8, r8)
 800ca0c:	20000018 	.word	0x20000018

0800ca10 <memchr>:
 800ca10:	b2c9      	uxtb	r1, r1
 800ca12:	1882      	adds	r2, r0, r2
 800ca14:	4290      	cmp	r0, r2
 800ca16:	d101      	bne.n	800ca1c <memchr+0xc>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	4770      	bx	lr
 800ca1c:	7803      	ldrb	r3, [r0, #0]
 800ca1e:	428b      	cmp	r3, r1
 800ca20:	d0fb      	beq.n	800ca1a <memchr+0xa>
 800ca22:	3001      	adds	r0, #1
 800ca24:	e7f6      	b.n	800ca14 <memchr+0x4>
	...

0800ca28 <__malloc_lock>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	4802      	ldr	r0, [pc, #8]	; (800ca34 <__malloc_lock+0xc>)
 800ca2c:	f7fe fa2b 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	46c0      	nop			; (mov r8, r8)
 800ca34:	20001e28 	.word	0x20001e28

0800ca38 <__malloc_unlock>:
 800ca38:	b510      	push	{r4, lr}
 800ca3a:	4802      	ldr	r0, [pc, #8]	; (800ca44 <__malloc_unlock+0xc>)
 800ca3c:	f7fe fa24 	bl	800ae88 <__retarget_lock_release_recursive>
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	46c0      	nop			; (mov r8, r8)
 800ca44:	20001e28 	.word	0x20001e28

0800ca48 <_Balloc>:
 800ca48:	b570      	push	{r4, r5, r6, lr}
 800ca4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca4c:	0006      	movs	r6, r0
 800ca4e:	000c      	movs	r4, r1
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	d10e      	bne.n	800ca72 <_Balloc+0x2a>
 800ca54:	2010      	movs	r0, #16
 800ca56:	f7ff ffd1 	bl	800c9fc <malloc>
 800ca5a:	1e02      	subs	r2, r0, #0
 800ca5c:	6270      	str	r0, [r6, #36]	; 0x24
 800ca5e:	d104      	bne.n	800ca6a <_Balloc+0x22>
 800ca60:	2166      	movs	r1, #102	; 0x66
 800ca62:	4b19      	ldr	r3, [pc, #100]	; (800cac8 <_Balloc+0x80>)
 800ca64:	4819      	ldr	r0, [pc, #100]	; (800cacc <_Balloc+0x84>)
 800ca66:	f000 fd77 	bl	800d558 <__assert_func>
 800ca6a:	6045      	str	r5, [r0, #4]
 800ca6c:	6085      	str	r5, [r0, #8]
 800ca6e:	6005      	str	r5, [r0, #0]
 800ca70:	60c5      	str	r5, [r0, #12]
 800ca72:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ca74:	68eb      	ldr	r3, [r5, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d013      	beq.n	800caa2 <_Balloc+0x5a>
 800ca7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca7c:	00a2      	lsls	r2, r4, #2
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	189b      	adds	r3, r3, r2
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d118      	bne.n	800caba <_Balloc+0x72>
 800ca88:	2101      	movs	r1, #1
 800ca8a:	000d      	movs	r5, r1
 800ca8c:	40a5      	lsls	r5, r4
 800ca8e:	1d6a      	adds	r2, r5, #5
 800ca90:	0030      	movs	r0, r6
 800ca92:	0092      	lsls	r2, r2, #2
 800ca94:	f000 fb74 	bl	800d180 <_calloc_r>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d00c      	beq.n	800cab6 <_Balloc+0x6e>
 800ca9c:	6044      	str	r4, [r0, #4]
 800ca9e:	6085      	str	r5, [r0, #8]
 800caa0:	e00d      	b.n	800cabe <_Balloc+0x76>
 800caa2:	2221      	movs	r2, #33	; 0x21
 800caa4:	2104      	movs	r1, #4
 800caa6:	0030      	movs	r0, r6
 800caa8:	f000 fb6a 	bl	800d180 <_calloc_r>
 800caac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800caae:	60e8      	str	r0, [r5, #12]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e1      	bne.n	800ca7a <_Balloc+0x32>
 800cab6:	2000      	movs	r0, #0
 800cab8:	bd70      	pop	{r4, r5, r6, pc}
 800caba:	6802      	ldr	r2, [r0, #0]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	2300      	movs	r3, #0
 800cac0:	6103      	str	r3, [r0, #16]
 800cac2:	60c3      	str	r3, [r0, #12]
 800cac4:	e7f8      	b.n	800cab8 <_Balloc+0x70>
 800cac6:	46c0      	nop			; (mov r8, r8)
 800cac8:	0800e08d 	.word	0x0800e08d
 800cacc:	0800e110 	.word	0x0800e110

0800cad0 <_Bfree>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cad4:	0005      	movs	r5, r0
 800cad6:	000c      	movs	r4, r1
 800cad8:	2e00      	cmp	r6, #0
 800cada:	d10e      	bne.n	800cafa <_Bfree+0x2a>
 800cadc:	2010      	movs	r0, #16
 800cade:	f7ff ff8d 	bl	800c9fc <malloc>
 800cae2:	1e02      	subs	r2, r0, #0
 800cae4:	6268      	str	r0, [r5, #36]	; 0x24
 800cae6:	d104      	bne.n	800caf2 <_Bfree+0x22>
 800cae8:	218a      	movs	r1, #138	; 0x8a
 800caea:	4b09      	ldr	r3, [pc, #36]	; (800cb10 <_Bfree+0x40>)
 800caec:	4809      	ldr	r0, [pc, #36]	; (800cb14 <_Bfree+0x44>)
 800caee:	f000 fd33 	bl	800d558 <__assert_func>
 800caf2:	6046      	str	r6, [r0, #4]
 800caf4:	6086      	str	r6, [r0, #8]
 800caf6:	6006      	str	r6, [r0, #0]
 800caf8:	60c6      	str	r6, [r0, #12]
 800cafa:	2c00      	cmp	r4, #0
 800cafc:	d007      	beq.n	800cb0e <_Bfree+0x3e>
 800cafe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb00:	6862      	ldr	r2, [r4, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	0092      	lsls	r2, r2, #2
 800cb06:	189b      	adds	r3, r3, r2
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	6022      	str	r2, [r4, #0]
 800cb0c:	601c      	str	r4, [r3, #0]
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	0800e08d 	.word	0x0800e08d
 800cb14:	0800e110 	.word	0x0800e110

0800cb18 <__multadd>:
 800cb18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb1a:	000e      	movs	r6, r1
 800cb1c:	9001      	str	r0, [sp, #4]
 800cb1e:	000c      	movs	r4, r1
 800cb20:	001d      	movs	r5, r3
 800cb22:	2000      	movs	r0, #0
 800cb24:	690f      	ldr	r7, [r1, #16]
 800cb26:	3614      	adds	r6, #20
 800cb28:	6833      	ldr	r3, [r6, #0]
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	b299      	uxth	r1, r3
 800cb2e:	4351      	muls	r1, r2
 800cb30:	0c1b      	lsrs	r3, r3, #16
 800cb32:	4353      	muls	r3, r2
 800cb34:	1949      	adds	r1, r1, r5
 800cb36:	0c0d      	lsrs	r5, r1, #16
 800cb38:	195b      	adds	r3, r3, r5
 800cb3a:	0c1d      	lsrs	r5, r3, #16
 800cb3c:	b289      	uxth	r1, r1
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	185b      	adds	r3, r3, r1
 800cb42:	c608      	stmia	r6!, {r3}
 800cb44:	4287      	cmp	r7, r0
 800cb46:	dcef      	bgt.n	800cb28 <__multadd+0x10>
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	d022      	beq.n	800cb92 <__multadd+0x7a>
 800cb4c:	68a3      	ldr	r3, [r4, #8]
 800cb4e:	42bb      	cmp	r3, r7
 800cb50:	dc19      	bgt.n	800cb86 <__multadd+0x6e>
 800cb52:	6863      	ldr	r3, [r4, #4]
 800cb54:	9801      	ldr	r0, [sp, #4]
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	f7ff ff76 	bl	800ca48 <_Balloc>
 800cb5c:	1e06      	subs	r6, r0, #0
 800cb5e:	d105      	bne.n	800cb6c <__multadd+0x54>
 800cb60:	0002      	movs	r2, r0
 800cb62:	21b5      	movs	r1, #181	; 0xb5
 800cb64:	4b0c      	ldr	r3, [pc, #48]	; (800cb98 <__multadd+0x80>)
 800cb66:	480d      	ldr	r0, [pc, #52]	; (800cb9c <__multadd+0x84>)
 800cb68:	f000 fcf6 	bl	800d558 <__assert_func>
 800cb6c:	0021      	movs	r1, r4
 800cb6e:	6923      	ldr	r3, [r4, #16]
 800cb70:	310c      	adds	r1, #12
 800cb72:	1c9a      	adds	r2, r3, #2
 800cb74:	0092      	lsls	r2, r2, #2
 800cb76:	300c      	adds	r0, #12
 800cb78:	f7fe f987 	bl	800ae8a <memcpy>
 800cb7c:	0021      	movs	r1, r4
 800cb7e:	9801      	ldr	r0, [sp, #4]
 800cb80:	f7ff ffa6 	bl	800cad0 <_Bfree>
 800cb84:	0034      	movs	r4, r6
 800cb86:	1d3b      	adds	r3, r7, #4
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	18e3      	adds	r3, r4, r3
 800cb8c:	605d      	str	r5, [r3, #4]
 800cb8e:	1c7b      	adds	r3, r7, #1
 800cb90:	6123      	str	r3, [r4, #16]
 800cb92:	0020      	movs	r0, r4
 800cb94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	0800e0ff 	.word	0x0800e0ff
 800cb9c:	0800e110 	.word	0x0800e110

0800cba0 <__hi0bits>:
 800cba0:	0003      	movs	r3, r0
 800cba2:	0c02      	lsrs	r2, r0, #16
 800cba4:	2000      	movs	r0, #0
 800cba6:	4282      	cmp	r2, r0
 800cba8:	d101      	bne.n	800cbae <__hi0bits+0xe>
 800cbaa:	041b      	lsls	r3, r3, #16
 800cbac:	3010      	adds	r0, #16
 800cbae:	0e1a      	lsrs	r2, r3, #24
 800cbb0:	d101      	bne.n	800cbb6 <__hi0bits+0x16>
 800cbb2:	3008      	adds	r0, #8
 800cbb4:	021b      	lsls	r3, r3, #8
 800cbb6:	0f1a      	lsrs	r2, r3, #28
 800cbb8:	d101      	bne.n	800cbbe <__hi0bits+0x1e>
 800cbba:	3004      	adds	r0, #4
 800cbbc:	011b      	lsls	r3, r3, #4
 800cbbe:	0f9a      	lsrs	r2, r3, #30
 800cbc0:	d101      	bne.n	800cbc6 <__hi0bits+0x26>
 800cbc2:	3002      	adds	r0, #2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	db03      	blt.n	800cbd2 <__hi0bits+0x32>
 800cbca:	3001      	adds	r0, #1
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	d400      	bmi.n	800cbd2 <__hi0bits+0x32>
 800cbd0:	2020      	movs	r0, #32
 800cbd2:	4770      	bx	lr

0800cbd4 <__lo0bits>:
 800cbd4:	6803      	ldr	r3, [r0, #0]
 800cbd6:	0002      	movs	r2, r0
 800cbd8:	2107      	movs	r1, #7
 800cbda:	0018      	movs	r0, r3
 800cbdc:	4008      	ands	r0, r1
 800cbde:	420b      	tst	r3, r1
 800cbe0:	d00d      	beq.n	800cbfe <__lo0bits+0x2a>
 800cbe2:	3906      	subs	r1, #6
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	420b      	tst	r3, r1
 800cbe8:	d105      	bne.n	800cbf6 <__lo0bits+0x22>
 800cbea:	3002      	adds	r0, #2
 800cbec:	4203      	tst	r3, r0
 800cbee:	d003      	beq.n	800cbf8 <__lo0bits+0x24>
 800cbf0:	40cb      	lsrs	r3, r1
 800cbf2:	0008      	movs	r0, r1
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	4770      	bx	lr
 800cbf8:	089b      	lsrs	r3, r3, #2
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	e7fb      	b.n	800cbf6 <__lo0bits+0x22>
 800cbfe:	b299      	uxth	r1, r3
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d101      	bne.n	800cc08 <__lo0bits+0x34>
 800cc04:	2010      	movs	r0, #16
 800cc06:	0c1b      	lsrs	r3, r3, #16
 800cc08:	b2d9      	uxtb	r1, r3
 800cc0a:	2900      	cmp	r1, #0
 800cc0c:	d101      	bne.n	800cc12 <__lo0bits+0x3e>
 800cc0e:	3008      	adds	r0, #8
 800cc10:	0a1b      	lsrs	r3, r3, #8
 800cc12:	0719      	lsls	r1, r3, #28
 800cc14:	d101      	bne.n	800cc1a <__lo0bits+0x46>
 800cc16:	3004      	adds	r0, #4
 800cc18:	091b      	lsrs	r3, r3, #4
 800cc1a:	0799      	lsls	r1, r3, #30
 800cc1c:	d101      	bne.n	800cc22 <__lo0bits+0x4e>
 800cc1e:	3002      	adds	r0, #2
 800cc20:	089b      	lsrs	r3, r3, #2
 800cc22:	07d9      	lsls	r1, r3, #31
 800cc24:	d4e9      	bmi.n	800cbfa <__lo0bits+0x26>
 800cc26:	3001      	adds	r0, #1
 800cc28:	085b      	lsrs	r3, r3, #1
 800cc2a:	d1e6      	bne.n	800cbfa <__lo0bits+0x26>
 800cc2c:	2020      	movs	r0, #32
 800cc2e:	e7e2      	b.n	800cbf6 <__lo0bits+0x22>

0800cc30 <__i2b>:
 800cc30:	b510      	push	{r4, lr}
 800cc32:	000c      	movs	r4, r1
 800cc34:	2101      	movs	r1, #1
 800cc36:	f7ff ff07 	bl	800ca48 <_Balloc>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d106      	bne.n	800cc4c <__i2b+0x1c>
 800cc3e:	21a0      	movs	r1, #160	; 0xa0
 800cc40:	0002      	movs	r2, r0
 800cc42:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <__i2b+0x24>)
 800cc44:	4804      	ldr	r0, [pc, #16]	; (800cc58 <__i2b+0x28>)
 800cc46:	0049      	lsls	r1, r1, #1
 800cc48:	f000 fc86 	bl	800d558 <__assert_func>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6144      	str	r4, [r0, #20]
 800cc50:	6103      	str	r3, [r0, #16]
 800cc52:	bd10      	pop	{r4, pc}
 800cc54:	0800e0ff 	.word	0x0800e0ff
 800cc58:	0800e110 	.word	0x0800e110

0800cc5c <__multiply>:
 800cc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5e:	690b      	ldr	r3, [r1, #16]
 800cc60:	0014      	movs	r4, r2
 800cc62:	6912      	ldr	r2, [r2, #16]
 800cc64:	000d      	movs	r5, r1
 800cc66:	b089      	sub	sp, #36	; 0x24
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	da01      	bge.n	800cc70 <__multiply+0x14>
 800cc6c:	0025      	movs	r5, r4
 800cc6e:	000c      	movs	r4, r1
 800cc70:	692f      	ldr	r7, [r5, #16]
 800cc72:	6926      	ldr	r6, [r4, #16]
 800cc74:	6869      	ldr	r1, [r5, #4]
 800cc76:	19bb      	adds	r3, r7, r6
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	68ab      	ldr	r3, [r5, #8]
 800cc7c:	19ba      	adds	r2, r7, r6
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	da00      	bge.n	800cc84 <__multiply+0x28>
 800cc82:	3101      	adds	r1, #1
 800cc84:	f7ff fee0 	bl	800ca48 <_Balloc>
 800cc88:	9001      	str	r0, [sp, #4]
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d106      	bne.n	800cc9c <__multiply+0x40>
 800cc8e:	215e      	movs	r1, #94	; 0x5e
 800cc90:	0002      	movs	r2, r0
 800cc92:	4b48      	ldr	r3, [pc, #288]	; (800cdb4 <__multiply+0x158>)
 800cc94:	4848      	ldr	r0, [pc, #288]	; (800cdb8 <__multiply+0x15c>)
 800cc96:	31ff      	adds	r1, #255	; 0xff
 800cc98:	f000 fc5e 	bl	800d558 <__assert_func>
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	3314      	adds	r3, #20
 800cca2:	469c      	mov	ip, r3
 800cca4:	19bb      	adds	r3, r7, r6
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4463      	add	r3, ip
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	4663      	mov	r3, ip
 800ccae:	9903      	ldr	r1, [sp, #12]
 800ccb0:	428b      	cmp	r3, r1
 800ccb2:	d32c      	bcc.n	800cd0e <__multiply+0xb2>
 800ccb4:	002b      	movs	r3, r5
 800ccb6:	0022      	movs	r2, r4
 800ccb8:	3314      	adds	r3, #20
 800ccba:	00bf      	lsls	r7, r7, #2
 800ccbc:	3214      	adds	r2, #20
 800ccbe:	9306      	str	r3, [sp, #24]
 800ccc0:	00b6      	lsls	r6, r6, #2
 800ccc2:	19db      	adds	r3, r3, r7
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	1993      	adds	r3, r2, r6
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	2304      	movs	r3, #4
 800cccc:	9305      	str	r3, [sp, #20]
 800ccce:	002b      	movs	r3, r5
 800ccd0:	9904      	ldr	r1, [sp, #16]
 800ccd2:	3315      	adds	r3, #21
 800ccd4:	9200      	str	r2, [sp, #0]
 800ccd6:	4299      	cmp	r1, r3
 800ccd8:	d305      	bcc.n	800cce6 <__multiply+0x8a>
 800ccda:	1b4b      	subs	r3, r1, r5
 800ccdc:	3b15      	subs	r3, #21
 800ccde:	089b      	lsrs	r3, r3, #2
 800cce0:	3301      	adds	r3, #1
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	9305      	str	r3, [sp, #20]
 800cce6:	9b07      	ldr	r3, [sp, #28]
 800cce8:	9a00      	ldr	r2, [sp, #0]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d311      	bcc.n	800cd12 <__multiply+0xb6>
 800ccee:	9b02      	ldr	r3, [sp, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	dd06      	ble.n	800cd02 <__multiply+0xa6>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	3b04      	subs	r3, #4
 800ccf8:	9303      	str	r3, [sp, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d053      	beq.n	800cdaa <__multiply+0x14e>
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	9a02      	ldr	r2, [sp, #8]
 800cd06:	0018      	movs	r0, r3
 800cd08:	611a      	str	r2, [r3, #16]
 800cd0a:	b009      	add	sp, #36	; 0x24
 800cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0e:	c304      	stmia	r3!, {r2}
 800cd10:	e7cd      	b.n	800ccae <__multiply+0x52>
 800cd12:	9b00      	ldr	r3, [sp, #0]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	b298      	uxth	r0, r3
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d01b      	beq.n	800cd54 <__multiply+0xf8>
 800cd1c:	4667      	mov	r7, ip
 800cd1e:	2400      	movs	r4, #0
 800cd20:	9e06      	ldr	r6, [sp, #24]
 800cd22:	ce02      	ldmia	r6!, {r1}
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	b28b      	uxth	r3, r1
 800cd28:	4343      	muls	r3, r0
 800cd2a:	b292      	uxth	r2, r2
 800cd2c:	189b      	adds	r3, r3, r2
 800cd2e:	191b      	adds	r3, r3, r4
 800cd30:	0c0c      	lsrs	r4, r1, #16
 800cd32:	4344      	muls	r4, r0
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	0c11      	lsrs	r1, r2, #16
 800cd38:	1861      	adds	r1, r4, r1
 800cd3a:	0c1c      	lsrs	r4, r3, #16
 800cd3c:	1909      	adds	r1, r1, r4
 800cd3e:	0c0c      	lsrs	r4, r1, #16
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	0409      	lsls	r1, r1, #16
 800cd44:	430b      	orrs	r3, r1
 800cd46:	c708      	stmia	r7!, {r3}
 800cd48:	9b04      	ldr	r3, [sp, #16]
 800cd4a:	42b3      	cmp	r3, r6
 800cd4c:	d8e9      	bhi.n	800cd22 <__multiply+0xc6>
 800cd4e:	4663      	mov	r3, ip
 800cd50:	9a05      	ldr	r2, [sp, #20]
 800cd52:	509c      	str	r4, [r3, r2]
 800cd54:	9b00      	ldr	r3, [sp, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	0c1e      	lsrs	r6, r3, #16
 800cd5a:	d020      	beq.n	800cd9e <__multiply+0x142>
 800cd5c:	4663      	mov	r3, ip
 800cd5e:	002c      	movs	r4, r5
 800cd60:	4660      	mov	r0, ip
 800cd62:	2700      	movs	r7, #0
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3414      	adds	r4, #20
 800cd68:	6822      	ldr	r2, [r4, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	b291      	uxth	r1, r2
 800cd6e:	4371      	muls	r1, r6
 800cd70:	6802      	ldr	r2, [r0, #0]
 800cd72:	0c12      	lsrs	r2, r2, #16
 800cd74:	1889      	adds	r1, r1, r2
 800cd76:	19cf      	adds	r7, r1, r7
 800cd78:	0439      	lsls	r1, r7, #16
 800cd7a:	430b      	orrs	r3, r1
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	cc02      	ldmia	r4!, {r1}
 800cd80:	6843      	ldr	r3, [r0, #4]
 800cd82:	0c09      	lsrs	r1, r1, #16
 800cd84:	4371      	muls	r1, r6
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	0c3f      	lsrs	r7, r7, #16
 800cd8a:	18cb      	adds	r3, r1, r3
 800cd8c:	9a04      	ldr	r2, [sp, #16]
 800cd8e:	19db      	adds	r3, r3, r7
 800cd90:	0c1f      	lsrs	r7, r3, #16
 800cd92:	3004      	adds	r0, #4
 800cd94:	42a2      	cmp	r2, r4
 800cd96:	d8e7      	bhi.n	800cd68 <__multiply+0x10c>
 800cd98:	4662      	mov	r2, ip
 800cd9a:	9905      	ldr	r1, [sp, #20]
 800cd9c:	5053      	str	r3, [r2, r1]
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	3304      	adds	r3, #4
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	2304      	movs	r3, #4
 800cda6:	449c      	add	ip, r3
 800cda8:	e79d      	b.n	800cce6 <__multiply+0x8a>
 800cdaa:	9b02      	ldr	r3, [sp, #8]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	9302      	str	r3, [sp, #8]
 800cdb0:	e79d      	b.n	800ccee <__multiply+0x92>
 800cdb2:	46c0      	nop			; (mov r8, r8)
 800cdb4:	0800e0ff 	.word	0x0800e0ff
 800cdb8:	0800e110 	.word	0x0800e110

0800cdbc <__pow5mult>:
 800cdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	0015      	movs	r5, r2
 800cdc2:	0007      	movs	r7, r0
 800cdc4:	000e      	movs	r6, r1
 800cdc6:	401a      	ands	r2, r3
 800cdc8:	421d      	tst	r5, r3
 800cdca:	d008      	beq.n	800cdde <__pow5mult+0x22>
 800cdcc:	4925      	ldr	r1, [pc, #148]	; (800ce64 <__pow5mult+0xa8>)
 800cdce:	3a01      	subs	r2, #1
 800cdd0:	0092      	lsls	r2, r2, #2
 800cdd2:	5852      	ldr	r2, [r2, r1]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	0031      	movs	r1, r6
 800cdd8:	f7ff fe9e 	bl	800cb18 <__multadd>
 800cddc:	0006      	movs	r6, r0
 800cdde:	10ad      	asrs	r5, r5, #2
 800cde0:	d03d      	beq.n	800ce5e <__pow5mult+0xa2>
 800cde2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cde4:	2c00      	cmp	r4, #0
 800cde6:	d10f      	bne.n	800ce08 <__pow5mult+0x4c>
 800cde8:	2010      	movs	r0, #16
 800cdea:	f7ff fe07 	bl	800c9fc <malloc>
 800cdee:	1e02      	subs	r2, r0, #0
 800cdf0:	6278      	str	r0, [r7, #36]	; 0x24
 800cdf2:	d105      	bne.n	800ce00 <__pow5mult+0x44>
 800cdf4:	21d7      	movs	r1, #215	; 0xd7
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <__pow5mult+0xac>)
 800cdf8:	481c      	ldr	r0, [pc, #112]	; (800ce6c <__pow5mult+0xb0>)
 800cdfa:	0049      	lsls	r1, r1, #1
 800cdfc:	f000 fbac 	bl	800d558 <__assert_func>
 800ce00:	6044      	str	r4, [r0, #4]
 800ce02:	6084      	str	r4, [r0, #8]
 800ce04:	6004      	str	r4, [r0, #0]
 800ce06:	60c4      	str	r4, [r0, #12]
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	689c      	ldr	r4, [r3, #8]
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	d108      	bne.n	800ce24 <__pow5mult+0x68>
 800ce12:	0038      	movs	r0, r7
 800ce14:	4916      	ldr	r1, [pc, #88]	; (800ce70 <__pow5mult+0xb4>)
 800ce16:	f7ff ff0b 	bl	800cc30 <__i2b>
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	0004      	movs	r4, r0
 800ce1e:	6098      	str	r0, [r3, #8]
 800ce20:	2300      	movs	r3, #0
 800ce22:	6003      	str	r3, [r0, #0]
 800ce24:	2301      	movs	r3, #1
 800ce26:	421d      	tst	r5, r3
 800ce28:	d00a      	beq.n	800ce40 <__pow5mult+0x84>
 800ce2a:	0031      	movs	r1, r6
 800ce2c:	0022      	movs	r2, r4
 800ce2e:	0038      	movs	r0, r7
 800ce30:	f7ff ff14 	bl	800cc5c <__multiply>
 800ce34:	0031      	movs	r1, r6
 800ce36:	9001      	str	r0, [sp, #4]
 800ce38:	0038      	movs	r0, r7
 800ce3a:	f7ff fe49 	bl	800cad0 <_Bfree>
 800ce3e:	9e01      	ldr	r6, [sp, #4]
 800ce40:	106d      	asrs	r5, r5, #1
 800ce42:	d00c      	beq.n	800ce5e <__pow5mult+0xa2>
 800ce44:	6820      	ldr	r0, [r4, #0]
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d107      	bne.n	800ce5a <__pow5mult+0x9e>
 800ce4a:	0022      	movs	r2, r4
 800ce4c:	0021      	movs	r1, r4
 800ce4e:	0038      	movs	r0, r7
 800ce50:	f7ff ff04 	bl	800cc5c <__multiply>
 800ce54:	2300      	movs	r3, #0
 800ce56:	6020      	str	r0, [r4, #0]
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	0004      	movs	r4, r0
 800ce5c:	e7e2      	b.n	800ce24 <__pow5mult+0x68>
 800ce5e:	0030      	movs	r0, r6
 800ce60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce62:	46c0      	nop			; (mov r8, r8)
 800ce64:	0800e260 	.word	0x0800e260
 800ce68:	0800e08d 	.word	0x0800e08d
 800ce6c:	0800e110 	.word	0x0800e110
 800ce70:	00000271 	.word	0x00000271

0800ce74 <__lshift>:
 800ce74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce76:	000c      	movs	r4, r1
 800ce78:	0017      	movs	r7, r2
 800ce7a:	6923      	ldr	r3, [r4, #16]
 800ce7c:	1155      	asrs	r5, r2, #5
 800ce7e:	b087      	sub	sp, #28
 800ce80:	18eb      	adds	r3, r5, r3
 800ce82:	9302      	str	r3, [sp, #8]
 800ce84:	3301      	adds	r3, #1
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	6849      	ldr	r1, [r1, #4]
 800ce8a:	68a3      	ldr	r3, [r4, #8]
 800ce8c:	9004      	str	r0, [sp, #16]
 800ce8e:	9a01      	ldr	r2, [sp, #4]
 800ce90:	4293      	cmp	r3, r2
 800ce92:	db10      	blt.n	800ceb6 <__lshift+0x42>
 800ce94:	9804      	ldr	r0, [sp, #16]
 800ce96:	f7ff fdd7 	bl	800ca48 <_Balloc>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	0002      	movs	r2, r0
 800ce9e:	0006      	movs	r6, r0
 800cea0:	0019      	movs	r1, r3
 800cea2:	3214      	adds	r2, #20
 800cea4:	4298      	cmp	r0, r3
 800cea6:	d10c      	bne.n	800cec2 <__lshift+0x4e>
 800cea8:	21da      	movs	r1, #218	; 0xda
 800ceaa:	0002      	movs	r2, r0
 800ceac:	4b26      	ldr	r3, [pc, #152]	; (800cf48 <__lshift+0xd4>)
 800ceae:	4827      	ldr	r0, [pc, #156]	; (800cf4c <__lshift+0xd8>)
 800ceb0:	31ff      	adds	r1, #255	; 0xff
 800ceb2:	f000 fb51 	bl	800d558 <__assert_func>
 800ceb6:	3101      	adds	r1, #1
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	e7e8      	b.n	800ce8e <__lshift+0x1a>
 800cebc:	0098      	lsls	r0, r3, #2
 800cebe:	5011      	str	r1, [r2, r0]
 800cec0:	3301      	adds	r3, #1
 800cec2:	42ab      	cmp	r3, r5
 800cec4:	dbfa      	blt.n	800cebc <__lshift+0x48>
 800cec6:	43eb      	mvns	r3, r5
 800cec8:	17db      	asrs	r3, r3, #31
 800ceca:	401d      	ands	r5, r3
 800cecc:	211f      	movs	r1, #31
 800cece:	0023      	movs	r3, r4
 800ced0:	0038      	movs	r0, r7
 800ced2:	00ad      	lsls	r5, r5, #2
 800ced4:	1955      	adds	r5, r2, r5
 800ced6:	6922      	ldr	r2, [r4, #16]
 800ced8:	3314      	adds	r3, #20
 800ceda:	0092      	lsls	r2, r2, #2
 800cedc:	4008      	ands	r0, r1
 800cede:	4684      	mov	ip, r0
 800cee0:	189a      	adds	r2, r3, r2
 800cee2:	420f      	tst	r7, r1
 800cee4:	d02a      	beq.n	800cf3c <__lshift+0xc8>
 800cee6:	3101      	adds	r1, #1
 800cee8:	1a09      	subs	r1, r1, r0
 800ceea:	9105      	str	r1, [sp, #20]
 800ceec:	2100      	movs	r1, #0
 800ceee:	9503      	str	r5, [sp, #12]
 800cef0:	4667      	mov	r7, ip
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	40b8      	lsls	r0, r7
 800cef6:	4301      	orrs	r1, r0
 800cef8:	9803      	ldr	r0, [sp, #12]
 800cefa:	c002      	stmia	r0!, {r1}
 800cefc:	cb02      	ldmia	r3!, {r1}
 800cefe:	9003      	str	r0, [sp, #12]
 800cf00:	9805      	ldr	r0, [sp, #20]
 800cf02:	40c1      	lsrs	r1, r0
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d8f3      	bhi.n	800cef0 <__lshift+0x7c>
 800cf08:	0020      	movs	r0, r4
 800cf0a:	3015      	adds	r0, #21
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	4282      	cmp	r2, r0
 800cf10:	d304      	bcc.n	800cf1c <__lshift+0xa8>
 800cf12:	1b13      	subs	r3, r2, r4
 800cf14:	3b15      	subs	r3, #21
 800cf16:	089b      	lsrs	r3, r3, #2
 800cf18:	3301      	adds	r3, #1
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	50e9      	str	r1, [r5, r3]
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	d002      	beq.n	800cf28 <__lshift+0xb4>
 800cf22:	9b02      	ldr	r3, [sp, #8]
 800cf24:	3302      	adds	r3, #2
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	9b01      	ldr	r3, [sp, #4]
 800cf2a:	9804      	ldr	r0, [sp, #16]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	0021      	movs	r1, r4
 800cf30:	6133      	str	r3, [r6, #16]
 800cf32:	f7ff fdcd 	bl	800cad0 <_Bfree>
 800cf36:	0030      	movs	r0, r6
 800cf38:	b007      	add	sp, #28
 800cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3c:	cb02      	ldmia	r3!, {r1}
 800cf3e:	c502      	stmia	r5!, {r1}
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d8fb      	bhi.n	800cf3c <__lshift+0xc8>
 800cf44:	e7f0      	b.n	800cf28 <__lshift+0xb4>
 800cf46:	46c0      	nop			; (mov r8, r8)
 800cf48:	0800e0ff 	.word	0x0800e0ff
 800cf4c:	0800e110 	.word	0x0800e110

0800cf50 <__mcmp>:
 800cf50:	6902      	ldr	r2, [r0, #16]
 800cf52:	690b      	ldr	r3, [r1, #16]
 800cf54:	b530      	push	{r4, r5, lr}
 800cf56:	0004      	movs	r4, r0
 800cf58:	1ad0      	subs	r0, r2, r3
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d10d      	bne.n	800cf7a <__mcmp+0x2a>
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	3414      	adds	r4, #20
 800cf62:	3114      	adds	r1, #20
 800cf64:	18e2      	adds	r2, r4, r3
 800cf66:	18c9      	adds	r1, r1, r3
 800cf68:	3a04      	subs	r2, #4
 800cf6a:	3904      	subs	r1, #4
 800cf6c:	6815      	ldr	r5, [r2, #0]
 800cf6e:	680b      	ldr	r3, [r1, #0]
 800cf70:	429d      	cmp	r5, r3
 800cf72:	d003      	beq.n	800cf7c <__mcmp+0x2c>
 800cf74:	2001      	movs	r0, #1
 800cf76:	429d      	cmp	r5, r3
 800cf78:	d303      	bcc.n	800cf82 <__mcmp+0x32>
 800cf7a:	bd30      	pop	{r4, r5, pc}
 800cf7c:	4294      	cmp	r4, r2
 800cf7e:	d3f3      	bcc.n	800cf68 <__mcmp+0x18>
 800cf80:	e7fb      	b.n	800cf7a <__mcmp+0x2a>
 800cf82:	4240      	negs	r0, r0
 800cf84:	e7f9      	b.n	800cf7a <__mcmp+0x2a>
	...

0800cf88 <__mdiff>:
 800cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8a:	000e      	movs	r6, r1
 800cf8c:	0007      	movs	r7, r0
 800cf8e:	0011      	movs	r1, r2
 800cf90:	0030      	movs	r0, r6
 800cf92:	b087      	sub	sp, #28
 800cf94:	0014      	movs	r4, r2
 800cf96:	f7ff ffdb 	bl	800cf50 <__mcmp>
 800cf9a:	1e05      	subs	r5, r0, #0
 800cf9c:	d110      	bne.n	800cfc0 <__mdiff+0x38>
 800cf9e:	0001      	movs	r1, r0
 800cfa0:	0038      	movs	r0, r7
 800cfa2:	f7ff fd51 	bl	800ca48 <_Balloc>
 800cfa6:	1e02      	subs	r2, r0, #0
 800cfa8:	d104      	bne.n	800cfb4 <__mdiff+0x2c>
 800cfaa:	4b40      	ldr	r3, [pc, #256]	; (800d0ac <__mdiff+0x124>)
 800cfac:	4940      	ldr	r1, [pc, #256]	; (800d0b0 <__mdiff+0x128>)
 800cfae:	4841      	ldr	r0, [pc, #260]	; (800d0b4 <__mdiff+0x12c>)
 800cfb0:	f000 fad2 	bl	800d558 <__assert_func>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	6145      	str	r5, [r0, #20]
 800cfb8:	6103      	str	r3, [r0, #16]
 800cfba:	0010      	movs	r0, r2
 800cfbc:	b007      	add	sp, #28
 800cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	db04      	blt.n	800cfd2 <__mdiff+0x4a>
 800cfc8:	0023      	movs	r3, r4
 800cfca:	0034      	movs	r4, r6
 800cfcc:	001e      	movs	r6, r3
 800cfce:	2300      	movs	r3, #0
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	0038      	movs	r0, r7
 800cfd4:	6861      	ldr	r1, [r4, #4]
 800cfd6:	f7ff fd37 	bl	800ca48 <_Balloc>
 800cfda:	1e02      	subs	r2, r0, #0
 800cfdc:	d103      	bne.n	800cfe6 <__mdiff+0x5e>
 800cfde:	2190      	movs	r1, #144	; 0x90
 800cfe0:	4b32      	ldr	r3, [pc, #200]	; (800d0ac <__mdiff+0x124>)
 800cfe2:	0089      	lsls	r1, r1, #2
 800cfe4:	e7e3      	b.n	800cfae <__mdiff+0x26>
 800cfe6:	9b01      	ldr	r3, [sp, #4]
 800cfe8:	2700      	movs	r7, #0
 800cfea:	60c3      	str	r3, [r0, #12]
 800cfec:	6920      	ldr	r0, [r4, #16]
 800cfee:	3414      	adds	r4, #20
 800cff0:	9401      	str	r4, [sp, #4]
 800cff2:	9b01      	ldr	r3, [sp, #4]
 800cff4:	0084      	lsls	r4, r0, #2
 800cff6:	191b      	adds	r3, r3, r4
 800cff8:	0034      	movs	r4, r6
 800cffa:	9302      	str	r3, [sp, #8]
 800cffc:	6933      	ldr	r3, [r6, #16]
 800cffe:	3414      	adds	r4, #20
 800d000:	0099      	lsls	r1, r3, #2
 800d002:	1863      	adds	r3, r4, r1
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	0013      	movs	r3, r2
 800d008:	3314      	adds	r3, #20
 800d00a:	469c      	mov	ip, r3
 800d00c:	9305      	str	r3, [sp, #20]
 800d00e:	9b01      	ldr	r3, [sp, #4]
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	9b04      	ldr	r3, [sp, #16]
 800d014:	cc02      	ldmia	r4!, {r1}
 800d016:	cb20      	ldmia	r3!, {r5}
 800d018:	9304      	str	r3, [sp, #16]
 800d01a:	b2ab      	uxth	r3, r5
 800d01c:	19df      	adds	r7, r3, r7
 800d01e:	b28b      	uxth	r3, r1
 800d020:	1afb      	subs	r3, r7, r3
 800d022:	0c09      	lsrs	r1, r1, #16
 800d024:	0c2d      	lsrs	r5, r5, #16
 800d026:	1a6d      	subs	r5, r5, r1
 800d028:	1419      	asrs	r1, r3, #16
 800d02a:	186d      	adds	r5, r5, r1
 800d02c:	4661      	mov	r1, ip
 800d02e:	142f      	asrs	r7, r5, #16
 800d030:	b29b      	uxth	r3, r3
 800d032:	042d      	lsls	r5, r5, #16
 800d034:	432b      	orrs	r3, r5
 800d036:	c108      	stmia	r1!, {r3}
 800d038:	9b03      	ldr	r3, [sp, #12]
 800d03a:	468c      	mov	ip, r1
 800d03c:	42a3      	cmp	r3, r4
 800d03e:	d8e8      	bhi.n	800d012 <__mdiff+0x8a>
 800d040:	0031      	movs	r1, r6
 800d042:	9c03      	ldr	r4, [sp, #12]
 800d044:	3115      	adds	r1, #21
 800d046:	2304      	movs	r3, #4
 800d048:	428c      	cmp	r4, r1
 800d04a:	d304      	bcc.n	800d056 <__mdiff+0xce>
 800d04c:	1ba3      	subs	r3, r4, r6
 800d04e:	3b15      	subs	r3, #21
 800d050:	089b      	lsrs	r3, r3, #2
 800d052:	3301      	adds	r3, #1
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	9901      	ldr	r1, [sp, #4]
 800d058:	18cc      	adds	r4, r1, r3
 800d05a:	9905      	ldr	r1, [sp, #20]
 800d05c:	0026      	movs	r6, r4
 800d05e:	18cb      	adds	r3, r1, r3
 800d060:	469c      	mov	ip, r3
 800d062:	9902      	ldr	r1, [sp, #8]
 800d064:	428e      	cmp	r6, r1
 800d066:	d310      	bcc.n	800d08a <__mdiff+0x102>
 800d068:	9e02      	ldr	r6, [sp, #8]
 800d06a:	1ee1      	subs	r1, r4, #3
 800d06c:	2500      	movs	r5, #0
 800d06e:	428e      	cmp	r6, r1
 800d070:	d304      	bcc.n	800d07c <__mdiff+0xf4>
 800d072:	0031      	movs	r1, r6
 800d074:	3103      	adds	r1, #3
 800d076:	1b0c      	subs	r4, r1, r4
 800d078:	08a4      	lsrs	r4, r4, #2
 800d07a:	00a5      	lsls	r5, r4, #2
 800d07c:	195b      	adds	r3, r3, r5
 800d07e:	3b04      	subs	r3, #4
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	2900      	cmp	r1, #0
 800d084:	d00f      	beq.n	800d0a6 <__mdiff+0x11e>
 800d086:	6110      	str	r0, [r2, #16]
 800d088:	e797      	b.n	800cfba <__mdiff+0x32>
 800d08a:	ce02      	ldmia	r6!, {r1}
 800d08c:	b28d      	uxth	r5, r1
 800d08e:	19ed      	adds	r5, r5, r7
 800d090:	0c0f      	lsrs	r7, r1, #16
 800d092:	1429      	asrs	r1, r5, #16
 800d094:	1879      	adds	r1, r7, r1
 800d096:	140f      	asrs	r7, r1, #16
 800d098:	b2ad      	uxth	r5, r5
 800d09a:	0409      	lsls	r1, r1, #16
 800d09c:	430d      	orrs	r5, r1
 800d09e:	4661      	mov	r1, ip
 800d0a0:	c120      	stmia	r1!, {r5}
 800d0a2:	468c      	mov	ip, r1
 800d0a4:	e7dd      	b.n	800d062 <__mdiff+0xda>
 800d0a6:	3801      	subs	r0, #1
 800d0a8:	e7e9      	b.n	800d07e <__mdiff+0xf6>
 800d0aa:	46c0      	nop			; (mov r8, r8)
 800d0ac:	0800e0ff 	.word	0x0800e0ff
 800d0b0:	00000232 	.word	0x00000232
 800d0b4:	0800e110 	.word	0x0800e110

0800d0b8 <__d2b>:
 800d0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	0014      	movs	r4, r2
 800d0be:	001e      	movs	r6, r3
 800d0c0:	9f08      	ldr	r7, [sp, #32]
 800d0c2:	f7ff fcc1 	bl	800ca48 <_Balloc>
 800d0c6:	1e05      	subs	r5, r0, #0
 800d0c8:	d105      	bne.n	800d0d6 <__d2b+0x1e>
 800d0ca:	0002      	movs	r2, r0
 800d0cc:	4b26      	ldr	r3, [pc, #152]	; (800d168 <__d2b+0xb0>)
 800d0ce:	4927      	ldr	r1, [pc, #156]	; (800d16c <__d2b+0xb4>)
 800d0d0:	4827      	ldr	r0, [pc, #156]	; (800d170 <__d2b+0xb8>)
 800d0d2:	f000 fa41 	bl	800d558 <__assert_func>
 800d0d6:	0333      	lsls	r3, r6, #12
 800d0d8:	0076      	lsls	r6, r6, #1
 800d0da:	0b1b      	lsrs	r3, r3, #12
 800d0dc:	0d76      	lsrs	r6, r6, #21
 800d0de:	d124      	bne.n	800d12a <__d2b+0x72>
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	2c00      	cmp	r4, #0
 800d0e4:	d027      	beq.n	800d136 <__d2b+0x7e>
 800d0e6:	4668      	mov	r0, sp
 800d0e8:	9400      	str	r4, [sp, #0]
 800d0ea:	f7ff fd73 	bl	800cbd4 <__lo0bits>
 800d0ee:	9c00      	ldr	r4, [sp, #0]
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d01e      	beq.n	800d132 <__d2b+0x7a>
 800d0f4:	9b01      	ldr	r3, [sp, #4]
 800d0f6:	2120      	movs	r1, #32
 800d0f8:	001a      	movs	r2, r3
 800d0fa:	1a09      	subs	r1, r1, r0
 800d0fc:	408a      	lsls	r2, r1
 800d0fe:	40c3      	lsrs	r3, r0
 800d100:	4322      	orrs	r2, r4
 800d102:	616a      	str	r2, [r5, #20]
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	9c01      	ldr	r4, [sp, #4]
 800d108:	61ac      	str	r4, [r5, #24]
 800d10a:	1e63      	subs	r3, r4, #1
 800d10c:	419c      	sbcs	r4, r3
 800d10e:	3401      	adds	r4, #1
 800d110:	612c      	str	r4, [r5, #16]
 800d112:	2e00      	cmp	r6, #0
 800d114:	d018      	beq.n	800d148 <__d2b+0x90>
 800d116:	4b17      	ldr	r3, [pc, #92]	; (800d174 <__d2b+0xbc>)
 800d118:	18f6      	adds	r6, r6, r3
 800d11a:	2335      	movs	r3, #53	; 0x35
 800d11c:	1836      	adds	r6, r6, r0
 800d11e:	1a18      	subs	r0, r3, r0
 800d120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d122:	603e      	str	r6, [r7, #0]
 800d124:	6018      	str	r0, [r3, #0]
 800d126:	0028      	movs	r0, r5
 800d128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d12a:	2280      	movs	r2, #128	; 0x80
 800d12c:	0352      	lsls	r2, r2, #13
 800d12e:	4313      	orrs	r3, r2
 800d130:	e7d6      	b.n	800d0e0 <__d2b+0x28>
 800d132:	616c      	str	r4, [r5, #20]
 800d134:	e7e7      	b.n	800d106 <__d2b+0x4e>
 800d136:	a801      	add	r0, sp, #4
 800d138:	f7ff fd4c 	bl	800cbd4 <__lo0bits>
 800d13c:	2401      	movs	r4, #1
 800d13e:	9b01      	ldr	r3, [sp, #4]
 800d140:	612c      	str	r4, [r5, #16]
 800d142:	616b      	str	r3, [r5, #20]
 800d144:	3020      	adds	r0, #32
 800d146:	e7e4      	b.n	800d112 <__d2b+0x5a>
 800d148:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <__d2b+0xc0>)
 800d14a:	18c0      	adds	r0, r0, r3
 800d14c:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <__d2b+0xc4>)
 800d14e:	6038      	str	r0, [r7, #0]
 800d150:	18e3      	adds	r3, r4, r3
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	18eb      	adds	r3, r5, r3
 800d156:	6958      	ldr	r0, [r3, #20]
 800d158:	f7ff fd22 	bl	800cba0 <__hi0bits>
 800d15c:	0164      	lsls	r4, r4, #5
 800d15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d160:	1a24      	subs	r4, r4, r0
 800d162:	601c      	str	r4, [r3, #0]
 800d164:	e7df      	b.n	800d126 <__d2b+0x6e>
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	0800e0ff 	.word	0x0800e0ff
 800d16c:	0000030a 	.word	0x0000030a
 800d170:	0800e110 	.word	0x0800e110
 800d174:	fffffbcd 	.word	0xfffffbcd
 800d178:	fffffbce 	.word	0xfffffbce
 800d17c:	3fffffff 	.word	0x3fffffff

0800d180 <_calloc_r>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	0c13      	lsrs	r3, r2, #16
 800d184:	0c0d      	lsrs	r5, r1, #16
 800d186:	d11e      	bne.n	800d1c6 <_calloc_r+0x46>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10c      	bne.n	800d1a6 <_calloc_r+0x26>
 800d18c:	b289      	uxth	r1, r1
 800d18e:	b294      	uxth	r4, r2
 800d190:	434c      	muls	r4, r1
 800d192:	0021      	movs	r1, r4
 800d194:	f7fd feac 	bl	800aef0 <_malloc_r>
 800d198:	1e05      	subs	r5, r0, #0
 800d19a:	d01b      	beq.n	800d1d4 <_calloc_r+0x54>
 800d19c:	0022      	movs	r2, r4
 800d19e:	2100      	movs	r1, #0
 800d1a0:	f7fd fe7c 	bl	800ae9c <memset>
 800d1a4:	e016      	b.n	800d1d4 <_calloc_r+0x54>
 800d1a6:	1c1d      	adds	r5, r3, #0
 800d1a8:	1c0b      	adds	r3, r1, #0
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	b289      	uxth	r1, r1
 800d1ae:	b29c      	uxth	r4, r3
 800d1b0:	4351      	muls	r1, r2
 800d1b2:	b2ab      	uxth	r3, r5
 800d1b4:	4363      	muls	r3, r4
 800d1b6:	0c0c      	lsrs	r4, r1, #16
 800d1b8:	191c      	adds	r4, r3, r4
 800d1ba:	0c22      	lsrs	r2, r4, #16
 800d1bc:	d107      	bne.n	800d1ce <_calloc_r+0x4e>
 800d1be:	0424      	lsls	r4, r4, #16
 800d1c0:	b289      	uxth	r1, r1
 800d1c2:	430c      	orrs	r4, r1
 800d1c4:	e7e5      	b.n	800d192 <_calloc_r+0x12>
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <_calloc_r+0x4e>
 800d1ca:	1c13      	adds	r3, r2, #0
 800d1cc:	e7ed      	b.n	800d1aa <_calloc_r+0x2a>
 800d1ce:	230c      	movs	r3, #12
 800d1d0:	2500      	movs	r5, #0
 800d1d2:	6003      	str	r3, [r0, #0]
 800d1d4:	0028      	movs	r0, r5
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}

0800d1d8 <_free_r>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	0005      	movs	r5, r0
 800d1dc:	2900      	cmp	r1, #0
 800d1de:	d010      	beq.n	800d202 <_free_r+0x2a>
 800d1e0:	1f0c      	subs	r4, r1, #4
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	da00      	bge.n	800d1ea <_free_r+0x12>
 800d1e8:	18e4      	adds	r4, r4, r3
 800d1ea:	0028      	movs	r0, r5
 800d1ec:	f7ff fc1c 	bl	800ca28 <__malloc_lock>
 800d1f0:	4a1d      	ldr	r2, [pc, #116]	; (800d268 <_free_r+0x90>)
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <_free_r+0x2c>
 800d1f8:	6063      	str	r3, [r4, #4]
 800d1fa:	6014      	str	r4, [r2, #0]
 800d1fc:	0028      	movs	r0, r5
 800d1fe:	f7ff fc1b 	bl	800ca38 <__malloc_unlock>
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	42a3      	cmp	r3, r4
 800d206:	d908      	bls.n	800d21a <_free_r+0x42>
 800d208:	6821      	ldr	r1, [r4, #0]
 800d20a:	1860      	adds	r0, r4, r1
 800d20c:	4283      	cmp	r3, r0
 800d20e:	d1f3      	bne.n	800d1f8 <_free_r+0x20>
 800d210:	6818      	ldr	r0, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	1841      	adds	r1, r0, r1
 800d216:	6021      	str	r1, [r4, #0]
 800d218:	e7ee      	b.n	800d1f8 <_free_r+0x20>
 800d21a:	001a      	movs	r2, r3
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <_free_r+0x4e>
 800d222:	42a3      	cmp	r3, r4
 800d224:	d9f9      	bls.n	800d21a <_free_r+0x42>
 800d226:	6811      	ldr	r1, [r2, #0]
 800d228:	1850      	adds	r0, r2, r1
 800d22a:	42a0      	cmp	r0, r4
 800d22c:	d10b      	bne.n	800d246 <_free_r+0x6e>
 800d22e:	6820      	ldr	r0, [r4, #0]
 800d230:	1809      	adds	r1, r1, r0
 800d232:	1850      	adds	r0, r2, r1
 800d234:	6011      	str	r1, [r2, #0]
 800d236:	4283      	cmp	r3, r0
 800d238:	d1e0      	bne.n	800d1fc <_free_r+0x24>
 800d23a:	6818      	ldr	r0, [r3, #0]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	1841      	adds	r1, r0, r1
 800d240:	6011      	str	r1, [r2, #0]
 800d242:	6053      	str	r3, [r2, #4]
 800d244:	e7da      	b.n	800d1fc <_free_r+0x24>
 800d246:	42a0      	cmp	r0, r4
 800d248:	d902      	bls.n	800d250 <_free_r+0x78>
 800d24a:	230c      	movs	r3, #12
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	e7d5      	b.n	800d1fc <_free_r+0x24>
 800d250:	6821      	ldr	r1, [r4, #0]
 800d252:	1860      	adds	r0, r4, r1
 800d254:	4283      	cmp	r3, r0
 800d256:	d103      	bne.n	800d260 <_free_r+0x88>
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	1841      	adds	r1, r0, r1
 800d25e:	6021      	str	r1, [r4, #0]
 800d260:	6063      	str	r3, [r4, #4]
 800d262:	6054      	str	r4, [r2, #4]
 800d264:	e7ca      	b.n	800d1fc <_free_r+0x24>
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	20001e2c 	.word	0x20001e2c

0800d26c <__ssputs_r>:
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	688e      	ldr	r6, [r1, #8]
 800d270:	b085      	sub	sp, #20
 800d272:	0007      	movs	r7, r0
 800d274:	000c      	movs	r4, r1
 800d276:	9203      	str	r2, [sp, #12]
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	429e      	cmp	r6, r3
 800d27c:	d83c      	bhi.n	800d2f8 <__ssputs_r+0x8c>
 800d27e:	2390      	movs	r3, #144	; 0x90
 800d280:	898a      	ldrh	r2, [r1, #12]
 800d282:	00db      	lsls	r3, r3, #3
 800d284:	421a      	tst	r2, r3
 800d286:	d034      	beq.n	800d2f2 <__ssputs_r+0x86>
 800d288:	6909      	ldr	r1, [r1, #16]
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	6960      	ldr	r0, [r4, #20]
 800d28e:	1a5b      	subs	r3, r3, r1
 800d290:	9302      	str	r3, [sp, #8]
 800d292:	2303      	movs	r3, #3
 800d294:	4343      	muls	r3, r0
 800d296:	0fdd      	lsrs	r5, r3, #31
 800d298:	18ed      	adds	r5, r5, r3
 800d29a:	9b01      	ldr	r3, [sp, #4]
 800d29c:	9802      	ldr	r0, [sp, #8]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	181b      	adds	r3, r3, r0
 800d2a2:	106d      	asrs	r5, r5, #1
 800d2a4:	42ab      	cmp	r3, r5
 800d2a6:	d900      	bls.n	800d2aa <__ssputs_r+0x3e>
 800d2a8:	001d      	movs	r5, r3
 800d2aa:	0553      	lsls	r3, r2, #21
 800d2ac:	d532      	bpl.n	800d314 <__ssputs_r+0xa8>
 800d2ae:	0029      	movs	r1, r5
 800d2b0:	0038      	movs	r0, r7
 800d2b2:	f7fd fe1d 	bl	800aef0 <_malloc_r>
 800d2b6:	1e06      	subs	r6, r0, #0
 800d2b8:	d109      	bne.n	800d2ce <__ssputs_r+0x62>
 800d2ba:	230c      	movs	r3, #12
 800d2bc:	603b      	str	r3, [r7, #0]
 800d2be:	2340      	movs	r3, #64	; 0x40
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	89a2      	ldrh	r2, [r4, #12]
 800d2c4:	4240      	negs	r0, r0
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	b005      	add	sp, #20
 800d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ce:	9a02      	ldr	r2, [sp, #8]
 800d2d0:	6921      	ldr	r1, [r4, #16]
 800d2d2:	f7fd fdda 	bl	800ae8a <memcpy>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	4a14      	ldr	r2, [pc, #80]	; (800d32c <__ssputs_r+0xc0>)
 800d2da:	401a      	ands	r2, r3
 800d2dc:	2380      	movs	r3, #128	; 0x80
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	81a3      	strh	r3, [r4, #12]
 800d2e2:	9b02      	ldr	r3, [sp, #8]
 800d2e4:	6126      	str	r6, [r4, #16]
 800d2e6:	18f6      	adds	r6, r6, r3
 800d2e8:	6026      	str	r6, [r4, #0]
 800d2ea:	6165      	str	r5, [r4, #20]
 800d2ec:	9e01      	ldr	r6, [sp, #4]
 800d2ee:	1aed      	subs	r5, r5, r3
 800d2f0:	60a5      	str	r5, [r4, #8]
 800d2f2:	9b01      	ldr	r3, [sp, #4]
 800d2f4:	429e      	cmp	r6, r3
 800d2f6:	d900      	bls.n	800d2fa <__ssputs_r+0x8e>
 800d2f8:	9e01      	ldr	r6, [sp, #4]
 800d2fa:	0032      	movs	r2, r6
 800d2fc:	9903      	ldr	r1, [sp, #12]
 800d2fe:	6820      	ldr	r0, [r4, #0]
 800d300:	f000 f96a 	bl	800d5d8 <memmove>
 800d304:	68a3      	ldr	r3, [r4, #8]
 800d306:	2000      	movs	r0, #0
 800d308:	1b9b      	subs	r3, r3, r6
 800d30a:	60a3      	str	r3, [r4, #8]
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	199e      	adds	r6, r3, r6
 800d310:	6026      	str	r6, [r4, #0]
 800d312:	e7da      	b.n	800d2ca <__ssputs_r+0x5e>
 800d314:	002a      	movs	r2, r5
 800d316:	0038      	movs	r0, r7
 800d318:	f000 f971 	bl	800d5fe <_realloc_r>
 800d31c:	1e06      	subs	r6, r0, #0
 800d31e:	d1e0      	bne.n	800d2e2 <__ssputs_r+0x76>
 800d320:	0038      	movs	r0, r7
 800d322:	6921      	ldr	r1, [r4, #16]
 800d324:	f7ff ff58 	bl	800d1d8 <_free_r>
 800d328:	e7c7      	b.n	800d2ba <__ssputs_r+0x4e>
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	fffffb7f 	.word	0xfffffb7f

0800d330 <_svfiprintf_r>:
 800d330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d332:	b0a1      	sub	sp, #132	; 0x84
 800d334:	9003      	str	r0, [sp, #12]
 800d336:	001d      	movs	r5, r3
 800d338:	898b      	ldrh	r3, [r1, #12]
 800d33a:	000f      	movs	r7, r1
 800d33c:	0016      	movs	r6, r2
 800d33e:	061b      	lsls	r3, r3, #24
 800d340:	d511      	bpl.n	800d366 <_svfiprintf_r+0x36>
 800d342:	690b      	ldr	r3, [r1, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10e      	bne.n	800d366 <_svfiprintf_r+0x36>
 800d348:	2140      	movs	r1, #64	; 0x40
 800d34a:	f7fd fdd1 	bl	800aef0 <_malloc_r>
 800d34e:	6038      	str	r0, [r7, #0]
 800d350:	6138      	str	r0, [r7, #16]
 800d352:	2800      	cmp	r0, #0
 800d354:	d105      	bne.n	800d362 <_svfiprintf_r+0x32>
 800d356:	230c      	movs	r3, #12
 800d358:	9a03      	ldr	r2, [sp, #12]
 800d35a:	3801      	subs	r0, #1
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	b021      	add	sp, #132	; 0x84
 800d360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d362:	2340      	movs	r3, #64	; 0x40
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	2300      	movs	r3, #0
 800d368:	ac08      	add	r4, sp, #32
 800d36a:	6163      	str	r3, [r4, #20]
 800d36c:	3320      	adds	r3, #32
 800d36e:	7663      	strb	r3, [r4, #25]
 800d370:	3310      	adds	r3, #16
 800d372:	76a3      	strb	r3, [r4, #26]
 800d374:	9507      	str	r5, [sp, #28]
 800d376:	0035      	movs	r5, r6
 800d378:	782b      	ldrb	r3, [r5, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <_svfiprintf_r+0x52>
 800d37e:	2b25      	cmp	r3, #37	; 0x25
 800d380:	d147      	bne.n	800d412 <_svfiprintf_r+0xe2>
 800d382:	1bab      	subs	r3, r5, r6
 800d384:	9305      	str	r3, [sp, #20]
 800d386:	42b5      	cmp	r5, r6
 800d388:	d00c      	beq.n	800d3a4 <_svfiprintf_r+0x74>
 800d38a:	0032      	movs	r2, r6
 800d38c:	0039      	movs	r1, r7
 800d38e:	9803      	ldr	r0, [sp, #12]
 800d390:	f7ff ff6c 	bl	800d26c <__ssputs_r>
 800d394:	1c43      	adds	r3, r0, #1
 800d396:	d100      	bne.n	800d39a <_svfiprintf_r+0x6a>
 800d398:	e0ae      	b.n	800d4f8 <_svfiprintf_r+0x1c8>
 800d39a:	6962      	ldr	r2, [r4, #20]
 800d39c:	9b05      	ldr	r3, [sp, #20]
 800d39e:	4694      	mov	ip, r2
 800d3a0:	4463      	add	r3, ip
 800d3a2:	6163      	str	r3, [r4, #20]
 800d3a4:	782b      	ldrb	r3, [r5, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d100      	bne.n	800d3ac <_svfiprintf_r+0x7c>
 800d3aa:	e0a5      	b.n	800d4f8 <_svfiprintf_r+0x1c8>
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4252      	negs	r2, r2
 800d3b2:	6062      	str	r2, [r4, #4]
 800d3b4:	a904      	add	r1, sp, #16
 800d3b6:	3254      	adds	r2, #84	; 0x54
 800d3b8:	1852      	adds	r2, r2, r1
 800d3ba:	1c6e      	adds	r6, r5, #1
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	60e3      	str	r3, [r4, #12]
 800d3c0:	60a3      	str	r3, [r4, #8]
 800d3c2:	7013      	strb	r3, [r2, #0]
 800d3c4:	65a3      	str	r3, [r4, #88]	; 0x58
 800d3c6:	2205      	movs	r2, #5
 800d3c8:	7831      	ldrb	r1, [r6, #0]
 800d3ca:	4854      	ldr	r0, [pc, #336]	; (800d51c <_svfiprintf_r+0x1ec>)
 800d3cc:	f7ff fb20 	bl	800ca10 <memchr>
 800d3d0:	1c75      	adds	r5, r6, #1
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d11f      	bne.n	800d416 <_svfiprintf_r+0xe6>
 800d3d6:	6822      	ldr	r2, [r4, #0]
 800d3d8:	06d3      	lsls	r3, r2, #27
 800d3da:	d504      	bpl.n	800d3e6 <_svfiprintf_r+0xb6>
 800d3dc:	2353      	movs	r3, #83	; 0x53
 800d3de:	a904      	add	r1, sp, #16
 800d3e0:	185b      	adds	r3, r3, r1
 800d3e2:	2120      	movs	r1, #32
 800d3e4:	7019      	strb	r1, [r3, #0]
 800d3e6:	0713      	lsls	r3, r2, #28
 800d3e8:	d504      	bpl.n	800d3f4 <_svfiprintf_r+0xc4>
 800d3ea:	2353      	movs	r3, #83	; 0x53
 800d3ec:	a904      	add	r1, sp, #16
 800d3ee:	185b      	adds	r3, r3, r1
 800d3f0:	212b      	movs	r1, #43	; 0x2b
 800d3f2:	7019      	strb	r1, [r3, #0]
 800d3f4:	7833      	ldrb	r3, [r6, #0]
 800d3f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f8:	d016      	beq.n	800d428 <_svfiprintf_r+0xf8>
 800d3fa:	0035      	movs	r5, r6
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	200a      	movs	r0, #10
 800d400:	68e3      	ldr	r3, [r4, #12]
 800d402:	782a      	ldrb	r2, [r5, #0]
 800d404:	1c6e      	adds	r6, r5, #1
 800d406:	3a30      	subs	r2, #48	; 0x30
 800d408:	2a09      	cmp	r2, #9
 800d40a:	d94e      	bls.n	800d4aa <_svfiprintf_r+0x17a>
 800d40c:	2900      	cmp	r1, #0
 800d40e:	d111      	bne.n	800d434 <_svfiprintf_r+0x104>
 800d410:	e017      	b.n	800d442 <_svfiprintf_r+0x112>
 800d412:	3501      	adds	r5, #1
 800d414:	e7b0      	b.n	800d378 <_svfiprintf_r+0x48>
 800d416:	4b41      	ldr	r3, [pc, #260]	; (800d51c <_svfiprintf_r+0x1ec>)
 800d418:	6822      	ldr	r2, [r4, #0]
 800d41a:	1ac0      	subs	r0, r0, r3
 800d41c:	2301      	movs	r3, #1
 800d41e:	4083      	lsls	r3, r0
 800d420:	4313      	orrs	r3, r2
 800d422:	002e      	movs	r6, r5
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	e7ce      	b.n	800d3c6 <_svfiprintf_r+0x96>
 800d428:	9b07      	ldr	r3, [sp, #28]
 800d42a:	1d19      	adds	r1, r3, #4
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	9107      	str	r1, [sp, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	db01      	blt.n	800d438 <_svfiprintf_r+0x108>
 800d434:	930b      	str	r3, [sp, #44]	; 0x2c
 800d436:	e004      	b.n	800d442 <_svfiprintf_r+0x112>
 800d438:	425b      	negs	r3, r3
 800d43a:	60e3      	str	r3, [r4, #12]
 800d43c:	2302      	movs	r3, #2
 800d43e:	4313      	orrs	r3, r2
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	782b      	ldrb	r3, [r5, #0]
 800d444:	2b2e      	cmp	r3, #46	; 0x2e
 800d446:	d10a      	bne.n	800d45e <_svfiprintf_r+0x12e>
 800d448:	786b      	ldrb	r3, [r5, #1]
 800d44a:	2b2a      	cmp	r3, #42	; 0x2a
 800d44c:	d135      	bne.n	800d4ba <_svfiprintf_r+0x18a>
 800d44e:	9b07      	ldr	r3, [sp, #28]
 800d450:	3502      	adds	r5, #2
 800d452:	1d1a      	adds	r2, r3, #4
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	9207      	str	r2, [sp, #28]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	db2b      	blt.n	800d4b4 <_svfiprintf_r+0x184>
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
 800d45e:	4e30      	ldr	r6, [pc, #192]	; (800d520 <_svfiprintf_r+0x1f0>)
 800d460:	2203      	movs	r2, #3
 800d462:	0030      	movs	r0, r6
 800d464:	7829      	ldrb	r1, [r5, #0]
 800d466:	f7ff fad3 	bl	800ca10 <memchr>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d006      	beq.n	800d47c <_svfiprintf_r+0x14c>
 800d46e:	2340      	movs	r3, #64	; 0x40
 800d470:	1b80      	subs	r0, r0, r6
 800d472:	4083      	lsls	r3, r0
 800d474:	6822      	ldr	r2, [r4, #0]
 800d476:	3501      	adds	r5, #1
 800d478:	4313      	orrs	r3, r2
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	7829      	ldrb	r1, [r5, #0]
 800d47e:	2206      	movs	r2, #6
 800d480:	4828      	ldr	r0, [pc, #160]	; (800d524 <_svfiprintf_r+0x1f4>)
 800d482:	1c6e      	adds	r6, r5, #1
 800d484:	7621      	strb	r1, [r4, #24]
 800d486:	f7ff fac3 	bl	800ca10 <memchr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d03c      	beq.n	800d508 <_svfiprintf_r+0x1d8>
 800d48e:	4b26      	ldr	r3, [pc, #152]	; (800d528 <_svfiprintf_r+0x1f8>)
 800d490:	2b00      	cmp	r3, #0
 800d492:	d125      	bne.n	800d4e0 <_svfiprintf_r+0x1b0>
 800d494:	2207      	movs	r2, #7
 800d496:	9b07      	ldr	r3, [sp, #28]
 800d498:	3307      	adds	r3, #7
 800d49a:	4393      	bics	r3, r2
 800d49c:	3308      	adds	r3, #8
 800d49e:	9307      	str	r3, [sp, #28]
 800d4a0:	6963      	ldr	r3, [r4, #20]
 800d4a2:	9a04      	ldr	r2, [sp, #16]
 800d4a4:	189b      	adds	r3, r3, r2
 800d4a6:	6163      	str	r3, [r4, #20]
 800d4a8:	e765      	b.n	800d376 <_svfiprintf_r+0x46>
 800d4aa:	4343      	muls	r3, r0
 800d4ac:	0035      	movs	r5, r6
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	189b      	adds	r3, r3, r2
 800d4b2:	e7a6      	b.n	800d402 <_svfiprintf_r+0xd2>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	425b      	negs	r3, r3
 800d4b8:	e7d0      	b.n	800d45c <_svfiprintf_r+0x12c>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	200a      	movs	r0, #10
 800d4be:	001a      	movs	r2, r3
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	7829      	ldrb	r1, [r5, #0]
 800d4c6:	1c6e      	adds	r6, r5, #1
 800d4c8:	3930      	subs	r1, #48	; 0x30
 800d4ca:	2909      	cmp	r1, #9
 800d4cc:	d903      	bls.n	800d4d6 <_svfiprintf_r+0x1a6>
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d0c5      	beq.n	800d45e <_svfiprintf_r+0x12e>
 800d4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d4:	e7c3      	b.n	800d45e <_svfiprintf_r+0x12e>
 800d4d6:	4342      	muls	r2, r0
 800d4d8:	0035      	movs	r5, r6
 800d4da:	2301      	movs	r3, #1
 800d4dc:	1852      	adds	r2, r2, r1
 800d4de:	e7f1      	b.n	800d4c4 <_svfiprintf_r+0x194>
 800d4e0:	ab07      	add	r3, sp, #28
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	003a      	movs	r2, r7
 800d4e6:	0021      	movs	r1, r4
 800d4e8:	4b10      	ldr	r3, [pc, #64]	; (800d52c <_svfiprintf_r+0x1fc>)
 800d4ea:	9803      	ldr	r0, [sp, #12]
 800d4ec:	f7fd fe20 	bl	800b130 <_printf_float>
 800d4f0:	9004      	str	r0, [sp, #16]
 800d4f2:	9b04      	ldr	r3, [sp, #16]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	d1d3      	bne.n	800d4a0 <_svfiprintf_r+0x170>
 800d4f8:	89bb      	ldrh	r3, [r7, #12]
 800d4fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d4fc:	065b      	lsls	r3, r3, #25
 800d4fe:	d400      	bmi.n	800d502 <_svfiprintf_r+0x1d2>
 800d500:	e72d      	b.n	800d35e <_svfiprintf_r+0x2e>
 800d502:	2001      	movs	r0, #1
 800d504:	4240      	negs	r0, r0
 800d506:	e72a      	b.n	800d35e <_svfiprintf_r+0x2e>
 800d508:	ab07      	add	r3, sp, #28
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	003a      	movs	r2, r7
 800d50e:	0021      	movs	r1, r4
 800d510:	4b06      	ldr	r3, [pc, #24]	; (800d52c <_svfiprintf_r+0x1fc>)
 800d512:	9803      	ldr	r0, [sp, #12]
 800d514:	f7fe f8be 	bl	800b694 <_printf_i>
 800d518:	e7ea      	b.n	800d4f0 <_svfiprintf_r+0x1c0>
 800d51a:	46c0      	nop			; (mov r8, r8)
 800d51c:	0800e26c 	.word	0x0800e26c
 800d520:	0800e272 	.word	0x0800e272
 800d524:	0800e276 	.word	0x0800e276
 800d528:	0800b131 	.word	0x0800b131
 800d52c:	0800d26d 	.word	0x0800d26d

0800d530 <_read_r>:
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	0004      	movs	r4, r0
 800d534:	0008      	movs	r0, r1
 800d536:	0011      	movs	r1, r2
 800d538:	001a      	movs	r2, r3
 800d53a:	2300      	movs	r3, #0
 800d53c:	4d05      	ldr	r5, [pc, #20]	; (800d554 <_read_r+0x24>)
 800d53e:	602b      	str	r3, [r5, #0]
 800d540:	f7f5 fcfe 	bl	8002f40 <_read>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d103      	bne.n	800d550 <_read_r+0x20>
 800d548:	682b      	ldr	r3, [r5, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d000      	beq.n	800d550 <_read_r+0x20>
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	bd70      	pop	{r4, r5, r6, pc}
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	20001e34 	.word	0x20001e34

0800d558 <__assert_func>:
 800d558:	b530      	push	{r4, r5, lr}
 800d55a:	0014      	movs	r4, r2
 800d55c:	001a      	movs	r2, r3
 800d55e:	4b09      	ldr	r3, [pc, #36]	; (800d584 <__assert_func+0x2c>)
 800d560:	0005      	movs	r5, r0
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	b085      	sub	sp, #20
 800d566:	68d8      	ldr	r0, [r3, #12]
 800d568:	4b07      	ldr	r3, [pc, #28]	; (800d588 <__assert_func+0x30>)
 800d56a:	2c00      	cmp	r4, #0
 800d56c:	d101      	bne.n	800d572 <__assert_func+0x1a>
 800d56e:	4b07      	ldr	r3, [pc, #28]	; (800d58c <__assert_func+0x34>)
 800d570:	001c      	movs	r4, r3
 800d572:	9301      	str	r3, [sp, #4]
 800d574:	9100      	str	r1, [sp, #0]
 800d576:	002b      	movs	r3, r5
 800d578:	4905      	ldr	r1, [pc, #20]	; (800d590 <__assert_func+0x38>)
 800d57a:	9402      	str	r4, [sp, #8]
 800d57c:	f000 f80a 	bl	800d594 <fiprintf>
 800d580:	f000 faaa 	bl	800dad8 <abort>
 800d584:	20000018 	.word	0x20000018
 800d588:	0800e27d 	.word	0x0800e27d
 800d58c:	0800e2b8 	.word	0x0800e2b8
 800d590:	0800e28a 	.word	0x0800e28a

0800d594 <fiprintf>:
 800d594:	b40e      	push	{r1, r2, r3}
 800d596:	b503      	push	{r0, r1, lr}
 800d598:	0001      	movs	r1, r0
 800d59a:	ab03      	add	r3, sp, #12
 800d59c:	4804      	ldr	r0, [pc, #16]	; (800d5b0 <fiprintf+0x1c>)
 800d59e:	cb04      	ldmia	r3!, {r2}
 800d5a0:	6800      	ldr	r0, [r0, #0]
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	f000 f882 	bl	800d6ac <_vfiprintf_r>
 800d5a8:	b002      	add	sp, #8
 800d5aa:	bc08      	pop	{r3}
 800d5ac:	b003      	add	sp, #12
 800d5ae:	4718      	bx	r3
 800d5b0:	20000018 	.word	0x20000018

0800d5b4 <__ascii_mbtowc>:
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	2900      	cmp	r1, #0
 800d5b8:	d100      	bne.n	800d5bc <__ascii_mbtowc+0x8>
 800d5ba:	a901      	add	r1, sp, #4
 800d5bc:	1e10      	subs	r0, r2, #0
 800d5be:	d006      	beq.n	800d5ce <__ascii_mbtowc+0x1a>
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <__ascii_mbtowc+0x1e>
 800d5c4:	7813      	ldrb	r3, [r2, #0]
 800d5c6:	600b      	str	r3, [r1, #0]
 800d5c8:	7810      	ldrb	r0, [r2, #0]
 800d5ca:	1e43      	subs	r3, r0, #1
 800d5cc:	4198      	sbcs	r0, r3
 800d5ce:	b002      	add	sp, #8
 800d5d0:	4770      	bx	lr
 800d5d2:	2002      	movs	r0, #2
 800d5d4:	4240      	negs	r0, r0
 800d5d6:	e7fa      	b.n	800d5ce <__ascii_mbtowc+0x1a>

0800d5d8 <memmove>:
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	4288      	cmp	r0, r1
 800d5dc:	d902      	bls.n	800d5e4 <memmove+0xc>
 800d5de:	188b      	adds	r3, r1, r2
 800d5e0:	4298      	cmp	r0, r3
 800d5e2:	d303      	bcc.n	800d5ec <memmove+0x14>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e007      	b.n	800d5f8 <memmove+0x20>
 800d5e8:	5c8b      	ldrb	r3, [r1, r2]
 800d5ea:	5483      	strb	r3, [r0, r2]
 800d5ec:	3a01      	subs	r2, #1
 800d5ee:	d2fb      	bcs.n	800d5e8 <memmove+0x10>
 800d5f0:	bd10      	pop	{r4, pc}
 800d5f2:	5ccc      	ldrb	r4, [r1, r3]
 800d5f4:	54c4      	strb	r4, [r0, r3]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d1fa      	bne.n	800d5f2 <memmove+0x1a>
 800d5fc:	e7f8      	b.n	800d5f0 <memmove+0x18>

0800d5fe <_realloc_r>:
 800d5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d600:	0007      	movs	r7, r0
 800d602:	000e      	movs	r6, r1
 800d604:	0014      	movs	r4, r2
 800d606:	2900      	cmp	r1, #0
 800d608:	d105      	bne.n	800d616 <_realloc_r+0x18>
 800d60a:	0011      	movs	r1, r2
 800d60c:	f7fd fc70 	bl	800aef0 <_malloc_r>
 800d610:	0005      	movs	r5, r0
 800d612:	0028      	movs	r0, r5
 800d614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d616:	2a00      	cmp	r2, #0
 800d618:	d103      	bne.n	800d622 <_realloc_r+0x24>
 800d61a:	f7ff fddd 	bl	800d1d8 <_free_r>
 800d61e:	0025      	movs	r5, r4
 800d620:	e7f7      	b.n	800d612 <_realloc_r+0x14>
 800d622:	f000 facd 	bl	800dbc0 <_malloc_usable_size_r>
 800d626:	9001      	str	r0, [sp, #4]
 800d628:	4284      	cmp	r4, r0
 800d62a:	d803      	bhi.n	800d634 <_realloc_r+0x36>
 800d62c:	0035      	movs	r5, r6
 800d62e:	0843      	lsrs	r3, r0, #1
 800d630:	42a3      	cmp	r3, r4
 800d632:	d3ee      	bcc.n	800d612 <_realloc_r+0x14>
 800d634:	0021      	movs	r1, r4
 800d636:	0038      	movs	r0, r7
 800d638:	f7fd fc5a 	bl	800aef0 <_malloc_r>
 800d63c:	1e05      	subs	r5, r0, #0
 800d63e:	d0e8      	beq.n	800d612 <_realloc_r+0x14>
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	0022      	movs	r2, r4
 800d644:	429c      	cmp	r4, r3
 800d646:	d900      	bls.n	800d64a <_realloc_r+0x4c>
 800d648:	001a      	movs	r2, r3
 800d64a:	0031      	movs	r1, r6
 800d64c:	0028      	movs	r0, r5
 800d64e:	f7fd fc1c 	bl	800ae8a <memcpy>
 800d652:	0031      	movs	r1, r6
 800d654:	0038      	movs	r0, r7
 800d656:	f7ff fdbf 	bl	800d1d8 <_free_r>
 800d65a:	e7da      	b.n	800d612 <_realloc_r+0x14>

0800d65c <__sfputc_r>:
 800d65c:	6893      	ldr	r3, [r2, #8]
 800d65e:	b510      	push	{r4, lr}
 800d660:	3b01      	subs	r3, #1
 800d662:	6093      	str	r3, [r2, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	da04      	bge.n	800d672 <__sfputc_r+0x16>
 800d668:	6994      	ldr	r4, [r2, #24]
 800d66a:	42a3      	cmp	r3, r4
 800d66c:	db07      	blt.n	800d67e <__sfputc_r+0x22>
 800d66e:	290a      	cmp	r1, #10
 800d670:	d005      	beq.n	800d67e <__sfputc_r+0x22>
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	1c58      	adds	r0, r3, #1
 800d676:	6010      	str	r0, [r2, #0]
 800d678:	7019      	strb	r1, [r3, #0]
 800d67a:	0008      	movs	r0, r1
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	f000 f94f 	bl	800d920 <__swbuf_r>
 800d682:	0001      	movs	r1, r0
 800d684:	e7f9      	b.n	800d67a <__sfputc_r+0x1e>

0800d686 <__sfputs_r>:
 800d686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d688:	0006      	movs	r6, r0
 800d68a:	000f      	movs	r7, r1
 800d68c:	0014      	movs	r4, r2
 800d68e:	18d5      	adds	r5, r2, r3
 800d690:	42ac      	cmp	r4, r5
 800d692:	d101      	bne.n	800d698 <__sfputs_r+0x12>
 800d694:	2000      	movs	r0, #0
 800d696:	e007      	b.n	800d6a8 <__sfputs_r+0x22>
 800d698:	7821      	ldrb	r1, [r4, #0]
 800d69a:	003a      	movs	r2, r7
 800d69c:	0030      	movs	r0, r6
 800d69e:	f7ff ffdd 	bl	800d65c <__sfputc_r>
 800d6a2:	3401      	adds	r4, #1
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d1f3      	bne.n	800d690 <__sfputs_r+0xa>
 800d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6ac <_vfiprintf_r>:
 800d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ae:	b0a1      	sub	sp, #132	; 0x84
 800d6b0:	0006      	movs	r6, r0
 800d6b2:	000c      	movs	r4, r1
 800d6b4:	001f      	movs	r7, r3
 800d6b6:	9203      	str	r2, [sp, #12]
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d004      	beq.n	800d6c6 <_vfiprintf_r+0x1a>
 800d6bc:	6983      	ldr	r3, [r0, #24]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <_vfiprintf_r+0x1a>
 800d6c2:	f7fd fb1b 	bl	800acfc <__sinit>
 800d6c6:	4b8e      	ldr	r3, [pc, #568]	; (800d900 <_vfiprintf_r+0x254>)
 800d6c8:	429c      	cmp	r4, r3
 800d6ca:	d11c      	bne.n	800d706 <_vfiprintf_r+0x5a>
 800d6cc:	6874      	ldr	r4, [r6, #4]
 800d6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6d0:	07db      	lsls	r3, r3, #31
 800d6d2:	d405      	bmi.n	800d6e0 <_vfiprintf_r+0x34>
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	059b      	lsls	r3, r3, #22
 800d6d8:	d402      	bmi.n	800d6e0 <_vfiprintf_r+0x34>
 800d6da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6dc:	f7fd fbd3 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800d6e0:	89a3      	ldrh	r3, [r4, #12]
 800d6e2:	071b      	lsls	r3, r3, #28
 800d6e4:	d502      	bpl.n	800d6ec <_vfiprintf_r+0x40>
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d11d      	bne.n	800d728 <_vfiprintf_r+0x7c>
 800d6ec:	0021      	movs	r1, r4
 800d6ee:	0030      	movs	r0, r6
 800d6f0:	f000 f97a 	bl	800d9e8 <__swsetup_r>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d017      	beq.n	800d728 <_vfiprintf_r+0x7c>
 800d6f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6fa:	07db      	lsls	r3, r3, #31
 800d6fc:	d50d      	bpl.n	800d71a <_vfiprintf_r+0x6e>
 800d6fe:	2001      	movs	r0, #1
 800d700:	4240      	negs	r0, r0
 800d702:	b021      	add	sp, #132	; 0x84
 800d704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d706:	4b7f      	ldr	r3, [pc, #508]	; (800d904 <_vfiprintf_r+0x258>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d101      	bne.n	800d710 <_vfiprintf_r+0x64>
 800d70c:	68b4      	ldr	r4, [r6, #8]
 800d70e:	e7de      	b.n	800d6ce <_vfiprintf_r+0x22>
 800d710:	4b7d      	ldr	r3, [pc, #500]	; (800d908 <_vfiprintf_r+0x25c>)
 800d712:	429c      	cmp	r4, r3
 800d714:	d1db      	bne.n	800d6ce <_vfiprintf_r+0x22>
 800d716:	68f4      	ldr	r4, [r6, #12]
 800d718:	e7d9      	b.n	800d6ce <_vfiprintf_r+0x22>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	059b      	lsls	r3, r3, #22
 800d71e:	d4ee      	bmi.n	800d6fe <_vfiprintf_r+0x52>
 800d720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d722:	f7fd fbb1 	bl	800ae88 <__retarget_lock_release_recursive>
 800d726:	e7ea      	b.n	800d6fe <_vfiprintf_r+0x52>
 800d728:	2300      	movs	r3, #0
 800d72a:	ad08      	add	r5, sp, #32
 800d72c:	616b      	str	r3, [r5, #20]
 800d72e:	3320      	adds	r3, #32
 800d730:	766b      	strb	r3, [r5, #25]
 800d732:	3310      	adds	r3, #16
 800d734:	76ab      	strb	r3, [r5, #26]
 800d736:	9707      	str	r7, [sp, #28]
 800d738:	9f03      	ldr	r7, [sp, #12]
 800d73a:	783b      	ldrb	r3, [r7, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <_vfiprintf_r+0x98>
 800d740:	2b25      	cmp	r3, #37	; 0x25
 800d742:	d14e      	bne.n	800d7e2 <_vfiprintf_r+0x136>
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	1afb      	subs	r3, r7, r3
 800d748:	9305      	str	r3, [sp, #20]
 800d74a:	9b03      	ldr	r3, [sp, #12]
 800d74c:	429f      	cmp	r7, r3
 800d74e:	d00d      	beq.n	800d76c <_vfiprintf_r+0xc0>
 800d750:	9b05      	ldr	r3, [sp, #20]
 800d752:	0021      	movs	r1, r4
 800d754:	0030      	movs	r0, r6
 800d756:	9a03      	ldr	r2, [sp, #12]
 800d758:	f7ff ff95 	bl	800d686 <__sfputs_r>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d100      	bne.n	800d762 <_vfiprintf_r+0xb6>
 800d760:	e0b5      	b.n	800d8ce <_vfiprintf_r+0x222>
 800d762:	696a      	ldr	r2, [r5, #20]
 800d764:	9b05      	ldr	r3, [sp, #20]
 800d766:	4694      	mov	ip, r2
 800d768:	4463      	add	r3, ip
 800d76a:	616b      	str	r3, [r5, #20]
 800d76c:	783b      	ldrb	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d100      	bne.n	800d774 <_vfiprintf_r+0xc8>
 800d772:	e0ac      	b.n	800d8ce <_vfiprintf_r+0x222>
 800d774:	2201      	movs	r2, #1
 800d776:	1c7b      	adds	r3, r7, #1
 800d778:	9303      	str	r3, [sp, #12]
 800d77a:	2300      	movs	r3, #0
 800d77c:	4252      	negs	r2, r2
 800d77e:	606a      	str	r2, [r5, #4]
 800d780:	a904      	add	r1, sp, #16
 800d782:	3254      	adds	r2, #84	; 0x54
 800d784:	1852      	adds	r2, r2, r1
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	60eb      	str	r3, [r5, #12]
 800d78a:	60ab      	str	r3, [r5, #8]
 800d78c:	7013      	strb	r3, [r2, #0]
 800d78e:	65ab      	str	r3, [r5, #88]	; 0x58
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	2205      	movs	r2, #5
 800d794:	7819      	ldrb	r1, [r3, #0]
 800d796:	485d      	ldr	r0, [pc, #372]	; (800d90c <_vfiprintf_r+0x260>)
 800d798:	f7ff f93a 	bl	800ca10 <memchr>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	1c5f      	adds	r7, r3, #1
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d120      	bne.n	800d7e6 <_vfiprintf_r+0x13a>
 800d7a4:	682a      	ldr	r2, [r5, #0]
 800d7a6:	06d3      	lsls	r3, r2, #27
 800d7a8:	d504      	bpl.n	800d7b4 <_vfiprintf_r+0x108>
 800d7aa:	2353      	movs	r3, #83	; 0x53
 800d7ac:	a904      	add	r1, sp, #16
 800d7ae:	185b      	adds	r3, r3, r1
 800d7b0:	2120      	movs	r1, #32
 800d7b2:	7019      	strb	r1, [r3, #0]
 800d7b4:	0713      	lsls	r3, r2, #28
 800d7b6:	d504      	bpl.n	800d7c2 <_vfiprintf_r+0x116>
 800d7b8:	2353      	movs	r3, #83	; 0x53
 800d7ba:	a904      	add	r1, sp, #16
 800d7bc:	185b      	adds	r3, r3, r1
 800d7be:	212b      	movs	r1, #43	; 0x2b
 800d7c0:	7019      	strb	r1, [r3, #0]
 800d7c2:	9b03      	ldr	r3, [sp, #12]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7c8:	d016      	beq.n	800d7f8 <_vfiprintf_r+0x14c>
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	68eb      	ldr	r3, [r5, #12]
 800d7ce:	9f03      	ldr	r7, [sp, #12]
 800d7d0:	783a      	ldrb	r2, [r7, #0]
 800d7d2:	1c78      	adds	r0, r7, #1
 800d7d4:	3a30      	subs	r2, #48	; 0x30
 800d7d6:	4684      	mov	ip, r0
 800d7d8:	2a09      	cmp	r2, #9
 800d7da:	d94f      	bls.n	800d87c <_vfiprintf_r+0x1d0>
 800d7dc:	2900      	cmp	r1, #0
 800d7de:	d111      	bne.n	800d804 <_vfiprintf_r+0x158>
 800d7e0:	e017      	b.n	800d812 <_vfiprintf_r+0x166>
 800d7e2:	3701      	adds	r7, #1
 800d7e4:	e7a9      	b.n	800d73a <_vfiprintf_r+0x8e>
 800d7e6:	4b49      	ldr	r3, [pc, #292]	; (800d90c <_vfiprintf_r+0x260>)
 800d7e8:	682a      	ldr	r2, [r5, #0]
 800d7ea:	1ac0      	subs	r0, r0, r3
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	4083      	lsls	r3, r0
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	602b      	str	r3, [r5, #0]
 800d7f4:	9703      	str	r7, [sp, #12]
 800d7f6:	e7cb      	b.n	800d790 <_vfiprintf_r+0xe4>
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	1d19      	adds	r1, r3, #4
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	9107      	str	r1, [sp, #28]
 800d800:	2b00      	cmp	r3, #0
 800d802:	db01      	blt.n	800d808 <_vfiprintf_r+0x15c>
 800d804:	930b      	str	r3, [sp, #44]	; 0x2c
 800d806:	e004      	b.n	800d812 <_vfiprintf_r+0x166>
 800d808:	425b      	negs	r3, r3
 800d80a:	60eb      	str	r3, [r5, #12]
 800d80c:	2302      	movs	r3, #2
 800d80e:	4313      	orrs	r3, r2
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	783b      	ldrb	r3, [r7, #0]
 800d814:	2b2e      	cmp	r3, #46	; 0x2e
 800d816:	d10a      	bne.n	800d82e <_vfiprintf_r+0x182>
 800d818:	787b      	ldrb	r3, [r7, #1]
 800d81a:	2b2a      	cmp	r3, #42	; 0x2a
 800d81c:	d137      	bne.n	800d88e <_vfiprintf_r+0x1e2>
 800d81e:	9b07      	ldr	r3, [sp, #28]
 800d820:	3702      	adds	r7, #2
 800d822:	1d1a      	adds	r2, r3, #4
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	9207      	str	r2, [sp, #28]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	db2d      	blt.n	800d888 <_vfiprintf_r+0x1dc>
 800d82c:	9309      	str	r3, [sp, #36]	; 0x24
 800d82e:	2203      	movs	r2, #3
 800d830:	7839      	ldrb	r1, [r7, #0]
 800d832:	4837      	ldr	r0, [pc, #220]	; (800d910 <_vfiprintf_r+0x264>)
 800d834:	f7ff f8ec 	bl	800ca10 <memchr>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d007      	beq.n	800d84c <_vfiprintf_r+0x1a0>
 800d83c:	4b34      	ldr	r3, [pc, #208]	; (800d910 <_vfiprintf_r+0x264>)
 800d83e:	682a      	ldr	r2, [r5, #0]
 800d840:	1ac0      	subs	r0, r0, r3
 800d842:	2340      	movs	r3, #64	; 0x40
 800d844:	4083      	lsls	r3, r0
 800d846:	4313      	orrs	r3, r2
 800d848:	3701      	adds	r7, #1
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	7839      	ldrb	r1, [r7, #0]
 800d84e:	1c7b      	adds	r3, r7, #1
 800d850:	2206      	movs	r2, #6
 800d852:	4830      	ldr	r0, [pc, #192]	; (800d914 <_vfiprintf_r+0x268>)
 800d854:	9303      	str	r3, [sp, #12]
 800d856:	7629      	strb	r1, [r5, #24]
 800d858:	f7ff f8da 	bl	800ca10 <memchr>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d045      	beq.n	800d8ec <_vfiprintf_r+0x240>
 800d860:	4b2d      	ldr	r3, [pc, #180]	; (800d918 <_vfiprintf_r+0x26c>)
 800d862:	2b00      	cmp	r3, #0
 800d864:	d127      	bne.n	800d8b6 <_vfiprintf_r+0x20a>
 800d866:	2207      	movs	r2, #7
 800d868:	9b07      	ldr	r3, [sp, #28]
 800d86a:	3307      	adds	r3, #7
 800d86c:	4393      	bics	r3, r2
 800d86e:	3308      	adds	r3, #8
 800d870:	9307      	str	r3, [sp, #28]
 800d872:	696b      	ldr	r3, [r5, #20]
 800d874:	9a04      	ldr	r2, [sp, #16]
 800d876:	189b      	adds	r3, r3, r2
 800d878:	616b      	str	r3, [r5, #20]
 800d87a:	e75d      	b.n	800d738 <_vfiprintf_r+0x8c>
 800d87c:	210a      	movs	r1, #10
 800d87e:	434b      	muls	r3, r1
 800d880:	4667      	mov	r7, ip
 800d882:	189b      	adds	r3, r3, r2
 800d884:	3909      	subs	r1, #9
 800d886:	e7a3      	b.n	800d7d0 <_vfiprintf_r+0x124>
 800d888:	2301      	movs	r3, #1
 800d88a:	425b      	negs	r3, r3
 800d88c:	e7ce      	b.n	800d82c <_vfiprintf_r+0x180>
 800d88e:	2300      	movs	r3, #0
 800d890:	001a      	movs	r2, r3
 800d892:	3701      	adds	r7, #1
 800d894:	606b      	str	r3, [r5, #4]
 800d896:	7839      	ldrb	r1, [r7, #0]
 800d898:	1c78      	adds	r0, r7, #1
 800d89a:	3930      	subs	r1, #48	; 0x30
 800d89c:	4684      	mov	ip, r0
 800d89e:	2909      	cmp	r1, #9
 800d8a0:	d903      	bls.n	800d8aa <_vfiprintf_r+0x1fe>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0c3      	beq.n	800d82e <_vfiprintf_r+0x182>
 800d8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8a8:	e7c1      	b.n	800d82e <_vfiprintf_r+0x182>
 800d8aa:	230a      	movs	r3, #10
 800d8ac:	435a      	muls	r2, r3
 800d8ae:	4667      	mov	r7, ip
 800d8b0:	1852      	adds	r2, r2, r1
 800d8b2:	3b09      	subs	r3, #9
 800d8b4:	e7ef      	b.n	800d896 <_vfiprintf_r+0x1ea>
 800d8b6:	ab07      	add	r3, sp, #28
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	0022      	movs	r2, r4
 800d8bc:	0029      	movs	r1, r5
 800d8be:	0030      	movs	r0, r6
 800d8c0:	4b16      	ldr	r3, [pc, #88]	; (800d91c <_vfiprintf_r+0x270>)
 800d8c2:	f7fd fc35 	bl	800b130 <_printf_float>
 800d8c6:	9004      	str	r0, [sp, #16]
 800d8c8:	9b04      	ldr	r3, [sp, #16]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	d1d1      	bne.n	800d872 <_vfiprintf_r+0x1c6>
 800d8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8d0:	07db      	lsls	r3, r3, #31
 800d8d2:	d405      	bmi.n	800d8e0 <_vfiprintf_r+0x234>
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	059b      	lsls	r3, r3, #22
 800d8d8:	d402      	bmi.n	800d8e0 <_vfiprintf_r+0x234>
 800d8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8dc:	f7fd fad4 	bl	800ae88 <__retarget_lock_release_recursive>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	065b      	lsls	r3, r3, #25
 800d8e4:	d500      	bpl.n	800d8e8 <_vfiprintf_r+0x23c>
 800d8e6:	e70a      	b.n	800d6fe <_vfiprintf_r+0x52>
 800d8e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d8ea:	e70a      	b.n	800d702 <_vfiprintf_r+0x56>
 800d8ec:	ab07      	add	r3, sp, #28
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	0022      	movs	r2, r4
 800d8f2:	0029      	movs	r1, r5
 800d8f4:	0030      	movs	r0, r6
 800d8f6:	4b09      	ldr	r3, [pc, #36]	; (800d91c <_vfiprintf_r+0x270>)
 800d8f8:	f7fd fecc 	bl	800b694 <_printf_i>
 800d8fc:	e7e3      	b.n	800d8c6 <_vfiprintf_r+0x21a>
 800d8fe:	46c0      	nop			; (mov r8, r8)
 800d900:	0800e008 	.word	0x0800e008
 800d904:	0800e028 	.word	0x0800e028
 800d908:	0800dfe8 	.word	0x0800dfe8
 800d90c:	0800e26c 	.word	0x0800e26c
 800d910:	0800e272 	.word	0x0800e272
 800d914:	0800e276 	.word	0x0800e276
 800d918:	0800b131 	.word	0x0800b131
 800d91c:	0800d687 	.word	0x0800d687

0800d920 <__swbuf_r>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	0005      	movs	r5, r0
 800d924:	000e      	movs	r6, r1
 800d926:	0014      	movs	r4, r2
 800d928:	2800      	cmp	r0, #0
 800d92a:	d004      	beq.n	800d936 <__swbuf_r+0x16>
 800d92c:	6983      	ldr	r3, [r0, #24]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d101      	bne.n	800d936 <__swbuf_r+0x16>
 800d932:	f7fd f9e3 	bl	800acfc <__sinit>
 800d936:	4b22      	ldr	r3, [pc, #136]	; (800d9c0 <__swbuf_r+0xa0>)
 800d938:	429c      	cmp	r4, r3
 800d93a:	d12e      	bne.n	800d99a <__swbuf_r+0x7a>
 800d93c:	686c      	ldr	r4, [r5, #4]
 800d93e:	69a3      	ldr	r3, [r4, #24]
 800d940:	60a3      	str	r3, [r4, #8]
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	071b      	lsls	r3, r3, #28
 800d946:	d532      	bpl.n	800d9ae <__swbuf_r+0x8e>
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d02f      	beq.n	800d9ae <__swbuf_r+0x8e>
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	6922      	ldr	r2, [r4, #16]
 800d952:	b2f7      	uxtb	r7, r6
 800d954:	1a98      	subs	r0, r3, r2
 800d956:	6963      	ldr	r3, [r4, #20]
 800d958:	b2f6      	uxtb	r6, r6
 800d95a:	4283      	cmp	r3, r0
 800d95c:	dc05      	bgt.n	800d96a <__swbuf_r+0x4a>
 800d95e:	0021      	movs	r1, r4
 800d960:	0028      	movs	r0, r5
 800d962:	f7fe fff3 	bl	800c94c <_fflush_r>
 800d966:	2800      	cmp	r0, #0
 800d968:	d127      	bne.n	800d9ba <__swbuf_r+0x9a>
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	3001      	adds	r0, #1
 800d96e:	3b01      	subs	r3, #1
 800d970:	60a3      	str	r3, [r4, #8]
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	1c5a      	adds	r2, r3, #1
 800d976:	6022      	str	r2, [r4, #0]
 800d978:	701f      	strb	r7, [r3, #0]
 800d97a:	6963      	ldr	r3, [r4, #20]
 800d97c:	4283      	cmp	r3, r0
 800d97e:	d004      	beq.n	800d98a <__swbuf_r+0x6a>
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	07db      	lsls	r3, r3, #31
 800d984:	d507      	bpl.n	800d996 <__swbuf_r+0x76>
 800d986:	2e0a      	cmp	r6, #10
 800d988:	d105      	bne.n	800d996 <__swbuf_r+0x76>
 800d98a:	0021      	movs	r1, r4
 800d98c:	0028      	movs	r0, r5
 800d98e:	f7fe ffdd 	bl	800c94c <_fflush_r>
 800d992:	2800      	cmp	r0, #0
 800d994:	d111      	bne.n	800d9ba <__swbuf_r+0x9a>
 800d996:	0030      	movs	r0, r6
 800d998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d99a:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <__swbuf_r+0xa4>)
 800d99c:	429c      	cmp	r4, r3
 800d99e:	d101      	bne.n	800d9a4 <__swbuf_r+0x84>
 800d9a0:	68ac      	ldr	r4, [r5, #8]
 800d9a2:	e7cc      	b.n	800d93e <__swbuf_r+0x1e>
 800d9a4:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <__swbuf_r+0xa8>)
 800d9a6:	429c      	cmp	r4, r3
 800d9a8:	d1c9      	bne.n	800d93e <__swbuf_r+0x1e>
 800d9aa:	68ec      	ldr	r4, [r5, #12]
 800d9ac:	e7c7      	b.n	800d93e <__swbuf_r+0x1e>
 800d9ae:	0021      	movs	r1, r4
 800d9b0:	0028      	movs	r0, r5
 800d9b2:	f000 f819 	bl	800d9e8 <__swsetup_r>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d0c9      	beq.n	800d94e <__swbuf_r+0x2e>
 800d9ba:	2601      	movs	r6, #1
 800d9bc:	4276      	negs	r6, r6
 800d9be:	e7ea      	b.n	800d996 <__swbuf_r+0x76>
 800d9c0:	0800e008 	.word	0x0800e008
 800d9c4:	0800e028 	.word	0x0800e028
 800d9c8:	0800dfe8 	.word	0x0800dfe8

0800d9cc <__ascii_wctomb>:
 800d9cc:	0003      	movs	r3, r0
 800d9ce:	1e08      	subs	r0, r1, #0
 800d9d0:	d005      	beq.n	800d9de <__ascii_wctomb+0x12>
 800d9d2:	2aff      	cmp	r2, #255	; 0xff
 800d9d4:	d904      	bls.n	800d9e0 <__ascii_wctomb+0x14>
 800d9d6:	228a      	movs	r2, #138	; 0x8a
 800d9d8:	2001      	movs	r0, #1
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	4240      	negs	r0, r0
 800d9de:	4770      	bx	lr
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	700a      	strb	r2, [r1, #0]
 800d9e4:	e7fb      	b.n	800d9de <__ascii_wctomb+0x12>
	...

0800d9e8 <__swsetup_r>:
 800d9e8:	4b37      	ldr	r3, [pc, #220]	; (800dac8 <__swsetup_r+0xe0>)
 800d9ea:	b570      	push	{r4, r5, r6, lr}
 800d9ec:	681d      	ldr	r5, [r3, #0]
 800d9ee:	0006      	movs	r6, r0
 800d9f0:	000c      	movs	r4, r1
 800d9f2:	2d00      	cmp	r5, #0
 800d9f4:	d005      	beq.n	800da02 <__swsetup_r+0x1a>
 800d9f6:	69ab      	ldr	r3, [r5, #24]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d102      	bne.n	800da02 <__swsetup_r+0x1a>
 800d9fc:	0028      	movs	r0, r5
 800d9fe:	f7fd f97d 	bl	800acfc <__sinit>
 800da02:	4b32      	ldr	r3, [pc, #200]	; (800dacc <__swsetup_r+0xe4>)
 800da04:	429c      	cmp	r4, r3
 800da06:	d10f      	bne.n	800da28 <__swsetup_r+0x40>
 800da08:	686c      	ldr	r4, [r5, #4]
 800da0a:	230c      	movs	r3, #12
 800da0c:	5ee2      	ldrsh	r2, [r4, r3]
 800da0e:	b293      	uxth	r3, r2
 800da10:	0711      	lsls	r1, r2, #28
 800da12:	d42d      	bmi.n	800da70 <__swsetup_r+0x88>
 800da14:	06d9      	lsls	r1, r3, #27
 800da16:	d411      	bmi.n	800da3c <__swsetup_r+0x54>
 800da18:	2309      	movs	r3, #9
 800da1a:	2001      	movs	r0, #1
 800da1c:	6033      	str	r3, [r6, #0]
 800da1e:	3337      	adds	r3, #55	; 0x37
 800da20:	4313      	orrs	r3, r2
 800da22:	81a3      	strh	r3, [r4, #12]
 800da24:	4240      	negs	r0, r0
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	4b29      	ldr	r3, [pc, #164]	; (800dad0 <__swsetup_r+0xe8>)
 800da2a:	429c      	cmp	r4, r3
 800da2c:	d101      	bne.n	800da32 <__swsetup_r+0x4a>
 800da2e:	68ac      	ldr	r4, [r5, #8]
 800da30:	e7eb      	b.n	800da0a <__swsetup_r+0x22>
 800da32:	4b28      	ldr	r3, [pc, #160]	; (800dad4 <__swsetup_r+0xec>)
 800da34:	429c      	cmp	r4, r3
 800da36:	d1e8      	bne.n	800da0a <__swsetup_r+0x22>
 800da38:	68ec      	ldr	r4, [r5, #12]
 800da3a:	e7e6      	b.n	800da0a <__swsetup_r+0x22>
 800da3c:	075b      	lsls	r3, r3, #29
 800da3e:	d513      	bpl.n	800da68 <__swsetup_r+0x80>
 800da40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da42:	2900      	cmp	r1, #0
 800da44:	d008      	beq.n	800da58 <__swsetup_r+0x70>
 800da46:	0023      	movs	r3, r4
 800da48:	3344      	adds	r3, #68	; 0x44
 800da4a:	4299      	cmp	r1, r3
 800da4c:	d002      	beq.n	800da54 <__swsetup_r+0x6c>
 800da4e:	0030      	movs	r0, r6
 800da50:	f7ff fbc2 	bl	800d1d8 <_free_r>
 800da54:	2300      	movs	r3, #0
 800da56:	6363      	str	r3, [r4, #52]	; 0x34
 800da58:	2224      	movs	r2, #36	; 0x24
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	4393      	bics	r3, r2
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	2300      	movs	r3, #0
 800da62:	6063      	str	r3, [r4, #4]
 800da64:	6923      	ldr	r3, [r4, #16]
 800da66:	6023      	str	r3, [r4, #0]
 800da68:	2308      	movs	r3, #8
 800da6a:	89a2      	ldrh	r2, [r4, #12]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	6923      	ldr	r3, [r4, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10b      	bne.n	800da8e <__swsetup_r+0xa6>
 800da76:	21a0      	movs	r1, #160	; 0xa0
 800da78:	2280      	movs	r2, #128	; 0x80
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	0089      	lsls	r1, r1, #2
 800da7e:	0092      	lsls	r2, r2, #2
 800da80:	400b      	ands	r3, r1
 800da82:	4293      	cmp	r3, r2
 800da84:	d003      	beq.n	800da8e <__swsetup_r+0xa6>
 800da86:	0021      	movs	r1, r4
 800da88:	0030      	movs	r0, r6
 800da8a:	f000 f855 	bl	800db38 <__smakebuf_r>
 800da8e:	220c      	movs	r2, #12
 800da90:	5ea3      	ldrsh	r3, [r4, r2]
 800da92:	2001      	movs	r0, #1
 800da94:	001a      	movs	r2, r3
 800da96:	b299      	uxth	r1, r3
 800da98:	4002      	ands	r2, r0
 800da9a:	4203      	tst	r3, r0
 800da9c:	d00f      	beq.n	800dabe <__swsetup_r+0xd6>
 800da9e:	2200      	movs	r2, #0
 800daa0:	60a2      	str	r2, [r4, #8]
 800daa2:	6962      	ldr	r2, [r4, #20]
 800daa4:	4252      	negs	r2, r2
 800daa6:	61a2      	str	r2, [r4, #24]
 800daa8:	2000      	movs	r0, #0
 800daaa:	6922      	ldr	r2, [r4, #16]
 800daac:	4282      	cmp	r2, r0
 800daae:	d1ba      	bne.n	800da26 <__swsetup_r+0x3e>
 800dab0:	060a      	lsls	r2, r1, #24
 800dab2:	d5b8      	bpl.n	800da26 <__swsetup_r+0x3e>
 800dab4:	2240      	movs	r2, #64	; 0x40
 800dab6:	4313      	orrs	r3, r2
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	3801      	subs	r0, #1
 800dabc:	e7b3      	b.n	800da26 <__swsetup_r+0x3e>
 800dabe:	0788      	lsls	r0, r1, #30
 800dac0:	d400      	bmi.n	800dac4 <__swsetup_r+0xdc>
 800dac2:	6962      	ldr	r2, [r4, #20]
 800dac4:	60a2      	str	r2, [r4, #8]
 800dac6:	e7ef      	b.n	800daa8 <__swsetup_r+0xc0>
 800dac8:	20000018 	.word	0x20000018
 800dacc:	0800e008 	.word	0x0800e008
 800dad0:	0800e028 	.word	0x0800e028
 800dad4:	0800dfe8 	.word	0x0800dfe8

0800dad8 <abort>:
 800dad8:	2006      	movs	r0, #6
 800dada:	b510      	push	{r4, lr}
 800dadc:	f000 f8a2 	bl	800dc24 <raise>
 800dae0:	2001      	movs	r0, #1
 800dae2:	f7f5 fa21 	bl	8002f28 <_exit>
	...

0800dae8 <__swhatbuf_r>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	000e      	movs	r6, r1
 800daec:	001d      	movs	r5, r3
 800daee:	230e      	movs	r3, #14
 800daf0:	5ec9      	ldrsh	r1, [r1, r3]
 800daf2:	0014      	movs	r4, r2
 800daf4:	b096      	sub	sp, #88	; 0x58
 800daf6:	2900      	cmp	r1, #0
 800daf8:	da08      	bge.n	800db0c <__swhatbuf_r+0x24>
 800dafa:	220c      	movs	r2, #12
 800dafc:	5eb3      	ldrsh	r3, [r6, r2]
 800dafe:	2200      	movs	r2, #0
 800db00:	602a      	str	r2, [r5, #0]
 800db02:	061b      	lsls	r3, r3, #24
 800db04:	d411      	bmi.n	800db2a <__swhatbuf_r+0x42>
 800db06:	2380      	movs	r3, #128	; 0x80
 800db08:	00db      	lsls	r3, r3, #3
 800db0a:	e00f      	b.n	800db2c <__swhatbuf_r+0x44>
 800db0c:	466a      	mov	r2, sp
 800db0e:	f000 f8a9 	bl	800dc64 <_fstat_r>
 800db12:	2800      	cmp	r0, #0
 800db14:	dbf1      	blt.n	800dafa <__swhatbuf_r+0x12>
 800db16:	23f0      	movs	r3, #240	; 0xf0
 800db18:	9901      	ldr	r1, [sp, #4]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	4019      	ands	r1, r3
 800db1e:	4b05      	ldr	r3, [pc, #20]	; (800db34 <__swhatbuf_r+0x4c>)
 800db20:	18c9      	adds	r1, r1, r3
 800db22:	424b      	negs	r3, r1
 800db24:	4159      	adcs	r1, r3
 800db26:	6029      	str	r1, [r5, #0]
 800db28:	e7ed      	b.n	800db06 <__swhatbuf_r+0x1e>
 800db2a:	2340      	movs	r3, #64	; 0x40
 800db2c:	2000      	movs	r0, #0
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	b016      	add	sp, #88	; 0x58
 800db32:	bd70      	pop	{r4, r5, r6, pc}
 800db34:	ffffe000 	.word	0xffffe000

0800db38 <__smakebuf_r>:
 800db38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db3a:	2602      	movs	r6, #2
 800db3c:	898b      	ldrh	r3, [r1, #12]
 800db3e:	0005      	movs	r5, r0
 800db40:	000c      	movs	r4, r1
 800db42:	4233      	tst	r3, r6
 800db44:	d006      	beq.n	800db54 <__smakebuf_r+0x1c>
 800db46:	0023      	movs	r3, r4
 800db48:	3347      	adds	r3, #71	; 0x47
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	6123      	str	r3, [r4, #16]
 800db4e:	2301      	movs	r3, #1
 800db50:	6163      	str	r3, [r4, #20]
 800db52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800db54:	466a      	mov	r2, sp
 800db56:	ab01      	add	r3, sp, #4
 800db58:	f7ff ffc6 	bl	800dae8 <__swhatbuf_r>
 800db5c:	9900      	ldr	r1, [sp, #0]
 800db5e:	0007      	movs	r7, r0
 800db60:	0028      	movs	r0, r5
 800db62:	f7fd f9c5 	bl	800aef0 <_malloc_r>
 800db66:	2800      	cmp	r0, #0
 800db68:	d108      	bne.n	800db7c <__smakebuf_r+0x44>
 800db6a:	220c      	movs	r2, #12
 800db6c:	5ea3      	ldrsh	r3, [r4, r2]
 800db6e:	059a      	lsls	r2, r3, #22
 800db70:	d4ef      	bmi.n	800db52 <__smakebuf_r+0x1a>
 800db72:	2203      	movs	r2, #3
 800db74:	4393      	bics	r3, r2
 800db76:	431e      	orrs	r6, r3
 800db78:	81a6      	strh	r6, [r4, #12]
 800db7a:	e7e4      	b.n	800db46 <__smakebuf_r+0xe>
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <__smakebuf_r+0x84>)
 800db7e:	62ab      	str	r3, [r5, #40]	; 0x28
 800db80:	2380      	movs	r3, #128	; 0x80
 800db82:	89a2      	ldrh	r2, [r4, #12]
 800db84:	6020      	str	r0, [r4, #0]
 800db86:	4313      	orrs	r3, r2
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	9b00      	ldr	r3, [sp, #0]
 800db8c:	6120      	str	r0, [r4, #16]
 800db8e:	6163      	str	r3, [r4, #20]
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00d      	beq.n	800dbb2 <__smakebuf_r+0x7a>
 800db96:	0028      	movs	r0, r5
 800db98:	230e      	movs	r3, #14
 800db9a:	5ee1      	ldrsh	r1, [r4, r3]
 800db9c:	f000 f874 	bl	800dc88 <_isatty_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d006      	beq.n	800dbb2 <__smakebuf_r+0x7a>
 800dba4:	2203      	movs	r2, #3
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	4393      	bics	r3, r2
 800dbaa:	001a      	movs	r2, r3
 800dbac:	2301      	movs	r3, #1
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	89a0      	ldrh	r0, [r4, #12]
 800dbb4:	4307      	orrs	r7, r0
 800dbb6:	81a7      	strh	r7, [r4, #12]
 800dbb8:	e7cb      	b.n	800db52 <__smakebuf_r+0x1a>
 800dbba:	46c0      	nop			; (mov r8, r8)
 800dbbc:	0800ac81 	.word	0x0800ac81

0800dbc0 <_malloc_usable_size_r>:
 800dbc0:	1f0b      	subs	r3, r1, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	1f18      	subs	r0, r3, #4
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	da01      	bge.n	800dbce <_malloc_usable_size_r+0xe>
 800dbca:	580b      	ldr	r3, [r1, r0]
 800dbcc:	18c0      	adds	r0, r0, r3
 800dbce:	4770      	bx	lr

0800dbd0 <_raise_r>:
 800dbd0:	b570      	push	{r4, r5, r6, lr}
 800dbd2:	0004      	movs	r4, r0
 800dbd4:	000d      	movs	r5, r1
 800dbd6:	291f      	cmp	r1, #31
 800dbd8:	d904      	bls.n	800dbe4 <_raise_r+0x14>
 800dbda:	2316      	movs	r3, #22
 800dbdc:	6003      	str	r3, [r0, #0]
 800dbde:	2001      	movs	r0, #1
 800dbe0:	4240      	negs	r0, r0
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d004      	beq.n	800dbf4 <_raise_r+0x24>
 800dbea:	008a      	lsls	r2, r1, #2
 800dbec:	189b      	adds	r3, r3, r2
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	2a00      	cmp	r2, #0
 800dbf2:	d108      	bne.n	800dc06 <_raise_r+0x36>
 800dbf4:	0020      	movs	r0, r4
 800dbf6:	f000 f831 	bl	800dc5c <_getpid_r>
 800dbfa:	002a      	movs	r2, r5
 800dbfc:	0001      	movs	r1, r0
 800dbfe:	0020      	movs	r0, r4
 800dc00:	f000 f81a 	bl	800dc38 <_kill_r>
 800dc04:	e7ed      	b.n	800dbe2 <_raise_r+0x12>
 800dc06:	2000      	movs	r0, #0
 800dc08:	2a01      	cmp	r2, #1
 800dc0a:	d0ea      	beq.n	800dbe2 <_raise_r+0x12>
 800dc0c:	1c51      	adds	r1, r2, #1
 800dc0e:	d103      	bne.n	800dc18 <_raise_r+0x48>
 800dc10:	2316      	movs	r3, #22
 800dc12:	3001      	adds	r0, #1
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	e7e4      	b.n	800dbe2 <_raise_r+0x12>
 800dc18:	2400      	movs	r4, #0
 800dc1a:	0028      	movs	r0, r5
 800dc1c:	601c      	str	r4, [r3, #0]
 800dc1e:	4790      	blx	r2
 800dc20:	0020      	movs	r0, r4
 800dc22:	e7de      	b.n	800dbe2 <_raise_r+0x12>

0800dc24 <raise>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	4b03      	ldr	r3, [pc, #12]	; (800dc34 <raise+0x10>)
 800dc28:	0001      	movs	r1, r0
 800dc2a:	6818      	ldr	r0, [r3, #0]
 800dc2c:	f7ff ffd0 	bl	800dbd0 <_raise_r>
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	46c0      	nop			; (mov r8, r8)
 800dc34:	20000018 	.word	0x20000018

0800dc38 <_kill_r>:
 800dc38:	2300      	movs	r3, #0
 800dc3a:	b570      	push	{r4, r5, r6, lr}
 800dc3c:	4d06      	ldr	r5, [pc, #24]	; (800dc58 <_kill_r+0x20>)
 800dc3e:	0004      	movs	r4, r0
 800dc40:	0008      	movs	r0, r1
 800dc42:	0011      	movs	r1, r2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	f7f5 f95f 	bl	8002f08 <_kill>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d103      	bne.n	800dc56 <_kill_r+0x1e>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d000      	beq.n	800dc56 <_kill_r+0x1e>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	20001e34 	.word	0x20001e34

0800dc5c <_getpid_r>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	f7f5 f94d 	bl	8002efc <_getpid>
 800dc62:	bd10      	pop	{r4, pc}

0800dc64 <_fstat_r>:
 800dc64:	2300      	movs	r3, #0
 800dc66:	b570      	push	{r4, r5, r6, lr}
 800dc68:	4d06      	ldr	r5, [pc, #24]	; (800dc84 <_fstat_r+0x20>)
 800dc6a:	0004      	movs	r4, r0
 800dc6c:	0008      	movs	r0, r1
 800dc6e:	0011      	movs	r1, r2
 800dc70:	602b      	str	r3, [r5, #0]
 800dc72:	f7f5 f9a8 	bl	8002fc6 <_fstat>
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	d103      	bne.n	800dc82 <_fstat_r+0x1e>
 800dc7a:	682b      	ldr	r3, [r5, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d000      	beq.n	800dc82 <_fstat_r+0x1e>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd70      	pop	{r4, r5, r6, pc}
 800dc84:	20001e34 	.word	0x20001e34

0800dc88 <_isatty_r>:
 800dc88:	2300      	movs	r3, #0
 800dc8a:	b570      	push	{r4, r5, r6, lr}
 800dc8c:	4d06      	ldr	r5, [pc, #24]	; (800dca8 <_isatty_r+0x20>)
 800dc8e:	0004      	movs	r4, r0
 800dc90:	0008      	movs	r0, r1
 800dc92:	602b      	str	r3, [r5, #0]
 800dc94:	f7f5 f9a5 	bl	8002fe2 <_isatty>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d103      	bne.n	800dca4 <_isatty_r+0x1c>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d000      	beq.n	800dca4 <_isatty_r+0x1c>
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	bd70      	pop	{r4, r5, r6, pc}
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	20001e34 	.word	0x20001e34

0800dcac <_init>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	46c0      	nop			; (mov r8, r8)
 800dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb2:	bc08      	pop	{r3}
 800dcb4:	469e      	mov	lr, r3
 800dcb6:	4770      	bx	lr

0800dcb8 <_fini>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	46c0      	nop			; (mov r8, r8)
 800dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcbe:	bc08      	pop	{r3}
 800dcc0:	469e      	mov	lr, r3
 800dcc2:	4770      	bx	lr
