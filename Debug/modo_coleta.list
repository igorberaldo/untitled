
modo_coleta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b8c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf4  08003cf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000010  08003d0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001130  08003d0c  00021130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f75d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002415  00000000  00000000  0002f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00031bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027b8  00000000  00000000  00033758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113dc  00000000  00000000  00035f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cd7  00000000  00000000  000472ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cafc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000cb014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c34 	.word	0x08003c34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003c34 	.word	0x08003c34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <vApplicationGetIdleTaskMemory+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000080 	.word	0x20000080

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fa7b 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f81f 	bl	8000524 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f929 	bl	800073c <MX_GPIO_Init>
  MX_I2C2_Init();
 80004ea:	f000 f887 	bl	80005fc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f8c5 	bl	800067c <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 80004f2:	f000 f8f3 	bl	80006dc <MX_USART5_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensorData */
  osThreadDef(readSensorData, StartReadSensorData, osPriorityNormal, 0, 128);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x44>)
 80004fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004fc:	c313      	stmia	r3!, {r0, r1, r4}
 80004fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000500:	c313      	stmia	r3!, {r0, r1, r4}
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
  readSensorDataHandle = osThreadCreate(osThread(readSensorData), NULL);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2100      	movs	r1, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fac5 	bl	8002a9a <osThreadCreate>
 8000510:	0002      	movs	r2, r0
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <main+0x48>)
 8000514:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000516:	f002 fab8 	bl	8002a8a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x42>
 800051c:	08003c5c 	.word	0x08003c5c
 8000520:	200003e4 	.word	0x200003e4

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b09d      	sub	sp, #116	; 0x74
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2438      	movs	r4, #56	; 0x38
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2338      	movs	r3, #56	; 0x38
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 fb75 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	2324      	movs	r3, #36	; 0x24
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 fb6d 	bl	8003c24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2324      	movs	r3, #36	; 0x24
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 fb66 	bl	8003c24 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <SystemClock_Config+0xd4>)
 800055e:	401a      	ands	r2, r3
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xd0>)
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	0109      	lsls	r1, r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2210      	movs	r2, #16
 8000570:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	22a0      	movs	r2, #160	; 0xa0
 8000582:	0212      	lsls	r2, r2, #8
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	187b      	adds	r3, r7, r1
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fdf2 	bl	8001178 <HAL_RCC_OscConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000598:	f000 f8fa 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	2124      	movs	r1, #36	; 0x24
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	220f      	movs	r2, #15
 80005a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f9ad 	bl	8001920 <HAL_RCC_ClockConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ca:	f000 f8e1 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fbc3 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 f8d3 	bl	8000790 <Error_Handler>
  }
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b01d      	add	sp, #116	; 0x74
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40007000 	.word	0x40007000
 80005f8:	ffffe7ff 	.word	0xffffe7ff

080005fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_I2C2_Init+0x78>)
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <MX_I2C2_Init+0x7c>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C2_Init+0x78>)
 8000608:	22e1      	movs	r2, #225	; 0xe1
 800060a:	00d2      	lsls	r2, r2, #3
 800060c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_I2C2_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C2_Init+0x78>)
 8000616:	2201      	movs	r2, #1
 8000618:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_I2C2_Init+0x78>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C2_Init+0x78>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_I2C2_Init+0x78>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C2_Init+0x78>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_I2C2_Init+0x78>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C2_Init+0x78>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fc6e 	bl	8000f1c <HAL_I2C_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f8a4 	bl	8000790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C2_Init+0x78>)
 800064a:	2100      	movs	r1, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fcfb 	bl	8001048 <HAL_I2CEx_ConfigAnalogFilter>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000656:	f000 f89b 	bl	8000790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_I2C2_Init+0x78>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fd3e 	bl	80010e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f892 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000280 	.word	0x20000280
 8000678:	40005800 	.word	0x40005800

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000688:	22e1      	movs	r2, #225	; 0xe1
 800068a:	0252      	lsls	r2, r2, #9
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fcad 	bl	8002020 <HAL_UART_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f861 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200002d4 	.word	0x200002d4
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART5_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART5_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART5_UART_Init+0x58>)
 80006e8:	22e1      	movs	r2, #225	; 0xe1
 80006ea:	0252      	lsls	r2, r2, #9
 80006ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART5_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART5_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART5_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART5_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART5_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART5_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART5_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART5_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MX_USART5_UART_Init+0x58>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fc7d 	bl	8002020 <HAL_UART_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f831 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000035c 	.word	0x2000035c
 8000738:	40005000 	.word	0x40005000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x40>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_GPIO_Init+0x40>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_GPIO_Init+0x40>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_GPIO_Init+0x40>)
 800075c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_GPIO_Init+0x40>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_GPIO_Init+0x40>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40021000 	.word	0x40021000

08000780 <StartReadSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadSensorData */
void StartReadSensorData(void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f002 f9d3 	bl	8002b34 <osDelay>
 800078e:	e7fb      	b.n	8000788 <StartReadSensorData+0x8>

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_MspInit+0x34>)
 80007a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x34>)
 80007a6:	2101      	movs	r1, #1
 80007a8:	430a      	orrs	r2, r1
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x34>)
 80007ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_MspInit+0x34>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0549      	lsls	r1, r1, #21
 80007b6:	430a      	orrs	r2, r1
 80007b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007ba:	2302      	movs	r3, #2
 80007bc:	425b      	negs	r3, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	2103      	movs	r1, #3
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fa0a 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	240c      	movs	r4, #12
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2314      	movs	r3, #20
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f003 fa1c 	bl	8003c24 <memset>
  if(hi2c->Instance==I2C2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_I2C_MspInit+0x80>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d129      	bne.n	800084a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_I2C_MspInit+0x84>)
 80007f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_I2C_MspInit+0x84>)
 80007fc:	2102      	movs	r1, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_I2C_MspInit+0x84>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	2202      	movs	r2, #2
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	22c0      	movs	r2, #192	; 0xc0
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2212      	movs	r2, #18
 800081c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2203      	movs	r2, #3
 8000828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2206      	movs	r2, #6
 800082e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	187b      	adds	r3, r7, r1
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_I2C_MspInit+0x88>)
 8000834:	0019      	movs	r1, r3
 8000836:	0010      	movs	r0, r2
 8000838:	f000 f9f2 	bl	8000c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_I2C_MspInit+0x84>)
 800083e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_I2C_MspInit+0x84>)
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	03c9      	lsls	r1, r1, #15
 8000846:	430a      	orrs	r2, r1
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b009      	add	sp, #36	; 0x24
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40005800 	.word	0x40005800
 8000858:	40021000 	.word	0x40021000
 800085c:	50000400 	.word	0x50000400

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08b      	sub	sp, #44	; 0x2c
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	2414      	movs	r4, #20
 800086a:	193b      	adds	r3, r7, r4
 800086c:	0018      	movs	r0, r3
 800086e:	2314      	movs	r3, #20
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f003 f9d6 	bl	8003c24 <memset>
  if(huart->Instance==USART1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a30      	ldr	r2, [pc, #192]	; (8000940 <HAL_UART_MspInit+0xe0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12b      	bne.n	80008da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <HAL_UART_MspInit+0xe4>)
 8000884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <HAL_UART_MspInit+0xe4>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	01c9      	lsls	r1, r1, #7
 800088c:	430a      	orrs	r2, r1
 800088e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <HAL_UART_MspInit+0xe4>)
 8000892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <HAL_UART_MspInit+0xe4>)
 8000896:	2101      	movs	r1, #1
 8000898:	430a      	orrs	r2, r1
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <HAL_UART_MspInit+0xe4>)
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	2201      	movs	r2, #1
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	22c0      	movs	r2, #192	; 0xc0
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	0021      	movs	r1, r4
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2202      	movs	r2, #2
 80008b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2203      	movs	r2, #3
 80008c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2204      	movs	r2, #4
 80008c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	187a      	adds	r2, r7, r1
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 f9a4 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80008d8:	e02d      	b.n	8000936 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART5)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <HAL_UART_MspInit+0xe8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d128      	bne.n	8000936 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART5_CLK_ENABLE();
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0xe4>)
 80008e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_UART_MspInit+0xe4>)
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0349      	lsls	r1, r1, #13
 80008ee:	430a      	orrs	r2, r1
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0xe4>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_UART_MspInit+0xe4>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0xe4>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800090a:	2114      	movs	r1, #20
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2218      	movs	r2, #24
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2203      	movs	r2, #3
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2206      	movs	r2, #6
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	187b      	adds	r3, r7, r1
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_UART_MspInit+0xec>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f000 f975 	bl	8000c20 <HAL_GPIO_Init>
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b00b      	add	sp, #44	; 0x2c
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40013800 	.word	0x40013800
 8000944:	40021000 	.word	0x40021000
 8000948:	40005000 	.word	0x40005000
 800094c:	50000400 	.word	0x50000400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f88e 	bl	8000a80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000964:	f002 fdf0 	bl	8003548 <xTaskGetSchedulerState>
 8000968:	0003      	movs	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d001      	beq.n	8000972 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800096e:	f002 ff53 	bl	8003818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000988:	f7ff fff6 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 f913 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fd8f 	bl	80004d8 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
   ldr   r0, =_estack
 80009bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c8:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 80009cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009d0:	20001130 	.word	0x20001130

080009d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_COMP_IRQHandler>
	...

080009d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Init+0x3c>)
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	430a      	orrs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f811 	bl	8000a18 <HAL_InitTick>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e001      	b.n	8000a06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a02:	f7ff fecb 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_InitTick+0x60>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	0019      	movs	r1, r3
 8000a2a:	23fa      	movs	r3, #250	; 0xfa
 8000a2c:	0098      	lsls	r0, r3, #2
 8000a2e:	f7ff fb6b 	bl	8000108 <__udivsi3>
 8000a32:	0003      	movs	r3, r0
 8000a34:	0019      	movs	r1, r3
 8000a36:	0020      	movs	r0, r4
 8000a38:	f7ff fb66 	bl	8000108 <__udivsi3>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f8e1 	bl	8000c06 <HAL_SYSTICK_Config>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e00f      	b.n	8000a6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d80b      	bhi.n	8000a6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2301      	movs	r3, #1
 8000a56:	425b      	negs	r3, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f8be 	bl	8000bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_InitTick+0x64>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	18d2      	adds	r2, r2, r3
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	200003e8 	.word	0x200003e8

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	200003e8 	.word	0x200003e8

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b7f      	cmp	r3, #127	; 0x7f
 8000acc:	d828      	bhi.n	8000b20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ace:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <__NVIC_SetPriority+0xd4>)
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	33c0      	adds	r3, #192	; 0xc0
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	589b      	ldr	r3, [r3, r2]
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	00d2      	lsls	r2, r2, #3
 8000aea:	21ff      	movs	r1, #255	; 0xff
 8000aec:	4091      	lsls	r1, r2
 8000aee:	000a      	movs	r2, r1
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	401a      	ands	r2, r3
 8000af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	401a      	ands	r2, r3
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0018      	movs	r0, r3
 8000b04:	2303      	movs	r3, #3
 8000b06:	4003      	ands	r3, r0
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	481f      	ldr	r0, [pc, #124]	; (8000b8c <__NVIC_SetPriority+0xd4>)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	430a      	orrs	r2, r1
 8000b18:	33c0      	adds	r3, #192	; 0xc0
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b1e:	e031      	b.n	8000b84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0019      	movs	r1, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3306      	adds	r3, #6
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	18d3      	adds	r3, r2, r3
 8000b36:	3304      	adds	r3, #4
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <__NVIC_SetPriority+0xd8>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001c      	movs	r4, r3
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	3b08      	subs	r3, #8
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	3306      	adds	r3, #6
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	18c3      	adds	r3, r0, r3
 8000b80:	3304      	adds	r3, #4
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	045b      	lsls	r3, r3, #17
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d301      	bcc.n	8000bac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e010      	b.n	8000bce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <SysTick_Config+0x44>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	2103      	movs	r1, #3
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ff7c 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x44>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x44>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	210f      	movs	r1, #15
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ffbf 	bl	8000b94 <SysTick_Config>
 8000c16:	0003      	movs	r3, r0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c36:	e155      	b.n	8000ee4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <HAL_GPIO_Init+0x30>
 8000c4e:	e146      	b.n	8000ede <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d005      	beq.n	8000c68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2203      	movs	r2, #3
 8000c62:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d017      	beq.n	8000d06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	58d3      	ldr	r3, [r2, r3]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2207      	movs	r2, #7
 8000d24:	4013      	ands	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	400b      	ands	r3, r1
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	6939      	ldr	r1, [r7, #16]
 8000d58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	401a      	ands	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4013      	ands	r3, r2
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x17c>
 8000d9a:	e0a0      	b.n	8000ede <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da8:	4a55      	ldr	r2, [pc, #340]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	589b      	ldr	r3, [r3, r2]
 8000db4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d01f      	beq.n	8000e16 <HAL_GPIO_Init+0x1f6>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x1f2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_GPIO_Init+0x2ec>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x1ea>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x1e6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <HAL_GPIO_Init+0x2f4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e00a      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e06:	2304      	movs	r3, #4
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x1f8>
 8000e16:	2300      	movs	r3, #0
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	4935      	ldr	r1, [pc, #212]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	1e13      	subs	r3, r2, #0
 8000eee:	d000      	beq.n	8000ef2 <HAL_GPIO_Init+0x2d2>
 8000ef0:	e6a2      	b.n	8000c38 <HAL_GPIO_Init+0x18>
  }
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b006      	add	sp, #24
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000
 8000f04:	50000400 	.word	0x50000400
 8000f08:	50000800 	.word	0x50000800
 8000f0c:	50000c00 	.word	0x50000c00
 8000f10:	50001000 	.word	0x50001000
 8000f14:	50001c00 	.word	0x50001c00
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e082      	b.n	8001034 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2241      	movs	r2, #65	; 0x41
 8000f32:	5c9b      	ldrb	r3, [r3, r2]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	2100      	movs	r1, #0
 8000f40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fc45 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2241      	movs	r2, #65	; 0x41
 8000f4e:	2124      	movs	r1, #36	; 0x24
 8000f50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	438a      	bics	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4934      	ldr	r1, [pc, #208]	; (800103c <HAL_I2C_Init+0x120>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4931      	ldr	r1, [pc, #196]	; (8001040 <HAL_I2C_Init+0x124>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0209      	lsls	r1, r1, #8
 8000f94:	430a      	orrs	r2, r1
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	e007      	b.n	8000faa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2184      	movs	r1, #132	; 0x84
 8000fa4:	0209      	lsls	r1, r1, #8
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d104      	bne.n	8000fbc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	491f      	ldr	r1, [pc, #124]	; (8001044 <HAL_I2C_Init+0x128>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	491a      	ldr	r1, [pc, #104]	; (8001040 <HAL_I2C_Init+0x124>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69d9      	ldr	r1, [r3, #28]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2241      	movs	r2, #65	; 0x41
 8001020:	2120      	movs	r1, #32
 8001022:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2242      	movs	r2, #66	; 0x42
 800102e:	2100      	movs	r1, #0
 8001030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	f0ffffff 	.word	0xf0ffffff
 8001040:	ffff7fff 	.word	0xffff7fff
 8001044:	02008000 	.word	0x02008000

08001048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2241      	movs	r2, #65	; 0x41
 8001056:	5c9b      	ldrb	r3, [r3, r2]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b20      	cmp	r3, #32
 800105c:	d138      	bne.n	80010d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2240      	movs	r2, #64	; 0x40
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001068:	2302      	movs	r3, #2
 800106a:	e032      	b.n	80010d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2241      	movs	r2, #65	; 0x41
 8001078:	2124      	movs	r1, #36	; 0x24
 800107a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2101      	movs	r1, #1
 8001088:	438a      	bics	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4911      	ldr	r1, [pc, #68]	; (80010dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2241      	movs	r2, #65	; 0x41
 80010c0:	2120      	movs	r1, #32
 80010c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e000      	b.n	80010d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010d0:	2302      	movs	r3, #2
  }
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	ffffefff 	.word	0xffffefff

080010e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d139      	bne.n	800116a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	5c9b      	ldrb	r3, [r3, r2]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001100:	2302      	movs	r3, #2
 8001102:	e033      	b.n	800116c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	2101      	movs	r1, #1
 800110a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2241      	movs	r2, #65	; 0x41
 8001110:	2124      	movs	r1, #36	; 0x24
 8001112:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2101      	movs	r1, #1
 8001120:	438a      	bics	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2241      	movs	r2, #65	; 0x41
 800115a:	2120      	movs	r1, #32
 800115c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2240      	movs	r2, #64	; 0x40
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800116a:	2302      	movs	r3, #2
  }
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b004      	add	sp, #16
 8001172:	bd80      	pop	{r7, pc}
 8001174:	fffff0ff 	.word	0xfffff0ff

08001178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f000 fbbf 	bl	800190a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118c:	4bc9      	ldr	r3, [pc, #804]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
 8001194:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001196:	4bc7      	ldr	r3, [pc, #796]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d100      	bne.n	80011ae <HAL_RCC_OscConfig+0x36>
 80011ac:	e07e      	b.n	80012ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d007      	beq.n	80011c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d112      	bne.n	80011e0 <HAL_RCC_OscConfig+0x68>
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	025b      	lsls	r3, r3, #9
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10d      	bne.n	80011e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4bbb      	ldr	r3, [pc, #748]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	029b      	lsls	r3, r3, #10
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5a>
 80011d0:	e06b      	b.n	80012aa <HAL_RCC_OscConfig+0x132>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d167      	bne.n	80012aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	f000 fb95 	bl	800190a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d107      	bne.n	80011fc <HAL_RCC_OscConfig+0x84>
 80011ec:	4bb1      	ldr	r3, [pc, #708]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4bb0      	ldr	r3, [pc, #704]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0249      	lsls	r1, r1, #9
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e027      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	23a0      	movs	r3, #160	; 0xa0
 8001202:	02db      	lsls	r3, r3, #11
 8001204:	429a      	cmp	r2, r3
 8001206:	d10e      	bne.n	8001226 <HAL_RCC_OscConfig+0xae>
 8001208:	4baa      	ldr	r3, [pc, #680]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4ba9      	ldr	r3, [pc, #676]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	02c9      	lsls	r1, r1, #11
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	4ba7      	ldr	r3, [pc, #668]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4ba6      	ldr	r3, [pc, #664]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0249      	lsls	r1, r1, #9
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e012      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 8001226:	4ba3      	ldr	r3, [pc, #652]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4ba2      	ldr	r3, [pc, #648]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800122c:	49a2      	ldr	r1, [pc, #648]	; (80014b8 <HAL_RCC_OscConfig+0x340>)
 800122e:	400a      	ands	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001246:	499d      	ldr	r1, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x344>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d015      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc26 	bl	8000aa4 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800125c:	e009      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fc21 	bl	8000aa4 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	; 0x64
 800126a:	d902      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	f000 fb4c 	bl	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001272:	4b90      	ldr	r3, [pc, #576]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d0ef      	beq.n	800125e <HAL_RCC_OscConfig+0xe6>
 800127e:	e015      	b.n	80012ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc10 	bl	8000aa4 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128a:	f7ff fc0b 	bl	8000aa4 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b64      	cmp	r3, #100	; 0x64
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e336      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800129c:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	029b      	lsls	r3, r3, #10
 80012a4:	4013      	ands	r3, r2
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x112>
 80012a8:	e000      	b.n	80012ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_RCC_OscConfig+0x140>
 80012b6:	e099      	b.n	80013ec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	2220      	movs	r2, #32
 80012c2:	4013      	ands	r3, r2
 80012c4:	d009      	beq.n	80012da <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012c6:	4b7b      	ldr	r3, [pc, #492]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80012cc:	2120      	movs	r1, #32
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	2220      	movs	r2, #32
 80012d6:	4393      	bics	r3, r2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d13e      	bne.n	8001364 <HAL_RCC_OscConfig+0x1ec>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d13b      	bne.n	8001364 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2204      	movs	r2, #4
 80012f2:	4013      	ands	r3, r2
 80012f4:	d004      	beq.n	8001300 <HAL_RCC_OscConfig+0x188>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e304      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a6e      	ldr	r2, [pc, #440]	; (80014c0 <HAL_RCC_OscConfig+0x348>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	021a      	lsls	r2, r3, #8
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2209      	movs	r2, #9
 800131c:	4393      	bics	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001328:	f000 fc42 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800132c:	0001      	movs	r1, r0
 800132e:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	220f      	movs	r2, #15
 8001336:	4013      	ands	r3, r2
 8001338:	4a62      	ldr	r2, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x34c>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	000a      	movs	r2, r1
 800133e:	40da      	lsrs	r2, r3
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x350>)
 8001342:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x354>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2513      	movs	r5, #19
 800134a:	197c      	adds	r4, r7, r5
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fb63 	bl	8000a18 <HAL_InitTick>
 8001352:	0003      	movs	r3, r0
 8001354:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001356:	197b      	adds	r3, r7, r5
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d046      	beq.n	80013ec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800135e:	197b      	adds	r3, r7, r5
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	e2d2      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	2b00      	cmp	r3, #0
 8001368:	d027      	beq.n	80013ba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2209      	movs	r2, #9
 8001370:	4393      	bics	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb92 	bl	8000aa4 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb8d 	bl	8000aa4 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e2b8      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f1      	beq.n	8001386 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <HAL_RCC_OscConfig+0x348>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	021a      	lsls	r2, r3, #8
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	438a      	bics	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb6d 	bl	8000aa4 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb68 	bl	8000aa4 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e293      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2204      	movs	r2, #4
 80013e8:	4013      	ands	r3, r2
 80013ea:	d1f1      	bne.n	80013d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2210      	movs	r2, #16
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x280>
 80013f6:	e0a2      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d140      	bne.n	8001480 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x29e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e279      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <HAL_RCC_OscConfig+0x358>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	0a19      	lsrs	r1, r3, #8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	061a      	lsls	r2, r3, #24
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	0b5b      	lsrs	r3, r3, #13
 8001444:	3301      	adds	r3, #1
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	210f      	movs	r1, #15
 8001454:	400b      	ands	r3, r1
 8001456:	491b      	ldr	r1, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x34c>)
 8001458:	5ccb      	ldrb	r3, [r1, r3]
 800145a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_RCC_OscConfig+0x350>)
 800145e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x354>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2513      	movs	r5, #19
 8001466:	197c      	adds	r4, r7, r5
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fad5 	bl	8000a18 <HAL_InitTick>
 800146e:	0003      	movs	r3, r0
 8001470:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001472:	197b      	adds	r3, r7, r5
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d061      	beq.n	800153e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800147a:	197b      	adds	r3, r7, r5
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e244      	b.n	800190a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d040      	beq.n	800150a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x33c>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	0049      	lsls	r1, r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb05 	bl	8000aa4 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800149e:	e019      	b.n	80014d4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb00 	bl	8000aa4 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d912      	bls.n	80014d4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e22b      	b.n	800190a <HAL_RCC_OscConfig+0x792>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000
 80014b8:	fffeffff 	.word	0xfffeffff
 80014bc:	fffbffff 	.word	0xfffbffff
 80014c0:	ffffe0ff 	.word	0xffffe0ff
 80014c4:	08003c80 	.word	0x08003c80
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004
 80014d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014d4:	4bca      	ldr	r3, [pc, #808]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d0df      	beq.n	80014a0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e0:	4bc7      	ldr	r3, [pc, #796]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4ac7      	ldr	r2, [pc, #796]	; (8001804 <HAL_RCC_OscConfig+0x68c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ee:	4bc4      	ldr	r3, [pc, #784]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4bc2      	ldr	r3, [pc, #776]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	061a      	lsls	r2, r3, #24
 8001502:	4bbf      	ldr	r3, [pc, #764]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	e019      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150a:	4bbd      	ldr	r3, [pc, #756]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4bbc      	ldr	r3, [pc, #752]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001510:	49bd      	ldr	r1, [pc, #756]	; (8001808 <HAL_RCC_OscConfig+0x690>)
 8001512:	400a      	ands	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fac5 	bl	8000aa4 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fac0 	bl	8000aa4 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1eb      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001532:	4bb3      	ldr	r3, [pc, #716]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2208      	movs	r2, #8
 8001544:	4013      	ands	r3, r2
 8001546:	d036      	beq.n	80015b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d019      	beq.n	8001584 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001550:	4bab      	ldr	r3, [pc, #684]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001554:	4baa      	ldr	r3, [pc, #680]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff faa2 	bl	8000aa4 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fa9d 	bl	8000aa4 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1c8      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001578:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800157a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d0f1      	beq.n	8001566 <HAL_RCC_OscConfig+0x3ee>
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001588:	4b9d      	ldr	r3, [pc, #628]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fa88 	bl	8000aa4 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fa83 	bl	8000aa4 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1ae      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ac:	4b94      	ldr	r3, [pc, #592]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80015ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2204      	movs	r2, #4
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80015c0:	e0ae      	b.n	8001720 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c2:	2023      	movs	r0, #35	; 0x23
 80015c4:	183b      	adds	r3, r7, r0
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80015cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	055b      	lsls	r3, r3, #21
 80015d2:	4013      	ands	r3, r2
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80015d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0549      	lsls	r1, r1, #21
 80015e0:	430a      	orrs	r2, r1
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x694>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x694>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x694>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0049      	lsls	r1, r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001604:	f7ff fa4e 	bl	8000aa4 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fa49 	bl	8000aa4 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e174      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x694>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	429a      	cmp	r2, r3
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d0>
 8001638:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0049      	lsls	r1, r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	651a      	str	r2, [r3, #80]	; 0x50
 8001646:	e031      	b.n	80016ac <HAL_RCC_OscConfig+0x534>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x4f2>
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001656:	496c      	ldr	r1, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x690>)
 8001658:	400a      	ands	r2, r1
 800165a:	651a      	str	r2, [r3, #80]	; 0x50
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001662:	496b      	ldr	r1, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x698>)
 8001664:	400a      	ands	r2, r1
 8001666:	651a      	str	r2, [r3, #80]	; 0x50
 8001668:	e020      	b.n	80016ac <HAL_RCC_OscConfig+0x534>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	23a0      	movs	r3, #160	; 0xa0
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	429a      	cmp	r2, r3
 8001674:	d10e      	bne.n	8001694 <HAL_RCC_OscConfig+0x51c>
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800167a:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	00c9      	lsls	r1, r1, #3
 8001680:	430a      	orrs	r2, r1
 8001682:	651a      	str	r2, [r3, #80]	; 0x50
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	651a      	str	r2, [r3, #80]	; 0x50
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0x534>
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800169a:	495b      	ldr	r1, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x690>)
 800169c:	400a      	ands	r2, r1
 800169e:	651a      	str	r2, [r3, #80]	; 0x50
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80016a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80016a6:	495a      	ldr	r1, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x698>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d015      	beq.n	80016e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f9f6 	bl	8000aa4 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f9f1 	bl	8000aa4 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_RCC_OscConfig+0x69c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e11b      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016d2:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80016d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d0ef      	beq.n	80016be <HAL_RCC_OscConfig+0x546>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f9e0 	bl	8000aa4 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e8:	e009      	b.n	80016fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f9db 	bl	8000aa4 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x69c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e105      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1ef      	bne.n	80016ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	2323      	movs	r3, #35	; 0x23
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 800171a:	493f      	ldr	r1, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x6a0>)
 800171c:	400a      	ands	r2, r1
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2220      	movs	r2, #32
 8001726:	4013      	ands	r3, r2
 8001728:	d049      	beq.n	80017be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d026      	beq.n	8001780 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001732:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001738:	2101      	movs	r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x6a4>)
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x6a4>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0189      	lsls	r1, r1, #6
 8001754:	430a      	orrs	r2, r1
 8001756:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff f9a4 	bl	8000aa4 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001762:	f7ff f99f 	bl	8000aa4 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0ca      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x5ea>
 800177e:	e01e      	b.n	80017be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_RCC_OscConfig+0x6a4>)
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_RCC_OscConfig+0x6a4>)
 8001792:	4923      	ldr	r1, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x6a8>)
 8001794:	400a      	ands	r2, r1
 8001796:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff f984 	bl	8000aa4 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a2:	f7ff f97f 	bl	8000aa4 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0aa      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f1      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d100      	bne.n	80017c8 <HAL_RCC_OscConfig+0x650>
 80017c6:	e09f      	b.n	8001908 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x658>
 80017ce:	e078      	b.n	80018c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d159      	bne.n	800188c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_OscConfig+0x688>)
 80017de:	4911      	ldr	r1, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x6ac>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f95e 	bl	8000aa4 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff f959 	bl	8000aa4 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d915      	bls.n	8001828 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e084      	b.n	800190a <HAL_RCC_OscConfig+0x792>
 8001800:	40021000 	.word	0x40021000
 8001804:	ffff1fff 	.word	0xffff1fff
 8001808:	fffffeff 	.word	0xfffffeff
 800180c:	40007000 	.word	0x40007000
 8001810:	fffffbff 	.word	0xfffffbff
 8001814:	00001388 	.word	0x00001388
 8001818:	efffffff 	.word	0xefffffff
 800181c:	40010000 	.word	0x40010000
 8001820:	ffffdfff 	.word	0xffffdfff
 8001824:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	049b      	lsls	r3, r3, #18
 8001830:	4013      	ands	r3, r2
 8001832:	d1dc      	bne.n	80017ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x7a0>)
 800183a:	4013      	ands	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	431a      	orrs	r2, r3
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0449      	lsls	r1, r1, #17
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff f91f 	bl	8000aa4 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f91a 	bl	8000aa4 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x6f4>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 8001892:	4922      	ldr	r1, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x7a4>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f904 	bl	8000aa4 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f8ff 	bl	8000aa4 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e02a      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	049b      	lsls	r3, r3, #18
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x72a>
 80018c0:	e022      	b.n	8001908 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e01d      	b.n	800190a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x79c>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10f      	bne.n	8001904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	23f0      	movs	r3, #240	; 0xf0
 80018e8:	039b      	lsls	r3, r3, #14
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b00a      	add	sp, #40	; 0x28
 8001910:	bdb0      	pop	{r4, r5, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000
 8001918:	ff02ffff 	.word	0xff02ffff
 800191c:	feffffff 	.word	0xfeffffff

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e128      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d91e      	bls.n	8001980 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001954:	f7ff f8a6 	bl	8000aa4 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195c:	e009      	b.n	8001972 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195e:	f7ff f8a1 	bl	8000aa4 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a8a      	ldr	r2, [pc, #552]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e109      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b87      	ldr	r3, [pc, #540]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	22f0      	movs	r2, #240	; 0xf0
 8001990:	4393      	bics	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 800199a:	430a      	orrs	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_ClockConfig+0x8a>
 80019a8:	e089      	b.n	8001abe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b2:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d120      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0e1      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ca:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	049b      	lsls	r3, r3, #18
 80019d2:	4013      	ands	r3, r2
 80019d4:	d114      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0d5      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2204      	movs	r2, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	d109      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0ca      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019f0:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0c2      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a00:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4393      	bics	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff f846 	bl	8000aa4 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d111      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7ff f83d 	bl	8000aa4 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0a5      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x106>
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d111      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f827 	bl	8000aa4 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a4d      	ldr	r2, [pc, #308]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e08f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a66:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x132>
 8001a72:	e024      	b.n	8001abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f811 	bl	8000aa4 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e079      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x15e>
 8001a9e:	e00e      	b.n	8001abe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f800 	bl	8000aa4 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a3a      	ldr	r2, [pc, #232]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e068      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d21e      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001acc:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ade:	f7fe ffe1 	bl	8000aa4 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	e009      	b.n	8001afc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7fe ffdc 	bl	8000aa4 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e044      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_RCC_ClockConfig+0x27c>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d00a      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <HAL_RCC_ClockConfig+0x280>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	00da      	lsls	r2, r3, #3
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b48:	f000 f832 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b4c:	0001      	movs	r1, r0
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	220f      	movs	r2, #15
 8001b56:	4013      	ands	r3, r2
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x284>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	000a      	movs	r2, r1
 8001b5e:	40da      	lsrs	r2, r3
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_RCC_ClockConfig+0x288>)
 8001b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_RCC_ClockConfig+0x28c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	250b      	movs	r5, #11
 8001b6a:	197c      	adds	r4, r7, r5
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7fe ff53 	bl	8000a18 <HAL_InitTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b76:	197b      	adds	r3, r7, r5
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b7e:	197b      	adds	r3, r7, r5
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40022000 	.word	0x40022000
 8001b94:	00001388 	.word	0x00001388
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	fffff8ff 	.word	0xfffff8ff
 8001ba0:	ffffc7ff 	.word	0xffffc7ff
 8001ba4:	08003c80 	.word	0x08003c80
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b08e      	sub	sp, #56	; 0x38
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d014      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bc6:	d900      	bls.n	8001bca <HAL_RCC_GetSysClockFreq+0x1a>
 8001bc8:	e07b      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x112>
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x24>
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd2:	e076      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001be2:	e07c      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001be8:	e079      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bee:	e076      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	0c9a      	lsrs	r2, r3, #18
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001bfa:	5c9b      	ldrb	r3, [r3, r2]
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	0d9a      	lsrs	r2, r3, #22
 8001c02:	2303      	movs	r3, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	3301      	adds	r3, #1
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	4013      	ands	r3, r2
 8001c14:	d01a      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	4a35      	ldr	r2, [pc, #212]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c20:	2300      	movs	r3, #0
 8001c22:	69b8      	ldr	r0, [r7, #24]
 8001c24:	69f9      	ldr	r1, [r7, #28]
 8001c26:	f7fe fb1b 	bl	8000260 <__aeabi_lmul>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	000b      	movs	r3, r1
 8001c2e:	0010      	movs	r0, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f7fe faef 	bl	8000220 <__aeabi_uldivmod>
 8001c42:	0002      	movs	r2, r0
 8001c44:	000b      	movs	r3, r1
 8001c46:	0013      	movs	r3, r2
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4a:	e037      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	4013      	ands	r3, r2
 8001c54:	d01a      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	68b8      	ldr	r0, [r7, #8]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	f7fe fafb 	bl	8000260 <__aeabi_lmul>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	000b      	movs	r3, r1
 8001c6e:	0010      	movs	r0, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f7fe facf 	bl	8000220 <__aeabi_uldivmod>
 8001c82:	0002      	movs	r2, r0
 8001c84:	000b      	movs	r3, r1
 8001c86:	0013      	movs	r3, r2
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8a:	e017      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	0019      	movs	r1, r3
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c96:	2300      	movs	r3, #0
 8001c98:	f7fe fae2 	bl	8000260 <__aeabi_lmul>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	000b      	movs	r3, r1
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	001c      	movs	r4, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	001d      	movs	r5, r3
 8001cac:	0022      	movs	r2, r4
 8001cae:	002b      	movs	r3, r5
 8001cb0:	f7fe fab6 	bl	8000220 <__aeabi_uldivmod>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	000b      	movs	r3, r1
 8001cb8:	0013      	movs	r3, r2
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cc0:	e00d      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	2207      	movs	r2, #7
 8001cca:	4013      	ands	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0212      	lsls	r2, r2, #8
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cdc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b00e      	add	sp, #56	; 0x38
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	003d0900 	.word	0x003d0900
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200
 8001cf8:	08003c98 	.word	0x08003c98

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff2 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	40d9      	lsrs	r1, r3
 8001d2a:	000b      	movs	r3, r1
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08003c90 	.word	0x08003c90

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	0001      	movs	r1, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	40d9      	lsrs	r1, r3
 8001d56:	000b      	movs	r3, r1
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003c90 	.word	0x08003c90

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d70:	2017      	movs	r0, #23
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d82:	e0c7      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d84:	4b9b      	ldr	r3, [pc, #620]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	055b      	lsls	r3, r3, #21
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d109      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b98      	ldr	r3, [pc, #608]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d94:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0549      	lsls	r1, r1, #21
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d11a      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db0:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fe71 	bl	8000aa4 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	e008      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7fe fe6c 	bl	8000aa4 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e107      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	039b      	lsls	r3, r3, #14
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	039b      	lsls	r3, r3, #14
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d013      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	029b      	lsls	r3, r3, #10
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d10a      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e14:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0df      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03b      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d033      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2220      	movs	r2, #32
 8001e52:	4013      	ands	r3, r2
 8001e54:	d02e      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e64:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0309      	lsls	r1, r1, #12
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6e:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e74:	4962      	ldr	r1, [pc, #392]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	d014      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fe0b 	bl	8000aa4 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe fe06 	bl	8000aa4 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	4a59      	ldr	r2, [pc, #356]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0a0      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d0ef      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d01f      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	029b      	lsls	r3, r3, #10
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10c      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	039b      	lsls	r3, r3, #14
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001eec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f0e:	493f      	ldr	r1, [pc, #252]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	2203      	movs	r2, #3
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	220c      	movs	r2, #12
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a2c      	ldr	r2, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2208      	movs	r2, #8
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b006      	add	sp, #24
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	fffcffff 	.word	0xfffcffff
 8002000:	fff7ffff 	.word	0xfff7ffff
 8002004:	00001388 	.word	0x00001388
 8002008:	ffcfffff 	.word	0xffcfffff
 800200c:	efffffff 	.word	0xefffffff
 8002010:	fffff3ff 	.word	0xfffff3ff
 8002014:	ffffcfff 	.word	0xffffcfff
 8002018:	fbffffff 	.word	0xfbffffff
 800201c:	fff3ffff 	.word	0xfff3ffff

08002020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e044      	b.n	80020bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2278      	movs	r2, #120	; 0x78
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f7fe fc0b 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2224      	movs	r2, #36	; 0x24
 800204e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	438a      	bics	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f830 	bl	80020c8 <UART_SetConfig>
 8002068:	0003      	movs	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e024      	b.n	80020bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 fac1 	bl	8002604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	490d      	ldr	r1, [pc, #52]	; (80020c4 <HAL_UART_Init+0xa4>)
 800208e:	400a      	ands	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	212a      	movs	r1, #42	; 0x2a
 800209e:	438a      	bics	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fb59 	bl	800276c <UART_CheckIdleState>
 80020ba:	0003      	movs	r3, r0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	ffffb7ff 	.word	0xffffb7ff

080020c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b08e      	sub	sp, #56	; 0x38
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020d0:	231a      	movs	r3, #26
 80020d2:	2218      	movs	r2, #24
 80020d4:	189b      	adds	r3, r3, r2
 80020d6:	19db      	adds	r3, r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4ac3      	ldr	r2, [pc, #780]	; (8002408 <UART_SetConfig+0x340>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4abe      	ldr	r2, [pc, #760]	; (800240c <UART_SetConfig+0x344>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4ab8      	ldr	r2, [pc, #736]	; (8002410 <UART_SetConfig+0x348>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	4313      	orrs	r3, r2
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4ab4      	ldr	r2, [pc, #720]	; (8002414 <UART_SetConfig+0x34c>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4ab0      	ldr	r2, [pc, #704]	; (8002418 <UART_SetConfig+0x350>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d131      	bne.n	80021c0 <UART_SetConfig+0xf8>
 800215c:	4baf      	ldr	r3, [pc, #700]	; (800241c <UART_SetConfig+0x354>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	2203      	movs	r2, #3
 8002162:	4013      	ands	r3, r2
 8002164:	2b03      	cmp	r3, #3
 8002166:	d01d      	beq.n	80021a4 <UART_SetConfig+0xdc>
 8002168:	d823      	bhi.n	80021b2 <UART_SetConfig+0xea>
 800216a:	2b02      	cmp	r3, #2
 800216c:	d00c      	beq.n	8002188 <UART_SetConfig+0xc0>
 800216e:	d820      	bhi.n	80021b2 <UART_SetConfig+0xea>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <UART_SetConfig+0xb2>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d00e      	beq.n	8002196 <UART_SetConfig+0xce>
 8002178:	e01b      	b.n	80021b2 <UART_SetConfig+0xea>
 800217a:	231b      	movs	r3, #27
 800217c:	2218      	movs	r2, #24
 800217e:	189b      	adds	r3, r3, r2
 8002180:	19db      	adds	r3, r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e0b4      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002188:	231b      	movs	r3, #27
 800218a:	2218      	movs	r2, #24
 800218c:	189b      	adds	r3, r3, r2
 800218e:	19db      	adds	r3, r3, r7
 8002190:	2202      	movs	r2, #2
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e0ad      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002196:	231b      	movs	r3, #27
 8002198:	2218      	movs	r2, #24
 800219a:	189b      	adds	r3, r3, r2
 800219c:	19db      	adds	r3, r3, r7
 800219e:	2204      	movs	r2, #4
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e0a6      	b.n	80022f2 <UART_SetConfig+0x22a>
 80021a4:	231b      	movs	r3, #27
 80021a6:	2218      	movs	r2, #24
 80021a8:	189b      	adds	r3, r3, r2
 80021aa:	19db      	adds	r3, r3, r7
 80021ac:	2208      	movs	r2, #8
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e09f      	b.n	80022f2 <UART_SetConfig+0x22a>
 80021b2:	231b      	movs	r3, #27
 80021b4:	2218      	movs	r2, #24
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	19db      	adds	r3, r3, r7
 80021ba:	2210      	movs	r2, #16
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e098      	b.n	80022f2 <UART_SetConfig+0x22a>
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a96      	ldr	r2, [pc, #600]	; (8002420 <UART_SetConfig+0x358>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d131      	bne.n	800222e <UART_SetConfig+0x166>
 80021ca:	4b94      	ldr	r3, [pc, #592]	; (800241c <UART_SetConfig+0x354>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	220c      	movs	r2, #12
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d01d      	beq.n	8002212 <UART_SetConfig+0x14a>
 80021d6:	d823      	bhi.n	8002220 <UART_SetConfig+0x158>
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d00c      	beq.n	80021f6 <UART_SetConfig+0x12e>
 80021dc:	d820      	bhi.n	8002220 <UART_SetConfig+0x158>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <UART_SetConfig+0x120>
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00e      	beq.n	8002204 <UART_SetConfig+0x13c>
 80021e6:	e01b      	b.n	8002220 <UART_SetConfig+0x158>
 80021e8:	231b      	movs	r3, #27
 80021ea:	2218      	movs	r2, #24
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	19db      	adds	r3, r3, r7
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e07d      	b.n	80022f2 <UART_SetConfig+0x22a>
 80021f6:	231b      	movs	r3, #27
 80021f8:	2218      	movs	r2, #24
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	19db      	adds	r3, r3, r7
 80021fe:	2202      	movs	r2, #2
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e076      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002204:	231b      	movs	r3, #27
 8002206:	2218      	movs	r2, #24
 8002208:	189b      	adds	r3, r3, r2
 800220a:	19db      	adds	r3, r3, r7
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e06f      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002212:	231b      	movs	r3, #27
 8002214:	2218      	movs	r2, #24
 8002216:	189b      	adds	r3, r3, r2
 8002218:	19db      	adds	r3, r3, r7
 800221a:	2208      	movs	r2, #8
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e068      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002220:	231b      	movs	r3, #27
 8002222:	2218      	movs	r2, #24
 8002224:	189b      	adds	r3, r3, r2
 8002226:	19db      	adds	r3, r3, r7
 8002228:	2210      	movs	r2, #16
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e061      	b.n	80022f2 <UART_SetConfig+0x22a>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <UART_SetConfig+0x35c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d106      	bne.n	8002246 <UART_SetConfig+0x17e>
 8002238:	231b      	movs	r3, #27
 800223a:	2218      	movs	r2, #24
 800223c:	189b      	adds	r3, r3, r2
 800223e:	19db      	adds	r3, r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e055      	b.n	80022f2 <UART_SetConfig+0x22a>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <UART_SetConfig+0x360>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d106      	bne.n	800225e <UART_SetConfig+0x196>
 8002250:	231b      	movs	r3, #27
 8002252:	2218      	movs	r2, #24
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e049      	b.n	80022f2 <UART_SetConfig+0x22a>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <UART_SetConfig+0x348>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d13e      	bne.n	80022e6 <UART_SetConfig+0x21e>
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <UART_SetConfig+0x354>)
 800226a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4013      	ands	r3, r2
 8002272:	22c0      	movs	r2, #192	; 0xc0
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	4293      	cmp	r3, r2
 8002278:	d027      	beq.n	80022ca <UART_SetConfig+0x202>
 800227a:	22c0      	movs	r2, #192	; 0xc0
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	4293      	cmp	r3, r2
 8002280:	d82a      	bhi.n	80022d8 <UART_SetConfig+0x210>
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	4293      	cmp	r3, r2
 8002288:	d011      	beq.n	80022ae <UART_SetConfig+0x1e6>
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	4293      	cmp	r3, r2
 8002290:	d822      	bhi.n	80022d8 <UART_SetConfig+0x210>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <UART_SetConfig+0x1d8>
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	4293      	cmp	r3, r2
 800229c:	d00e      	beq.n	80022bc <UART_SetConfig+0x1f4>
 800229e:	e01b      	b.n	80022d8 <UART_SetConfig+0x210>
 80022a0:	231b      	movs	r3, #27
 80022a2:	2218      	movs	r2, #24
 80022a4:	189b      	adds	r3, r3, r2
 80022a6:	19db      	adds	r3, r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e021      	b.n	80022f2 <UART_SetConfig+0x22a>
 80022ae:	231b      	movs	r3, #27
 80022b0:	2218      	movs	r2, #24
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	19db      	adds	r3, r3, r7
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e01a      	b.n	80022f2 <UART_SetConfig+0x22a>
 80022bc:	231b      	movs	r3, #27
 80022be:	2218      	movs	r2, #24
 80022c0:	189b      	adds	r3, r3, r2
 80022c2:	19db      	adds	r3, r3, r7
 80022c4:	2204      	movs	r2, #4
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e013      	b.n	80022f2 <UART_SetConfig+0x22a>
 80022ca:	231b      	movs	r3, #27
 80022cc:	2218      	movs	r2, #24
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	19db      	adds	r3, r3, r7
 80022d2:	2208      	movs	r2, #8
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e00c      	b.n	80022f2 <UART_SetConfig+0x22a>
 80022d8:	231b      	movs	r3, #27
 80022da:	2218      	movs	r2, #24
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	19db      	adds	r3, r3, r7
 80022e0:	2210      	movs	r2, #16
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e005      	b.n	80022f2 <UART_SetConfig+0x22a>
 80022e6:	231b      	movs	r3, #27
 80022e8:	2218      	movs	r2, #24
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	19db      	adds	r3, r3, r7
 80022ee:	2210      	movs	r2, #16
 80022f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a46      	ldr	r2, [pc, #280]	; (8002410 <UART_SetConfig+0x348>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d000      	beq.n	80022fe <UART_SetConfig+0x236>
 80022fc:	e09a      	b.n	8002434 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022fe:	231b      	movs	r3, #27
 8002300:	2218      	movs	r2, #24
 8002302:	189b      	adds	r3, r3, r2
 8002304:	19db      	adds	r3, r3, r7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d01d      	beq.n	8002348 <UART_SetConfig+0x280>
 800230c:	dc20      	bgt.n	8002350 <UART_SetConfig+0x288>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d015      	beq.n	800233e <UART_SetConfig+0x276>
 8002312:	dc1d      	bgt.n	8002350 <UART_SetConfig+0x288>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <UART_SetConfig+0x256>
 8002318:	2b02      	cmp	r3, #2
 800231a:	d005      	beq.n	8002328 <UART_SetConfig+0x260>
 800231c:	e018      	b.n	8002350 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800231e:	f7ff fcf7 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002322:	0003      	movs	r3, r0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002326:	e01c      	b.n	8002362 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002328:	4b3c      	ldr	r3, [pc, #240]	; (800241c <UART_SetConfig+0x354>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d002      	beq.n	8002338 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <UART_SetConfig+0x364>)
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002336:	e014      	b.n	8002362 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <UART_SetConfig+0x368>)
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800233c:	e011      	b.n	8002362 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800233e:	f7ff fc37 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8002342:	0003      	movs	r3, r0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002346:	e00c      	b.n	8002362 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800234e:	e008      	b.n	8002362 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002354:	231a      	movs	r3, #26
 8002356:	2218      	movs	r2, #24
 8002358:	189b      	adds	r3, r3, r2
 800235a:	19db      	adds	r3, r3, r7
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
        break;
 8002360:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d100      	bne.n	800236a <UART_SetConfig+0x2a2>
 8002368:	e133      	b.n	80025d2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	0013      	movs	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	189b      	adds	r3, r3, r2
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	429a      	cmp	r2, r3
 8002378:	d305      	bcc.n	8002386 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002382:	429a      	cmp	r2, r3
 8002384:	d906      	bls.n	8002394 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002386:	231a      	movs	r3, #26
 8002388:	2218      	movs	r2, #24
 800238a:	189b      	adds	r3, r3, r2
 800238c:	19db      	adds	r3, r3, r7
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e11e      	b.n	80025d2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	000b      	movs	r3, r1
 80023a2:	0e1b      	lsrs	r3, r3, #24
 80023a4:	0010      	movs	r0, r2
 80023a6:	0205      	lsls	r5, r0, #8
 80023a8:	431d      	orrs	r5, r3
 80023aa:	000b      	movs	r3, r1
 80023ac:	021c      	lsls	r4, r3, #8
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68b8      	ldr	r0, [r7, #8]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	1900      	adds	r0, r0, r4
 80023c0:	4169      	adcs	r1, r5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f7fd ff26 	bl	8000220 <__aeabi_uldivmod>
 80023d4:	0002      	movs	r2, r0
 80023d6:	000b      	movs	r3, r1
 80023d8:	0013      	movs	r3, r2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d309      	bcc.n	80023fa <UART_SetConfig+0x332>
 80023e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d204      	bcs.n	80023fa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	e0eb      	b.n	80025d2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80023fa:	231a      	movs	r3, #26
 80023fc:	2218      	movs	r2, #24
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	19db      	adds	r3, r3, r7
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e0e4      	b.n	80025d2 <UART_SetConfig+0x50a>
 8002408:	efff69f3 	.word	0xefff69f3
 800240c:	ffffcfff 	.word	0xffffcfff
 8002410:	40004800 	.word	0x40004800
 8002414:	fffff4ff 	.word	0xfffff4ff
 8002418:	40013800 	.word	0x40013800
 800241c:	40021000 	.word	0x40021000
 8002420:	40004400 	.word	0x40004400
 8002424:	40004c00 	.word	0x40004c00
 8002428:	40005000 	.word	0x40005000
 800242c:	003d0900 	.word	0x003d0900
 8002430:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	429a      	cmp	r2, r3
 800243e:	d000      	beq.n	8002442 <UART_SetConfig+0x37a>
 8002440:	e070      	b.n	8002524 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002442:	231b      	movs	r3, #27
 8002444:	2218      	movs	r2, #24
 8002446:	189b      	adds	r3, r3, r2
 8002448:	19db      	adds	r3, r3, r7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d822      	bhi.n	8002496 <UART_SetConfig+0x3ce>
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <UART_SetConfig+0x528>)
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800245a:	f7ff fc59 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 800245e:	0003      	movs	r3, r0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002462:	e021      	b.n	80024a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002464:	f7ff fc6a 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002468:	0003      	movs	r3, r0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800246c:	e01c      	b.n	80024a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <UART_SetConfig+0x52c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	4013      	ands	r3, r2
 8002476:	d002      	beq.n	800247e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <UART_SetConfig+0x530>)
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800247c:	e014      	b.n	80024a8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <UART_SetConfig+0x534>)
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002482:	e011      	b.n	80024a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002484:	f7ff fb94 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8002488:	0003      	movs	r3, r0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800248c:	e00c      	b.n	80024a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002494:	e008      	b.n	80024a8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800249a:	231a      	movs	r3, #26
 800249c:	2218      	movs	r2, #24
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	19db      	adds	r3, r3, r7
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
        break;
 80024a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d100      	bne.n	80024b0 <UART_SetConfig+0x3e8>
 80024ae:	e090      	b.n	80025d2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	005a      	lsls	r2, r3, #1
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f7fd fe20 	bl	8000108 <__udivsi3>
 80024c8:	0003      	movs	r3, r0
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d921      	bls.n	8002516 <UART_SetConfig+0x44e>
 80024d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	429a      	cmp	r2, r3
 80024da:	d21c      	bcs.n	8002516 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	b29a      	uxth	r2, r3
 80024e0:	200e      	movs	r0, #14
 80024e2:	2418      	movs	r4, #24
 80024e4:	1903      	adds	r3, r0, r4
 80024e6:	19db      	adds	r3, r3, r7
 80024e8:	210f      	movs	r1, #15
 80024ea:	438a      	bics	r2, r1
 80024ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2207      	movs	r2, #7
 80024f6:	4013      	ands	r3, r2
 80024f8:	b299      	uxth	r1, r3
 80024fa:	1903      	adds	r3, r0, r4
 80024fc:	19db      	adds	r3, r3, r7
 80024fe:	1902      	adds	r2, r0, r4
 8002500:	19d2      	adds	r2, r2, r7
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1902      	adds	r2, r0, r4
 800250e:	19d2      	adds	r2, r2, r7
 8002510:	8812      	ldrh	r2, [r2, #0]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	e05d      	b.n	80025d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002516:	231a      	movs	r3, #26
 8002518:	2218      	movs	r2, #24
 800251a:	189b      	adds	r3, r3, r2
 800251c:	19db      	adds	r3, r3, r7
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e056      	b.n	80025d2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002524:	231b      	movs	r3, #27
 8002526:	2218      	movs	r2, #24
 8002528:	189b      	adds	r3, r3, r2
 800252a:	19db      	adds	r3, r3, r7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d822      	bhi.n	8002578 <UART_SetConfig+0x4b0>
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <UART_SetConfig+0x538>)
 8002536:	18d3      	adds	r3, r2, r3
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800253c:	f7ff fbe8 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002540:	0003      	movs	r3, r0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002544:	e021      	b.n	800258a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002546:	f7ff fbf9 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800254a:	0003      	movs	r3, r0
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800254e:	e01c      	b.n	800258a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <UART_SetConfig+0x52c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d002      	beq.n	8002560 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <UART_SetConfig+0x530>)
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800255e:	e014      	b.n	800258a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <UART_SetConfig+0x534>)
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002564:	e011      	b.n	800258a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002566:	f7ff fb23 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800256a:	0003      	movs	r3, r0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800256e:	e00c      	b.n	800258a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002576:	e008      	b.n	800258a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800257c:	231a      	movs	r3, #26
 800257e:	2218      	movs	r2, #24
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
        break;
 8002588:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	085a      	lsrs	r2, r3, #1
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	18d2      	adds	r2, r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f7fd fdb1 	bl	8000108 <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d90a      	bls.n	80025c6 <UART_SetConfig+0x4fe>
 80025b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d205      	bcs.n	80025c6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	b29a      	uxth	r2, r3
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	e005      	b.n	80025d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80025c6:	231a      	movs	r3, #26
 80025c8:	2218      	movs	r2, #24
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	19db      	adds	r3, r3, r7
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2200      	movs	r2, #0
 80025d6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2200      	movs	r2, #0
 80025dc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80025de:	231a      	movs	r3, #26
 80025e0:	2218      	movs	r2, #24
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	19db      	adds	r3, r3, r7
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b00e      	add	sp, #56	; 0x38
 80025ee:	bdb0      	pop	{r4, r5, r7, pc}
 80025f0:	08003ca4 	.word	0x08003ca4
 80025f4:	40021000 	.word	0x40021000
 80025f8:	003d0900 	.word	0x003d0900
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	08003cc8 	.word	0x08003cc8

08002604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d00b      	beq.n	800262e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <UART_AdvFeatureConfig+0x144>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a43      	ldr	r2, [pc, #268]	; (800274c <UART_AdvFeatureConfig+0x148>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2204      	movs	r2, #4
 8002656:	4013      	ands	r3, r2
 8002658:	d00b      	beq.n	8002672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <UART_AdvFeatureConfig+0x14c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2208      	movs	r2, #8
 8002678:	4013      	ands	r3, r2
 800267a:	d00b      	beq.n	8002694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a34      	ldr	r2, [pc, #208]	; (8002754 <UART_AdvFeatureConfig+0x150>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2210      	movs	r2, #16
 800269a:	4013      	ands	r3, r2
 800269c:	d00b      	beq.n	80026b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <UART_AdvFeatureConfig+0x154>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d00b      	beq.n	80026d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a25      	ldr	r2, [pc, #148]	; (800275c <UART_AdvFeatureConfig+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2240      	movs	r2, #64	; 0x40
 80026de:	4013      	ands	r3, r2
 80026e0:	d01d      	beq.n	800271e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <UART_AdvFeatureConfig+0x15c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	035b      	lsls	r3, r3, #13
 8002702:	429a      	cmp	r2, r3
 8002704:	d10b      	bne.n	800271e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <UART_AdvFeatureConfig+0x160>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	4013      	ands	r3, r2
 8002726:	d00b      	beq.n	8002740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <UART_AdvFeatureConfig+0x164>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fffdffff 	.word	0xfffdffff
 800274c:	fffeffff 	.word	0xfffeffff
 8002750:	fffbffff 	.word	0xfffbffff
 8002754:	ffff7fff 	.word	0xffff7fff
 8002758:	ffffefff 	.word	0xffffefff
 800275c:	ffffdfff 	.word	0xffffdfff
 8002760:	ffefffff 	.word	0xffefffff
 8002764:	ff9fffff 	.word	0xff9fffff
 8002768:	fff7ffff 	.word	0xfff7ffff

0800276c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b092      	sub	sp, #72	; 0x48
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2284      	movs	r2, #132	; 0x84
 8002778:	2100      	movs	r1, #0
 800277a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800277c:	f7fe f992 	bl	8000aa4 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	4013      	ands	r3, r2
 800278e:	2b08      	cmp	r3, #8
 8002790:	d12c      	bne.n	80027ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	0391      	lsls	r1, r2, #14
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <UART_CheckIdleState+0x148>)
 800279c:	9200      	str	r2, [sp, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	f000 f88c 	bl	80028bc <UART_WaitOnFlagUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d021      	beq.n	80027ec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a8:	f3ef 8310 	mrs	r3, PRIMASK
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b2:	2301      	movs	r3, #1
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	438a      	bics	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2278      	movs	r2, #120	; 0x78
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e05f      	b.n	80028ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d146      	bne.n	8002888 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	03d1      	lsls	r1, r2, #15
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <UART_CheckIdleState+0x148>)
 8002804:	9200      	str	r2, [sp, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	f000 f858 	bl	80028bc <UART_WaitOnFlagUntilTimeout>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d03b      	beq.n	8002888 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	60fb      	str	r3, [r7, #12]
  return(result);
 8002816:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
 800281a:	2301      	movs	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4921      	ldr	r1, [pc, #132]	; (80028b8 <UART_CheckIdleState+0x14c>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002842:	f3ef 8310 	mrs	r3, PRIMASK
 8002846:	61bb      	str	r3, [r7, #24]
  return(result);
 8002848:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
 800284c:	2301      	movs	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	f383 8810 	msr	PRIMASK, r3
}
 8002872:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	2120      	movs	r1, #32
 800287a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2278      	movs	r2, #120	; 0x78
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e011      	b.n	80028ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	2120      	movs	r1, #32
 8002894:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2278      	movs	r2, #120	; 0x78
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b010      	add	sp, #64	; 0x40
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	01ffffff 	.word	0x01ffffff
 80028b8:	fffffedf 	.word	0xfffffedf

080028bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	1dfb      	adds	r3, r7, #7
 80028ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028cc:	e04b      	b.n	8002966 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3301      	adds	r3, #1
 80028d2:	d048      	beq.n	8002966 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d4:	f7fe f8e6 	bl	8000aa4 <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d302      	bcc.n	80028ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04b      	b.n	8002986 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2204      	movs	r2, #4
 80028f6:	4013      	ands	r3, r2
 80028f8:	d035      	beq.n	8002966 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2208      	movs	r2, #8
 8002902:	4013      	ands	r3, r2
 8002904:	2b08      	cmp	r3, #8
 8002906:	d111      	bne.n	800292c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f83c 	bl	8002990 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2284      	movs	r2, #132	; 0x84
 800291c:	2108      	movs	r1, #8
 800291e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2278      	movs	r2, #120	; 0x78
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e02c      	b.n	8002986 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	401a      	ands	r2, r3
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	429a      	cmp	r2, r3
 800293e:	d112      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 f81f 	bl	8002990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2284      	movs	r2, #132	; 0x84
 8002956:	2120      	movs	r1, #32
 8002958:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2278      	movs	r2, #120	; 0x78
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00f      	b.n	8002986 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	425a      	negs	r2, r3
 8002976:	4153      	adcs	r3, r2
 8002978:	b2db      	uxtb	r3, r3
 800297a:	001a      	movs	r2, r3
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d0a4      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	; 0x38
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	617b      	str	r3, [r7, #20]
  return(result);
 800299e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4926      	ldr	r1, [pc, #152]	; (8002a54 <UART_EndRxTransfer+0xc4>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ca:	f3ef 8310 	mrs	r3, PRIMASK
 80029ce:	623b      	str	r3, [r7, #32]
  return(result);
 80029d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	f383 8810 	msr	PRIMASK, r3
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d118      	bne.n	8002a36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a04:	f3ef 8310 	mrs	r3, PRIMASK
 8002a08:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	2301      	movs	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f383 8810 	msr	PRIMASK, r3
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2110      	movs	r1, #16
 8002a26:	438a      	bics	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f383 8810 	msr	PRIMASK, r3
}
 8002a34:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b00e      	add	sp, #56	; 0x38
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	fffffedf 	.word	0xfffffedf

08002a58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	0002      	movs	r2, r0
 8002a60:	1dbb      	adds	r3, r7, #6
 8002a62:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a6e:	2b84      	cmp	r3, #132	; 0x84
 8002a70:	d006      	beq.n	8002a80 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	2200      	movs	r2, #0
 8002a76:	5e9a      	ldrsh	r2, [r3, r2]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a8e:	f000 faab 	bl	8002fe8 <vTaskStartScheduler>
  
  return osOK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9c:	b089      	sub	sp, #36	; 0x24
 8002a9e:	af04      	add	r7, sp, #16
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <osThreadCreate+0x54>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685c      	ldr	r4, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681d      	ldr	r5, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691e      	ldr	r6, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7ff ffc6 	bl	8002a58 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	9201      	str	r2, [sp, #4]
 8002ada:	9000      	str	r0, [sp, #0]
 8002adc:	000b      	movs	r3, r1
 8002ade:	0032      	movs	r2, r6
 8002ae0:	0029      	movs	r1, r5
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	f000 f8e3 	bl	8002cae <xTaskCreateStatic>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e01d      	b.n	8002b2a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685c      	ldr	r4, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002afa:	b29e      	uxth	r6, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2208      	movs	r2, #8
 8002b00:	5e9b      	ldrsh	r3, [r3, r2]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7ff ffa8 	bl	8002a58 <makeFreeRtosPriority>
 8002b08:	0001      	movs	r1, r0
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	9100      	str	r1, [sp, #0]
 8002b14:	0013      	movs	r3, r2
 8002b16:	0032      	movs	r2, r6
 8002b18:	0029      	movs	r1, r5
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	f000 f90b 	bl	8002d36 <xTaskCreate>
 8002b20:	0003      	movs	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b005      	add	sp, #20
 8002b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b34 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <osDelay+0x16>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	e000      	b.n	8002b4c <osDelay+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fa25 	bl	8002f9c <vTaskDelay>
  
  return osOK;
 8002b52:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3308      	adds	r3, #8
 8002b68:	001a      	movs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4252      	negs	r2, r2
 8002b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3308      	adds	r3, #8
 8002b84:	001a      	movs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}

08002bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3301      	adds	r3, #1
 8002c06:	d103      	bne.n	8002c10 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e00c      	b.n	8002c2a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3308      	adds	r3, #8
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e002      	b.n	8002c1e <vListInsert+0x2c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d2f6      	bcs.n	8002c18 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d103      	bne.n	8002c92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}

08002cae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b08d      	sub	sp, #52	; 0x34
 8002cb2:	af04      	add	r7, sp, #16
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <xTaskCreateStatic+0x18>
 8002cc2:	b672      	cpsid	i
 8002cc4:	e7fe      	b.n	8002cc4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <xTaskCreateStatic+0x22>
 8002ccc:	b672      	cpsid	i
 8002cce:	e7fe      	b.n	8002cce <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cd0:	2354      	movs	r3, #84	; 0x54
 8002cd2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b54      	cmp	r3, #84	; 0x54
 8002cd8:	d001      	beq.n	8002cde <xTaskCreateStatic+0x30>
 8002cda:	b672      	cpsid	i
 8002cdc:	e7fe      	b.n	8002cdc <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002cde:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d020      	beq.n	8002d28 <xTaskCreateStatic+0x7a>
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01d      	beq.n	8002d28 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2251      	movs	r2, #81	; 0x51
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cfe:	683c      	ldr	r4, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9303      	str	r3, [sp, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	9302      	str	r3, [sp, #8]
 8002d0e:	2318      	movs	r3, #24
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	0023      	movs	r3, r4
 8002d1a:	f000 f859 	bl	8002dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f8d7 	bl	8002ed4 <prvAddNewTaskToReadyList>
 8002d26:	e001      	b.n	8002d2c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b009      	add	sp, #36	; 0x24
 8002d34:	bd90      	pop	{r4, r7, pc}

08002d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d36:	b590      	push	{r4, r7, lr}
 8002d38:	b08d      	sub	sp, #52	; 0x34
 8002d3a:	af04      	add	r7, sp, #16
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fd9f 	bl	8003890 <pvPortMalloc>
 8002d52:	0003      	movs	r3, r0
 8002d54:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d5c:	2054      	movs	r0, #84	; 0x54
 8002d5e:	f000 fd97 	bl	8003890 <pvPortMalloc>
 8002d62:	0003      	movs	r3, r0
 8002d64:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
 8002d72:	e006      	b.n	8002d82 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fe30 	bl	80039dc <vPortFree>
 8002d7c:	e001      	b.n	8002d82 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01a      	beq.n	8002dbe <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2251      	movs	r2, #81	; 0x51
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	881a      	ldrh	r2, [r3, #0]
 8002d94:	683c      	ldr	r4, [r7, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9303      	str	r3, [sp, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	0023      	movs	r3, r4
 8002dac:	f000 f810 	bl	8002dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f88e 	bl	8002ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e002      	b.n	8002dc4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
	}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b009      	add	sp, #36	; 0x24
 8002dcc:	bd90      	pop	{r4, r7, pc}
	...

08002dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	493a      	ldr	r1, [pc, #232]	; (8002ed0 <prvInitialiseNewTask+0x100>)
 8002de6:	468c      	mov	ip, r1
 8002de8:	4463      	add	r3, ip
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2207      	movs	r2, #7
 8002df4:	4393      	bics	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d001      	beq.n	8002e04 <prvInitialiseNewTask+0x34>
 8002e00:	b672      	cpsid	i
 8002e02:	e7fe      	b.n	8002e02 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d020      	beq.n	8002e4c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e013      	b.n	8002e38 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	7818      	ldrb	r0, [r3, #0]
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	2134      	movs	r1, #52	; 0x34
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	185b      	adds	r3, r3, r1
 8002e22:	1c02      	adds	r2, r0, #0
 8002e24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	18d3      	adds	r3, r2, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d9e8      	bls.n	8002e10 <prvInitialiseNewTask+0x40>
 8002e3e:	e000      	b.n	8002e42 <prvInitialiseNewTask+0x72>
			{
				break;
 8002e40:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	2243      	movs	r2, #67	; 0x43
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	e003      	b.n	8002e54 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2234      	movs	r2, #52	; 0x34
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d901      	bls.n	8002e5e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	3304      	adds	r3, #4
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fe8f 	bl	8002b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff fe8a 	bl	8002b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	2250      	movs	r2, #80	; 0x50
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fbba 	bl	8003628 <pxPortInitialiseStack>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	3fffffff 	.word	0x3fffffff

08002ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002edc:	f000 fc40 	bl	8003760 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <prvAddNewTaskToReadyList+0xb0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <prvAddNewTaskToReadyList+0xb0>)
 8002ee8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <prvAddNewTaskToReadyList+0xb4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <prvAddNewTaskToReadyList+0xb4>)
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <prvAddNewTaskToReadyList+0xb0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d110      	bne.n	8002f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f00:	f000 fa6a 	bl	80033d8 <prvInitialiseTaskLists>
 8002f04:	e00d      	b.n	8002f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <prvAddNewTaskToReadyList+0xb8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <prvAddNewTaskToReadyList+0xb4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d802      	bhi.n	8002f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <prvAddNewTaskToReadyList+0xb4>)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <prvAddNewTaskToReadyList+0xbc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <prvAddNewTaskToReadyList+0xbc>)
 8002f2a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <prvAddNewTaskToReadyList+0xc0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d903      	bls.n	8002f40 <prvAddNewTaskToReadyList+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <prvAddNewTaskToReadyList+0xc0>)
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	0013      	movs	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <prvAddNewTaskToReadyList+0xc4>)
 8002f4e:	189a      	adds	r2, r3, r2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	0019      	movs	r1, r3
 8002f56:	0010      	movs	r0, r2
 8002f58:	f7ff fe29 	bl	8002bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f5c:	f000 fc12 	bl	8003784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <prvAddNewTaskToReadyList+0xb8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <prvAddNewTaskToReadyList+0xb4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d201      	bcs.n	8002f7a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f76:	f000 fbe3 	bl	8003740 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	200004ec 	.word	0x200004ec
 8002f88:	200003ec 	.word	0x200003ec
 8002f8c:	200004f8 	.word	0x200004f8
 8002f90:	20000508 	.word	0x20000508
 8002f94:	200004f4 	.word	0x200004f4
 8002f98:	200003f0 	.word	0x200003f0

08002f9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <vTaskDelay+0x48>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <vTaskDelay+0x1e>
 8002fb6:	b672      	cpsid	i
 8002fb8:	e7fe      	b.n	8002fb8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002fba:	f000 f863 	bl	8003084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fadc 	bl	8003580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fc8:	f000 f868 	bl	800309c <xTaskResumeAll>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002fd6:	f000 fbb3 	bl	8003740 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	20000514 	.word	0x20000514

08002fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ff6:	003a      	movs	r2, r7
 8002ff8:	1d39      	adds	r1, r7, #4
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fd fa52 	bl	80004a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003004:	683c      	ldr	r4, [r7, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4918      	ldr	r1, [pc, #96]	; (800306c <vTaskStartScheduler+0x84>)
 800300c:	4818      	ldr	r0, [pc, #96]	; (8003070 <vTaskStartScheduler+0x88>)
 800300e:	9202      	str	r2, [sp, #8]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	0022      	movs	r2, r4
 800301a:	f7ff fe48 	bl	8002cae <xTaskCreateStatic>
 800301e:	0002      	movs	r2, r0
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <vTaskStartScheduler+0x8c>)
 8003022:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <vTaskStartScheduler+0x8c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800302c:	2301      	movs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e001      	b.n	8003036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d10d      	bne.n	8003058 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800303c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <vTaskStartScheduler+0x90>)
 8003040:	2201      	movs	r2, #1
 8003042:	4252      	negs	r2, r2
 8003044:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <vTaskStartScheduler+0x94>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <vTaskStartScheduler+0x98>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003052:	f000 fb51 	bl	80036f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003056:	e004      	b.n	8003062 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	d101      	bne.n	8003062 <vTaskStartScheduler+0x7a>
 800305e:	b672      	cpsid	i
 8003060:	e7fe      	b.n	8003060 <vTaskStartScheduler+0x78>
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b005      	add	sp, #20
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08003c78 	.word	0x08003c78
 8003070:	080033b9 	.word	0x080033b9
 8003074:	20000510 	.word	0x20000510
 8003078:	2000050c 	.word	0x2000050c
 800307c:	200004f8 	.word	0x200004f8
 8003080:	200004f0 	.word	0x200004f0

08003084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <vTaskSuspendAll+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	4b02      	ldr	r3, [pc, #8]	; (8003098 <vTaskSuspendAll+0x14>)
 8003090:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000514 	.word	0x20000514

0800309c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030aa:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <xTaskResumeAll+0xf8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <xTaskResumeAll+0x1a>
 80030b2:	b672      	cpsid	i
 80030b4:	e7fe      	b.n	80030b4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030b6:	f000 fb53 	bl	8003760 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <xTaskResumeAll+0xf8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <xTaskResumeAll+0xf8>)
 80030c2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <xTaskResumeAll+0xf8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d15b      	bne.n	8003184 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <xTaskResumeAll+0xfc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d057      	beq.n	8003184 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d4:	e02f      	b.n	8003136 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <xTaskResumeAll+0x100>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3318      	adds	r3, #24
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff fdbb 	bl	8002c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3304      	adds	r3, #4
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff fdb6 	bl	8002c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <xTaskResumeAll+0x104>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d903      	bls.n	8003106 <xTaskResumeAll+0x6a>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <xTaskResumeAll+0x104>)
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	0013      	movs	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	189b      	adds	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <xTaskResumeAll+0x108>)
 8003114:	189a      	adds	r2, r3, r2
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3304      	adds	r3, #4
 800311a:	0019      	movs	r1, r3
 800311c:	0010      	movs	r0, r2
 800311e:	f7ff fd46 	bl	8002bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <xTaskResumeAll+0x10c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <xTaskResumeAll+0x110>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <xTaskResumeAll+0x100>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003144:	f000 f9e2 	bl	800350c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <xTaskResumeAll+0x114>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00f      	beq.n	8003174 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003154:	f000 f82e 	bl	80031b4 <xTaskIncrementTick>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d002      	beq.n	8003162 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <xTaskResumeAll+0x110>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3b01      	subs	r3, #1
 8003166:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <xTaskResumeAll+0x114>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <xTaskResumeAll+0x110>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003180:	f000 fade 	bl	8003740 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003184:	f000 fafe 	bl	8003784 <vPortExitCritical>

	return xAlreadyYielded;
 8003188:	68bb      	ldr	r3, [r7, #8]
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	20000514 	.word	0x20000514
 8003198:	200004ec 	.word	0x200004ec
 800319c:	200004ac 	.word	0x200004ac
 80031a0:	200004f4 	.word	0x200004f4
 80031a4:	200003f0 	.word	0x200003f0
 80031a8:	200003ec 	.word	0x200003ec
 80031ac:	20000500 	.word	0x20000500
 80031b0:	200004fc 	.word	0x200004fc

080031b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <xTaskIncrementTick+0x134>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d000      	beq.n	80031c8 <xTaskIncrementTick+0x14>
 80031c6:	e07e      	b.n	80032c6 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <xTaskIncrementTick+0x138>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031d0:	4b46      	ldr	r3, [pc, #280]	; (80032ec <xTaskIncrementTick+0x138>)
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d117      	bne.n	800320c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <xTaskIncrementTick+0x13c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <xTaskIncrementTick+0x36>
 80031e6:	b672      	cpsid	i
 80031e8:	e7fe      	b.n	80031e8 <xTaskIncrementTick+0x34>
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <xTaskIncrementTick+0x13c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <xTaskIncrementTick+0x140>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <xTaskIncrementTick+0x13c>)
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <xTaskIncrementTick+0x140>)
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <xTaskIncrementTick+0x144>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <xTaskIncrementTick+0x144>)
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f000 f980 	bl	800350c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <xTaskIncrementTick+0x148>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	d349      	bcc.n	80032aa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <xTaskIncrementTick+0x13c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <xTaskIncrementTick+0x148>)
 8003222:	2201      	movs	r2, #1
 8003224:	4252      	negs	r2, r2
 8003226:	601a      	str	r2, [r3, #0]
					break;
 8003228:	e03f      	b.n	80032aa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <xTaskIncrementTick+0x13c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d203      	bcs.n	800324a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <xTaskIncrementTick+0x148>)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003248:	e02f      	b.n	80032aa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3304      	adds	r3, #4
 800324e:	0018      	movs	r0, r3
 8003250:	f7ff fd05 	bl	8002c5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	3318      	adds	r3, #24
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff fcfc 	bl	8002c5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <xTaskIncrementTick+0x14c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d903      	bls.n	800327a <xTaskIncrementTick+0xc6>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <xTaskIncrementTick+0x14c>)
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	0013      	movs	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	189b      	adds	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <xTaskIncrementTick+0x150>)
 8003288:	189a      	adds	r2, r3, r2
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3304      	adds	r3, #4
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f7ff fc8c 	bl	8002bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <xTaskIncrementTick+0x154>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3b8      	bcc.n	8003216 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a8:	e7b5      	b.n	8003216 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <xTaskIncrementTick+0x154>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	4914      	ldr	r1, [pc, #80]	; (8003304 <xTaskIncrementTick+0x150>)
 80032b2:	0013      	movs	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	585b      	ldr	r3, [r3, r1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d907      	bls.n	80032d0 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e004      	b.n	80032d0 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <xTaskIncrementTick+0x158>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <xTaskIncrementTick+0x158>)
 80032ce:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <xTaskIncrementTick+0x15c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80032d8:	2301      	movs	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000514 	.word	0x20000514
 80032ec:	200004f0 	.word	0x200004f0
 80032f0:	200004a4 	.word	0x200004a4
 80032f4:	200004a8 	.word	0x200004a8
 80032f8:	20000504 	.word	0x20000504
 80032fc:	2000050c 	.word	0x2000050c
 8003300:	200004f4 	.word	0x200004f4
 8003304:	200003f0 	.word	0x200003f0
 8003308:	200003ec 	.word	0x200003ec
 800330c:	200004fc 	.word	0x200004fc
 8003310:	20000500 	.word	0x20000500

08003314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <vTaskSwitchContext+0x90>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <vTaskSwitchContext+0x94>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003328:	e037      	b.n	800339a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <vTaskSwitchContext+0x94>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <vTaskSwitchContext+0x98>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	e007      	b.n	8003348 <vTaskSwitchContext+0x34>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <vTaskSwitchContext+0x2e>
 800333e:	b672      	cpsid	i
 8003340:	e7fe      	b.n	8003340 <vTaskSwitchContext+0x2c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3b01      	subs	r3, #1
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	4919      	ldr	r1, [pc, #100]	; (80033b0 <vTaskSwitchContext+0x9c>)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	0013      	movs	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	189b      	adds	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	585b      	ldr	r3, [r3, r1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ee      	beq.n	8003338 <vTaskSwitchContext+0x24>
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	0013      	movs	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	189b      	adds	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <vTaskSwitchContext+0x9c>)
 8003366:	189b      	adds	r3, r3, r2
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3308      	adds	r3, #8
 800337c:	429a      	cmp	r2, r3
 800337e:	d104      	bne.n	800338a <vTaskSwitchContext+0x76>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <vTaskSwitchContext+0xa0>)
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <vTaskSwitchContext+0x98>)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000514 	.word	0x20000514
 80033a8:	20000500 	.word	0x20000500
 80033ac:	200004f4 	.word	0x200004f4
 80033b0:	200003f0 	.word	0x200003f0
 80033b4:	200003ec 	.word	0x200003ec

080033b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033c0:	f000 f84e 	bl	8003460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <prvIdleTask+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d9f9      	bls.n	80033c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033cc:	f000 f9b8 	bl	8003740 <vPortYield>
		prvCheckTasksWaitingTermination();
 80033d0:	e7f6      	b.n	80033c0 <prvIdleTask+0x8>
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	200003f0 	.word	0x200003f0

080033d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e00c      	b.n	80033fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	0013      	movs	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <prvInitialiseTaskLists+0x68>)
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7ff fbb2 	bl	8002b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b06      	cmp	r3, #6
 8003402:	d9ef      	bls.n	80033e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <prvInitialiseTaskLists+0x6c>)
 8003406:	0018      	movs	r0, r3
 8003408:	f7ff fba8 	bl	8002b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <prvInitialiseTaskLists+0x70>)
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff fba4 	bl	8002b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <prvInitialiseTaskLists+0x74>)
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fba0 	bl	8002b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <prvInitialiseTaskLists+0x78>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fb9c 	bl	8002b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <prvInitialiseTaskLists+0x7c>)
 8003426:	0018      	movs	r0, r3
 8003428:	f7ff fb98 	bl	8002b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <prvInitialiseTaskLists+0x80>)
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <prvInitialiseTaskLists+0x6c>)
 8003430:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <prvInitialiseTaskLists+0x84>)
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <prvInitialiseTaskLists+0x70>)
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200003f0 	.word	0x200003f0
 8003444:	2000047c 	.word	0x2000047c
 8003448:	20000490 	.word	0x20000490
 800344c:	200004ac 	.word	0x200004ac
 8003450:	200004c0 	.word	0x200004c0
 8003454:	200004d8 	.word	0x200004d8
 8003458:	200004a4 	.word	0x200004a4
 800345c:	200004a8 	.word	0x200004a8

08003460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003466:	e01a      	b.n	800349e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003468:	f000 f97a 	bl	8003760 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <prvCheckTasksWaitingTermination+0x50>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff fbf0 	bl	8002c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003486:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 8003490:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003492:	f000 f977 	bl	8003784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 f80f 	bl	80034bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e0      	bne.n	8003468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200004c0 	.word	0x200004c0
 80034b4:	200004ec 	.word	0x200004ec
 80034b8:	200004d4 	.word	0x200004d4

080034bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2251      	movs	r2, #81	; 0x51
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fa82 	bl	80039dc <vPortFree>
				vPortFree( pxTCB );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fa7e 	bl	80039dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034e0:	e010      	b.n	8003504 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2251      	movs	r2, #81	; 0x51
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d104      	bne.n	80034f6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fa74 	bl	80039dc <vPortFree>
	}
 80034f4:	e006      	b.n	8003504 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2251      	movs	r2, #81	; 0x51
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d001      	beq.n	8003504 <prvDeleteTCB+0x48>
 8003500:	b672      	cpsid	i
 8003502:	e7fe      	b.n	8003502 <prvDeleteTCB+0x46>
	}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <prvResetNextTaskUnblockTime+0x34>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <prvResetNextTaskUnblockTime+0x38>)
 800351e:	2201      	movs	r2, #1
 8003520:	4252      	negs	r2, r2
 8003522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003524:	e008      	b.n	8003538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <prvResetNextTaskUnblockTime+0x34>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <prvResetNextTaskUnblockTime+0x38>)
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200004a4 	.word	0x200004a4
 8003544:	2000050c 	.word	0x2000050c

08003548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <xTaskGetSchedulerState+0x30>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003556:	2301      	movs	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e008      	b.n	800356e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <xTaskGetSchedulerState+0x34>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003564:	2302      	movs	r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e001      	b.n	800356e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800356e:	687b      	ldr	r3, [r7, #4]
	}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200004f8 	.word	0x200004f8
 800357c:	20000514 	.word	0x20000514

08003580 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <prvAddCurrentTaskToDelayedList+0x90>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <prvAddCurrentTaskToDelayedList+0x94>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3304      	adds	r3, #4
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fb61 	bl	8002c5e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3301      	adds	r3, #1
 80035a0:	d10b      	bne.n	80035ba <prvAddCurrentTaskToDelayedList+0x3a>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <prvAddCurrentTaskToDelayedList+0x94>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1d1a      	adds	r2, r3, #4
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <prvAddCurrentTaskToDelayedList+0x98>)
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fafb 	bl	8002bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035b8:	e026      	b.n	8003608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <prvAddCurrentTaskToDelayedList+0x94>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d209      	bcs.n	80035e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <prvAddCurrentTaskToDelayedList+0x9c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <prvAddCurrentTaskToDelayedList+0x94>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3304      	adds	r3, #4
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f7ff fb07 	bl	8002bf2 <vListInsert>
}
 80035e4:	e010      	b.n	8003608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddCurrentTaskToDelayedList+0x94>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3304      	adds	r3, #4
 80035f0:	0019      	movs	r1, r3
 80035f2:	0010      	movs	r0, r2
 80035f4:	f7ff fafd 	bl	8002bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d202      	bcs.n	8003608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200004f0 	.word	0x200004f0
 8003614:	200003ec 	.word	0x200003ec
 8003618:	200004d8 	.word	0x200004d8
 800361c:	200004a8 	.word	0x200004a8
 8003620:	200004a4 	.word	0x200004a4
 8003624:	2000050c 	.word	0x2000050c

08003628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3b04      	subs	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	0452      	lsls	r2, r2, #17
 8003640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b04      	subs	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b04      	subs	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003654:	4a08      	ldr	r2, [pc, #32]	; (8003678 <pxPortInitialiseStack+0x50>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b14      	subs	r3, #20
 800365e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3b20      	subs	r3, #32
 800366a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	0800367d 	.word	0x0800367d

0800367c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <prvTaskExitError+0x2c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	d001      	beq.n	8003692 <prvTaskExitError+0x16>
 800368e:	b672      	cpsid	i
 8003690:	e7fe      	b.n	8003690 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003692:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0fc      	beq.n	8003696 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	2000000c 	.word	0x2000000c

080036ac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80036c0:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <pxCurrentTCBConst2>)
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	3020      	adds	r0, #32
 80036c8:	f380 8809 	msr	PSP, r0
 80036cc:	2002      	movs	r0, #2
 80036ce:	f380 8814 	msr	CONTROL, r0
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80036d8:	46ae      	mov	lr, r5
 80036da:	bc08      	pop	{r3}
 80036dc:	bc04      	pop	{r2}
 80036de:	b662      	cpsie	i
 80036e0:	4718      	bx	r3
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46c0      	nop			; (mov r8, r8)

080036f0 <pxCurrentTCBConst2>:
 80036f0:	200003ec 	.word	0x200003ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46c0      	nop			; (mov r8, r8)

080036f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <xPortStartScheduler+0x40>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <xPortStartScheduler+0x40>)
 8003702:	21ff      	movs	r1, #255	; 0xff
 8003704:	0409      	lsls	r1, r1, #16
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <xPortStartScheduler+0x40>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <xPortStartScheduler+0x40>)
 8003710:	21ff      	movs	r1, #255	; 0xff
 8003712:	0609      	lsls	r1, r1, #24
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003718:	f000 f898 	bl	800384c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <xPortStartScheduler+0x44>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003722:	f7ff ffcd 	bl	80036c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003726:	f7ff fdf5 	bl	8003314 <vTaskSwitchContext>
	prvTaskExitError();
 800372a:	f7ff ffa7 	bl	800367c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800372e:	2300      	movs	r3, #0
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	e000ed20 	.word	0xe000ed20
 800373c:	2000000c 	.word	0x2000000c

08003740 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <vPortYield+0x1c>)
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	0552      	lsls	r2, r2, #21
 800374a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800374c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003750:	f3bf 8f6f 	isb	sy
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003764:	b672      	cpsid	i
    uxCriticalNesting++;
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <vPortEnterCritical+0x20>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <vPortEnterCritical+0x20>)
 800376e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003770:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003774:	f3bf 8f6f 	isb	sy
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	2000000c 	.word	0x2000000c

08003784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <vPortExitCritical+0x2c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <vPortExitCritical+0x10>
 8003790:	b672      	cpsid	i
 8003792:	e7fe      	b.n	8003792 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <vPortExitCritical+0x2c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1e5a      	subs	r2, r3, #1
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <vPortExitCritical+0x2c>)
 800379c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <vPortExitCritical+0x2c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80037a6:	b662      	cpsie	i
    }
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	2000000c 	.word	0x2000000c

080037b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80037b4:	f3ef 8010 	mrs	r0, PRIMASK
 80037b8:	b672      	cpsid	i
 80037ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	0018      	movs	r0, r3

080037c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80037c0:	f380 8810 	msr	PRIMASK, r0
 80037c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80037c6:	46c0      	nop			; (mov r8, r8)
	...

080037d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037d0:	f3ef 8009 	mrs	r0, PSP
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <pxCurrentTCBConst>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	3820      	subs	r0, #32
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80037de:	4644      	mov	r4, r8
 80037e0:	464d      	mov	r5, r9
 80037e2:	4656      	mov	r6, sl
 80037e4:	465f      	mov	r7, fp
 80037e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80037e8:	b508      	push	{r3, lr}
 80037ea:	b672      	cpsid	i
 80037ec:	f7ff fd92 	bl	8003314 <vTaskSwitchContext>
 80037f0:	b662      	cpsie	i
 80037f2:	bc0c      	pop	{r2, r3}
 80037f4:	6811      	ldr	r1, [r2, #0]
 80037f6:	6808      	ldr	r0, [r1, #0]
 80037f8:	3010      	adds	r0, #16
 80037fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80037fc:	46a0      	mov	r8, r4
 80037fe:	46a9      	mov	r9, r5
 8003800:	46b2      	mov	sl, r6
 8003802:	46bb      	mov	fp, r7
 8003804:	f380 8809 	msr	PSP, r0
 8003808:	3820      	subs	r0, #32
 800380a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800380c:	4718      	bx	r3
 800380e:	46c0      	nop			; (mov r8, r8)

08003810 <pxCurrentTCBConst>:
 8003810:	200003ec 	.word	0x200003ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46c0      	nop			; (mov r8, r8)

08003818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800381e:	f7ff ffc9 	bl	80037b4 <ulSetInterruptMaskFromISR>
 8003822:	0003      	movs	r3, r0
 8003824:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003826:	f7ff fcc5 	bl	80031b4 <xTaskIncrementTick>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d003      	beq.n	8003836 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <xPortSysTickHandler+0x30>)
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0552      	lsls	r2, r2, #21
 8003834:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ffc1 	bl	80037c0 <vClearInterruptMaskFromISR>
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvSetupTimerInterrupt+0x34>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <prvSetupTimerInterrupt+0x38>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <prvSetupTimerInterrupt+0x3c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	22fa      	movs	r2, #250	; 0xfa
 8003862:	0091      	lsls	r1, r2, #2
 8003864:	0018      	movs	r0, r3
 8003866:	f7fc fc4f 	bl	8000108 <__udivsi3>
 800386a:	0003      	movs	r3, r0
 800386c:	001a      	movs	r2, r3
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <prvSetupTimerInterrupt+0x40>)
 8003870:	3a01      	subs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <prvSetupTimerInterrupt+0x34>)
 8003876:	2207      	movs	r2, #7
 8003878:	601a      	str	r2, [r3, #0]
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	e000e010 	.word	0xe000e010
 8003884:	e000e018 	.word	0xe000e018
 8003888:	20000000 	.word	0x20000000
 800388c:	e000e014 	.word	0xe000e014

08003890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800389c:	f7ff fbf2 	bl	8003084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <pvPortMalloc+0x138>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038a8:	f000 f8e0 	bl	8003a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <pvPortMalloc+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4013      	ands	r3, r2
 80038b4:	d000      	beq.n	80038b8 <pvPortMalloc+0x28>
 80038b6:	e079      	b.n	80039ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80038be:	2208      	movs	r2, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2207      	movs	r2, #7
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00a      	beq.n	80038e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2207      	movs	r2, #7
 80038d2:	4393      	bics	r3, r2
 80038d4:	3308      	adds	r3, #8
 80038d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	d001      	beq.n	80038e4 <pvPortMalloc+0x54>
 80038e0:	b672      	cpsid	i
 80038e2:	e7fe      	b.n	80038e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d060      	beq.n	80039ac <pvPortMalloc+0x11c>
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <pvPortMalloc+0x140>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d85b      	bhi.n	80039ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <pvPortMalloc+0x144>)
 80038f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <pvPortMalloc+0x144>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038fe:	e004      	b.n	800390a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <pvPortMalloc+0x8c>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f1      	bne.n	8003900 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <pvPortMalloc+0x138>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	d042      	beq.n	80039ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2208      	movs	r2, #8
 800392c:	189b      	adds	r3, r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	2308      	movs	r3, #8
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d916      	bls.n	8003976 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	18d3      	adds	r3, r2, r3
 800394e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	d001      	beq.n	800395c <pvPortMalloc+0xcc>
 8003958:	b672      	cpsid	i
 800395a:	e7fe      	b.n	800395a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 f8db 	bl	8003b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <pvPortMalloc+0x140>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <pvPortMalloc+0x140>)
 8003982:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <pvPortMalloc+0x140>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <pvPortMalloc+0x148>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d203      	bcs.n	8003998 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <pvPortMalloc+0x140>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <pvPortMalloc+0x148>)
 8003996:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <pvPortMalloc+0x13c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039ac:	f7ff fb76 	bl	800309c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	d001      	beq.n	80039bc <pvPortMalloc+0x12c>
 80039b8:	b672      	cpsid	i
 80039ba:	e7fe      	b.n	80039ba <pvPortMalloc+0x12a>
	return pvReturn;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b006      	add	sp, #24
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	20001120 	.word	0x20001120
 80039cc:	2000112c 	.word	0x2000112c
 80039d0:	20001124 	.word	0x20001124
 80039d4:	20001118 	.word	0x20001118
 80039d8:	20001128 	.word	0x20001128

080039dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d035      	beq.n	8003a5a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039ee:	2308      	movs	r3, #8
 80039f0:	425b      	negs	r3, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <vPortFree+0x88>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4013      	ands	r3, r2
 8003a06:	d101      	bne.n	8003a0c <vPortFree+0x30>
 8003a08:	b672      	cpsid	i
 8003a0a:	e7fe      	b.n	8003a0a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <vPortFree+0x3c>
 8003a14:	b672      	cpsid	i
 8003a16:	e7fe      	b.n	8003a16 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <vPortFree+0x88>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4013      	ands	r3, r2
 8003a22:	d01a      	beq.n	8003a5a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <vPortFree+0x88>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a3c:	f7ff fb22 	bl	8003084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <vPortFree+0x8c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	18d2      	adds	r2, r2, r3
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <vPortFree+0x8c>)
 8003a4c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f86b 	bl	8003b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a56:	f7ff fb21 	bl	800309c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	2000112c 	.word	0x2000112c
 8003a68:	20001124 	.word	0x20001124

08003a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a72:	23c0      	movs	r3, #192	; 0xc0
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <prvHeapInit+0xa8>)
 8003a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3307      	adds	r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	4393      	bics	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <prvHeapInit+0xa8>)
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <prvHeapInit+0xac>)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <prvHeapInit+0xac>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <prvHeapInit+0xb0>)
 8003aca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <prvHeapInit+0xb0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <prvHeapInit+0xb0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <prvHeapInit+0xb0>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvHeapInit+0xb4>)
 8003af8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <prvHeapInit+0xb8>)
 8003b00:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <prvHeapInit+0xbc>)
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	0612      	lsls	r2, r2, #24
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b004      	add	sp, #16
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000518 	.word	0x20000518
 8003b18:	20001118 	.word	0x20001118
 8003b1c:	20001120 	.word	0x20001120
 8003b20:	20001128 	.word	0x20001128
 8003b24:	20001124 	.word	0x20001124
 8003b28:	2000112c 	.word	0x2000112c

08003b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b34:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <prvInsertBlockIntoFreeList+0xa8>)
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e002      	b.n	8003b40 <prvInsertBlockIntoFreeList+0x14>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d8f7      	bhi.n	8003b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	18d3      	adds	r3, r2, r3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d108      	bne.n	8003b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	18d2      	adds	r2, r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	18d2      	adds	r2, r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d118      	bne.n	8003bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <prvInsertBlockIntoFreeList+0xac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d00d      	beq.n	8003baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	18d2      	adds	r2, r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e008      	b.n	8003bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <prvInsertBlockIntoFreeList+0xac>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e003      	b.n	8003bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d002      	beq.n	8003bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	20001118 	.word	0x20001118
 8003bd8:	20001120 	.word	0x20001120

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	2600      	movs	r6, #0
 8003be0:	4d0c      	ldr	r5, [pc, #48]	; (8003c14 <__libc_init_array+0x38>)
 8003be2:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	2600      	movs	r6, #0
 8003bee:	f000 f821 	bl	8003c34 <_init>
 8003bf2:	4d0a      	ldr	r5, [pc, #40]	; (8003c1c <__libc_init_array+0x40>)
 8003bf4:	4c0a      	ldr	r4, [pc, #40]	; (8003c20 <__libc_init_array+0x44>)
 8003bf6:	1b64      	subs	r4, r4, r5
 8003bf8:	10a4      	asrs	r4, r4, #2
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	00b3      	lsls	r3, r6, #2
 8003c02:	58eb      	ldr	r3, [r5, r3]
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	00b3      	lsls	r3, r6, #2
 8003c0c:	58eb      	ldr	r3, [r5, r3]
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08003cf4 	.word	0x08003cf4
 8003c18:	08003cf4 	.word	0x08003cf4
 8003c1c:	08003cf4 	.word	0x08003cf4
 8003c20:	08003cf8 	.word	0x08003cf8

08003c24 <memset>:
 8003c24:	0003      	movs	r3, r0
 8003c26:	1882      	adds	r2, r0, r2
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	7019      	strb	r1, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
