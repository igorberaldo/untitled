
modo_coleta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca88  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800cb48  0800cb48  0001cb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1ac  0800d1ac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1ac  0800d1ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b4  0800d1b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1b8  0800d1b8  0001d1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  200001ec  0800d3a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800d3a8  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4b  00000000  00000000  00032740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00036680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001852a  00000000  00000000  00037628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147f7  00000000  00000000  0004fb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aee8  00000000  00000000  00064349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000ef284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cb30 	.word	0x0800cb30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800cb30 	.word	0x0800cb30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa0b 	bl	8001858 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f95b 	bl	8001708 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9fd 	bl	8001858 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9f3 	bl	8001858 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f983 	bl	800178c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f979 	bl	800178c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 fffd 	bl	8002558 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fc46 	bl	8001df8 <__aeabi_dsub>
 800056c:	f001 fff4 	bl	8002558 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f9ab 	bl	8001920 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 f828 	bl	8002624 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f9a2 	bl	8001920 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fc08 	bl	8001df8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 ffe1 	bl	80025c4 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f98b 	bl	8001920 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f808 	bl	8002624 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fa44 	bl	8000aa4 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 f902 	bl	800284c <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 f8fd 	bl	800284c <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_fmul>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0244      	lsls	r4, r0, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	b5c0      	push	{r6, r7, lr}
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	1c0f      	adds	r7, r1, #0
 80007ce:	0e2d      	lsrs	r5, r5, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fmul+0x1c>
 80007d6:	e08d      	b.n	80008f4 <__aeabi_fmul+0x138>
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fmul+0x22>
 80007dc:	e092      	b.n	8000904 <__aeabi_fmul+0x148>
 80007de:	2300      	movs	r3, #0
 80007e0:	2080      	movs	r0, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00e4      	lsls	r4, r4, #3
 80007e8:	04c0      	lsls	r0, r0, #19
 80007ea:	4304      	orrs	r4, r0
 80007ec:	3d7f      	subs	r5, #127	; 0x7f
 80007ee:	0278      	lsls	r0, r7, #9
 80007f0:	0a43      	lsrs	r3, r0, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	007b      	lsls	r3, r7, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fff      	lsrs	r7, r7, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x44>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fmul+0x126>
 8000800:	2bff      	cmp	r3, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x4a>
 8000804:	e086      	b.n	8000914 <__aeabi_fmul+0x158>
 8000806:	4642      	mov	r2, r8
 8000808:	00d0      	lsls	r0, r2, #3
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	3b7f      	subs	r3, #127	; 0x7f
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	2300      	movs	r3, #0
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	4302      	orrs	r2, r0
 8000816:	4690      	mov	r8, r2
 8000818:	469c      	mov	ip, r3
 800081a:	0031      	movs	r1, r6
 800081c:	464b      	mov	r3, r9
 800081e:	4079      	eors	r1, r7
 8000820:	1c68      	adds	r0, r5, #1
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d81c      	bhi.n	8000860 <__aeabi_fmul+0xa4>
 8000826:	4a76      	ldr	r2, [pc, #472]	; (8000a00 <__aeabi_fmul+0x244>)
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	58d3      	ldr	r3, [r2, r3]
 800082c:	469f      	mov	pc, r3
 800082e:	0039      	movs	r1, r7
 8000830:	4644      	mov	r4, r8
 8000832:	46e2      	mov	sl, ip
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d00f      	beq.n	800085a <__aeabi_fmul+0x9e>
 800083a:	2b03      	cmp	r3, #3
 800083c:	d100      	bne.n	8000840 <__aeabi_fmul+0x84>
 800083e:	e0d7      	b.n	80009f0 <__aeabi_fmul+0x234>
 8000840:	2b01      	cmp	r3, #1
 8000842:	d137      	bne.n	80008b4 <__aeabi_fmul+0xf8>
 8000844:	2000      	movs	r0, #0
 8000846:	2400      	movs	r4, #0
 8000848:	05c0      	lsls	r0, r0, #23
 800084a:	4320      	orrs	r0, r4
 800084c:	07c9      	lsls	r1, r1, #31
 800084e:	4308      	orrs	r0, r1
 8000850:	bce0      	pop	{r5, r6, r7}
 8000852:	46ba      	mov	sl, r7
 8000854:	46b1      	mov	r9, r6
 8000856:	46a8      	mov	r8, r5
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	2400      	movs	r4, #0
 800085e:	e7f3      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000860:	0c26      	lsrs	r6, r4, #16
 8000862:	0424      	lsls	r4, r4, #16
 8000864:	0c22      	lsrs	r2, r4, #16
 8000866:	4644      	mov	r4, r8
 8000868:	0424      	lsls	r4, r4, #16
 800086a:	0c24      	lsrs	r4, r4, #16
 800086c:	4643      	mov	r3, r8
 800086e:	0027      	movs	r7, r4
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	4357      	muls	r7, r2
 8000874:	4374      	muls	r4, r6
 8000876:	435a      	muls	r2, r3
 8000878:	435e      	muls	r6, r3
 800087a:	1912      	adds	r2, r2, r4
 800087c:	0c3b      	lsrs	r3, r7, #16
 800087e:	189b      	adds	r3, r3, r2
 8000880:	429c      	cmp	r4, r3
 8000882:	d903      	bls.n	800088c <__aeabi_fmul+0xd0>
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0252      	lsls	r2, r2, #9
 8000888:	4694      	mov	ip, r2
 800088a:	4466      	add	r6, ip
 800088c:	043f      	lsls	r7, r7, #16
 800088e:	041a      	lsls	r2, r3, #16
 8000890:	0c3f      	lsrs	r7, r7, #16
 8000892:	19d2      	adds	r2, r2, r7
 8000894:	0194      	lsls	r4, r2, #6
 8000896:	1e67      	subs	r7, r4, #1
 8000898:	41bc      	sbcs	r4, r7
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	0e92      	lsrs	r2, r2, #26
 800089e:	199b      	adds	r3, r3, r6
 80008a0:	4314      	orrs	r4, r2
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	431c      	orrs	r4, r3
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fmul+0xf0>
 80008aa:	e09b      	b.n	80009e4 <__aeabi_fmul+0x228>
 80008ac:	2301      	movs	r3, #1
 80008ae:	0862      	lsrs	r2, r4, #1
 80008b0:	401c      	ands	r4, r3
 80008b2:	4314      	orrs	r4, r2
 80008b4:	0002      	movs	r2, r0
 80008b6:	327f      	adds	r2, #127	; 0x7f
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	dd64      	ble.n	8000986 <__aeabi_fmul+0x1ca>
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0123      	lsls	r3, r4, #4
 80008cc:	d503      	bpl.n	80008d6 <__aeabi_fmul+0x11a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <__aeabi_fmul+0x248>)
 80008d2:	3280      	adds	r2, #128	; 0x80
 80008d4:	401c      	ands	r4, r3
 80008d6:	2afe      	cmp	r2, #254	; 0xfe
 80008d8:	dcbf      	bgt.n	800085a <__aeabi_fmul+0x9e>
 80008da:	01a4      	lsls	r4, r4, #6
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	b2d0      	uxtb	r0, r2
 80008e0:	e7b2      	b.n	8000848 <__aeabi_fmul+0x8c>
 80008e2:	4643      	mov	r3, r8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d13d      	bne.n	8000964 <__aeabi_fmul+0x1a8>
 80008e8:	464a      	mov	r2, r9
 80008ea:	3301      	adds	r3, #1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	4691      	mov	r9, r2
 80008f0:	469c      	mov	ip, r3
 80008f2:	e792      	b.n	800081a <__aeabi_fmul+0x5e>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d129      	bne.n	800094c <__aeabi_fmul+0x190>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2500      	movs	r5, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e774      	b.n	80007ee <__aeabi_fmul+0x32>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d11b      	bne.n	8000940 <__aeabi_fmul+0x184>
 8000908:	2308      	movs	r3, #8
 800090a:	4699      	mov	r9, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	25ff      	movs	r5, #255	; 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e76c      	b.n	80007ee <__aeabi_fmul+0x32>
 8000914:	4643      	mov	r3, r8
 8000916:	35ff      	adds	r5, #255	; 0xff
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10b      	bne.n	8000934 <__aeabi_fmul+0x178>
 800091c:	2302      	movs	r3, #2
 800091e:	464a      	mov	r2, r9
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	469c      	mov	ip, r3
 8000926:	e778      	b.n	800081a <__aeabi_fmul+0x5e>
 8000928:	4653      	mov	r3, sl
 800092a:	0031      	movs	r1, r6
 800092c:	2b02      	cmp	r3, #2
 800092e:	d000      	beq.n	8000932 <__aeabi_fmul+0x176>
 8000930:	e783      	b.n	800083a <__aeabi_fmul+0x7e>
 8000932:	e792      	b.n	800085a <__aeabi_fmul+0x9e>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	469c      	mov	ip, r3
 800093e:	e76c      	b.n	800081a <__aeabi_fmul+0x5e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e750      	b.n	80007ee <__aeabi_fmul+0x32>
 800094c:	0020      	movs	r0, r4
 800094e:	f001 ff5f 	bl	8002810 <__clzsi2>
 8000952:	2576      	movs	r5, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409c      	lsls	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	426d      	negs	r5, r5
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a2d      	subs	r5, r5, r0
 8000962:	e744      	b.n	80007ee <__aeabi_fmul+0x32>
 8000964:	4640      	mov	r0, r8
 8000966:	f001 ff53 	bl	8002810 <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2300      	movs	r3, #0
 8000972:	1a2d      	subs	r5, r5, r0
 8000974:	4690      	mov	r8, r2
 8000976:	469c      	mov	ip, r3
 8000978:	3d76      	subs	r5, #118	; 0x76
 800097a:	e74e      	b.n	800081a <__aeabi_fmul+0x5e>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	2100      	movs	r1, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03e4      	lsls	r4, r4, #15
 8000984:	e760      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000986:	2301      	movs	r3, #1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dd00      	ble.n	8000990 <__aeabi_fmul+0x1d4>
 800098e:	e759      	b.n	8000844 <__aeabi_fmul+0x88>
 8000990:	0022      	movs	r2, r4
 8000992:	309e      	adds	r0, #158	; 0x9e
 8000994:	40da      	lsrs	r2, r3
 8000996:	4084      	lsls	r4, r0
 8000998:	0013      	movs	r3, r2
 800099a:	1e62      	subs	r2, r4, #1
 800099c:	4194      	sbcs	r4, r2
 800099e:	431c      	orrs	r4, r3
 80009a0:	0763      	lsls	r3, r4, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009a4:	230f      	movs	r3, #15
 80009a6:	4023      	ands	r3, r4
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009ac:	3404      	adds	r4, #4
 80009ae:	0163      	lsls	r3, r4, #5
 80009b0:	d51a      	bpl.n	80009e8 <__aeabi_fmul+0x22c>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	e747      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	03c0      	lsls	r0, r0, #15
 80009bc:	4204      	tst	r4, r0
 80009be:	d009      	beq.n	80009d4 <__aeabi_fmul+0x218>
 80009c0:	4643      	mov	r3, r8
 80009c2:	4203      	tst	r3, r0
 80009c4:	d106      	bne.n	80009d4 <__aeabi_fmul+0x218>
 80009c6:	4644      	mov	r4, r8
 80009c8:	4304      	orrs	r4, r0
 80009ca:	0264      	lsls	r4, r4, #9
 80009cc:	0039      	movs	r1, r7
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	0a64      	lsrs	r4, r4, #9
 80009d2:	e739      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	03c0      	lsls	r0, r0, #15
 80009d8:	4304      	orrs	r4, r0
 80009da:	0264      	lsls	r4, r4, #9
 80009dc:	0031      	movs	r1, r6
 80009de:	20ff      	movs	r0, #255	; 0xff
 80009e0:	0a64      	lsrs	r4, r4, #9
 80009e2:	e731      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009e4:	0028      	movs	r0, r5
 80009e6:	e765      	b.n	80008b4 <__aeabi_fmul+0xf8>
 80009e8:	01a4      	lsls	r4, r4, #6
 80009ea:	2000      	movs	r0, #0
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	e72b      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4304      	orrs	r4, r0
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	e724      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	0800cbd8 	.word	0x0800cbd8
 8000a04:	f7ffffff 	.word	0xf7ffffff

08000a08 <__aeabi_i2f>:
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d013      	beq.n	8000a36 <__aeabi_i2f+0x2e>
 8000a0e:	17c3      	asrs	r3, r0, #31
 8000a10:	18c6      	adds	r6, r0, r3
 8000a12:	405e      	eors	r6, r3
 8000a14:	0fc4      	lsrs	r4, r0, #31
 8000a16:	0030      	movs	r0, r6
 8000a18:	f001 fefa 	bl	8002810 <__clzsi2>
 8000a1c:	239e      	movs	r3, #158	; 0x9e
 8000a1e:	0005      	movs	r5, r0
 8000a20:	1a1b      	subs	r3, r3, r0
 8000a22:	2b96      	cmp	r3, #150	; 0x96
 8000a24:	dc0f      	bgt.n	8000a46 <__aeabi_i2f+0x3e>
 8000a26:	2808      	cmp	r0, #8
 8000a28:	dd01      	ble.n	8000a2e <__aeabi_i2f+0x26>
 8000a2a:	3d08      	subs	r5, #8
 8000a2c:	40ae      	lsls	r6, r5
 8000a2e:	0276      	lsls	r6, r6, #9
 8000a30:	0a76      	lsrs	r6, r6, #9
 8000a32:	b2d8      	uxtb	r0, r3
 8000a34:	e002      	b.n	8000a3c <__aeabi_i2f+0x34>
 8000a36:	2400      	movs	r4, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	05c0      	lsls	r0, r0, #23
 8000a3e:	4330      	orrs	r0, r6
 8000a40:	07e4      	lsls	r4, r4, #31
 8000a42:	4320      	orrs	r0, r4
 8000a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a46:	2b99      	cmp	r3, #153	; 0x99
 8000a48:	dd0c      	ble.n	8000a64 <__aeabi_i2f+0x5c>
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	0031      	movs	r1, r6
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	40d1      	lsrs	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	0001      	movs	r1, r0
 8000a56:	0030      	movs	r0, r6
 8000a58:	311b      	adds	r1, #27
 8000a5a:	4088      	lsls	r0, r1
 8000a5c:	1e41      	subs	r1, r0, #1
 8000a5e:	4188      	sbcs	r0, r1
 8000a60:	4302      	orrs	r2, r0
 8000a62:	0016      	movs	r6, r2
 8000a64:	2d05      	cmp	r5, #5
 8000a66:	dc12      	bgt.n	8000a8e <__aeabi_i2f+0x86>
 8000a68:	0031      	movs	r1, r6
 8000a6a:	4f0d      	ldr	r7, [pc, #52]	; (8000aa0 <__aeabi_i2f+0x98>)
 8000a6c:	4039      	ands	r1, r7
 8000a6e:	0772      	lsls	r2, r6, #29
 8000a70:	d009      	beq.n	8000a86 <__aeabi_i2f+0x7e>
 8000a72:	200f      	movs	r0, #15
 8000a74:	4030      	ands	r0, r6
 8000a76:	2804      	cmp	r0, #4
 8000a78:	d005      	beq.n	8000a86 <__aeabi_i2f+0x7e>
 8000a7a:	3104      	adds	r1, #4
 8000a7c:	014a      	lsls	r2, r1, #5
 8000a7e:	d502      	bpl.n	8000a86 <__aeabi_i2f+0x7e>
 8000a80:	239f      	movs	r3, #159	; 0x9f
 8000a82:	4039      	ands	r1, r7
 8000a84:	1b5b      	subs	r3, r3, r5
 8000a86:	0189      	lsls	r1, r1, #6
 8000a88:	0a4e      	lsrs	r6, r1, #9
 8000a8a:	b2d8      	uxtb	r0, r3
 8000a8c:	e7d6      	b.n	8000a3c <__aeabi_i2f+0x34>
 8000a8e:	1f6a      	subs	r2, r5, #5
 8000a90:	4096      	lsls	r6, r2
 8000a92:	0031      	movs	r1, r6
 8000a94:	4f02      	ldr	r7, [pc, #8]	; (8000aa0 <__aeabi_i2f+0x98>)
 8000a96:	4039      	ands	r1, r7
 8000a98:	0772      	lsls	r2, r6, #29
 8000a9a:	d0f4      	beq.n	8000a86 <__aeabi_i2f+0x7e>
 8000a9c:	e7e9      	b.n	8000a72 <__aeabi_i2f+0x6a>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	fbffffff 	.word	0xfbffffff

08000aa4 <__aeabi_dadd>:
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	464f      	mov	r7, r9
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	46d6      	mov	lr, sl
 8000aac:	000d      	movs	r5, r1
 8000aae:	0004      	movs	r4, r0
 8000ab0:	b5c0      	push	{r6, r7, lr}
 8000ab2:	001f      	movs	r7, r3
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0328      	lsls	r0, r5, #12
 8000ab8:	0f62      	lsrs	r2, r4, #29
 8000aba:	0a40      	lsrs	r0, r0, #9
 8000abc:	4310      	orrs	r0, r2
 8000abe:	007a      	lsls	r2, r7, #1
 8000ac0:	0d52      	lsrs	r2, r2, #21
 8000ac2:	00e3      	lsls	r3, r4, #3
 8000ac4:	033c      	lsls	r4, r7, #12
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	0ffa      	lsrs	r2, r7, #31
 8000acc:	0f4f      	lsrs	r7, r1, #29
 8000ace:	006e      	lsls	r6, r5, #1
 8000ad0:	4327      	orrs	r7, r4
 8000ad2:	4692      	mov	sl, r2
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	0d76      	lsrs	r6, r6, #21
 8000ad8:	0fed      	lsrs	r5, r5, #31
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	4295      	cmp	r5, r2
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x3e>
 8000ae0:	e099      	b.n	8000c16 <__aeabi_dadd+0x172>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	1b34      	subs	r4, r6, r4
 8000ae6:	46a4      	mov	ip, r4
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_dadd+0x4a>
 8000aec:	e07c      	b.n	8000be8 <__aeabi_dadd+0x144>
 8000aee:	464a      	mov	r2, r9
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x52>
 8000af4:	e0b8      	b.n	8000c68 <__aeabi_dadd+0x1c4>
 8000af6:	4ac5      	ldr	r2, [pc, #788]	; (8000e0c <__aeabi_dadd+0x368>)
 8000af8:	4296      	cmp	r6, r2
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x5a>
 8000afc:	e11c      	b.n	8000d38 <__aeabi_dadd+0x294>
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	003c      	movs	r4, r7
 8000b02:	0412      	lsls	r2, r2, #16
 8000b04:	4314      	orrs	r4, r2
 8000b06:	46a0      	mov	r8, r4
 8000b08:	4662      	mov	r2, ip
 8000b0a:	2a38      	cmp	r2, #56	; 0x38
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_dadd+0x6c>
 8000b0e:	e161      	b.n	8000dd4 <__aeabi_dadd+0x330>
 8000b10:	2a1f      	cmp	r2, #31
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_dadd+0x72>
 8000b14:	e1cc      	b.n	8000eb0 <__aeabi_dadd+0x40c>
 8000b16:	4664      	mov	r4, ip
 8000b18:	2220      	movs	r2, #32
 8000b1a:	1b12      	subs	r2, r2, r4
 8000b1c:	4644      	mov	r4, r8
 8000b1e:	4094      	lsls	r4, r2
 8000b20:	000f      	movs	r7, r1
 8000b22:	46a1      	mov	r9, r4
 8000b24:	4664      	mov	r4, ip
 8000b26:	4091      	lsls	r1, r2
 8000b28:	40e7      	lsrs	r7, r4
 8000b2a:	464c      	mov	r4, r9
 8000b2c:	1e4a      	subs	r2, r1, #1
 8000b2e:	4191      	sbcs	r1, r2
 8000b30:	433c      	orrs	r4, r7
 8000b32:	4642      	mov	r2, r8
 8000b34:	4321      	orrs	r1, r4
 8000b36:	4664      	mov	r4, ip
 8000b38:	40e2      	lsrs	r2, r4
 8000b3a:	1a80      	subs	r0, r0, r2
 8000b3c:	1a5c      	subs	r4, r3, r1
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	419b      	sbcs	r3, r3
 8000b42:	425f      	negs	r7, r3
 8000b44:	1bc7      	subs	r7, r0, r7
 8000b46:	023b      	lsls	r3, r7, #8
 8000b48:	d400      	bmi.n	8000b4c <__aeabi_dadd+0xa8>
 8000b4a:	e0d0      	b.n	8000cee <__aeabi_dadd+0x24a>
 8000b4c:	027f      	lsls	r7, r7, #9
 8000b4e:	0a7f      	lsrs	r7, r7, #9
 8000b50:	2f00      	cmp	r7, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0xb2>
 8000b54:	e0ff      	b.n	8000d56 <__aeabi_dadd+0x2b2>
 8000b56:	0038      	movs	r0, r7
 8000b58:	f001 fe5a 	bl	8002810 <__clzsi2>
 8000b5c:	0001      	movs	r1, r0
 8000b5e:	3908      	subs	r1, #8
 8000b60:	2320      	movs	r3, #32
 8000b62:	0022      	movs	r2, r4
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	408f      	lsls	r7, r1
 8000b68:	40da      	lsrs	r2, r3
 8000b6a:	408c      	lsls	r4, r1
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	42b1      	cmp	r1, r6
 8000b70:	da00      	bge.n	8000b74 <__aeabi_dadd+0xd0>
 8000b72:	e0ff      	b.n	8000d74 <__aeabi_dadd+0x2d0>
 8000b74:	1b89      	subs	r1, r1, r6
 8000b76:	1c4b      	adds	r3, r1, #1
 8000b78:	2b1f      	cmp	r3, #31
 8000b7a:	dd00      	ble.n	8000b7e <__aeabi_dadd+0xda>
 8000b7c:	e0a8      	b.n	8000cd0 <__aeabi_dadd+0x22c>
 8000b7e:	2220      	movs	r2, #32
 8000b80:	0039      	movs	r1, r7
 8000b82:	1ad2      	subs	r2, r2, r3
 8000b84:	0020      	movs	r0, r4
 8000b86:	4094      	lsls	r4, r2
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	40d8      	lsrs	r0, r3
 8000b8c:	1e62      	subs	r2, r4, #1
 8000b8e:	4194      	sbcs	r4, r2
 8000b90:	40df      	lsrs	r7, r3
 8000b92:	2600      	movs	r6, #0
 8000b94:	4301      	orrs	r1, r0
 8000b96:	430c      	orrs	r4, r1
 8000b98:	0763      	lsls	r3, r4, #29
 8000b9a:	d009      	beq.n	8000bb0 <__aeabi_dadd+0x10c>
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	4023      	ands	r3, r4
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d005      	beq.n	8000bb0 <__aeabi_dadd+0x10c>
 8000ba4:	1d23      	adds	r3, r4, #4
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	41a4      	sbcs	r4, r4
 8000baa:	4264      	negs	r4, r4
 8000bac:	193f      	adds	r7, r7, r4
 8000bae:	001c      	movs	r4, r3
 8000bb0:	023b      	lsls	r3, r7, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x112>
 8000bb4:	e09e      	b.n	8000cf4 <__aeabi_dadd+0x250>
 8000bb6:	4b95      	ldr	r3, [pc, #596]	; (8000e0c <__aeabi_dadd+0x368>)
 8000bb8:	3601      	adds	r6, #1
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x11c>
 8000bbe:	e0b7      	b.n	8000d30 <__aeabi_dadd+0x28c>
 8000bc0:	4a93      	ldr	r2, [pc, #588]	; (8000e10 <__aeabi_dadd+0x36c>)
 8000bc2:	08e4      	lsrs	r4, r4, #3
 8000bc4:	4017      	ands	r7, r2
 8000bc6:	077b      	lsls	r3, r7, #29
 8000bc8:	0571      	lsls	r1, r6, #21
 8000bca:	027f      	lsls	r7, r7, #9
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	0b3f      	lsrs	r7, r7, #12
 8000bd0:	0d4a      	lsrs	r2, r1, #21
 8000bd2:	0512      	lsls	r2, r2, #20
 8000bd4:	433a      	orrs	r2, r7
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	432a      	orrs	r2, r5
 8000bda:	0018      	movs	r0, r3
 8000bdc:	0011      	movs	r1, r2
 8000bde:	bce0      	pop	{r5, r6, r7}
 8000be0:	46ba      	mov	sl, r7
 8000be2:	46b1      	mov	r9, r6
 8000be4:	46a8      	mov	r8, r5
 8000be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d04b      	beq.n	8000c84 <__aeabi_dadd+0x1e0>
 8000bec:	464c      	mov	r4, r9
 8000bee:	1ba4      	subs	r4, r4, r6
 8000bf0:	46a4      	mov	ip, r4
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dadd+0x154>
 8000bf6:	e123      	b.n	8000e40 <__aeabi_dadd+0x39c>
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x15c>
 8000bfe:	e1af      	b.n	8000f60 <__aeabi_dadd+0x4bc>
 8000c00:	4662      	mov	r2, ip
 8000c02:	1e54      	subs	r4, r2, #1
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x166>
 8000c08:	e215      	b.n	8001036 <__aeabi_dadd+0x592>
 8000c0a:	4d80      	ldr	r5, [pc, #512]	; (8000e0c <__aeabi_dadd+0x368>)
 8000c0c:	45ac      	cmp	ip, r5
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x16e>
 8000c10:	e1c8      	b.n	8000fa4 <__aeabi_dadd+0x500>
 8000c12:	46a4      	mov	ip, r4
 8000c14:	e11b      	b.n	8000e4e <__aeabi_dadd+0x3aa>
 8000c16:	464a      	mov	r2, r9
 8000c18:	1ab2      	subs	r2, r6, r2
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_dadd+0x17e>
 8000c20:	e0ac      	b.n	8000d7c <__aeabi_dadd+0x2d8>
 8000c22:	464a      	mov	r2, r9
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d043      	beq.n	8000cb0 <__aeabi_dadd+0x20c>
 8000c28:	4a78      	ldr	r2, [pc, #480]	; (8000e0c <__aeabi_dadd+0x368>)
 8000c2a:	4296      	cmp	r6, r2
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x18c>
 8000c2e:	e1af      	b.n	8000f90 <__aeabi_dadd+0x4ec>
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	003c      	movs	r4, r7
 8000c34:	0412      	lsls	r2, r2, #16
 8000c36:	4314      	orrs	r4, r2
 8000c38:	46a0      	mov	r8, r4
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	2a38      	cmp	r2, #56	; 0x38
 8000c3e:	dc67      	bgt.n	8000d10 <__aeabi_dadd+0x26c>
 8000c40:	2a1f      	cmp	r2, #31
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_dadd+0x1a2>
 8000c44:	e15f      	b.n	8000f06 <__aeabi_dadd+0x462>
 8000c46:	4647      	mov	r7, r8
 8000c48:	3a20      	subs	r2, #32
 8000c4a:	40d7      	lsrs	r7, r2
 8000c4c:	4662      	mov	r2, ip
 8000c4e:	2a20      	cmp	r2, #32
 8000c50:	d005      	beq.n	8000c5e <__aeabi_dadd+0x1ba>
 8000c52:	4664      	mov	r4, ip
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	1b12      	subs	r2, r2, r4
 8000c58:	4644      	mov	r4, r8
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	4321      	orrs	r1, r4
 8000c5e:	1e4a      	subs	r2, r1, #1
 8000c60:	4191      	sbcs	r1, r2
 8000c62:	000c      	movs	r4, r1
 8000c64:	433c      	orrs	r4, r7
 8000c66:	e057      	b.n	8000d18 <__aeabi_dadd+0x274>
 8000c68:	003a      	movs	r2, r7
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x1cc>
 8000c6e:	e105      	b.n	8000e7c <__aeabi_dadd+0x3d8>
 8000c70:	0022      	movs	r2, r4
 8000c72:	3a01      	subs	r2, #1
 8000c74:	2c01      	cmp	r4, #1
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0x1d6>
 8000c78:	e182      	b.n	8000f80 <__aeabi_dadd+0x4dc>
 8000c7a:	4c64      	ldr	r4, [pc, #400]	; (8000e0c <__aeabi_dadd+0x368>)
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d05b      	beq.n	8000d38 <__aeabi_dadd+0x294>
 8000c80:	4694      	mov	ip, r2
 8000c82:	e741      	b.n	8000b08 <__aeabi_dadd+0x64>
 8000c84:	4c63      	ldr	r4, [pc, #396]	; (8000e14 <__aeabi_dadd+0x370>)
 8000c86:	1c77      	adds	r7, r6, #1
 8000c88:	4227      	tst	r7, r4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x1ea>
 8000c8c:	e0c4      	b.n	8000e18 <__aeabi_dadd+0x374>
 8000c8e:	0004      	movs	r4, r0
 8000c90:	431c      	orrs	r4, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d000      	beq.n	8000c98 <__aeabi_dadd+0x1f4>
 8000c96:	e169      	b.n	8000f6c <__aeabi_dadd+0x4c8>
 8000c98:	2c00      	cmp	r4, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x1fa>
 8000c9c:	e1bf      	b.n	800101e <__aeabi_dadd+0x57a>
 8000c9e:	4644      	mov	r4, r8
 8000ca0:	430c      	orrs	r4, r1
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x202>
 8000ca4:	e1d0      	b.n	8001048 <__aeabi_dadd+0x5a4>
 8000ca6:	0742      	lsls	r2, r0, #29
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	08c0      	lsrs	r0, r0, #3
 8000cae:	e029      	b.n	8000d04 <__aeabi_dadd+0x260>
 8000cb0:	003a      	movs	r2, r7
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x214>
 8000cb6:	e170      	b.n	8000f9a <__aeabi_dadd+0x4f6>
 8000cb8:	4662      	mov	r2, ip
 8000cba:	4664      	mov	r4, ip
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	2c01      	cmp	r4, #1
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x220>
 8000cc2:	e0e0      	b.n	8000e86 <__aeabi_dadd+0x3e2>
 8000cc4:	4c51      	ldr	r4, [pc, #324]	; (8000e0c <__aeabi_dadd+0x368>)
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0x228>
 8000cca:	e161      	b.n	8000f90 <__aeabi_dadd+0x4ec>
 8000ccc:	4694      	mov	ip, r2
 8000cce:	e7b4      	b.n	8000c3a <__aeabi_dadd+0x196>
 8000cd0:	003a      	movs	r2, r7
 8000cd2:	391f      	subs	r1, #31
 8000cd4:	40ca      	lsrs	r2, r1
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	d003      	beq.n	8000ce4 <__aeabi_dadd+0x240>
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	433c      	orrs	r4, r7
 8000ce4:	1e63      	subs	r3, r4, #1
 8000ce6:	419c      	sbcs	r4, r3
 8000ce8:	2700      	movs	r7, #0
 8000cea:	2600      	movs	r6, #0
 8000cec:	430c      	orrs	r4, r1
 8000cee:	0763      	lsls	r3, r4, #29
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_dadd+0x250>
 8000cf2:	e753      	b.n	8000b9c <__aeabi_dadd+0xf8>
 8000cf4:	46b4      	mov	ip, r6
 8000cf6:	08e4      	lsrs	r4, r4, #3
 8000cf8:	077b      	lsls	r3, r7, #29
 8000cfa:	4323      	orrs	r3, r4
 8000cfc:	08f8      	lsrs	r0, r7, #3
 8000cfe:	4a43      	ldr	r2, [pc, #268]	; (8000e0c <__aeabi_dadd+0x368>)
 8000d00:	4594      	cmp	ip, r2
 8000d02:	d01d      	beq.n	8000d40 <__aeabi_dadd+0x29c>
 8000d04:	4662      	mov	r2, ip
 8000d06:	0307      	lsls	r7, r0, #12
 8000d08:	0552      	lsls	r2, r2, #21
 8000d0a:	0b3f      	lsrs	r7, r7, #12
 8000d0c:	0d52      	lsrs	r2, r2, #21
 8000d0e:	e760      	b.n	8000bd2 <__aeabi_dadd+0x12e>
 8000d10:	4644      	mov	r4, r8
 8000d12:	430c      	orrs	r4, r1
 8000d14:	1e62      	subs	r2, r4, #1
 8000d16:	4194      	sbcs	r4, r2
 8000d18:	18e4      	adds	r4, r4, r3
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	419b      	sbcs	r3, r3
 8000d1e:	425f      	negs	r7, r3
 8000d20:	183f      	adds	r7, r7, r0
 8000d22:	023b      	lsls	r3, r7, #8
 8000d24:	d5e3      	bpl.n	8000cee <__aeabi_dadd+0x24a>
 8000d26:	4b39      	ldr	r3, [pc, #228]	; (8000e0c <__aeabi_dadd+0x368>)
 8000d28:	3601      	adds	r6, #1
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	d000      	beq.n	8000d30 <__aeabi_dadd+0x28c>
 8000d2e:	e0b5      	b.n	8000e9c <__aeabi_dadd+0x3f8>
 8000d30:	0032      	movs	r2, r6
 8000d32:	2700      	movs	r7, #0
 8000d34:	2300      	movs	r3, #0
 8000d36:	e74c      	b.n	8000bd2 <__aeabi_dadd+0x12e>
 8000d38:	0742      	lsls	r2, r0, #29
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	08c0      	lsrs	r0, r0, #3
 8000d40:	001a      	movs	r2, r3
 8000d42:	4302      	orrs	r2, r0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x2a4>
 8000d46:	e1e1      	b.n	800110c <__aeabi_dadd+0x668>
 8000d48:	2780      	movs	r7, #128	; 0x80
 8000d4a:	033f      	lsls	r7, r7, #12
 8000d4c:	4307      	orrs	r7, r0
 8000d4e:	033f      	lsls	r7, r7, #12
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <__aeabi_dadd+0x368>)
 8000d52:	0b3f      	lsrs	r7, r7, #12
 8000d54:	e73d      	b.n	8000bd2 <__aeabi_dadd+0x12e>
 8000d56:	0020      	movs	r0, r4
 8000d58:	f001 fd5a 	bl	8002810 <__clzsi2>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	3118      	adds	r1, #24
 8000d60:	291f      	cmp	r1, #31
 8000d62:	dc00      	bgt.n	8000d66 <__aeabi_dadd+0x2c2>
 8000d64:	e6fc      	b.n	8000b60 <__aeabi_dadd+0xbc>
 8000d66:	3808      	subs	r0, #8
 8000d68:	4084      	lsls	r4, r0
 8000d6a:	0027      	movs	r7, r4
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	42b1      	cmp	r1, r6
 8000d70:	db00      	blt.n	8000d74 <__aeabi_dadd+0x2d0>
 8000d72:	e6ff      	b.n	8000b74 <__aeabi_dadd+0xd0>
 8000d74:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <__aeabi_dadd+0x36c>)
 8000d76:	1a76      	subs	r6, r6, r1
 8000d78:	4017      	ands	r7, r2
 8000d7a:	e70d      	b.n	8000b98 <__aeabi_dadd+0xf4>
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d02f      	beq.n	8000de0 <__aeabi_dadd+0x33c>
 8000d80:	464a      	mov	r2, r9
 8000d82:	1b92      	subs	r2, r2, r6
 8000d84:	4694      	mov	ip, r2
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x2e8>
 8000d8a:	e0ad      	b.n	8000ee8 <__aeabi_dadd+0x444>
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <__aeabi_dadd+0x368>)
 8000d8e:	4591      	cmp	r9, r2
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x2f0>
 8000d92:	e10f      	b.n	8000fb4 <__aeabi_dadd+0x510>
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	0412      	lsls	r2, r2, #16
 8000d98:	4310      	orrs	r0, r2
 8000d9a:	4662      	mov	r2, ip
 8000d9c:	2a38      	cmp	r2, #56	; 0x38
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_dadd+0x2fe>
 8000da0:	e10f      	b.n	8000fc2 <__aeabi_dadd+0x51e>
 8000da2:	2a1f      	cmp	r2, #31
 8000da4:	dd00      	ble.n	8000da8 <__aeabi_dadd+0x304>
 8000da6:	e180      	b.n	80010aa <__aeabi_dadd+0x606>
 8000da8:	4664      	mov	r4, ip
 8000daa:	2220      	movs	r2, #32
 8000dac:	001e      	movs	r6, r3
 8000dae:	1b12      	subs	r2, r2, r4
 8000db0:	4667      	mov	r7, ip
 8000db2:	0004      	movs	r4, r0
 8000db4:	4093      	lsls	r3, r2
 8000db6:	4094      	lsls	r4, r2
 8000db8:	40fe      	lsrs	r6, r7
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	4193      	sbcs	r3, r2
 8000dbe:	40f8      	lsrs	r0, r7
 8000dc0:	4334      	orrs	r4, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	4480      	add	r8, r0
 8000dc6:	1864      	adds	r4, r4, r1
 8000dc8:	428c      	cmp	r4, r1
 8000dca:	41bf      	sbcs	r7, r7
 8000dcc:	427f      	negs	r7, r7
 8000dce:	464e      	mov	r6, r9
 8000dd0:	4447      	add	r7, r8
 8000dd2:	e7a6      	b.n	8000d22 <__aeabi_dadd+0x27e>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	0011      	movs	r1, r2
 8000dda:	1e4a      	subs	r2, r1, #1
 8000ddc:	4191      	sbcs	r1, r2
 8000dde:	e6ad      	b.n	8000b3c <__aeabi_dadd+0x98>
 8000de0:	4c0c      	ldr	r4, [pc, #48]	; (8000e14 <__aeabi_dadd+0x370>)
 8000de2:	1c72      	adds	r2, r6, #1
 8000de4:	4222      	tst	r2, r4
 8000de6:	d000      	beq.n	8000dea <__aeabi_dadd+0x346>
 8000de8:	e0a1      	b.n	8000f2e <__aeabi_dadd+0x48a>
 8000dea:	0002      	movs	r2, r0
 8000dec:	431a      	orrs	r2, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_dadd+0x350>
 8000df2:	e0fa      	b.n	8000fea <__aeabi_dadd+0x546>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dadd+0x356>
 8000df8:	e145      	b.n	8001086 <__aeabi_dadd+0x5e2>
 8000dfa:	003a      	movs	r2, r7
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x35e>
 8000e00:	e146      	b.n	8001090 <__aeabi_dadd+0x5ec>
 8000e02:	0742      	lsls	r2, r0, #29
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	08c0      	lsrs	r0, r0, #3
 8000e0a:	e77b      	b.n	8000d04 <__aeabi_dadd+0x260>
 8000e0c:	000007ff 	.word	0x000007ff
 8000e10:	ff7fffff 	.word	0xff7fffff
 8000e14:	000007fe 	.word	0x000007fe
 8000e18:	4647      	mov	r7, r8
 8000e1a:	1a5c      	subs	r4, r3, r1
 8000e1c:	1bc2      	subs	r2, r0, r7
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	41bf      	sbcs	r7, r7
 8000e22:	427f      	negs	r7, r7
 8000e24:	46b9      	mov	r9, r7
 8000e26:	0017      	movs	r7, r2
 8000e28:	464a      	mov	r2, r9
 8000e2a:	1abf      	subs	r7, r7, r2
 8000e2c:	023a      	lsls	r2, r7, #8
 8000e2e:	d500      	bpl.n	8000e32 <__aeabi_dadd+0x38e>
 8000e30:	e08d      	b.n	8000f4e <__aeabi_dadd+0x4aa>
 8000e32:	0023      	movs	r3, r4
 8000e34:	433b      	orrs	r3, r7
 8000e36:	d000      	beq.n	8000e3a <__aeabi_dadd+0x396>
 8000e38:	e68a      	b.n	8000b50 <__aeabi_dadd+0xac>
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	e761      	b.n	8000d04 <__aeabi_dadd+0x260>
 8000e40:	4cb4      	ldr	r4, [pc, #720]	; (8001114 <__aeabi_dadd+0x670>)
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x3a4>
 8000e46:	e0ad      	b.n	8000fa4 <__aeabi_dadd+0x500>
 8000e48:	2480      	movs	r4, #128	; 0x80
 8000e4a:	0424      	lsls	r4, r4, #16
 8000e4c:	4320      	orrs	r0, r4
 8000e4e:	4664      	mov	r4, ip
 8000e50:	2c38      	cmp	r4, #56	; 0x38
 8000e52:	dc3d      	bgt.n	8000ed0 <__aeabi_dadd+0x42c>
 8000e54:	4662      	mov	r2, ip
 8000e56:	2c1f      	cmp	r4, #31
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dadd+0x3b8>
 8000e5a:	e0b7      	b.n	8000fcc <__aeabi_dadd+0x528>
 8000e5c:	2520      	movs	r5, #32
 8000e5e:	001e      	movs	r6, r3
 8000e60:	1b2d      	subs	r5, r5, r4
 8000e62:	0004      	movs	r4, r0
 8000e64:	40ab      	lsls	r3, r5
 8000e66:	40ac      	lsls	r4, r5
 8000e68:	40d6      	lsrs	r6, r2
 8000e6a:	40d0      	lsrs	r0, r2
 8000e6c:	4642      	mov	r2, r8
 8000e6e:	1e5d      	subs	r5, r3, #1
 8000e70:	41ab      	sbcs	r3, r5
 8000e72:	4334      	orrs	r4, r6
 8000e74:	1a12      	subs	r2, r2, r0
 8000e76:	4690      	mov	r8, r2
 8000e78:	4323      	orrs	r3, r4
 8000e7a:	e02c      	b.n	8000ed6 <__aeabi_dadd+0x432>
 8000e7c:	0742      	lsls	r2, r0, #29
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	08c0      	lsrs	r0, r0, #3
 8000e84:	e73b      	b.n	8000cfe <__aeabi_dadd+0x25a>
 8000e86:	185c      	adds	r4, r3, r1
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	419b      	sbcs	r3, r3
 8000e8c:	4440      	add	r0, r8
 8000e8e:	425b      	negs	r3, r3
 8000e90:	18c7      	adds	r7, r0, r3
 8000e92:	2601      	movs	r6, #1
 8000e94:	023b      	lsls	r3, r7, #8
 8000e96:	d400      	bmi.n	8000e9a <__aeabi_dadd+0x3f6>
 8000e98:	e729      	b.n	8000cee <__aeabi_dadd+0x24a>
 8000e9a:	2602      	movs	r6, #2
 8000e9c:	4a9e      	ldr	r2, [pc, #632]	; (8001118 <__aeabi_dadd+0x674>)
 8000e9e:	0863      	lsrs	r3, r4, #1
 8000ea0:	4017      	ands	r7, r2
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4014      	ands	r4, r2
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	07fb      	lsls	r3, r7, #31
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	087f      	lsrs	r7, r7, #1
 8000eae:	e673      	b.n	8000b98 <__aeabi_dadd+0xf4>
 8000eb0:	4644      	mov	r4, r8
 8000eb2:	3a20      	subs	r2, #32
 8000eb4:	40d4      	lsrs	r4, r2
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	2a20      	cmp	r2, #32
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_dadd+0x424>
 8000ebc:	4667      	mov	r7, ip
 8000ebe:	2240      	movs	r2, #64	; 0x40
 8000ec0:	1bd2      	subs	r2, r2, r7
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	4097      	lsls	r7, r2
 8000ec6:	4339      	orrs	r1, r7
 8000ec8:	1e4a      	subs	r2, r1, #1
 8000eca:	4191      	sbcs	r1, r2
 8000ecc:	4321      	orrs	r1, r4
 8000ece:	e635      	b.n	8000b3c <__aeabi_dadd+0x98>
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	1e58      	subs	r0, r3, #1
 8000ed4:	4183      	sbcs	r3, r0
 8000ed6:	1acc      	subs	r4, r1, r3
 8000ed8:	42a1      	cmp	r1, r4
 8000eda:	41bf      	sbcs	r7, r7
 8000edc:	4643      	mov	r3, r8
 8000ede:	427f      	negs	r7, r7
 8000ee0:	4655      	mov	r5, sl
 8000ee2:	464e      	mov	r6, r9
 8000ee4:	1bdf      	subs	r7, r3, r7
 8000ee6:	e62e      	b.n	8000b46 <__aeabi_dadd+0xa2>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	431a      	orrs	r2, r3
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x44c>
 8000eee:	e0bd      	b.n	800106c <__aeabi_dadd+0x5c8>
 8000ef0:	4662      	mov	r2, ip
 8000ef2:	4664      	mov	r4, ip
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	2c01      	cmp	r4, #1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x458>
 8000efa:	e0e5      	b.n	80010c8 <__aeabi_dadd+0x624>
 8000efc:	4c85      	ldr	r4, [pc, #532]	; (8001114 <__aeabi_dadd+0x670>)
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d058      	beq.n	8000fb4 <__aeabi_dadd+0x510>
 8000f02:	4694      	mov	ip, r2
 8000f04:	e749      	b.n	8000d9a <__aeabi_dadd+0x2f6>
 8000f06:	4664      	mov	r4, ip
 8000f08:	2220      	movs	r2, #32
 8000f0a:	1b12      	subs	r2, r2, r4
 8000f0c:	4644      	mov	r4, r8
 8000f0e:	4094      	lsls	r4, r2
 8000f10:	000f      	movs	r7, r1
 8000f12:	46a1      	mov	r9, r4
 8000f14:	4664      	mov	r4, ip
 8000f16:	4091      	lsls	r1, r2
 8000f18:	40e7      	lsrs	r7, r4
 8000f1a:	464c      	mov	r4, r9
 8000f1c:	1e4a      	subs	r2, r1, #1
 8000f1e:	4191      	sbcs	r1, r2
 8000f20:	433c      	orrs	r4, r7
 8000f22:	4642      	mov	r2, r8
 8000f24:	430c      	orrs	r4, r1
 8000f26:	4661      	mov	r1, ip
 8000f28:	40ca      	lsrs	r2, r1
 8000f2a:	1880      	adds	r0, r0, r2
 8000f2c:	e6f4      	b.n	8000d18 <__aeabi_dadd+0x274>
 8000f2e:	4c79      	ldr	r4, [pc, #484]	; (8001114 <__aeabi_dadd+0x670>)
 8000f30:	42a2      	cmp	r2, r4
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x492>
 8000f34:	e6fd      	b.n	8000d32 <__aeabi_dadd+0x28e>
 8000f36:	1859      	adds	r1, r3, r1
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	419b      	sbcs	r3, r3
 8000f3c:	4440      	add	r0, r8
 8000f3e:	425f      	negs	r7, r3
 8000f40:	19c7      	adds	r7, r0, r7
 8000f42:	07fc      	lsls	r4, r7, #31
 8000f44:	0849      	lsrs	r1, r1, #1
 8000f46:	0016      	movs	r6, r2
 8000f48:	430c      	orrs	r4, r1
 8000f4a:	087f      	lsrs	r7, r7, #1
 8000f4c:	e6cf      	b.n	8000cee <__aeabi_dadd+0x24a>
 8000f4e:	1acc      	subs	r4, r1, r3
 8000f50:	42a1      	cmp	r1, r4
 8000f52:	41bf      	sbcs	r7, r7
 8000f54:	4643      	mov	r3, r8
 8000f56:	427f      	negs	r7, r7
 8000f58:	1a18      	subs	r0, r3, r0
 8000f5a:	4655      	mov	r5, sl
 8000f5c:	1bc7      	subs	r7, r0, r7
 8000f5e:	e5f7      	b.n	8000b50 <__aeabi_dadd+0xac>
 8000f60:	08c9      	lsrs	r1, r1, #3
 8000f62:	077b      	lsls	r3, r7, #29
 8000f64:	4655      	mov	r5, sl
 8000f66:	430b      	orrs	r3, r1
 8000f68:	08f8      	lsrs	r0, r7, #3
 8000f6a:	e6c8      	b.n	8000cfe <__aeabi_dadd+0x25a>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_dadd+0x4ce>
 8000f70:	e081      	b.n	8001076 <__aeabi_dadd+0x5d2>
 8000f72:	4643      	mov	r3, r8
 8000f74:	430b      	orrs	r3, r1
 8000f76:	d115      	bne.n	8000fa4 <__aeabi_dadd+0x500>
 8000f78:	2080      	movs	r0, #128	; 0x80
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	0300      	lsls	r0, r0, #12
 8000f7e:	e6e3      	b.n	8000d48 <__aeabi_dadd+0x2a4>
 8000f80:	1a5c      	subs	r4, r3, r1
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	419b      	sbcs	r3, r3
 8000f86:	1bc7      	subs	r7, r0, r7
 8000f88:	425b      	negs	r3, r3
 8000f8a:	2601      	movs	r6, #1
 8000f8c:	1aff      	subs	r7, r7, r3
 8000f8e:	e5da      	b.n	8000b46 <__aeabi_dadd+0xa2>
 8000f90:	0742      	lsls	r2, r0, #29
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	08c0      	lsrs	r0, r0, #3
 8000f98:	e6d2      	b.n	8000d40 <__aeabi_dadd+0x29c>
 8000f9a:	0742      	lsls	r2, r0, #29
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	08c0      	lsrs	r0, r0, #3
 8000fa2:	e6ac      	b.n	8000cfe <__aeabi_dadd+0x25a>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	08c9      	lsrs	r1, r1, #3
 8000faa:	075b      	lsls	r3, r3, #29
 8000fac:	4655      	mov	r5, sl
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	08d0      	lsrs	r0, r2, #3
 8000fb2:	e6c5      	b.n	8000d40 <__aeabi_dadd+0x29c>
 8000fb4:	4643      	mov	r3, r8
 8000fb6:	4642      	mov	r2, r8
 8000fb8:	075b      	lsls	r3, r3, #29
 8000fba:	08c9      	lsrs	r1, r1, #3
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	08d0      	lsrs	r0, r2, #3
 8000fc0:	e6be      	b.n	8000d40 <__aeabi_dadd+0x29c>
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	001c      	movs	r4, r3
 8000fc6:	1e63      	subs	r3, r4, #1
 8000fc8:	419c      	sbcs	r4, r3
 8000fca:	e6fc      	b.n	8000dc6 <__aeabi_dadd+0x322>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	3c20      	subs	r4, #32
 8000fd0:	40e2      	lsrs	r2, r4
 8000fd2:	0014      	movs	r4, r2
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	2a20      	cmp	r2, #32
 8000fd8:	d003      	beq.n	8000fe2 <__aeabi_dadd+0x53e>
 8000fda:	2540      	movs	r5, #64	; 0x40
 8000fdc:	1aad      	subs	r5, r5, r2
 8000fde:	40a8      	lsls	r0, r5
 8000fe0:	4303      	orrs	r3, r0
 8000fe2:	1e58      	subs	r0, r3, #1
 8000fe4:	4183      	sbcs	r3, r0
 8000fe6:	4323      	orrs	r3, r4
 8000fe8:	e775      	b.n	8000ed6 <__aeabi_dadd+0x432>
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d0e2      	beq.n	8000fb4 <__aeabi_dadd+0x510>
 8000fee:	003a      	movs	r2, r7
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	d0cd      	beq.n	8000f90 <__aeabi_dadd+0x4ec>
 8000ff4:	0742      	lsls	r2, r0, #29
 8000ff6:	08db      	lsrs	r3, r3, #3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	08c0      	lsrs	r0, r0, #3
 8000ffe:	0312      	lsls	r2, r2, #12
 8001000:	4210      	tst	r0, r2
 8001002:	d006      	beq.n	8001012 <__aeabi_dadd+0x56e>
 8001004:	08fc      	lsrs	r4, r7, #3
 8001006:	4214      	tst	r4, r2
 8001008:	d103      	bne.n	8001012 <__aeabi_dadd+0x56e>
 800100a:	0020      	movs	r0, r4
 800100c:	08cb      	lsrs	r3, r1, #3
 800100e:	077a      	lsls	r2, r7, #29
 8001010:	4313      	orrs	r3, r2
 8001012:	0f5a      	lsrs	r2, r3, #29
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	0752      	lsls	r2, r2, #29
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	4313      	orrs	r3, r2
 800101c:	e690      	b.n	8000d40 <__aeabi_dadd+0x29c>
 800101e:	4643      	mov	r3, r8
 8001020:	430b      	orrs	r3, r1
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x582>
 8001024:	e709      	b.n	8000e3a <__aeabi_dadd+0x396>
 8001026:	4643      	mov	r3, r8
 8001028:	4642      	mov	r2, r8
 800102a:	08c9      	lsrs	r1, r1, #3
 800102c:	075b      	lsls	r3, r3, #29
 800102e:	4655      	mov	r5, sl
 8001030:	430b      	orrs	r3, r1
 8001032:	08d0      	lsrs	r0, r2, #3
 8001034:	e666      	b.n	8000d04 <__aeabi_dadd+0x260>
 8001036:	1acc      	subs	r4, r1, r3
 8001038:	42a1      	cmp	r1, r4
 800103a:	4189      	sbcs	r1, r1
 800103c:	1a3f      	subs	r7, r7, r0
 800103e:	4249      	negs	r1, r1
 8001040:	4655      	mov	r5, sl
 8001042:	2601      	movs	r6, #1
 8001044:	1a7f      	subs	r7, r7, r1
 8001046:	e57e      	b.n	8000b46 <__aeabi_dadd+0xa2>
 8001048:	4642      	mov	r2, r8
 800104a:	1a5c      	subs	r4, r3, r1
 800104c:	1a87      	subs	r7, r0, r2
 800104e:	42a3      	cmp	r3, r4
 8001050:	4192      	sbcs	r2, r2
 8001052:	4252      	negs	r2, r2
 8001054:	1abf      	subs	r7, r7, r2
 8001056:	023a      	lsls	r2, r7, #8
 8001058:	d53d      	bpl.n	80010d6 <__aeabi_dadd+0x632>
 800105a:	1acc      	subs	r4, r1, r3
 800105c:	42a1      	cmp	r1, r4
 800105e:	4189      	sbcs	r1, r1
 8001060:	4643      	mov	r3, r8
 8001062:	4249      	negs	r1, r1
 8001064:	1a1f      	subs	r7, r3, r0
 8001066:	4655      	mov	r5, sl
 8001068:	1a7f      	subs	r7, r7, r1
 800106a:	e595      	b.n	8000b98 <__aeabi_dadd+0xf4>
 800106c:	077b      	lsls	r3, r7, #29
 800106e:	08c9      	lsrs	r1, r1, #3
 8001070:	430b      	orrs	r3, r1
 8001072:	08f8      	lsrs	r0, r7, #3
 8001074:	e643      	b.n	8000cfe <__aeabi_dadd+0x25a>
 8001076:	4644      	mov	r4, r8
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	430c      	orrs	r4, r1
 800107c:	d130      	bne.n	80010e0 <__aeabi_dadd+0x63c>
 800107e:	0742      	lsls	r2, r0, #29
 8001080:	4313      	orrs	r3, r2
 8001082:	08c0      	lsrs	r0, r0, #3
 8001084:	e65c      	b.n	8000d40 <__aeabi_dadd+0x29c>
 8001086:	077b      	lsls	r3, r7, #29
 8001088:	08c9      	lsrs	r1, r1, #3
 800108a:	430b      	orrs	r3, r1
 800108c:	08f8      	lsrs	r0, r7, #3
 800108e:	e639      	b.n	8000d04 <__aeabi_dadd+0x260>
 8001090:	185c      	adds	r4, r3, r1
 8001092:	429c      	cmp	r4, r3
 8001094:	419b      	sbcs	r3, r3
 8001096:	4440      	add	r0, r8
 8001098:	425b      	negs	r3, r3
 800109a:	18c7      	adds	r7, r0, r3
 800109c:	023b      	lsls	r3, r7, #8
 800109e:	d400      	bmi.n	80010a2 <__aeabi_dadd+0x5fe>
 80010a0:	e625      	b.n	8000cee <__aeabi_dadd+0x24a>
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <__aeabi_dadd+0x674>)
 80010a4:	2601      	movs	r6, #1
 80010a6:	401f      	ands	r7, r3
 80010a8:	e621      	b.n	8000cee <__aeabi_dadd+0x24a>
 80010aa:	0004      	movs	r4, r0
 80010ac:	3a20      	subs	r2, #32
 80010ae:	40d4      	lsrs	r4, r2
 80010b0:	4662      	mov	r2, ip
 80010b2:	2a20      	cmp	r2, #32
 80010b4:	d004      	beq.n	80010c0 <__aeabi_dadd+0x61c>
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	4666      	mov	r6, ip
 80010ba:	1b92      	subs	r2, r2, r6
 80010bc:	4090      	lsls	r0, r2
 80010be:	4303      	orrs	r3, r0
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	4193      	sbcs	r3, r2
 80010c4:	431c      	orrs	r4, r3
 80010c6:	e67e      	b.n	8000dc6 <__aeabi_dadd+0x322>
 80010c8:	185c      	adds	r4, r3, r1
 80010ca:	428c      	cmp	r4, r1
 80010cc:	4189      	sbcs	r1, r1
 80010ce:	4440      	add	r0, r8
 80010d0:	4249      	negs	r1, r1
 80010d2:	1847      	adds	r7, r0, r1
 80010d4:	e6dd      	b.n	8000e92 <__aeabi_dadd+0x3ee>
 80010d6:	0023      	movs	r3, r4
 80010d8:	433b      	orrs	r3, r7
 80010da:	d100      	bne.n	80010de <__aeabi_dadd+0x63a>
 80010dc:	e6ad      	b.n	8000e3a <__aeabi_dadd+0x396>
 80010de:	e606      	b.n	8000cee <__aeabi_dadd+0x24a>
 80010e0:	0744      	lsls	r4, r0, #29
 80010e2:	4323      	orrs	r3, r4
 80010e4:	2480      	movs	r4, #128	; 0x80
 80010e6:	08c0      	lsrs	r0, r0, #3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4220      	tst	r0, r4
 80010ec:	d008      	beq.n	8001100 <__aeabi_dadd+0x65c>
 80010ee:	4642      	mov	r2, r8
 80010f0:	08d6      	lsrs	r6, r2, #3
 80010f2:	4226      	tst	r6, r4
 80010f4:	d104      	bne.n	8001100 <__aeabi_dadd+0x65c>
 80010f6:	4655      	mov	r5, sl
 80010f8:	0030      	movs	r0, r6
 80010fa:	08cb      	lsrs	r3, r1, #3
 80010fc:	0751      	lsls	r1, r2, #29
 80010fe:	430b      	orrs	r3, r1
 8001100:	0f5a      	lsrs	r2, r3, #29
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	0752      	lsls	r2, r2, #29
 8001108:	4313      	orrs	r3, r2
 800110a:	e619      	b.n	8000d40 <__aeabi_dadd+0x29c>
 800110c:	2300      	movs	r3, #0
 800110e:	4a01      	ldr	r2, [pc, #4]	; (8001114 <__aeabi_dadd+0x670>)
 8001110:	001f      	movs	r7, r3
 8001112:	e55e      	b.n	8000bd2 <__aeabi_dadd+0x12e>
 8001114:	000007ff 	.word	0x000007ff
 8001118:	ff7fffff 	.word	0xff7fffff

0800111c <__aeabi_ddiv>:
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	4657      	mov	r7, sl
 8001120:	464e      	mov	r6, r9
 8001122:	4645      	mov	r5, r8
 8001124:	46de      	mov	lr, fp
 8001126:	b5e0      	push	{r5, r6, r7, lr}
 8001128:	4681      	mov	r9, r0
 800112a:	0005      	movs	r5, r0
 800112c:	030c      	lsls	r4, r1, #12
 800112e:	0048      	lsls	r0, r1, #1
 8001130:	4692      	mov	sl, r2
 8001132:	001f      	movs	r7, r3
 8001134:	b085      	sub	sp, #20
 8001136:	0b24      	lsrs	r4, r4, #12
 8001138:	0d40      	lsrs	r0, r0, #21
 800113a:	0fce      	lsrs	r6, r1, #31
 800113c:	2800      	cmp	r0, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x26>
 8001140:	e156      	b.n	80013f0 <__aeabi_ddiv+0x2d4>
 8001142:	4bd4      	ldr	r3, [pc, #848]	; (8001494 <__aeabi_ddiv+0x378>)
 8001144:	4298      	cmp	r0, r3
 8001146:	d100      	bne.n	800114a <__aeabi_ddiv+0x2e>
 8001148:	e172      	b.n	8001430 <__aeabi_ddiv+0x314>
 800114a:	0f6b      	lsrs	r3, r5, #29
 800114c:	00e4      	lsls	r4, r4, #3
 800114e:	431c      	orrs	r4, r3
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	4323      	orrs	r3, r4
 8001156:	4698      	mov	r8, r3
 8001158:	4bcf      	ldr	r3, [pc, #828]	; (8001498 <__aeabi_ddiv+0x37c>)
 800115a:	00ed      	lsls	r5, r5, #3
 800115c:	469b      	mov	fp, r3
 800115e:	2300      	movs	r3, #0
 8001160:	4699      	mov	r9, r3
 8001162:	4483      	add	fp, r0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	033c      	lsls	r4, r7, #12
 8001168:	007b      	lsls	r3, r7, #1
 800116a:	4650      	mov	r0, sl
 800116c:	0b24      	lsrs	r4, r4, #12
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	0fff      	lsrs	r7, r7, #31
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x5c>
 8001176:	e11f      	b.n	80013b8 <__aeabi_ddiv+0x29c>
 8001178:	4ac6      	ldr	r2, [pc, #792]	; (8001494 <__aeabi_ddiv+0x378>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x64>
 800117e:	e162      	b.n	8001446 <__aeabi_ddiv+0x32a>
 8001180:	49c5      	ldr	r1, [pc, #788]	; (8001498 <__aeabi_ddiv+0x37c>)
 8001182:	0f42      	lsrs	r2, r0, #29
 8001184:	468c      	mov	ip, r1
 8001186:	00e4      	lsls	r4, r4, #3
 8001188:	4659      	mov	r1, fp
 800118a:	4314      	orrs	r4, r2
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	4463      	add	r3, ip
 8001190:	0412      	lsls	r2, r2, #16
 8001192:	1acb      	subs	r3, r1, r3
 8001194:	4314      	orrs	r4, r2
 8001196:	469b      	mov	fp, r3
 8001198:	00c2      	lsls	r2, r0, #3
 800119a:	2000      	movs	r0, #0
 800119c:	0033      	movs	r3, r6
 800119e:	407b      	eors	r3, r7
 80011a0:	469a      	mov	sl, r3
 80011a2:	464b      	mov	r3, r9
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d827      	bhi.n	80011f8 <__aeabi_ddiv+0xdc>
 80011a8:	49bc      	ldr	r1, [pc, #752]	; (800149c <__aeabi_ddiv+0x380>)
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	58cb      	ldr	r3, [r1, r3]
 80011ae:	469f      	mov	pc, r3
 80011b0:	46b2      	mov	sl, r6
 80011b2:	9b00      	ldr	r3, [sp, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d016      	beq.n	80011e6 <__aeabi_ddiv+0xca>
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0xa2>
 80011bc:	e28e      	b.n	80016dc <__aeabi_ddiv+0x5c0>
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0xa8>
 80011c2:	e0d9      	b.n	8001378 <__aeabi_ddiv+0x25c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	2500      	movs	r5, #0
 80011ca:	4652      	mov	r2, sl
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	4323      	orrs	r3, r4
 80011d0:	07d2      	lsls	r2, r2, #31
 80011d2:	4313      	orrs	r3, r2
 80011d4:	0028      	movs	r0, r5
 80011d6:	0019      	movs	r1, r3
 80011d8:	b005      	add	sp, #20
 80011da:	bcf0      	pop	{r4, r5, r6, r7}
 80011dc:	46bb      	mov	fp, r7
 80011de:	46b2      	mov	sl, r6
 80011e0:	46a9      	mov	r9, r5
 80011e2:	46a0      	mov	r8, r4
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e6:	2400      	movs	r4, #0
 80011e8:	2500      	movs	r5, #0
 80011ea:	4baa      	ldr	r3, [pc, #680]	; (8001494 <__aeabi_ddiv+0x378>)
 80011ec:	e7ed      	b.n	80011ca <__aeabi_ddiv+0xae>
 80011ee:	46ba      	mov	sl, r7
 80011f0:	46a0      	mov	r8, r4
 80011f2:	0015      	movs	r5, r2
 80011f4:	9000      	str	r0, [sp, #0]
 80011f6:	e7dc      	b.n	80011b2 <__aeabi_ddiv+0x96>
 80011f8:	4544      	cmp	r4, r8
 80011fa:	d200      	bcs.n	80011fe <__aeabi_ddiv+0xe2>
 80011fc:	e1c7      	b.n	800158e <__aeabi_ddiv+0x472>
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0xe6>
 8001200:	e1c2      	b.n	8001588 <__aeabi_ddiv+0x46c>
 8001202:	2301      	movs	r3, #1
 8001204:	425b      	negs	r3, r3
 8001206:	469c      	mov	ip, r3
 8001208:	002e      	movs	r6, r5
 800120a:	4640      	mov	r0, r8
 800120c:	2500      	movs	r5, #0
 800120e:	44e3      	add	fp, ip
 8001210:	0223      	lsls	r3, r4, #8
 8001212:	0e14      	lsrs	r4, r2, #24
 8001214:	431c      	orrs	r4, r3
 8001216:	0c1b      	lsrs	r3, r3, #16
 8001218:	4699      	mov	r9, r3
 800121a:	0423      	lsls	r3, r4, #16
 800121c:	0c1f      	lsrs	r7, r3, #16
 800121e:	0212      	lsls	r2, r2, #8
 8001220:	4649      	mov	r1, r9
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	9701      	str	r7, [sp, #4]
 8001226:	f7ff f811 	bl	800024c <__aeabi_uidivmod>
 800122a:	0002      	movs	r2, r0
 800122c:	437a      	muls	r2, r7
 800122e:	040b      	lsls	r3, r1, #16
 8001230:	0c31      	lsrs	r1, r6, #16
 8001232:	4680      	mov	r8, r0
 8001234:	4319      	orrs	r1, r3
 8001236:	428a      	cmp	r2, r1
 8001238:	d907      	bls.n	800124a <__aeabi_ddiv+0x12e>
 800123a:	2301      	movs	r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	469c      	mov	ip, r3
 8001240:	1909      	adds	r1, r1, r4
 8001242:	44e0      	add	r8, ip
 8001244:	428c      	cmp	r4, r1
 8001246:	d800      	bhi.n	800124a <__aeabi_ddiv+0x12e>
 8001248:	e207      	b.n	800165a <__aeabi_ddiv+0x53e>
 800124a:	1a88      	subs	r0, r1, r2
 800124c:	4649      	mov	r1, r9
 800124e:	f7fe fffd 	bl	800024c <__aeabi_uidivmod>
 8001252:	0409      	lsls	r1, r1, #16
 8001254:	468c      	mov	ip, r1
 8001256:	0431      	lsls	r1, r6, #16
 8001258:	4666      	mov	r6, ip
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	0c09      	lsrs	r1, r1, #16
 800125e:	4342      	muls	r2, r0
 8001260:	0003      	movs	r3, r0
 8001262:	4331      	orrs	r1, r6
 8001264:	428a      	cmp	r2, r1
 8001266:	d904      	bls.n	8001272 <__aeabi_ddiv+0x156>
 8001268:	1909      	adds	r1, r1, r4
 800126a:	3b01      	subs	r3, #1
 800126c:	428c      	cmp	r4, r1
 800126e:	d800      	bhi.n	8001272 <__aeabi_ddiv+0x156>
 8001270:	e1ed      	b.n	800164e <__aeabi_ddiv+0x532>
 8001272:	1a88      	subs	r0, r1, r2
 8001274:	4642      	mov	r2, r8
 8001276:	0412      	lsls	r2, r2, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	4690      	mov	r8, r2
 800127c:	4641      	mov	r1, r8
 800127e:	9b00      	ldr	r3, [sp, #0]
 8001280:	040e      	lsls	r6, r1, #16
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	001f      	movs	r7, r3
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	9b00      	ldr	r3, [sp, #0]
 800128a:	0c36      	lsrs	r6, r6, #16
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	0c19      	lsrs	r1, r3, #16
 8001290:	000b      	movs	r3, r1
 8001292:	4373      	muls	r3, r6
 8001294:	0c12      	lsrs	r2, r2, #16
 8001296:	437e      	muls	r6, r7
 8001298:	9103      	str	r1, [sp, #12]
 800129a:	4351      	muls	r1, r2
 800129c:	437a      	muls	r2, r7
 800129e:	0c1f      	lsrs	r7, r3, #16
 80012a0:	46bc      	mov	ip, r7
 80012a2:	1876      	adds	r6, r6, r1
 80012a4:	4466      	add	r6, ip
 80012a6:	42b1      	cmp	r1, r6
 80012a8:	d903      	bls.n	80012b2 <__aeabi_ddiv+0x196>
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0249      	lsls	r1, r1, #9
 80012ae:	468c      	mov	ip, r1
 80012b0:	4462      	add	r2, ip
 80012b2:	0c31      	lsrs	r1, r6, #16
 80012b4:	188a      	adds	r2, r1, r2
 80012b6:	0431      	lsls	r1, r6, #16
 80012b8:	041e      	lsls	r6, r3, #16
 80012ba:	0c36      	lsrs	r6, r6, #16
 80012bc:	198e      	adds	r6, r1, r6
 80012be:	4290      	cmp	r0, r2
 80012c0:	d302      	bcc.n	80012c8 <__aeabi_ddiv+0x1ac>
 80012c2:	d112      	bne.n	80012ea <__aeabi_ddiv+0x1ce>
 80012c4:	42b5      	cmp	r5, r6
 80012c6:	d210      	bcs.n	80012ea <__aeabi_ddiv+0x1ce>
 80012c8:	4643      	mov	r3, r8
 80012ca:	1e59      	subs	r1, r3, #1
 80012cc:	9b00      	ldr	r3, [sp, #0]
 80012ce:	469c      	mov	ip, r3
 80012d0:	4465      	add	r5, ip
 80012d2:	001f      	movs	r7, r3
 80012d4:	429d      	cmp	r5, r3
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	425b      	negs	r3, r3
 80012da:	191b      	adds	r3, r3, r4
 80012dc:	18c0      	adds	r0, r0, r3
 80012de:	4284      	cmp	r4, r0
 80012e0:	d200      	bcs.n	80012e4 <__aeabi_ddiv+0x1c8>
 80012e2:	e1a0      	b.n	8001626 <__aeabi_ddiv+0x50a>
 80012e4:	d100      	bne.n	80012e8 <__aeabi_ddiv+0x1cc>
 80012e6:	e19b      	b.n	8001620 <__aeabi_ddiv+0x504>
 80012e8:	4688      	mov	r8, r1
 80012ea:	1bae      	subs	r6, r5, r6
 80012ec:	42b5      	cmp	r5, r6
 80012ee:	41ad      	sbcs	r5, r5
 80012f0:	1a80      	subs	r0, r0, r2
 80012f2:	426d      	negs	r5, r5
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	4284      	cmp	r4, r0
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x1e0>
 80012fa:	e1d5      	b.n	80016a8 <__aeabi_ddiv+0x58c>
 80012fc:	4649      	mov	r1, r9
 80012fe:	f7fe ffa5 	bl	800024c <__aeabi_uidivmod>
 8001302:	9a01      	ldr	r2, [sp, #4]
 8001304:	040b      	lsls	r3, r1, #16
 8001306:	4342      	muls	r2, r0
 8001308:	0c31      	lsrs	r1, r6, #16
 800130a:	0005      	movs	r5, r0
 800130c:	4319      	orrs	r1, r3
 800130e:	428a      	cmp	r2, r1
 8001310:	d900      	bls.n	8001314 <__aeabi_ddiv+0x1f8>
 8001312:	e16c      	b.n	80015ee <__aeabi_ddiv+0x4d2>
 8001314:	1a88      	subs	r0, r1, r2
 8001316:	4649      	mov	r1, r9
 8001318:	f7fe ff98 	bl	800024c <__aeabi_uidivmod>
 800131c:	9a01      	ldr	r2, [sp, #4]
 800131e:	0436      	lsls	r6, r6, #16
 8001320:	4342      	muls	r2, r0
 8001322:	0409      	lsls	r1, r1, #16
 8001324:	0c36      	lsrs	r6, r6, #16
 8001326:	0003      	movs	r3, r0
 8001328:	430e      	orrs	r6, r1
 800132a:	42b2      	cmp	r2, r6
 800132c:	d900      	bls.n	8001330 <__aeabi_ddiv+0x214>
 800132e:	e153      	b.n	80015d8 <__aeabi_ddiv+0x4bc>
 8001330:	9803      	ldr	r0, [sp, #12]
 8001332:	1ab6      	subs	r6, r6, r2
 8001334:	0002      	movs	r2, r0
 8001336:	042d      	lsls	r5, r5, #16
 8001338:	431d      	orrs	r5, r3
 800133a:	9f02      	ldr	r7, [sp, #8]
 800133c:	042b      	lsls	r3, r5, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	435a      	muls	r2, r3
 8001342:	437b      	muls	r3, r7
 8001344:	469c      	mov	ip, r3
 8001346:	0c29      	lsrs	r1, r5, #16
 8001348:	4348      	muls	r0, r1
 800134a:	0c13      	lsrs	r3, r2, #16
 800134c:	4484      	add	ip, r0
 800134e:	4463      	add	r3, ip
 8001350:	4379      	muls	r1, r7
 8001352:	4298      	cmp	r0, r3
 8001354:	d903      	bls.n	800135e <__aeabi_ddiv+0x242>
 8001356:	2080      	movs	r0, #128	; 0x80
 8001358:	0240      	lsls	r0, r0, #9
 800135a:	4684      	mov	ip, r0
 800135c:	4461      	add	r1, ip
 800135e:	0c18      	lsrs	r0, r3, #16
 8001360:	0412      	lsls	r2, r2, #16
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	0c12      	lsrs	r2, r2, #16
 8001366:	1841      	adds	r1, r0, r1
 8001368:	189b      	adds	r3, r3, r2
 800136a:	428e      	cmp	r6, r1
 800136c:	d200      	bcs.n	8001370 <__aeabi_ddiv+0x254>
 800136e:	e0ff      	b.n	8001570 <__aeabi_ddiv+0x454>
 8001370:	d100      	bne.n	8001374 <__aeabi_ddiv+0x258>
 8001372:	e0fa      	b.n	800156a <__aeabi_ddiv+0x44e>
 8001374:	2301      	movs	r3, #1
 8001376:	431d      	orrs	r5, r3
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <__aeabi_ddiv+0x384>)
 800137a:	445a      	add	r2, fp
 800137c:	2a00      	cmp	r2, #0
 800137e:	dc00      	bgt.n	8001382 <__aeabi_ddiv+0x266>
 8001380:	e0aa      	b.n	80014d8 <__aeabi_ddiv+0x3bc>
 8001382:	076b      	lsls	r3, r5, #29
 8001384:	d000      	beq.n	8001388 <__aeabi_ddiv+0x26c>
 8001386:	e13d      	b.n	8001604 <__aeabi_ddiv+0x4e8>
 8001388:	08ed      	lsrs	r5, r5, #3
 800138a:	4643      	mov	r3, r8
 800138c:	01db      	lsls	r3, r3, #7
 800138e:	d506      	bpl.n	800139e <__aeabi_ddiv+0x282>
 8001390:	4642      	mov	r2, r8
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <__aeabi_ddiv+0x388>)
 8001394:	401a      	ands	r2, r3
 8001396:	4690      	mov	r8, r2
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	445a      	add	r2, fp
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <__aeabi_ddiv+0x38c>)
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd00      	ble.n	80013a6 <__aeabi_ddiv+0x28a>
 80013a4:	e71f      	b.n	80011e6 <__aeabi_ddiv+0xca>
 80013a6:	4643      	mov	r3, r8
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	431d      	orrs	r5, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	0552      	lsls	r2, r2, #21
 80013b0:	025c      	lsls	r4, r3, #9
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	0d53      	lsrs	r3, r2, #21
 80013b6:	e708      	b.n	80011ca <__aeabi_ddiv+0xae>
 80013b8:	4652      	mov	r2, sl
 80013ba:	4322      	orrs	r2, r4
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x2a4>
 80013be:	e07b      	b.n	80014b8 <__aeabi_ddiv+0x39c>
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x2aa>
 80013c4:	e0fa      	b.n	80015bc <__aeabi_ddiv+0x4a0>
 80013c6:	0020      	movs	r0, r4
 80013c8:	f001 fa22 	bl	8002810 <__clzsi2>
 80013cc:	0002      	movs	r2, r0
 80013ce:	3a0b      	subs	r2, #11
 80013d0:	231d      	movs	r3, #29
 80013d2:	0001      	movs	r1, r0
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	4652      	mov	r2, sl
 80013d8:	3908      	subs	r1, #8
 80013da:	40da      	lsrs	r2, r3
 80013dc:	408c      	lsls	r4, r1
 80013de:	4314      	orrs	r4, r2
 80013e0:	4652      	mov	r2, sl
 80013e2:	408a      	lsls	r2, r1
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <__aeabi_ddiv+0x390>)
 80013e6:	4458      	add	r0, fp
 80013e8:	469b      	mov	fp, r3
 80013ea:	4483      	add	fp, r0
 80013ec:	2000      	movs	r0, #0
 80013ee:	e6d5      	b.n	800119c <__aeabi_ddiv+0x80>
 80013f0:	464b      	mov	r3, r9
 80013f2:	4323      	orrs	r3, r4
 80013f4:	4698      	mov	r8, r3
 80013f6:	d044      	beq.n	8001482 <__aeabi_ddiv+0x366>
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d100      	bne.n	80013fe <__aeabi_ddiv+0x2e2>
 80013fc:	e0ce      	b.n	800159c <__aeabi_ddiv+0x480>
 80013fe:	0020      	movs	r0, r4
 8001400:	f001 fa06 	bl	8002810 <__clzsi2>
 8001404:	0001      	movs	r1, r0
 8001406:	0002      	movs	r2, r0
 8001408:	390b      	subs	r1, #11
 800140a:	231d      	movs	r3, #29
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	4649      	mov	r1, r9
 8001410:	0010      	movs	r0, r2
 8001412:	40d9      	lsrs	r1, r3
 8001414:	3808      	subs	r0, #8
 8001416:	4084      	lsls	r4, r0
 8001418:	000b      	movs	r3, r1
 800141a:	464d      	mov	r5, r9
 800141c:	4323      	orrs	r3, r4
 800141e:	4698      	mov	r8, r3
 8001420:	4085      	lsls	r5, r0
 8001422:	4823      	ldr	r0, [pc, #140]	; (80014b0 <__aeabi_ddiv+0x394>)
 8001424:	1a83      	subs	r3, r0, r2
 8001426:	469b      	mov	fp, r3
 8001428:	2300      	movs	r3, #0
 800142a:	4699      	mov	r9, r3
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	e69a      	b.n	8001166 <__aeabi_ddiv+0x4a>
 8001430:	464b      	mov	r3, r9
 8001432:	4323      	orrs	r3, r4
 8001434:	4698      	mov	r8, r3
 8001436:	d11d      	bne.n	8001474 <__aeabi_ddiv+0x358>
 8001438:	2308      	movs	r3, #8
 800143a:	4699      	mov	r9, r3
 800143c:	3b06      	subs	r3, #6
 800143e:	2500      	movs	r5, #0
 8001440:	4683      	mov	fp, r0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	e68f      	b.n	8001166 <__aeabi_ddiv+0x4a>
 8001446:	4652      	mov	r2, sl
 8001448:	4322      	orrs	r2, r4
 800144a:	d109      	bne.n	8001460 <__aeabi_ddiv+0x344>
 800144c:	2302      	movs	r3, #2
 800144e:	4649      	mov	r1, r9
 8001450:	4319      	orrs	r1, r3
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <__aeabi_ddiv+0x398>)
 8001454:	4689      	mov	r9, r1
 8001456:	469c      	mov	ip, r3
 8001458:	2400      	movs	r4, #0
 800145a:	2002      	movs	r0, #2
 800145c:	44e3      	add	fp, ip
 800145e:	e69d      	b.n	800119c <__aeabi_ddiv+0x80>
 8001460:	2303      	movs	r3, #3
 8001462:	464a      	mov	r2, r9
 8001464:	431a      	orrs	r2, r3
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <__aeabi_ddiv+0x398>)
 8001468:	4691      	mov	r9, r2
 800146a:	469c      	mov	ip, r3
 800146c:	4652      	mov	r2, sl
 800146e:	2003      	movs	r0, #3
 8001470:	44e3      	add	fp, ip
 8001472:	e693      	b.n	800119c <__aeabi_ddiv+0x80>
 8001474:	230c      	movs	r3, #12
 8001476:	4699      	mov	r9, r3
 8001478:	3b09      	subs	r3, #9
 800147a:	46a0      	mov	r8, r4
 800147c:	4683      	mov	fp, r0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	e671      	b.n	8001166 <__aeabi_ddiv+0x4a>
 8001482:	2304      	movs	r3, #4
 8001484:	4699      	mov	r9, r3
 8001486:	2300      	movs	r3, #0
 8001488:	469b      	mov	fp, r3
 800148a:	3301      	adds	r3, #1
 800148c:	2500      	movs	r5, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	e669      	b.n	8001166 <__aeabi_ddiv+0x4a>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	000007ff 	.word	0x000007ff
 8001498:	fffffc01 	.word	0xfffffc01
 800149c:	0800cc18 	.word	0x0800cc18
 80014a0:	000003ff 	.word	0x000003ff
 80014a4:	feffffff 	.word	0xfeffffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	000003f3 	.word	0x000003f3
 80014b0:	fffffc0d 	.word	0xfffffc0d
 80014b4:	fffff801 	.word	0xfffff801
 80014b8:	4649      	mov	r1, r9
 80014ba:	2301      	movs	r3, #1
 80014bc:	4319      	orrs	r1, r3
 80014be:	4689      	mov	r9, r1
 80014c0:	2400      	movs	r4, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	e66a      	b.n	800119c <__aeabi_ddiv+0x80>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2480      	movs	r4, #128	; 0x80
 80014ca:	469a      	mov	sl, r3
 80014cc:	2500      	movs	r5, #0
 80014ce:	4b8a      	ldr	r3, [pc, #552]	; (80016f8 <__aeabi_ddiv+0x5dc>)
 80014d0:	0324      	lsls	r4, r4, #12
 80014d2:	e67a      	b.n	80011ca <__aeabi_ddiv+0xae>
 80014d4:	2501      	movs	r5, #1
 80014d6:	426d      	negs	r5, r5
 80014d8:	2301      	movs	r3, #1
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	2b38      	cmp	r3, #56	; 0x38
 80014de:	dd00      	ble.n	80014e2 <__aeabi_ddiv+0x3c6>
 80014e0:	e670      	b.n	80011c4 <__aeabi_ddiv+0xa8>
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	dc00      	bgt.n	80014e8 <__aeabi_ddiv+0x3cc>
 80014e6:	e0bf      	b.n	8001668 <__aeabi_ddiv+0x54c>
 80014e8:	211f      	movs	r1, #31
 80014ea:	4249      	negs	r1, r1
 80014ec:	1a8a      	subs	r2, r1, r2
 80014ee:	4641      	mov	r1, r8
 80014f0:	40d1      	lsrs	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d004      	beq.n	8001502 <__aeabi_ddiv+0x3e6>
 80014f8:	4641      	mov	r1, r8
 80014fa:	4b80      	ldr	r3, [pc, #512]	; (80016fc <__aeabi_ddiv+0x5e0>)
 80014fc:	445b      	add	r3, fp
 80014fe:	4099      	lsls	r1, r3
 8001500:	430d      	orrs	r5, r1
 8001502:	1e6b      	subs	r3, r5, #1
 8001504:	419d      	sbcs	r5, r3
 8001506:	2307      	movs	r3, #7
 8001508:	432a      	orrs	r2, r5
 800150a:	001d      	movs	r5, r3
 800150c:	2400      	movs	r4, #0
 800150e:	4015      	ands	r5, r2
 8001510:	4213      	tst	r3, r2
 8001512:	d100      	bne.n	8001516 <__aeabi_ddiv+0x3fa>
 8001514:	e0d4      	b.n	80016c0 <__aeabi_ddiv+0x5a4>
 8001516:	210f      	movs	r1, #15
 8001518:	2300      	movs	r3, #0
 800151a:	4011      	ands	r1, r2
 800151c:	2904      	cmp	r1, #4
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0x406>
 8001520:	e0cb      	b.n	80016ba <__aeabi_ddiv+0x59e>
 8001522:	1d11      	adds	r1, r2, #4
 8001524:	4291      	cmp	r1, r2
 8001526:	4192      	sbcs	r2, r2
 8001528:	4252      	negs	r2, r2
 800152a:	189b      	adds	r3, r3, r2
 800152c:	000a      	movs	r2, r1
 800152e:	0219      	lsls	r1, r3, #8
 8001530:	d400      	bmi.n	8001534 <__aeabi_ddiv+0x418>
 8001532:	e0c2      	b.n	80016ba <__aeabi_ddiv+0x59e>
 8001534:	2301      	movs	r3, #1
 8001536:	2400      	movs	r4, #0
 8001538:	2500      	movs	r5, #0
 800153a:	e646      	b.n	80011ca <__aeabi_ddiv+0xae>
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	4641      	mov	r1, r8
 8001540:	031b      	lsls	r3, r3, #12
 8001542:	4219      	tst	r1, r3
 8001544:	d008      	beq.n	8001558 <__aeabi_ddiv+0x43c>
 8001546:	421c      	tst	r4, r3
 8001548:	d106      	bne.n	8001558 <__aeabi_ddiv+0x43c>
 800154a:	431c      	orrs	r4, r3
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	46ba      	mov	sl, r7
 8001550:	0015      	movs	r5, r2
 8001552:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <__aeabi_ddiv+0x5dc>)
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	e638      	b.n	80011ca <__aeabi_ddiv+0xae>
 8001558:	2480      	movs	r4, #128	; 0x80
 800155a:	4643      	mov	r3, r8
 800155c:	0324      	lsls	r4, r4, #12
 800155e:	431c      	orrs	r4, r3
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	46b2      	mov	sl, r6
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <__aeabi_ddiv+0x5dc>)
 8001566:	0b24      	lsrs	r4, r4, #12
 8001568:	e62f      	b.n	80011ca <__aeabi_ddiv+0xae>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d100      	bne.n	8001570 <__aeabi_ddiv+0x454>
 800156e:	e703      	b.n	8001378 <__aeabi_ddiv+0x25c>
 8001570:	19a6      	adds	r6, r4, r6
 8001572:	1e68      	subs	r0, r5, #1
 8001574:	42a6      	cmp	r6, r4
 8001576:	d200      	bcs.n	800157a <__aeabi_ddiv+0x45e>
 8001578:	e08d      	b.n	8001696 <__aeabi_ddiv+0x57a>
 800157a:	428e      	cmp	r6, r1
 800157c:	d200      	bcs.n	8001580 <__aeabi_ddiv+0x464>
 800157e:	e0a3      	b.n	80016c8 <__aeabi_ddiv+0x5ac>
 8001580:	d100      	bne.n	8001584 <__aeabi_ddiv+0x468>
 8001582:	e0b3      	b.n	80016ec <__aeabi_ddiv+0x5d0>
 8001584:	0005      	movs	r5, r0
 8001586:	e6f5      	b.n	8001374 <__aeabi_ddiv+0x258>
 8001588:	42aa      	cmp	r2, r5
 800158a:	d900      	bls.n	800158e <__aeabi_ddiv+0x472>
 800158c:	e639      	b.n	8001202 <__aeabi_ddiv+0xe6>
 800158e:	4643      	mov	r3, r8
 8001590:	07de      	lsls	r6, r3, #31
 8001592:	0858      	lsrs	r0, r3, #1
 8001594:	086b      	lsrs	r3, r5, #1
 8001596:	431e      	orrs	r6, r3
 8001598:	07ed      	lsls	r5, r5, #31
 800159a:	e639      	b.n	8001210 <__aeabi_ddiv+0xf4>
 800159c:	4648      	mov	r0, r9
 800159e:	f001 f937 	bl	8002810 <__clzsi2>
 80015a2:	0001      	movs	r1, r0
 80015a4:	0002      	movs	r2, r0
 80015a6:	3115      	adds	r1, #21
 80015a8:	3220      	adds	r2, #32
 80015aa:	291c      	cmp	r1, #28
 80015ac:	dc00      	bgt.n	80015b0 <__aeabi_ddiv+0x494>
 80015ae:	e72c      	b.n	800140a <__aeabi_ddiv+0x2ee>
 80015b0:	464b      	mov	r3, r9
 80015b2:	3808      	subs	r0, #8
 80015b4:	4083      	lsls	r3, r0
 80015b6:	2500      	movs	r5, #0
 80015b8:	4698      	mov	r8, r3
 80015ba:	e732      	b.n	8001422 <__aeabi_ddiv+0x306>
 80015bc:	f001 f928 	bl	8002810 <__clzsi2>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	3215      	adds	r2, #21
 80015c6:	3020      	adds	r0, #32
 80015c8:	2a1c      	cmp	r2, #28
 80015ca:	dc00      	bgt.n	80015ce <__aeabi_ddiv+0x4b2>
 80015cc:	e700      	b.n	80013d0 <__aeabi_ddiv+0x2b4>
 80015ce:	4654      	mov	r4, sl
 80015d0:	3b08      	subs	r3, #8
 80015d2:	2200      	movs	r2, #0
 80015d4:	409c      	lsls	r4, r3
 80015d6:	e705      	b.n	80013e4 <__aeabi_ddiv+0x2c8>
 80015d8:	1936      	adds	r6, r6, r4
 80015da:	3b01      	subs	r3, #1
 80015dc:	42b4      	cmp	r4, r6
 80015de:	d900      	bls.n	80015e2 <__aeabi_ddiv+0x4c6>
 80015e0:	e6a6      	b.n	8001330 <__aeabi_ddiv+0x214>
 80015e2:	42b2      	cmp	r2, r6
 80015e4:	d800      	bhi.n	80015e8 <__aeabi_ddiv+0x4cc>
 80015e6:	e6a3      	b.n	8001330 <__aeabi_ddiv+0x214>
 80015e8:	1e83      	subs	r3, r0, #2
 80015ea:	1936      	adds	r6, r6, r4
 80015ec:	e6a0      	b.n	8001330 <__aeabi_ddiv+0x214>
 80015ee:	1909      	adds	r1, r1, r4
 80015f0:	3d01      	subs	r5, #1
 80015f2:	428c      	cmp	r4, r1
 80015f4:	d900      	bls.n	80015f8 <__aeabi_ddiv+0x4dc>
 80015f6:	e68d      	b.n	8001314 <__aeabi_ddiv+0x1f8>
 80015f8:	428a      	cmp	r2, r1
 80015fa:	d800      	bhi.n	80015fe <__aeabi_ddiv+0x4e2>
 80015fc:	e68a      	b.n	8001314 <__aeabi_ddiv+0x1f8>
 80015fe:	1e85      	subs	r5, r0, #2
 8001600:	1909      	adds	r1, r1, r4
 8001602:	e687      	b.n	8001314 <__aeabi_ddiv+0x1f8>
 8001604:	230f      	movs	r3, #15
 8001606:	402b      	ands	r3, r5
 8001608:	2b04      	cmp	r3, #4
 800160a:	d100      	bne.n	800160e <__aeabi_ddiv+0x4f2>
 800160c:	e6bc      	b.n	8001388 <__aeabi_ddiv+0x26c>
 800160e:	2305      	movs	r3, #5
 8001610:	425b      	negs	r3, r3
 8001612:	42ab      	cmp	r3, r5
 8001614:	419b      	sbcs	r3, r3
 8001616:	3504      	adds	r5, #4
 8001618:	425b      	negs	r3, r3
 800161a:	08ed      	lsrs	r5, r5, #3
 800161c:	4498      	add	r8, r3
 800161e:	e6b4      	b.n	800138a <__aeabi_ddiv+0x26e>
 8001620:	42af      	cmp	r7, r5
 8001622:	d900      	bls.n	8001626 <__aeabi_ddiv+0x50a>
 8001624:	e660      	b.n	80012e8 <__aeabi_ddiv+0x1cc>
 8001626:	4282      	cmp	r2, r0
 8001628:	d804      	bhi.n	8001634 <__aeabi_ddiv+0x518>
 800162a:	d000      	beq.n	800162e <__aeabi_ddiv+0x512>
 800162c:	e65c      	b.n	80012e8 <__aeabi_ddiv+0x1cc>
 800162e:	42ae      	cmp	r6, r5
 8001630:	d800      	bhi.n	8001634 <__aeabi_ddiv+0x518>
 8001632:	e659      	b.n	80012e8 <__aeabi_ddiv+0x1cc>
 8001634:	2302      	movs	r3, #2
 8001636:	425b      	negs	r3, r3
 8001638:	469c      	mov	ip, r3
 800163a:	9b00      	ldr	r3, [sp, #0]
 800163c:	44e0      	add	r8, ip
 800163e:	469c      	mov	ip, r3
 8001640:	4465      	add	r5, ip
 8001642:	429d      	cmp	r5, r3
 8001644:	419b      	sbcs	r3, r3
 8001646:	425b      	negs	r3, r3
 8001648:	191b      	adds	r3, r3, r4
 800164a:	18c0      	adds	r0, r0, r3
 800164c:	e64d      	b.n	80012ea <__aeabi_ddiv+0x1ce>
 800164e:	428a      	cmp	r2, r1
 8001650:	d800      	bhi.n	8001654 <__aeabi_ddiv+0x538>
 8001652:	e60e      	b.n	8001272 <__aeabi_ddiv+0x156>
 8001654:	1e83      	subs	r3, r0, #2
 8001656:	1909      	adds	r1, r1, r4
 8001658:	e60b      	b.n	8001272 <__aeabi_ddiv+0x156>
 800165a:	428a      	cmp	r2, r1
 800165c:	d800      	bhi.n	8001660 <__aeabi_ddiv+0x544>
 800165e:	e5f4      	b.n	800124a <__aeabi_ddiv+0x12e>
 8001660:	1e83      	subs	r3, r0, #2
 8001662:	4698      	mov	r8, r3
 8001664:	1909      	adds	r1, r1, r4
 8001666:	e5f0      	b.n	800124a <__aeabi_ddiv+0x12e>
 8001668:	4925      	ldr	r1, [pc, #148]	; (8001700 <__aeabi_ddiv+0x5e4>)
 800166a:	0028      	movs	r0, r5
 800166c:	4459      	add	r1, fp
 800166e:	408d      	lsls	r5, r1
 8001670:	4642      	mov	r2, r8
 8001672:	408a      	lsls	r2, r1
 8001674:	1e69      	subs	r1, r5, #1
 8001676:	418d      	sbcs	r5, r1
 8001678:	4641      	mov	r1, r8
 800167a:	40d8      	lsrs	r0, r3
 800167c:	40d9      	lsrs	r1, r3
 800167e:	4302      	orrs	r2, r0
 8001680:	432a      	orrs	r2, r5
 8001682:	000b      	movs	r3, r1
 8001684:	0751      	lsls	r1, r2, #29
 8001686:	d100      	bne.n	800168a <__aeabi_ddiv+0x56e>
 8001688:	e751      	b.n	800152e <__aeabi_ddiv+0x412>
 800168a:	210f      	movs	r1, #15
 800168c:	4011      	ands	r1, r2
 800168e:	2904      	cmp	r1, #4
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0x578>
 8001692:	e746      	b.n	8001522 <__aeabi_ddiv+0x406>
 8001694:	e74b      	b.n	800152e <__aeabi_ddiv+0x412>
 8001696:	0005      	movs	r5, r0
 8001698:	428e      	cmp	r6, r1
 800169a:	d000      	beq.n	800169e <__aeabi_ddiv+0x582>
 800169c:	e66a      	b.n	8001374 <__aeabi_ddiv+0x258>
 800169e:	9a00      	ldr	r2, [sp, #0]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d000      	beq.n	80016a6 <__aeabi_ddiv+0x58a>
 80016a4:	e666      	b.n	8001374 <__aeabi_ddiv+0x258>
 80016a6:	e667      	b.n	8001378 <__aeabi_ddiv+0x25c>
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <__aeabi_ddiv+0x5e8>)
 80016aa:	445a      	add	r2, fp
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	dc00      	bgt.n	80016b2 <__aeabi_ddiv+0x596>
 80016b0:	e710      	b.n	80014d4 <__aeabi_ddiv+0x3b8>
 80016b2:	2301      	movs	r3, #1
 80016b4:	2500      	movs	r5, #0
 80016b6:	4498      	add	r8, r3
 80016b8:	e667      	b.n	800138a <__aeabi_ddiv+0x26e>
 80016ba:	075d      	lsls	r5, r3, #29
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	0b1c      	lsrs	r4, r3, #12
 80016c0:	08d2      	lsrs	r2, r2, #3
 80016c2:	2300      	movs	r3, #0
 80016c4:	4315      	orrs	r5, r2
 80016c6:	e580      	b.n	80011ca <__aeabi_ddiv+0xae>
 80016c8:	9800      	ldr	r0, [sp, #0]
 80016ca:	3d02      	subs	r5, #2
 80016cc:	0042      	lsls	r2, r0, #1
 80016ce:	4282      	cmp	r2, r0
 80016d0:	41bf      	sbcs	r7, r7
 80016d2:	427f      	negs	r7, r7
 80016d4:	193c      	adds	r4, r7, r4
 80016d6:	1936      	adds	r6, r6, r4
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	e7dd      	b.n	8001698 <__aeabi_ddiv+0x57c>
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	4643      	mov	r3, r8
 80016e0:	0324      	lsls	r4, r4, #12
 80016e2:	431c      	orrs	r4, r3
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__aeabi_ddiv+0x5dc>)
 80016e8:	0b24      	lsrs	r4, r4, #12
 80016ea:	e56e      	b.n	80011ca <__aeabi_ddiv+0xae>
 80016ec:	9a00      	ldr	r2, [sp, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3ea      	bcc.n	80016c8 <__aeabi_ddiv+0x5ac>
 80016f2:	0005      	movs	r5, r0
 80016f4:	e7d3      	b.n	800169e <__aeabi_ddiv+0x582>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	0000043e 	.word	0x0000043e
 8001700:	0000041e 	.word	0x0000041e
 8001704:	000003ff 	.word	0x000003ff

08001708 <__eqdf2>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	464e      	mov	r6, r9
 800170c:	4645      	mov	r5, r8
 800170e:	46de      	mov	lr, fp
 8001710:	4657      	mov	r7, sl
 8001712:	4690      	mov	r8, r2
 8001714:	b5e0      	push	{r5, r6, r7, lr}
 8001716:	0017      	movs	r7, r2
 8001718:	031a      	lsls	r2, r3, #12
 800171a:	0b12      	lsrs	r2, r2, #12
 800171c:	0005      	movs	r5, r0
 800171e:	4684      	mov	ip, r0
 8001720:	4819      	ldr	r0, [pc, #100]	; (8001788 <__eqdf2+0x80>)
 8001722:	030e      	lsls	r6, r1, #12
 8001724:	004c      	lsls	r4, r1, #1
 8001726:	4691      	mov	r9, r2
 8001728:	005a      	lsls	r2, r3, #1
 800172a:	0fdb      	lsrs	r3, r3, #31
 800172c:	469b      	mov	fp, r3
 800172e:	0b36      	lsrs	r6, r6, #12
 8001730:	0d64      	lsrs	r4, r4, #21
 8001732:	0fc9      	lsrs	r1, r1, #31
 8001734:	0d52      	lsrs	r2, r2, #21
 8001736:	4284      	cmp	r4, r0
 8001738:	d019      	beq.n	800176e <__eqdf2+0x66>
 800173a:	4282      	cmp	r2, r0
 800173c:	d010      	beq.n	8001760 <__eqdf2+0x58>
 800173e:	2001      	movs	r0, #1
 8001740:	4294      	cmp	r4, r2
 8001742:	d10e      	bne.n	8001762 <__eqdf2+0x5a>
 8001744:	454e      	cmp	r6, r9
 8001746:	d10c      	bne.n	8001762 <__eqdf2+0x5a>
 8001748:	2001      	movs	r0, #1
 800174a:	45c4      	cmp	ip, r8
 800174c:	d109      	bne.n	8001762 <__eqdf2+0x5a>
 800174e:	4559      	cmp	r1, fp
 8001750:	d017      	beq.n	8001782 <__eqdf2+0x7a>
 8001752:	2c00      	cmp	r4, #0
 8001754:	d105      	bne.n	8001762 <__eqdf2+0x5a>
 8001756:	0030      	movs	r0, r6
 8001758:	4328      	orrs	r0, r5
 800175a:	1e43      	subs	r3, r0, #1
 800175c:	4198      	sbcs	r0, r3
 800175e:	e000      	b.n	8001762 <__eqdf2+0x5a>
 8001760:	2001      	movs	r0, #1
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	0033      	movs	r3, r6
 8001770:	2001      	movs	r0, #1
 8001772:	432b      	orrs	r3, r5
 8001774:	d1f5      	bne.n	8001762 <__eqdf2+0x5a>
 8001776:	42a2      	cmp	r2, r4
 8001778:	d1f3      	bne.n	8001762 <__eqdf2+0x5a>
 800177a:	464b      	mov	r3, r9
 800177c:	433b      	orrs	r3, r7
 800177e:	d1f0      	bne.n	8001762 <__eqdf2+0x5a>
 8001780:	e7e2      	b.n	8001748 <__eqdf2+0x40>
 8001782:	2000      	movs	r0, #0
 8001784:	e7ed      	b.n	8001762 <__eqdf2+0x5a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000007ff 	.word	0x000007ff

0800178c <__gedf2>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	4647      	mov	r7, r8
 8001790:	46ce      	mov	lr, r9
 8001792:	0004      	movs	r4, r0
 8001794:	0018      	movs	r0, r3
 8001796:	0016      	movs	r6, r2
 8001798:	031b      	lsls	r3, r3, #12
 800179a:	0b1b      	lsrs	r3, r3, #12
 800179c:	4d2d      	ldr	r5, [pc, #180]	; (8001854 <__gedf2+0xc8>)
 800179e:	004a      	lsls	r2, r1, #1
 80017a0:	4699      	mov	r9, r3
 80017a2:	b580      	push	{r7, lr}
 80017a4:	0043      	lsls	r3, r0, #1
 80017a6:	030f      	lsls	r7, r1, #12
 80017a8:	46a4      	mov	ip, r4
 80017aa:	46b0      	mov	r8, r6
 80017ac:	0b3f      	lsrs	r7, r7, #12
 80017ae:	0d52      	lsrs	r2, r2, #21
 80017b0:	0fc9      	lsrs	r1, r1, #31
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	0fc0      	lsrs	r0, r0, #31
 80017b6:	42aa      	cmp	r2, r5
 80017b8:	d021      	beq.n	80017fe <__gedf2+0x72>
 80017ba:	42ab      	cmp	r3, r5
 80017bc:	d013      	beq.n	80017e6 <__gedf2+0x5a>
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d122      	bne.n	8001808 <__gedf2+0x7c>
 80017c2:	433c      	orrs	r4, r7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <__gedf2+0x42>
 80017c8:	464d      	mov	r5, r9
 80017ca:	432e      	orrs	r6, r5
 80017cc:	d022      	beq.n	8001814 <__gedf2+0x88>
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d010      	beq.n	80017f4 <__gedf2+0x68>
 80017d2:	4281      	cmp	r1, r0
 80017d4:	d022      	beq.n	800181c <__gedf2+0x90>
 80017d6:	2002      	movs	r0, #2
 80017d8:	3901      	subs	r1, #1
 80017da:	4008      	ands	r0, r1
 80017dc:	3801      	subs	r0, #1
 80017de:	bcc0      	pop	{r6, r7}
 80017e0:	46b9      	mov	r9, r7
 80017e2:	46b0      	mov	r8, r6
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	464d      	mov	r5, r9
 80017e8:	432e      	orrs	r6, r5
 80017ea:	d129      	bne.n	8001840 <__gedf2+0xb4>
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d1f0      	bne.n	80017d2 <__gedf2+0x46>
 80017f0:	433c      	orrs	r4, r7
 80017f2:	d1ee      	bne.n	80017d2 <__gedf2+0x46>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1f2      	bne.n	80017de <__gedf2+0x52>
 80017f8:	2001      	movs	r0, #1
 80017fa:	4240      	negs	r0, r0
 80017fc:	e7ef      	b.n	80017de <__gedf2+0x52>
 80017fe:	003d      	movs	r5, r7
 8001800:	4325      	orrs	r5, r4
 8001802:	d11d      	bne.n	8001840 <__gedf2+0xb4>
 8001804:	4293      	cmp	r3, r2
 8001806:	d0ee      	beq.n	80017e6 <__gedf2+0x5a>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e2      	bne.n	80017d2 <__gedf2+0x46>
 800180c:	464c      	mov	r4, r9
 800180e:	4326      	orrs	r6, r4
 8001810:	d1df      	bne.n	80017d2 <__gedf2+0x46>
 8001812:	e7e0      	b.n	80017d6 <__gedf2+0x4a>
 8001814:	2000      	movs	r0, #0
 8001816:	2c00      	cmp	r4, #0
 8001818:	d0e1      	beq.n	80017de <__gedf2+0x52>
 800181a:	e7dc      	b.n	80017d6 <__gedf2+0x4a>
 800181c:	429a      	cmp	r2, r3
 800181e:	dc0a      	bgt.n	8001836 <__gedf2+0xaa>
 8001820:	dbe8      	blt.n	80017f4 <__gedf2+0x68>
 8001822:	454f      	cmp	r7, r9
 8001824:	d8d7      	bhi.n	80017d6 <__gedf2+0x4a>
 8001826:	d00e      	beq.n	8001846 <__gedf2+0xba>
 8001828:	2000      	movs	r0, #0
 800182a:	454f      	cmp	r7, r9
 800182c:	d2d7      	bcs.n	80017de <__gedf2+0x52>
 800182e:	2900      	cmp	r1, #0
 8001830:	d0e2      	beq.n	80017f8 <__gedf2+0x6c>
 8001832:	0008      	movs	r0, r1
 8001834:	e7d3      	b.n	80017de <__gedf2+0x52>
 8001836:	4243      	negs	r3, r0
 8001838:	4158      	adcs	r0, r3
 800183a:	0040      	lsls	r0, r0, #1
 800183c:	3801      	subs	r0, #1
 800183e:	e7ce      	b.n	80017de <__gedf2+0x52>
 8001840:	2002      	movs	r0, #2
 8001842:	4240      	negs	r0, r0
 8001844:	e7cb      	b.n	80017de <__gedf2+0x52>
 8001846:	45c4      	cmp	ip, r8
 8001848:	d8c5      	bhi.n	80017d6 <__gedf2+0x4a>
 800184a:	2000      	movs	r0, #0
 800184c:	45c4      	cmp	ip, r8
 800184e:	d2c6      	bcs.n	80017de <__gedf2+0x52>
 8001850:	e7ed      	b.n	800182e <__gedf2+0xa2>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff

08001858 <__ledf2>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	4647      	mov	r7, r8
 800185c:	46ce      	mov	lr, r9
 800185e:	0004      	movs	r4, r0
 8001860:	0018      	movs	r0, r3
 8001862:	0016      	movs	r6, r2
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	0b1b      	lsrs	r3, r3, #12
 8001868:	4d2c      	ldr	r5, [pc, #176]	; (800191c <__ledf2+0xc4>)
 800186a:	004a      	lsls	r2, r1, #1
 800186c:	4699      	mov	r9, r3
 800186e:	b580      	push	{r7, lr}
 8001870:	0043      	lsls	r3, r0, #1
 8001872:	030f      	lsls	r7, r1, #12
 8001874:	46a4      	mov	ip, r4
 8001876:	46b0      	mov	r8, r6
 8001878:	0b3f      	lsrs	r7, r7, #12
 800187a:	0d52      	lsrs	r2, r2, #21
 800187c:	0fc9      	lsrs	r1, r1, #31
 800187e:	0d5b      	lsrs	r3, r3, #21
 8001880:	0fc0      	lsrs	r0, r0, #31
 8001882:	42aa      	cmp	r2, r5
 8001884:	d00d      	beq.n	80018a2 <__ledf2+0x4a>
 8001886:	42ab      	cmp	r3, r5
 8001888:	d010      	beq.n	80018ac <__ledf2+0x54>
 800188a:	2a00      	cmp	r2, #0
 800188c:	d127      	bne.n	80018de <__ledf2+0x86>
 800188e:	433c      	orrs	r4, r7
 8001890:	2b00      	cmp	r3, #0
 8001892:	d111      	bne.n	80018b8 <__ledf2+0x60>
 8001894:	464d      	mov	r5, r9
 8001896:	432e      	orrs	r6, r5
 8001898:	d10e      	bne.n	80018b8 <__ledf2+0x60>
 800189a:	2000      	movs	r0, #0
 800189c:	2c00      	cmp	r4, #0
 800189e:	d015      	beq.n	80018cc <__ledf2+0x74>
 80018a0:	e00e      	b.n	80018c0 <__ledf2+0x68>
 80018a2:	003d      	movs	r5, r7
 80018a4:	4325      	orrs	r5, r4
 80018a6:	d110      	bne.n	80018ca <__ledf2+0x72>
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d118      	bne.n	80018de <__ledf2+0x86>
 80018ac:	464d      	mov	r5, r9
 80018ae:	432e      	orrs	r6, r5
 80018b0:	d10b      	bne.n	80018ca <__ledf2+0x72>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d102      	bne.n	80018bc <__ledf2+0x64>
 80018b6:	433c      	orrs	r4, r7
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d00b      	beq.n	80018d4 <__ledf2+0x7c>
 80018bc:	4281      	cmp	r1, r0
 80018be:	d014      	beq.n	80018ea <__ledf2+0x92>
 80018c0:	2002      	movs	r0, #2
 80018c2:	3901      	subs	r1, #1
 80018c4:	4008      	ands	r0, r1
 80018c6:	3801      	subs	r0, #1
 80018c8:	e000      	b.n	80018cc <__ledf2+0x74>
 80018ca:	2002      	movs	r0, #2
 80018cc:	bcc0      	pop	{r6, r7}
 80018ce:	46b9      	mov	r9, r7
 80018d0:	46b0      	mov	r8, r6
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d1f9      	bne.n	80018cc <__ledf2+0x74>
 80018d8:	2001      	movs	r0, #1
 80018da:	4240      	negs	r0, r0
 80018dc:	e7f6      	b.n	80018cc <__ledf2+0x74>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ec      	bne.n	80018bc <__ledf2+0x64>
 80018e2:	464c      	mov	r4, r9
 80018e4:	4326      	orrs	r6, r4
 80018e6:	d1e9      	bne.n	80018bc <__ledf2+0x64>
 80018e8:	e7ea      	b.n	80018c0 <__ledf2+0x68>
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dd04      	ble.n	80018f8 <__ledf2+0xa0>
 80018ee:	4243      	negs	r3, r0
 80018f0:	4158      	adcs	r0, r3
 80018f2:	0040      	lsls	r0, r0, #1
 80018f4:	3801      	subs	r0, #1
 80018f6:	e7e9      	b.n	80018cc <__ledf2+0x74>
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbeb      	blt.n	80018d4 <__ledf2+0x7c>
 80018fc:	454f      	cmp	r7, r9
 80018fe:	d8df      	bhi.n	80018c0 <__ledf2+0x68>
 8001900:	d006      	beq.n	8001910 <__ledf2+0xb8>
 8001902:	2000      	movs	r0, #0
 8001904:	454f      	cmp	r7, r9
 8001906:	d2e1      	bcs.n	80018cc <__ledf2+0x74>
 8001908:	2900      	cmp	r1, #0
 800190a:	d0e5      	beq.n	80018d8 <__ledf2+0x80>
 800190c:	0008      	movs	r0, r1
 800190e:	e7dd      	b.n	80018cc <__ledf2+0x74>
 8001910:	45c4      	cmp	ip, r8
 8001912:	d8d5      	bhi.n	80018c0 <__ledf2+0x68>
 8001914:	2000      	movs	r0, #0
 8001916:	45c4      	cmp	ip, r8
 8001918:	d2d8      	bcs.n	80018cc <__ledf2+0x74>
 800191a:	e7f5      	b.n	8001908 <__ledf2+0xb0>
 800191c:	000007ff 	.word	0x000007ff

08001920 <__aeabi_dmul>:
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	4657      	mov	r7, sl
 8001924:	464e      	mov	r6, r9
 8001926:	4645      	mov	r5, r8
 8001928:	46de      	mov	lr, fp
 800192a:	b5e0      	push	{r5, r6, r7, lr}
 800192c:	4698      	mov	r8, r3
 800192e:	030c      	lsls	r4, r1, #12
 8001930:	004b      	lsls	r3, r1, #1
 8001932:	0006      	movs	r6, r0
 8001934:	4692      	mov	sl, r2
 8001936:	b087      	sub	sp, #28
 8001938:	0b24      	lsrs	r4, r4, #12
 800193a:	0d5b      	lsrs	r3, r3, #21
 800193c:	0fcf      	lsrs	r7, r1, #31
 800193e:	2b00      	cmp	r3, #0
 8001940:	d100      	bne.n	8001944 <__aeabi_dmul+0x24>
 8001942:	e15c      	b.n	8001bfe <__aeabi_dmul+0x2de>
 8001944:	4ad9      	ldr	r2, [pc, #868]	; (8001cac <__aeabi_dmul+0x38c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d100      	bne.n	800194c <__aeabi_dmul+0x2c>
 800194a:	e175      	b.n	8001c38 <__aeabi_dmul+0x318>
 800194c:	0f42      	lsrs	r2, r0, #29
 800194e:	00e4      	lsls	r4, r4, #3
 8001950:	4314      	orrs	r4, r2
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0412      	lsls	r2, r2, #16
 8001956:	4314      	orrs	r4, r2
 8001958:	4ad5      	ldr	r2, [pc, #852]	; (8001cb0 <__aeabi_dmul+0x390>)
 800195a:	00c5      	lsls	r5, r0, #3
 800195c:	4694      	mov	ip, r2
 800195e:	4463      	add	r3, ip
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	4699      	mov	r9, r3
 8001966:	469b      	mov	fp, r3
 8001968:	4643      	mov	r3, r8
 800196a:	4642      	mov	r2, r8
 800196c:	031e      	lsls	r6, r3, #12
 800196e:	0fd2      	lsrs	r2, r2, #31
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4650      	mov	r0, sl
 8001974:	4690      	mov	r8, r2
 8001976:	0b36      	lsrs	r6, r6, #12
 8001978:	0d5b      	lsrs	r3, r3, #21
 800197a:	d100      	bne.n	800197e <__aeabi_dmul+0x5e>
 800197c:	e120      	b.n	8001bc0 <__aeabi_dmul+0x2a0>
 800197e:	4acb      	ldr	r2, [pc, #812]	; (8001cac <__aeabi_dmul+0x38c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <__aeabi_dmul+0x66>
 8001984:	e162      	b.n	8001c4c <__aeabi_dmul+0x32c>
 8001986:	49ca      	ldr	r1, [pc, #808]	; (8001cb0 <__aeabi_dmul+0x390>)
 8001988:	0f42      	lsrs	r2, r0, #29
 800198a:	468c      	mov	ip, r1
 800198c:	9900      	ldr	r1, [sp, #0]
 800198e:	4463      	add	r3, ip
 8001990:	00f6      	lsls	r6, r6, #3
 8001992:	468c      	mov	ip, r1
 8001994:	4316      	orrs	r6, r2
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	449c      	add	ip, r3
 800199a:	0412      	lsls	r2, r2, #16
 800199c:	4663      	mov	r3, ip
 800199e:	4316      	orrs	r6, r2
 80019a0:	00c2      	lsls	r2, r0, #3
 80019a2:	2000      	movs	r0, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	9900      	ldr	r1, [sp, #0]
 80019a8:	4643      	mov	r3, r8
 80019aa:	3101      	adds	r1, #1
 80019ac:	468c      	mov	ip, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	407b      	eors	r3, r7
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	290f      	cmp	r1, #15
 80019b6:	d826      	bhi.n	8001a06 <__aeabi_dmul+0xe6>
 80019b8:	4bbe      	ldr	r3, [pc, #760]	; (8001cb4 <__aeabi_dmul+0x394>)
 80019ba:	0089      	lsls	r1, r1, #2
 80019bc:	5859      	ldr	r1, [r3, r1]
 80019be:	468f      	mov	pc, r1
 80019c0:	4643      	mov	r3, r8
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	0034      	movs	r4, r6
 80019c6:	0015      	movs	r5, r2
 80019c8:	4683      	mov	fp, r0
 80019ca:	465b      	mov	r3, fp
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d016      	beq.n	80019fe <__aeabi_dmul+0xde>
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dmul+0xb6>
 80019d4:	e203      	b.n	8001dde <__aeabi_dmul+0x4be>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d000      	beq.n	80019dc <__aeabi_dmul+0xbc>
 80019da:	e0cd      	b.n	8001b78 <__aeabi_dmul+0x258>
 80019dc:	2200      	movs	r2, #0
 80019de:	2400      	movs	r4, #0
 80019e0:	2500      	movs	r5, #0
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	0512      	lsls	r2, r2, #20
 80019e6:	4322      	orrs	r2, r4
 80019e8:	07db      	lsls	r3, r3, #31
 80019ea:	431a      	orrs	r2, r3
 80019ec:	0028      	movs	r0, r5
 80019ee:	0011      	movs	r1, r2
 80019f0:	b007      	add	sp, #28
 80019f2:	bcf0      	pop	{r4, r5, r6, r7}
 80019f4:	46bb      	mov	fp, r7
 80019f6:	46b2      	mov	sl, r6
 80019f8:	46a9      	mov	r9, r5
 80019fa:	46a0      	mov	r8, r4
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fe:	2400      	movs	r4, #0
 8001a00:	2500      	movs	r5, #0
 8001a02:	4aaa      	ldr	r2, [pc, #680]	; (8001cac <__aeabi_dmul+0x38c>)
 8001a04:	e7ed      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001a06:	0c28      	lsrs	r0, r5, #16
 8001a08:	042d      	lsls	r5, r5, #16
 8001a0a:	0c2d      	lsrs	r5, r5, #16
 8001a0c:	002b      	movs	r3, r5
 8001a0e:	0c11      	lsrs	r1, r2, #16
 8001a10:	0412      	lsls	r2, r2, #16
 8001a12:	0c12      	lsrs	r2, r2, #16
 8001a14:	4353      	muls	r3, r2
 8001a16:	4698      	mov	r8, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	002f      	movs	r7, r5
 8001a1c:	4343      	muls	r3, r0
 8001a1e:	4699      	mov	r9, r3
 8001a20:	434f      	muls	r7, r1
 8001a22:	444f      	add	r7, r9
 8001a24:	46bb      	mov	fp, r7
 8001a26:	4647      	mov	r7, r8
 8001a28:	000b      	movs	r3, r1
 8001a2a:	0c3f      	lsrs	r7, r7, #16
 8001a2c:	46ba      	mov	sl, r7
 8001a2e:	4343      	muls	r3, r0
 8001a30:	44da      	add	sl, fp
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	45d1      	cmp	r9, sl
 8001a36:	d904      	bls.n	8001a42 <__aeabi_dmul+0x122>
 8001a38:	2780      	movs	r7, #128	; 0x80
 8001a3a:	027f      	lsls	r7, r7, #9
 8001a3c:	46b9      	mov	r9, r7
 8001a3e:	444b      	add	r3, r9
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	4653      	mov	r3, sl
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	469b      	mov	fp, r3
 8001a48:	4653      	mov	r3, sl
 8001a4a:	041f      	lsls	r7, r3, #16
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	4698      	mov	r8, r3
 8001a54:	003b      	movs	r3, r7
 8001a56:	4443      	add	r3, r8
 8001a58:	9304      	str	r3, [sp, #16]
 8001a5a:	0c33      	lsrs	r3, r6, #16
 8001a5c:	0436      	lsls	r6, r6, #16
 8001a5e:	0c36      	lsrs	r6, r6, #16
 8001a60:	4698      	mov	r8, r3
 8001a62:	0033      	movs	r3, r6
 8001a64:	4343      	muls	r3, r0
 8001a66:	4699      	mov	r9, r3
 8001a68:	4643      	mov	r3, r8
 8001a6a:	4343      	muls	r3, r0
 8001a6c:	002f      	movs	r7, r5
 8001a6e:	469a      	mov	sl, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	4377      	muls	r7, r6
 8001a74:	435d      	muls	r5, r3
 8001a76:	0c38      	lsrs	r0, r7, #16
 8001a78:	444d      	add	r5, r9
 8001a7a:	1945      	adds	r5, r0, r5
 8001a7c:	45a9      	cmp	r9, r5
 8001a7e:	d903      	bls.n	8001a88 <__aeabi_dmul+0x168>
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	4699      	mov	r9, r3
 8001a86:	44ca      	add	sl, r9
 8001a88:	043f      	lsls	r7, r7, #16
 8001a8a:	0c28      	lsrs	r0, r5, #16
 8001a8c:	0c3f      	lsrs	r7, r7, #16
 8001a8e:	042d      	lsls	r5, r5, #16
 8001a90:	19ed      	adds	r5, r5, r7
 8001a92:	0c27      	lsrs	r7, r4, #16
 8001a94:	0424      	lsls	r4, r4, #16
 8001a96:	0c24      	lsrs	r4, r4, #16
 8001a98:	0003      	movs	r3, r0
 8001a9a:	0020      	movs	r0, r4
 8001a9c:	4350      	muls	r0, r2
 8001a9e:	437a      	muls	r2, r7
 8001aa0:	4691      	mov	r9, r2
 8001aa2:	003a      	movs	r2, r7
 8001aa4:	4453      	add	r3, sl
 8001aa6:	9305      	str	r3, [sp, #20]
 8001aa8:	0c03      	lsrs	r3, r0, #16
 8001aaa:	469a      	mov	sl, r3
 8001aac:	434a      	muls	r2, r1
 8001aae:	4361      	muls	r1, r4
 8001ab0:	4449      	add	r1, r9
 8001ab2:	4451      	add	r1, sl
 8001ab4:	44ab      	add	fp, r5
 8001ab6:	4589      	cmp	r9, r1
 8001ab8:	d903      	bls.n	8001ac2 <__aeabi_dmul+0x1a2>
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	4699      	mov	r9, r3
 8001ac0:	444a      	add	r2, r9
 8001ac2:	0400      	lsls	r0, r0, #16
 8001ac4:	0c0b      	lsrs	r3, r1, #16
 8001ac6:	0c00      	lsrs	r0, r0, #16
 8001ac8:	0409      	lsls	r1, r1, #16
 8001aca:	1809      	adds	r1, r1, r0
 8001acc:	0020      	movs	r0, r4
 8001ace:	4699      	mov	r9, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	4370      	muls	r0, r6
 8001ad4:	435c      	muls	r4, r3
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	435f      	muls	r7, r3
 8001ada:	0c03      	lsrs	r3, r0, #16
 8001adc:	4698      	mov	r8, r3
 8001ade:	19a4      	adds	r4, r4, r6
 8001ae0:	4444      	add	r4, r8
 8001ae2:	444a      	add	r2, r9
 8001ae4:	9703      	str	r7, [sp, #12]
 8001ae6:	42a6      	cmp	r6, r4
 8001ae8:	d904      	bls.n	8001af4 <__aeabi_dmul+0x1d4>
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	4698      	mov	r8, r3
 8001af0:	4447      	add	r7, r8
 8001af2:	9703      	str	r7, [sp, #12]
 8001af4:	0423      	lsls	r3, r4, #16
 8001af6:	9e02      	ldr	r6, [sp, #8]
 8001af8:	469a      	mov	sl, r3
 8001afa:	9b05      	ldr	r3, [sp, #20]
 8001afc:	445e      	add	r6, fp
 8001afe:	4698      	mov	r8, r3
 8001b00:	42ae      	cmp	r6, r5
 8001b02:	41ad      	sbcs	r5, r5
 8001b04:	1876      	adds	r6, r6, r1
 8001b06:	428e      	cmp	r6, r1
 8001b08:	4189      	sbcs	r1, r1
 8001b0a:	0400      	lsls	r0, r0, #16
 8001b0c:	0c00      	lsrs	r0, r0, #16
 8001b0e:	4450      	add	r0, sl
 8001b10:	4440      	add	r0, r8
 8001b12:	426d      	negs	r5, r5
 8001b14:	1947      	adds	r7, r0, r5
 8001b16:	46b8      	mov	r8, r7
 8001b18:	4693      	mov	fp, r2
 8001b1a:	4249      	negs	r1, r1
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	44c3      	add	fp, r8
 8001b20:	44d9      	add	r9, fp
 8001b22:	4298      	cmp	r0, r3
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	45a8      	cmp	r8, r5
 8001b28:	41ad      	sbcs	r5, r5
 8001b2a:	4593      	cmp	fp, r2
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	4589      	cmp	r9, r1
 8001b30:	4189      	sbcs	r1, r1
 8001b32:	426d      	negs	r5, r5
 8001b34:	4240      	negs	r0, r0
 8001b36:	4328      	orrs	r0, r5
 8001b38:	0c24      	lsrs	r4, r4, #16
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	1900      	adds	r0, r0, r4
 8001b44:	1880      	adds	r0, r0, r2
 8001b46:	18c7      	adds	r7, r0, r3
 8001b48:	464b      	mov	r3, r9
 8001b4a:	0ddc      	lsrs	r4, r3, #23
 8001b4c:	9b04      	ldr	r3, [sp, #16]
 8001b4e:	0275      	lsls	r5, r6, #9
 8001b50:	431d      	orrs	r5, r3
 8001b52:	1e6a      	subs	r2, r5, #1
 8001b54:	4195      	sbcs	r5, r2
 8001b56:	464b      	mov	r3, r9
 8001b58:	0df6      	lsrs	r6, r6, #23
 8001b5a:	027f      	lsls	r7, r7, #9
 8001b5c:	4335      	orrs	r5, r6
 8001b5e:	025a      	lsls	r2, r3, #9
 8001b60:	433c      	orrs	r4, r7
 8001b62:	4315      	orrs	r5, r2
 8001b64:	01fb      	lsls	r3, r7, #7
 8001b66:	d400      	bmi.n	8001b6a <__aeabi_dmul+0x24a>
 8001b68:	e11c      	b.n	8001da4 <__aeabi_dmul+0x484>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	086a      	lsrs	r2, r5, #1
 8001b6e:	400d      	ands	r5, r1
 8001b70:	4315      	orrs	r5, r2
 8001b72:	07e2      	lsls	r2, r4, #31
 8001b74:	4315      	orrs	r5, r2
 8001b76:	0864      	lsrs	r4, r4, #1
 8001b78:	494f      	ldr	r1, [pc, #316]	; (8001cb8 <__aeabi_dmul+0x398>)
 8001b7a:	4461      	add	r1, ip
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	dc00      	bgt.n	8001b82 <__aeabi_dmul+0x262>
 8001b80:	e0b0      	b.n	8001ce4 <__aeabi_dmul+0x3c4>
 8001b82:	076b      	lsls	r3, r5, #29
 8001b84:	d009      	beq.n	8001b9a <__aeabi_dmul+0x27a>
 8001b86:	220f      	movs	r2, #15
 8001b88:	402a      	ands	r2, r5
 8001b8a:	2a04      	cmp	r2, #4
 8001b8c:	d005      	beq.n	8001b9a <__aeabi_dmul+0x27a>
 8001b8e:	1d2a      	adds	r2, r5, #4
 8001b90:	42aa      	cmp	r2, r5
 8001b92:	41ad      	sbcs	r5, r5
 8001b94:	426d      	negs	r5, r5
 8001b96:	1964      	adds	r4, r4, r5
 8001b98:	0015      	movs	r5, r2
 8001b9a:	01e3      	lsls	r3, r4, #7
 8001b9c:	d504      	bpl.n	8001ba8 <__aeabi_dmul+0x288>
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <__aeabi_dmul+0x39c>)
 8001ba2:	00c9      	lsls	r1, r1, #3
 8001ba4:	4014      	ands	r4, r2
 8001ba6:	4461      	add	r1, ip
 8001ba8:	4a45      	ldr	r2, [pc, #276]	; (8001cc0 <__aeabi_dmul+0x3a0>)
 8001baa:	4291      	cmp	r1, r2
 8001bac:	dd00      	ble.n	8001bb0 <__aeabi_dmul+0x290>
 8001bae:	e726      	b.n	80019fe <__aeabi_dmul+0xde>
 8001bb0:	0762      	lsls	r2, r4, #29
 8001bb2:	08ed      	lsrs	r5, r5, #3
 8001bb4:	0264      	lsls	r4, r4, #9
 8001bb6:	0549      	lsls	r1, r1, #21
 8001bb8:	4315      	orrs	r5, r2
 8001bba:	0b24      	lsrs	r4, r4, #12
 8001bbc:	0d4a      	lsrs	r2, r1, #21
 8001bbe:	e710      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	4332      	orrs	r2, r6
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dmul+0x2a8>
 8001bc6:	e07f      	b.n	8001cc8 <__aeabi_dmul+0x3a8>
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d100      	bne.n	8001bce <__aeabi_dmul+0x2ae>
 8001bcc:	e0dc      	b.n	8001d88 <__aeabi_dmul+0x468>
 8001bce:	0030      	movs	r0, r6
 8001bd0:	f000 fe1e 	bl	8002810 <__clzsi2>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	3a0b      	subs	r2, #11
 8001bd8:	231d      	movs	r3, #29
 8001bda:	0001      	movs	r1, r0
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	4652      	mov	r2, sl
 8001be0:	3908      	subs	r1, #8
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	408e      	lsls	r6, r1
 8001be6:	4316      	orrs	r6, r2
 8001be8:	4652      	mov	r2, sl
 8001bea:	408a      	lsls	r2, r1
 8001bec:	9b00      	ldr	r3, [sp, #0]
 8001bee:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <__aeabi_dmul+0x3a4>)
 8001bf0:	1a18      	subs	r0, r3, r0
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4463      	add	r3, ip
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	e6d3      	b.n	80019a6 <__aeabi_dmul+0x86>
 8001bfe:	0025      	movs	r5, r4
 8001c00:	4305      	orrs	r5, r0
 8001c02:	d04a      	beq.n	8001c9a <__aeabi_dmul+0x37a>
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dmul+0x2ea>
 8001c08:	e0b0      	b.n	8001d6c <__aeabi_dmul+0x44c>
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f000 fe00 	bl	8002810 <__clzsi2>
 8001c10:	0001      	movs	r1, r0
 8001c12:	0002      	movs	r2, r0
 8001c14:	390b      	subs	r1, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	0010      	movs	r0, r2
 8001c1a:	1a5b      	subs	r3, r3, r1
 8001c1c:	0031      	movs	r1, r6
 8001c1e:	0035      	movs	r5, r6
 8001c20:	3808      	subs	r0, #8
 8001c22:	4084      	lsls	r4, r0
 8001c24:	40d9      	lsrs	r1, r3
 8001c26:	4085      	lsls	r5, r0
 8001c28:	430c      	orrs	r4, r1
 8001c2a:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <__aeabi_dmul+0x3a4>)
 8001c2c:	1a83      	subs	r3, r0, r2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	4699      	mov	r9, r3
 8001c34:	469b      	mov	fp, r3
 8001c36:	e697      	b.n	8001968 <__aeabi_dmul+0x48>
 8001c38:	0005      	movs	r5, r0
 8001c3a:	4325      	orrs	r5, r4
 8001c3c:	d126      	bne.n	8001c8c <__aeabi_dmul+0x36c>
 8001c3e:	2208      	movs	r2, #8
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2302      	movs	r3, #2
 8001c44:	2400      	movs	r4, #0
 8001c46:	4691      	mov	r9, r2
 8001c48:	469b      	mov	fp, r3
 8001c4a:	e68d      	b.n	8001968 <__aeabi_dmul+0x48>
 8001c4c:	4652      	mov	r2, sl
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	4332      	orrs	r2, r6
 8001c52:	d110      	bne.n	8001c76 <__aeabi_dmul+0x356>
 8001c54:	4915      	ldr	r1, [pc, #84]	; (8001cac <__aeabi_dmul+0x38c>)
 8001c56:	2600      	movs	r6, #0
 8001c58:	468c      	mov	ip, r1
 8001c5a:	4463      	add	r3, ip
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2302      	movs	r3, #2
 8001c62:	4319      	orrs	r1, r3
 8001c64:	4689      	mov	r9, r1
 8001c66:	2002      	movs	r0, #2
 8001c68:	e69d      	b.n	80019a6 <__aeabi_dmul+0x86>
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	9701      	str	r7, [sp, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dmul+0x354>
 8001c72:	e6ad      	b.n	80019d0 <__aeabi_dmul+0xb0>
 8001c74:	e6c3      	b.n	80019fe <__aeabi_dmul+0xde>
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <__aeabi_dmul+0x38c>)
 8001c78:	2003      	movs	r0, #3
 8001c7a:	4694      	mov	ip, r2
 8001c7c:	4463      	add	r3, ip
 8001c7e:	464a      	mov	r2, r9
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2303      	movs	r3, #3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	4691      	mov	r9, r2
 8001c88:	4652      	mov	r2, sl
 8001c8a:	e68c      	b.n	80019a6 <__aeabi_dmul+0x86>
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2303      	movs	r3, #3
 8001c92:	0005      	movs	r5, r0
 8001c94:	4691      	mov	r9, r2
 8001c96:	469b      	mov	fp, r3
 8001c98:	e666      	b.n	8001968 <__aeabi_dmul+0x48>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	469b      	mov	fp, r3
 8001ca8:	e65e      	b.n	8001968 <__aeabi_dmul+0x48>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	000007ff 	.word	0x000007ff
 8001cb0:	fffffc01 	.word	0xfffffc01
 8001cb4:	0800cc58 	.word	0x0800cc58
 8001cb8:	000003ff 	.word	0x000003ff
 8001cbc:	feffffff 	.word	0xfeffffff
 8001cc0:	000007fe 	.word	0x000007fe
 8001cc4:	fffffc0d 	.word	0xfffffc0d
 8001cc8:	4649      	mov	r1, r9
 8001cca:	2301      	movs	r3, #1
 8001ccc:	4319      	orrs	r1, r3
 8001cce:	4689      	mov	r9, r1
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e667      	b.n	80019a6 <__aeabi_dmul+0x86>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2480      	movs	r4, #128	; 0x80
 8001cda:	2500      	movs	r5, #0
 8001cdc:	4a43      	ldr	r2, [pc, #268]	; (8001dec <__aeabi_dmul+0x4cc>)
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	e67e      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	1a40      	subs	r0, r0, r1
 8001ce8:	2838      	cmp	r0, #56	; 0x38
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0x3ce>
 8001cec:	e676      	b.n	80019dc <__aeabi_dmul+0xbc>
 8001cee:	281f      	cmp	r0, #31
 8001cf0:	dd5b      	ble.n	8001daa <__aeabi_dmul+0x48a>
 8001cf2:	221f      	movs	r2, #31
 8001cf4:	0023      	movs	r3, r4
 8001cf6:	4252      	negs	r2, r2
 8001cf8:	1a51      	subs	r1, r2, r1
 8001cfa:	40cb      	lsrs	r3, r1
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	2820      	cmp	r0, #32
 8001d00:	d003      	beq.n	8001d0a <__aeabi_dmul+0x3ea>
 8001d02:	4a3b      	ldr	r2, [pc, #236]	; (8001df0 <__aeabi_dmul+0x4d0>)
 8001d04:	4462      	add	r2, ip
 8001d06:	4094      	lsls	r4, r2
 8001d08:	4325      	orrs	r5, r4
 8001d0a:	1e6a      	subs	r2, r5, #1
 8001d0c:	4195      	sbcs	r5, r2
 8001d0e:	002a      	movs	r2, r5
 8001d10:	430a      	orrs	r2, r1
 8001d12:	2107      	movs	r1, #7
 8001d14:	000d      	movs	r5, r1
 8001d16:	2400      	movs	r4, #0
 8001d18:	4015      	ands	r5, r2
 8001d1a:	4211      	tst	r1, r2
 8001d1c:	d05b      	beq.n	8001dd6 <__aeabi_dmul+0x4b6>
 8001d1e:	210f      	movs	r1, #15
 8001d20:	2400      	movs	r4, #0
 8001d22:	4011      	ands	r1, r2
 8001d24:	2904      	cmp	r1, #4
 8001d26:	d053      	beq.n	8001dd0 <__aeabi_dmul+0x4b0>
 8001d28:	1d11      	adds	r1, r2, #4
 8001d2a:	4291      	cmp	r1, r2
 8001d2c:	4192      	sbcs	r2, r2
 8001d2e:	4252      	negs	r2, r2
 8001d30:	18a4      	adds	r4, r4, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	0223      	lsls	r3, r4, #8
 8001d36:	d54b      	bpl.n	8001dd0 <__aeabi_dmul+0x4b0>
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	e650      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	421c      	tst	r4, r3
 8001d46:	d009      	beq.n	8001d5c <__aeabi_dmul+0x43c>
 8001d48:	421e      	tst	r6, r3
 8001d4a:	d107      	bne.n	8001d5c <__aeabi_dmul+0x43c>
 8001d4c:	4333      	orrs	r3, r6
 8001d4e:	031c      	lsls	r4, r3, #12
 8001d50:	4643      	mov	r3, r8
 8001d52:	0015      	movs	r5, r2
 8001d54:	0b24      	lsrs	r4, r4, #12
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <__aeabi_dmul+0x4cc>)
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	e642      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0312      	lsls	r2, r2, #12
 8001d60:	4314      	orrs	r4, r2
 8001d62:	0324      	lsls	r4, r4, #12
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <__aeabi_dmul+0x4cc>)
 8001d66:	0b24      	lsrs	r4, r4, #12
 8001d68:	9701      	str	r7, [sp, #4]
 8001d6a:	e63a      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001d6c:	f000 fd50 	bl	8002810 <__clzsi2>
 8001d70:	0001      	movs	r1, r0
 8001d72:	0002      	movs	r2, r0
 8001d74:	3115      	adds	r1, #21
 8001d76:	3220      	adds	r2, #32
 8001d78:	291c      	cmp	r1, #28
 8001d7a:	dc00      	bgt.n	8001d7e <__aeabi_dmul+0x45e>
 8001d7c:	e74b      	b.n	8001c16 <__aeabi_dmul+0x2f6>
 8001d7e:	0034      	movs	r4, r6
 8001d80:	3808      	subs	r0, #8
 8001d82:	2500      	movs	r5, #0
 8001d84:	4084      	lsls	r4, r0
 8001d86:	e750      	b.n	8001c2a <__aeabi_dmul+0x30a>
 8001d88:	f000 fd42 	bl	8002810 <__clzsi2>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	3215      	adds	r2, #21
 8001d92:	3020      	adds	r0, #32
 8001d94:	2a1c      	cmp	r2, #28
 8001d96:	dc00      	bgt.n	8001d9a <__aeabi_dmul+0x47a>
 8001d98:	e71e      	b.n	8001bd8 <__aeabi_dmul+0x2b8>
 8001d9a:	4656      	mov	r6, sl
 8001d9c:	3b08      	subs	r3, #8
 8001d9e:	2200      	movs	r2, #0
 8001da0:	409e      	lsls	r6, r3
 8001da2:	e723      	b.n	8001bec <__aeabi_dmul+0x2cc>
 8001da4:	9b00      	ldr	r3, [sp, #0]
 8001da6:	469c      	mov	ip, r3
 8001da8:	e6e6      	b.n	8001b78 <__aeabi_dmul+0x258>
 8001daa:	4912      	ldr	r1, [pc, #72]	; (8001df4 <__aeabi_dmul+0x4d4>)
 8001dac:	0022      	movs	r2, r4
 8001dae:	4461      	add	r1, ip
 8001db0:	002e      	movs	r6, r5
 8001db2:	408d      	lsls	r5, r1
 8001db4:	408a      	lsls	r2, r1
 8001db6:	40c6      	lsrs	r6, r0
 8001db8:	1e69      	subs	r1, r5, #1
 8001dba:	418d      	sbcs	r5, r1
 8001dbc:	4332      	orrs	r2, r6
 8001dbe:	432a      	orrs	r2, r5
 8001dc0:	40c4      	lsrs	r4, r0
 8001dc2:	0753      	lsls	r3, r2, #29
 8001dc4:	d0b6      	beq.n	8001d34 <__aeabi_dmul+0x414>
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	4011      	ands	r1, r2
 8001dca:	2904      	cmp	r1, #4
 8001dcc:	d1ac      	bne.n	8001d28 <__aeabi_dmul+0x408>
 8001dce:	e7b1      	b.n	8001d34 <__aeabi_dmul+0x414>
 8001dd0:	0765      	lsls	r5, r4, #29
 8001dd2:	0264      	lsls	r4, r4, #9
 8001dd4:	0b24      	lsrs	r4, r4, #12
 8001dd6:	08d2      	lsrs	r2, r2, #3
 8001dd8:	4315      	orrs	r5, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	e601      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0312      	lsls	r2, r2, #12
 8001de2:	4314      	orrs	r4, r2
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	4a01      	ldr	r2, [pc, #4]	; (8001dec <__aeabi_dmul+0x4cc>)
 8001de8:	0b24      	lsrs	r4, r4, #12
 8001dea:	e5fa      	b.n	80019e2 <__aeabi_dmul+0xc2>
 8001dec:	000007ff 	.word	0x000007ff
 8001df0:	0000043e 	.word	0x0000043e
 8001df4:	0000041e 	.word	0x0000041e

08001df8 <__aeabi_dsub>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	4657      	mov	r7, sl
 8001dfc:	464e      	mov	r6, r9
 8001dfe:	4645      	mov	r5, r8
 8001e00:	46de      	mov	lr, fp
 8001e02:	b5e0      	push	{r5, r6, r7, lr}
 8001e04:	001e      	movs	r6, r3
 8001e06:	0017      	movs	r7, r2
 8001e08:	004a      	lsls	r2, r1, #1
 8001e0a:	030b      	lsls	r3, r1, #12
 8001e0c:	0d52      	lsrs	r2, r2, #21
 8001e0e:	0a5b      	lsrs	r3, r3, #9
 8001e10:	4690      	mov	r8, r2
 8001e12:	0f42      	lsrs	r2, r0, #29
 8001e14:	431a      	orrs	r2, r3
 8001e16:	0fcd      	lsrs	r5, r1, #31
 8001e18:	4ccd      	ldr	r4, [pc, #820]	; (8002150 <__aeabi_dsub+0x358>)
 8001e1a:	0331      	lsls	r1, r6, #12
 8001e1c:	00c3      	lsls	r3, r0, #3
 8001e1e:	4694      	mov	ip, r2
 8001e20:	0070      	lsls	r0, r6, #1
 8001e22:	0f7a      	lsrs	r2, r7, #29
 8001e24:	0a49      	lsrs	r1, r1, #9
 8001e26:	00ff      	lsls	r7, r7, #3
 8001e28:	469a      	mov	sl, r3
 8001e2a:	46b9      	mov	r9, r7
 8001e2c:	0d40      	lsrs	r0, r0, #21
 8001e2e:	0ff6      	lsrs	r6, r6, #31
 8001e30:	4311      	orrs	r1, r2
 8001e32:	42a0      	cmp	r0, r4
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x40>
 8001e36:	e0b1      	b.n	8001f9c <__aeabi_dsub+0x1a4>
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4056      	eors	r6, r2
 8001e3c:	46b3      	mov	fp, r6
 8001e3e:	42b5      	cmp	r5, r6
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x4c>
 8001e42:	e088      	b.n	8001f56 <__aeabi_dsub+0x15e>
 8001e44:	4642      	mov	r2, r8
 8001e46:	1a12      	subs	r2, r2, r0
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	dc00      	bgt.n	8001e4e <__aeabi_dsub+0x56>
 8001e4c:	e0ae      	b.n	8001fac <__aeabi_dsub+0x1b4>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x5c>
 8001e52:	e0c1      	b.n	8001fd8 <__aeabi_dsub+0x1e0>
 8001e54:	48be      	ldr	r0, [pc, #760]	; (8002150 <__aeabi_dsub+0x358>)
 8001e56:	4580      	cmp	r8, r0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x64>
 8001e5a:	e151      	b.n	8002100 <__aeabi_dsub+0x308>
 8001e5c:	2080      	movs	r0, #128	; 0x80
 8001e5e:	0400      	lsls	r0, r0, #16
 8001e60:	4301      	orrs	r1, r0
 8001e62:	2a38      	cmp	r2, #56	; 0x38
 8001e64:	dd00      	ble.n	8001e68 <__aeabi_dsub+0x70>
 8001e66:	e17b      	b.n	8002160 <__aeabi_dsub+0x368>
 8001e68:	2a1f      	cmp	r2, #31
 8001e6a:	dd00      	ble.n	8001e6e <__aeabi_dsub+0x76>
 8001e6c:	e1ee      	b.n	800224c <__aeabi_dsub+0x454>
 8001e6e:	2020      	movs	r0, #32
 8001e70:	003e      	movs	r6, r7
 8001e72:	1a80      	subs	r0, r0, r2
 8001e74:	000c      	movs	r4, r1
 8001e76:	40d6      	lsrs	r6, r2
 8001e78:	40d1      	lsrs	r1, r2
 8001e7a:	4087      	lsls	r7, r0
 8001e7c:	4662      	mov	r2, ip
 8001e7e:	4084      	lsls	r4, r0
 8001e80:	1a52      	subs	r2, r2, r1
 8001e82:	1e78      	subs	r0, r7, #1
 8001e84:	4187      	sbcs	r7, r0
 8001e86:	4694      	mov	ip, r2
 8001e88:	4334      	orrs	r4, r6
 8001e8a:	4327      	orrs	r7, r4
 8001e8c:	1bdc      	subs	r4, r3, r7
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	419b      	sbcs	r3, r3
 8001e92:	4662      	mov	r2, ip
 8001e94:	425b      	negs	r3, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4699      	mov	r9, r3
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	d400      	bmi.n	8001ea2 <__aeabi_dsub+0xaa>
 8001ea0:	e118      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	0258      	lsls	r0, r3, #9
 8001ea6:	0a43      	lsrs	r3, r0, #9
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	464b      	mov	r3, r9
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0xba>
 8001eb0:	e137      	b.n	8002122 <__aeabi_dsub+0x32a>
 8001eb2:	4648      	mov	r0, r9
 8001eb4:	f000 fcac 	bl	8002810 <__clzsi2>
 8001eb8:	0001      	movs	r1, r0
 8001eba:	3908      	subs	r1, #8
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	0022      	movs	r2, r4
 8001ec0:	4648      	mov	r0, r9
 8001ec2:	1a5b      	subs	r3, r3, r1
 8001ec4:	40da      	lsrs	r2, r3
 8001ec6:	4088      	lsls	r0, r1
 8001ec8:	408c      	lsls	r4, r1
 8001eca:	4643      	mov	r3, r8
 8001ecc:	4310      	orrs	r0, r2
 8001ece:	4588      	cmp	r8, r1
 8001ed0:	dd00      	ble.n	8001ed4 <__aeabi_dsub+0xdc>
 8001ed2:	e136      	b.n	8002142 <__aeabi_dsub+0x34a>
 8001ed4:	1ac9      	subs	r1, r1, r3
 8001ed6:	1c4b      	adds	r3, r1, #1
 8001ed8:	2b1f      	cmp	r3, #31
 8001eda:	dd00      	ble.n	8001ede <__aeabi_dsub+0xe6>
 8001edc:	e0ea      	b.n	80020b4 <__aeabi_dsub+0x2bc>
 8001ede:	2220      	movs	r2, #32
 8001ee0:	0026      	movs	r6, r4
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	0001      	movs	r1, r0
 8001ee6:	4094      	lsls	r4, r2
 8001ee8:	40de      	lsrs	r6, r3
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	4091      	lsls	r1, r2
 8001ef0:	1e62      	subs	r2, r4, #1
 8001ef2:	4194      	sbcs	r4, r2
 8001ef4:	4681      	mov	r9, r0
 8001ef6:	4698      	mov	r8, r3
 8001ef8:	4331      	orrs	r1, r6
 8001efa:	430c      	orrs	r4, r1
 8001efc:	0763      	lsls	r3, r4, #29
 8001efe:	d009      	beq.n	8001f14 <__aeabi_dsub+0x11c>
 8001f00:	230f      	movs	r3, #15
 8001f02:	4023      	ands	r3, r4
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d005      	beq.n	8001f14 <__aeabi_dsub+0x11c>
 8001f08:	1d23      	adds	r3, r4, #4
 8001f0a:	42a3      	cmp	r3, r4
 8001f0c:	41a4      	sbcs	r4, r4
 8001f0e:	4264      	negs	r4, r4
 8001f10:	44a1      	add	r9, r4
 8001f12:	001c      	movs	r4, r3
 8001f14:	464b      	mov	r3, r9
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	d400      	bmi.n	8001f1c <__aeabi_dsub+0x124>
 8001f1a:	e0de      	b.n	80020da <__aeabi_dsub+0x2e2>
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <__aeabi_dsub+0x358>)
 8001f20:	3101      	adds	r1, #1
 8001f22:	4299      	cmp	r1, r3
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0x130>
 8001f26:	e0e7      	b.n	80020f8 <__aeabi_dsub+0x300>
 8001f28:	464b      	mov	r3, r9
 8001f2a:	488a      	ldr	r0, [pc, #552]	; (8002154 <__aeabi_dsub+0x35c>)
 8001f2c:	08e4      	lsrs	r4, r4, #3
 8001f2e:	4003      	ands	r3, r0
 8001f30:	0018      	movs	r0, r3
 8001f32:	0549      	lsls	r1, r1, #21
 8001f34:	075b      	lsls	r3, r3, #29
 8001f36:	0240      	lsls	r0, r0, #9
 8001f38:	4323      	orrs	r3, r4
 8001f3a:	0d4a      	lsrs	r2, r1, #21
 8001f3c:	0b04      	lsrs	r4, r0, #12
 8001f3e:	0512      	lsls	r2, r2, #20
 8001f40:	07ed      	lsls	r5, r5, #31
 8001f42:	4322      	orrs	r2, r4
 8001f44:	432a      	orrs	r2, r5
 8001f46:	0018      	movs	r0, r3
 8001f48:	0011      	movs	r1, r2
 8001f4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f4c:	46bb      	mov	fp, r7
 8001f4e:	46b2      	mov	sl, r6
 8001f50:	46a9      	mov	r9, r5
 8001f52:	46a0      	mov	r8, r4
 8001f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f56:	4642      	mov	r2, r8
 8001f58:	1a12      	subs	r2, r2, r0
 8001f5a:	2a00      	cmp	r2, #0
 8001f5c:	dd52      	ble.n	8002004 <__aeabi_dsub+0x20c>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x16c>
 8001f62:	e09c      	b.n	800209e <__aeabi_dsub+0x2a6>
 8001f64:	45a0      	cmp	r8, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x172>
 8001f68:	e0ca      	b.n	8002100 <__aeabi_dsub+0x308>
 8001f6a:	2080      	movs	r0, #128	; 0x80
 8001f6c:	0400      	lsls	r0, r0, #16
 8001f6e:	4301      	orrs	r1, r0
 8001f70:	2a38      	cmp	r2, #56	; 0x38
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x17e>
 8001f74:	e149      	b.n	800220a <__aeabi_dsub+0x412>
 8001f76:	2a1f      	cmp	r2, #31
 8001f78:	dc00      	bgt.n	8001f7c <__aeabi_dsub+0x184>
 8001f7a:	e197      	b.n	80022ac <__aeabi_dsub+0x4b4>
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	000e      	movs	r6, r1
 8001f80:	3820      	subs	r0, #32
 8001f82:	40c6      	lsrs	r6, r0
 8001f84:	2a20      	cmp	r2, #32
 8001f86:	d004      	beq.n	8001f92 <__aeabi_dsub+0x19a>
 8001f88:	2040      	movs	r0, #64	; 0x40
 8001f8a:	1a82      	subs	r2, r0, r2
 8001f8c:	4091      	lsls	r1, r2
 8001f8e:	430f      	orrs	r7, r1
 8001f90:	46b9      	mov	r9, r7
 8001f92:	464c      	mov	r4, r9
 8001f94:	1e62      	subs	r2, r4, #1
 8001f96:	4194      	sbcs	r4, r2
 8001f98:	4334      	orrs	r4, r6
 8001f9a:	e13a      	b.n	8002212 <__aeabi_dsub+0x41a>
 8001f9c:	000a      	movs	r2, r1
 8001f9e:	433a      	orrs	r2, r7
 8001fa0:	d028      	beq.n	8001ff4 <__aeabi_dsub+0x1fc>
 8001fa2:	46b3      	mov	fp, r6
 8001fa4:	42b5      	cmp	r5, r6
 8001fa6:	d02b      	beq.n	8002000 <__aeabi_dsub+0x208>
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <__aeabi_dsub+0x360>)
 8001faa:	4442      	add	r2, r8
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d05d      	beq.n	800206c <__aeabi_dsub+0x274>
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	4644      	mov	r4, r8
 8001fb4:	1a82      	subs	r2, r0, r2
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_dsub+0x1c4>
 8001fba:	e0f5      	b.n	80021a8 <__aeabi_dsub+0x3b0>
 8001fbc:	4665      	mov	r5, ip
 8001fbe:	431d      	orrs	r5, r3
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x1cc>
 8001fc2:	e19c      	b.n	80022fe <__aeabi_dsub+0x506>
 8001fc4:	1e55      	subs	r5, r2, #1
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x1d4>
 8001fca:	e1fb      	b.n	80023c4 <__aeabi_dsub+0x5cc>
 8001fcc:	4c60      	ldr	r4, [pc, #384]	; (8002150 <__aeabi_dsub+0x358>)
 8001fce:	42a2      	cmp	r2, r4
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x1dc>
 8001fd2:	e1bd      	b.n	8002350 <__aeabi_dsub+0x558>
 8001fd4:	002a      	movs	r2, r5
 8001fd6:	e0f0      	b.n	80021ba <__aeabi_dsub+0x3c2>
 8001fd8:	0008      	movs	r0, r1
 8001fda:	4338      	orrs	r0, r7
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x1e8>
 8001fde:	e0c3      	b.n	8002168 <__aeabi_dsub+0x370>
 8001fe0:	1e50      	subs	r0, r2, #1
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x1f0>
 8001fe6:	e1a8      	b.n	800233a <__aeabi_dsub+0x542>
 8001fe8:	4c59      	ldr	r4, [pc, #356]	; (8002150 <__aeabi_dsub+0x358>)
 8001fea:	42a2      	cmp	r2, r4
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x1f8>
 8001fee:	e087      	b.n	8002100 <__aeabi_dsub+0x308>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	e736      	b.n	8001e62 <__aeabi_dsub+0x6a>
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4056      	eors	r6, r2
 8001ff8:	46b3      	mov	fp, r6
 8001ffa:	42b5      	cmp	r5, r6
 8001ffc:	d000      	beq.n	8002000 <__aeabi_dsub+0x208>
 8001ffe:	e721      	b.n	8001e44 <__aeabi_dsub+0x4c>
 8002000:	4a55      	ldr	r2, [pc, #340]	; (8002158 <__aeabi_dsub+0x360>)
 8002002:	4442      	add	r2, r8
 8002004:	2a00      	cmp	r2, #0
 8002006:	d100      	bne.n	800200a <__aeabi_dsub+0x212>
 8002008:	e0b5      	b.n	8002176 <__aeabi_dsub+0x37e>
 800200a:	4642      	mov	r2, r8
 800200c:	4644      	mov	r4, r8
 800200e:	1a82      	subs	r2, r0, r2
 8002010:	2c00      	cmp	r4, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x21e>
 8002014:	e138      	b.n	8002288 <__aeabi_dsub+0x490>
 8002016:	4e4e      	ldr	r6, [pc, #312]	; (8002150 <__aeabi_dsub+0x358>)
 8002018:	42b0      	cmp	r0, r6
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x226>
 800201c:	e1de      	b.n	80023dc <__aeabi_dsub+0x5e4>
 800201e:	2680      	movs	r6, #128	; 0x80
 8002020:	4664      	mov	r4, ip
 8002022:	0436      	lsls	r6, r6, #16
 8002024:	4334      	orrs	r4, r6
 8002026:	46a4      	mov	ip, r4
 8002028:	2a38      	cmp	r2, #56	; 0x38
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x236>
 800202c:	e196      	b.n	800235c <__aeabi_dsub+0x564>
 800202e:	2a1f      	cmp	r2, #31
 8002030:	dd00      	ble.n	8002034 <__aeabi_dsub+0x23c>
 8002032:	e224      	b.n	800247e <__aeabi_dsub+0x686>
 8002034:	2620      	movs	r6, #32
 8002036:	1ab4      	subs	r4, r6, r2
 8002038:	46a2      	mov	sl, r4
 800203a:	4664      	mov	r4, ip
 800203c:	4656      	mov	r6, sl
 800203e:	40b4      	lsls	r4, r6
 8002040:	46a1      	mov	r9, r4
 8002042:	001c      	movs	r4, r3
 8002044:	464e      	mov	r6, r9
 8002046:	40d4      	lsrs	r4, r2
 8002048:	4326      	orrs	r6, r4
 800204a:	0034      	movs	r4, r6
 800204c:	4656      	mov	r6, sl
 800204e:	40b3      	lsls	r3, r6
 8002050:	1e5e      	subs	r6, r3, #1
 8002052:	41b3      	sbcs	r3, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	4663      	mov	r3, ip
 8002058:	40d3      	lsrs	r3, r2
 800205a:	18c9      	adds	r1, r1, r3
 800205c:	19e4      	adds	r4, r4, r7
 800205e:	42bc      	cmp	r4, r7
 8002060:	41bf      	sbcs	r7, r7
 8002062:	427f      	negs	r7, r7
 8002064:	46b9      	mov	r9, r7
 8002066:	4680      	mov	r8, r0
 8002068:	4489      	add	r9, r1
 800206a:	e0d8      	b.n	800221e <__aeabi_dsub+0x426>
 800206c:	4640      	mov	r0, r8
 800206e:	4c3b      	ldr	r4, [pc, #236]	; (800215c <__aeabi_dsub+0x364>)
 8002070:	3001      	adds	r0, #1
 8002072:	4220      	tst	r0, r4
 8002074:	d000      	beq.n	8002078 <__aeabi_dsub+0x280>
 8002076:	e0b4      	b.n	80021e2 <__aeabi_dsub+0x3ea>
 8002078:	4640      	mov	r0, r8
 800207a:	2800      	cmp	r0, #0
 800207c:	d000      	beq.n	8002080 <__aeabi_dsub+0x288>
 800207e:	e144      	b.n	800230a <__aeabi_dsub+0x512>
 8002080:	4660      	mov	r0, ip
 8002082:	4318      	orrs	r0, r3
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x290>
 8002086:	e190      	b.n	80023aa <__aeabi_dsub+0x5b2>
 8002088:	0008      	movs	r0, r1
 800208a:	4338      	orrs	r0, r7
 800208c:	d000      	beq.n	8002090 <__aeabi_dsub+0x298>
 800208e:	e1aa      	b.n	80023e6 <__aeabi_dsub+0x5ee>
 8002090:	4661      	mov	r1, ip
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	0749      	lsls	r1, r1, #29
 8002096:	430b      	orrs	r3, r1
 8002098:	4661      	mov	r1, ip
 800209a:	08cc      	lsrs	r4, r1, #3
 800209c:	e027      	b.n	80020ee <__aeabi_dsub+0x2f6>
 800209e:	0008      	movs	r0, r1
 80020a0:	4338      	orrs	r0, r7
 80020a2:	d061      	beq.n	8002168 <__aeabi_dsub+0x370>
 80020a4:	1e50      	subs	r0, r2, #1
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x2b4>
 80020aa:	e139      	b.n	8002320 <__aeabi_dsub+0x528>
 80020ac:	42a2      	cmp	r2, r4
 80020ae:	d027      	beq.n	8002100 <__aeabi_dsub+0x308>
 80020b0:	0002      	movs	r2, r0
 80020b2:	e75d      	b.n	8001f70 <__aeabi_dsub+0x178>
 80020b4:	0002      	movs	r2, r0
 80020b6:	391f      	subs	r1, #31
 80020b8:	40ca      	lsrs	r2, r1
 80020ba:	0011      	movs	r1, r2
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d003      	beq.n	80020c8 <__aeabi_dsub+0x2d0>
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4098      	lsls	r0, r3
 80020c6:	4304      	orrs	r4, r0
 80020c8:	1e63      	subs	r3, r4, #1
 80020ca:	419c      	sbcs	r4, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	4699      	mov	r9, r3
 80020d0:	4698      	mov	r8, r3
 80020d2:	430c      	orrs	r4, r1
 80020d4:	0763      	lsls	r3, r4, #29
 80020d6:	d000      	beq.n	80020da <__aeabi_dsub+0x2e2>
 80020d8:	e712      	b.n	8001f00 <__aeabi_dsub+0x108>
 80020da:	464b      	mov	r3, r9
 80020dc:	464a      	mov	r2, r9
 80020de:	08e4      	lsrs	r4, r4, #3
 80020e0:	075b      	lsls	r3, r3, #29
 80020e2:	4323      	orrs	r3, r4
 80020e4:	08d4      	lsrs	r4, r2, #3
 80020e6:	4642      	mov	r2, r8
 80020e8:	4919      	ldr	r1, [pc, #100]	; (8002150 <__aeabi_dsub+0x358>)
 80020ea:	428a      	cmp	r2, r1
 80020ec:	d00e      	beq.n	800210c <__aeabi_dsub+0x314>
 80020ee:	0324      	lsls	r4, r4, #12
 80020f0:	0552      	lsls	r2, r2, #21
 80020f2:	0b24      	lsrs	r4, r4, #12
 80020f4:	0d52      	lsrs	r2, r2, #21
 80020f6:	e722      	b.n	8001f3e <__aeabi_dsub+0x146>
 80020f8:	000a      	movs	r2, r1
 80020fa:	2400      	movs	r4, #0
 80020fc:	2300      	movs	r3, #0
 80020fe:	e71e      	b.n	8001f3e <__aeabi_dsub+0x146>
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	4662      	mov	r2, ip
 8002104:	0752      	lsls	r2, r2, #29
 8002106:	4313      	orrs	r3, r2
 8002108:	4662      	mov	r2, ip
 800210a:	08d4      	lsrs	r4, r2, #3
 800210c:	001a      	movs	r2, r3
 800210e:	4322      	orrs	r2, r4
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x31c>
 8002112:	e1fc      	b.n	800250e <__aeabi_dsub+0x716>
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	0312      	lsls	r2, r2, #12
 8002118:	4314      	orrs	r4, r2
 800211a:	0324      	lsls	r4, r4, #12
 800211c:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <__aeabi_dsub+0x358>)
 800211e:	0b24      	lsrs	r4, r4, #12
 8002120:	e70d      	b.n	8001f3e <__aeabi_dsub+0x146>
 8002122:	0020      	movs	r0, r4
 8002124:	f000 fb74 	bl	8002810 <__clzsi2>
 8002128:	0001      	movs	r1, r0
 800212a:	3118      	adds	r1, #24
 800212c:	291f      	cmp	r1, #31
 800212e:	dc00      	bgt.n	8002132 <__aeabi_dsub+0x33a>
 8002130:	e6c4      	b.n	8001ebc <__aeabi_dsub+0xc4>
 8002132:	3808      	subs	r0, #8
 8002134:	4084      	lsls	r4, r0
 8002136:	4643      	mov	r3, r8
 8002138:	0020      	movs	r0, r4
 800213a:	2400      	movs	r4, #0
 800213c:	4588      	cmp	r8, r1
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dsub+0x34a>
 8002140:	e6c8      	b.n	8001ed4 <__aeabi_dsub+0xdc>
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__aeabi_dsub+0x35c>)
 8002144:	1a5b      	subs	r3, r3, r1
 8002146:	4010      	ands	r0, r2
 8002148:	4698      	mov	r8, r3
 800214a:	4681      	mov	r9, r0
 800214c:	e6d6      	b.n	8001efc <__aeabi_dsub+0x104>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff
 8002154:	ff7fffff 	.word	0xff7fffff
 8002158:	fffff801 	.word	0xfffff801
 800215c:	000007fe 	.word	0x000007fe
 8002160:	430f      	orrs	r7, r1
 8002162:	1e7a      	subs	r2, r7, #1
 8002164:	4197      	sbcs	r7, r2
 8002166:	e691      	b.n	8001e8c <__aeabi_dsub+0x94>
 8002168:	4661      	mov	r1, ip
 800216a:	08db      	lsrs	r3, r3, #3
 800216c:	0749      	lsls	r1, r1, #29
 800216e:	430b      	orrs	r3, r1
 8002170:	4661      	mov	r1, ip
 8002172:	08cc      	lsrs	r4, r1, #3
 8002174:	e7b8      	b.n	80020e8 <__aeabi_dsub+0x2f0>
 8002176:	4640      	mov	r0, r8
 8002178:	4cd3      	ldr	r4, [pc, #844]	; (80024c8 <__aeabi_dsub+0x6d0>)
 800217a:	3001      	adds	r0, #1
 800217c:	4220      	tst	r0, r4
 800217e:	d000      	beq.n	8002182 <__aeabi_dsub+0x38a>
 8002180:	e0a2      	b.n	80022c8 <__aeabi_dsub+0x4d0>
 8002182:	4640      	mov	r0, r8
 8002184:	2800      	cmp	r0, #0
 8002186:	d000      	beq.n	800218a <__aeabi_dsub+0x392>
 8002188:	e101      	b.n	800238e <__aeabi_dsub+0x596>
 800218a:	4660      	mov	r0, ip
 800218c:	4318      	orrs	r0, r3
 800218e:	d100      	bne.n	8002192 <__aeabi_dsub+0x39a>
 8002190:	e15e      	b.n	8002450 <__aeabi_dsub+0x658>
 8002192:	0008      	movs	r0, r1
 8002194:	4338      	orrs	r0, r7
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x3a2>
 8002198:	e15f      	b.n	800245a <__aeabi_dsub+0x662>
 800219a:	4661      	mov	r1, ip
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	0749      	lsls	r1, r1, #29
 80021a0:	430b      	orrs	r3, r1
 80021a2:	4661      	mov	r1, ip
 80021a4:	08cc      	lsrs	r4, r1, #3
 80021a6:	e7a2      	b.n	80020ee <__aeabi_dsub+0x2f6>
 80021a8:	4dc8      	ldr	r5, [pc, #800]	; (80024cc <__aeabi_dsub+0x6d4>)
 80021aa:	42a8      	cmp	r0, r5
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x3b8>
 80021ae:	e0cf      	b.n	8002350 <__aeabi_dsub+0x558>
 80021b0:	2580      	movs	r5, #128	; 0x80
 80021b2:	4664      	mov	r4, ip
 80021b4:	042d      	lsls	r5, r5, #16
 80021b6:	432c      	orrs	r4, r5
 80021b8:	46a4      	mov	ip, r4
 80021ba:	2a38      	cmp	r2, #56	; 0x38
 80021bc:	dc56      	bgt.n	800226c <__aeabi_dsub+0x474>
 80021be:	2a1f      	cmp	r2, #31
 80021c0:	dd00      	ble.n	80021c4 <__aeabi_dsub+0x3cc>
 80021c2:	e0d1      	b.n	8002368 <__aeabi_dsub+0x570>
 80021c4:	2520      	movs	r5, #32
 80021c6:	001e      	movs	r6, r3
 80021c8:	1aad      	subs	r5, r5, r2
 80021ca:	4664      	mov	r4, ip
 80021cc:	40ab      	lsls	r3, r5
 80021ce:	40ac      	lsls	r4, r5
 80021d0:	40d6      	lsrs	r6, r2
 80021d2:	1e5d      	subs	r5, r3, #1
 80021d4:	41ab      	sbcs	r3, r5
 80021d6:	4334      	orrs	r4, r6
 80021d8:	4323      	orrs	r3, r4
 80021da:	4664      	mov	r4, ip
 80021dc:	40d4      	lsrs	r4, r2
 80021de:	1b09      	subs	r1, r1, r4
 80021e0:	e049      	b.n	8002276 <__aeabi_dsub+0x47e>
 80021e2:	4660      	mov	r0, ip
 80021e4:	1bdc      	subs	r4, r3, r7
 80021e6:	1a46      	subs	r6, r0, r1
 80021e8:	42a3      	cmp	r3, r4
 80021ea:	4180      	sbcs	r0, r0
 80021ec:	4240      	negs	r0, r0
 80021ee:	4681      	mov	r9, r0
 80021f0:	0030      	movs	r0, r6
 80021f2:	464e      	mov	r6, r9
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	4681      	mov	r9, r0
 80021f8:	0200      	lsls	r0, r0, #8
 80021fa:	d476      	bmi.n	80022ea <__aeabi_dsub+0x4f2>
 80021fc:	464b      	mov	r3, r9
 80021fe:	4323      	orrs	r3, r4
 8002200:	d000      	beq.n	8002204 <__aeabi_dsub+0x40c>
 8002202:	e652      	b.n	8001eaa <__aeabi_dsub+0xb2>
 8002204:	2400      	movs	r4, #0
 8002206:	2500      	movs	r5, #0
 8002208:	e771      	b.n	80020ee <__aeabi_dsub+0x2f6>
 800220a:	4339      	orrs	r1, r7
 800220c:	000c      	movs	r4, r1
 800220e:	1e62      	subs	r2, r4, #1
 8002210:	4194      	sbcs	r4, r2
 8002212:	18e4      	adds	r4, r4, r3
 8002214:	429c      	cmp	r4, r3
 8002216:	419b      	sbcs	r3, r3
 8002218:	425b      	negs	r3, r3
 800221a:	4463      	add	r3, ip
 800221c:	4699      	mov	r9, r3
 800221e:	464b      	mov	r3, r9
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	d400      	bmi.n	8002226 <__aeabi_dsub+0x42e>
 8002224:	e756      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 8002226:	2301      	movs	r3, #1
 8002228:	469c      	mov	ip, r3
 800222a:	4ba8      	ldr	r3, [pc, #672]	; (80024cc <__aeabi_dsub+0x6d4>)
 800222c:	44e0      	add	r8, ip
 800222e:	4598      	cmp	r8, r3
 8002230:	d038      	beq.n	80022a4 <__aeabi_dsub+0x4ac>
 8002232:	464b      	mov	r3, r9
 8002234:	48a6      	ldr	r0, [pc, #664]	; (80024d0 <__aeabi_dsub+0x6d8>)
 8002236:	2201      	movs	r2, #1
 8002238:	4003      	ands	r3, r0
 800223a:	0018      	movs	r0, r3
 800223c:	0863      	lsrs	r3, r4, #1
 800223e:	4014      	ands	r4, r2
 8002240:	431c      	orrs	r4, r3
 8002242:	07c3      	lsls	r3, r0, #31
 8002244:	431c      	orrs	r4, r3
 8002246:	0843      	lsrs	r3, r0, #1
 8002248:	4699      	mov	r9, r3
 800224a:	e657      	b.n	8001efc <__aeabi_dsub+0x104>
 800224c:	0010      	movs	r0, r2
 800224e:	000e      	movs	r6, r1
 8002250:	3820      	subs	r0, #32
 8002252:	40c6      	lsrs	r6, r0
 8002254:	2a20      	cmp	r2, #32
 8002256:	d004      	beq.n	8002262 <__aeabi_dsub+0x46a>
 8002258:	2040      	movs	r0, #64	; 0x40
 800225a:	1a82      	subs	r2, r0, r2
 800225c:	4091      	lsls	r1, r2
 800225e:	430f      	orrs	r7, r1
 8002260:	46b9      	mov	r9, r7
 8002262:	464f      	mov	r7, r9
 8002264:	1e7a      	subs	r2, r7, #1
 8002266:	4197      	sbcs	r7, r2
 8002268:	4337      	orrs	r7, r6
 800226a:	e60f      	b.n	8001e8c <__aeabi_dsub+0x94>
 800226c:	4662      	mov	r2, ip
 800226e:	431a      	orrs	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	1e5a      	subs	r2, r3, #1
 8002274:	4193      	sbcs	r3, r2
 8002276:	1afc      	subs	r4, r7, r3
 8002278:	42a7      	cmp	r7, r4
 800227a:	41bf      	sbcs	r7, r7
 800227c:	427f      	negs	r7, r7
 800227e:	1bcb      	subs	r3, r1, r7
 8002280:	4699      	mov	r9, r3
 8002282:	465d      	mov	r5, fp
 8002284:	4680      	mov	r8, r0
 8002286:	e608      	b.n	8001e9a <__aeabi_dsub+0xa2>
 8002288:	4666      	mov	r6, ip
 800228a:	431e      	orrs	r6, r3
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0x498>
 800228e:	e0be      	b.n	800240e <__aeabi_dsub+0x616>
 8002290:	1e56      	subs	r6, r2, #1
 8002292:	2a01      	cmp	r2, #1
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x4a0>
 8002296:	e109      	b.n	80024ac <__aeabi_dsub+0x6b4>
 8002298:	4c8c      	ldr	r4, [pc, #560]	; (80024cc <__aeabi_dsub+0x6d4>)
 800229a:	42a2      	cmp	r2, r4
 800229c:	d100      	bne.n	80022a0 <__aeabi_dsub+0x4a8>
 800229e:	e119      	b.n	80024d4 <__aeabi_dsub+0x6dc>
 80022a0:	0032      	movs	r2, r6
 80022a2:	e6c1      	b.n	8002028 <__aeabi_dsub+0x230>
 80022a4:	4642      	mov	r2, r8
 80022a6:	2400      	movs	r4, #0
 80022a8:	2300      	movs	r3, #0
 80022aa:	e648      	b.n	8001f3e <__aeabi_dsub+0x146>
 80022ac:	2020      	movs	r0, #32
 80022ae:	000c      	movs	r4, r1
 80022b0:	1a80      	subs	r0, r0, r2
 80022b2:	003e      	movs	r6, r7
 80022b4:	4087      	lsls	r7, r0
 80022b6:	4084      	lsls	r4, r0
 80022b8:	40d6      	lsrs	r6, r2
 80022ba:	1e78      	subs	r0, r7, #1
 80022bc:	4187      	sbcs	r7, r0
 80022be:	40d1      	lsrs	r1, r2
 80022c0:	4334      	orrs	r4, r6
 80022c2:	433c      	orrs	r4, r7
 80022c4:	448c      	add	ip, r1
 80022c6:	e7a4      	b.n	8002212 <__aeabi_dsub+0x41a>
 80022c8:	4a80      	ldr	r2, [pc, #512]	; (80024cc <__aeabi_dsub+0x6d4>)
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x4d8>
 80022ce:	e0e9      	b.n	80024a4 <__aeabi_dsub+0x6ac>
 80022d0:	19df      	adds	r7, r3, r7
 80022d2:	429f      	cmp	r7, r3
 80022d4:	419b      	sbcs	r3, r3
 80022d6:	4461      	add	r1, ip
 80022d8:	425b      	negs	r3, r3
 80022da:	18c9      	adds	r1, r1, r3
 80022dc:	07cc      	lsls	r4, r1, #31
 80022de:	087f      	lsrs	r7, r7, #1
 80022e0:	084b      	lsrs	r3, r1, #1
 80022e2:	4699      	mov	r9, r3
 80022e4:	4680      	mov	r8, r0
 80022e6:	433c      	orrs	r4, r7
 80022e8:	e6f4      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 80022ea:	1afc      	subs	r4, r7, r3
 80022ec:	42a7      	cmp	r7, r4
 80022ee:	41bf      	sbcs	r7, r7
 80022f0:	4663      	mov	r3, ip
 80022f2:	427f      	negs	r7, r7
 80022f4:	1ac9      	subs	r1, r1, r3
 80022f6:	1bcb      	subs	r3, r1, r7
 80022f8:	4699      	mov	r9, r3
 80022fa:	465d      	mov	r5, fp
 80022fc:	e5d5      	b.n	8001eaa <__aeabi_dsub+0xb2>
 80022fe:	08ff      	lsrs	r7, r7, #3
 8002300:	074b      	lsls	r3, r1, #29
 8002302:	465d      	mov	r5, fp
 8002304:	433b      	orrs	r3, r7
 8002306:	08cc      	lsrs	r4, r1, #3
 8002308:	e6ee      	b.n	80020e8 <__aeabi_dsub+0x2f0>
 800230a:	4662      	mov	r2, ip
 800230c:	431a      	orrs	r2, r3
 800230e:	d000      	beq.n	8002312 <__aeabi_dsub+0x51a>
 8002310:	e082      	b.n	8002418 <__aeabi_dsub+0x620>
 8002312:	000b      	movs	r3, r1
 8002314:	433b      	orrs	r3, r7
 8002316:	d11b      	bne.n	8002350 <__aeabi_dsub+0x558>
 8002318:	2480      	movs	r4, #128	; 0x80
 800231a:	2500      	movs	r5, #0
 800231c:	0324      	lsls	r4, r4, #12
 800231e:	e6f9      	b.n	8002114 <__aeabi_dsub+0x31c>
 8002320:	19dc      	adds	r4, r3, r7
 8002322:	429c      	cmp	r4, r3
 8002324:	419b      	sbcs	r3, r3
 8002326:	4461      	add	r1, ip
 8002328:	4689      	mov	r9, r1
 800232a:	425b      	negs	r3, r3
 800232c:	4499      	add	r9, r3
 800232e:	464b      	mov	r3, r9
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	d444      	bmi.n	80023be <__aeabi_dsub+0x5c6>
 8002334:	2301      	movs	r3, #1
 8002336:	4698      	mov	r8, r3
 8002338:	e6cc      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 800233a:	1bdc      	subs	r4, r3, r7
 800233c:	4662      	mov	r2, ip
 800233e:	42a3      	cmp	r3, r4
 8002340:	419b      	sbcs	r3, r3
 8002342:	1a51      	subs	r1, r2, r1
 8002344:	425b      	negs	r3, r3
 8002346:	1acb      	subs	r3, r1, r3
 8002348:	4699      	mov	r9, r3
 800234a:	2301      	movs	r3, #1
 800234c:	4698      	mov	r8, r3
 800234e:	e5a4      	b.n	8001e9a <__aeabi_dsub+0xa2>
 8002350:	08ff      	lsrs	r7, r7, #3
 8002352:	074b      	lsls	r3, r1, #29
 8002354:	465d      	mov	r5, fp
 8002356:	433b      	orrs	r3, r7
 8002358:	08cc      	lsrs	r4, r1, #3
 800235a:	e6d7      	b.n	800210c <__aeabi_dsub+0x314>
 800235c:	4662      	mov	r2, ip
 800235e:	431a      	orrs	r2, r3
 8002360:	0014      	movs	r4, r2
 8002362:	1e63      	subs	r3, r4, #1
 8002364:	419c      	sbcs	r4, r3
 8002366:	e679      	b.n	800205c <__aeabi_dsub+0x264>
 8002368:	0015      	movs	r5, r2
 800236a:	4664      	mov	r4, ip
 800236c:	3d20      	subs	r5, #32
 800236e:	40ec      	lsrs	r4, r5
 8002370:	46a0      	mov	r8, r4
 8002372:	2a20      	cmp	r2, #32
 8002374:	d005      	beq.n	8002382 <__aeabi_dsub+0x58a>
 8002376:	2540      	movs	r5, #64	; 0x40
 8002378:	4664      	mov	r4, ip
 800237a:	1aaa      	subs	r2, r5, r2
 800237c:	4094      	lsls	r4, r2
 800237e:	4323      	orrs	r3, r4
 8002380:	469a      	mov	sl, r3
 8002382:	4654      	mov	r4, sl
 8002384:	1e63      	subs	r3, r4, #1
 8002386:	419c      	sbcs	r4, r3
 8002388:	4643      	mov	r3, r8
 800238a:	4323      	orrs	r3, r4
 800238c:	e773      	b.n	8002276 <__aeabi_dsub+0x47e>
 800238e:	4662      	mov	r2, ip
 8002390:	431a      	orrs	r2, r3
 8002392:	d023      	beq.n	80023dc <__aeabi_dsub+0x5e4>
 8002394:	000a      	movs	r2, r1
 8002396:	433a      	orrs	r2, r7
 8002398:	d000      	beq.n	800239c <__aeabi_dsub+0x5a4>
 800239a:	e0a0      	b.n	80024de <__aeabi_dsub+0x6e6>
 800239c:	4662      	mov	r2, ip
 800239e:	08db      	lsrs	r3, r3, #3
 80023a0:	0752      	lsls	r2, r2, #29
 80023a2:	4313      	orrs	r3, r2
 80023a4:	4662      	mov	r2, ip
 80023a6:	08d4      	lsrs	r4, r2, #3
 80023a8:	e6b0      	b.n	800210c <__aeabi_dsub+0x314>
 80023aa:	000b      	movs	r3, r1
 80023ac:	433b      	orrs	r3, r7
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dsub+0x5ba>
 80023b0:	e728      	b.n	8002204 <__aeabi_dsub+0x40c>
 80023b2:	08ff      	lsrs	r7, r7, #3
 80023b4:	074b      	lsls	r3, r1, #29
 80023b6:	465d      	mov	r5, fp
 80023b8:	433b      	orrs	r3, r7
 80023ba:	08cc      	lsrs	r4, r1, #3
 80023bc:	e697      	b.n	80020ee <__aeabi_dsub+0x2f6>
 80023be:	2302      	movs	r3, #2
 80023c0:	4698      	mov	r8, r3
 80023c2:	e736      	b.n	8002232 <__aeabi_dsub+0x43a>
 80023c4:	1afc      	subs	r4, r7, r3
 80023c6:	42a7      	cmp	r7, r4
 80023c8:	41bf      	sbcs	r7, r7
 80023ca:	4663      	mov	r3, ip
 80023cc:	427f      	negs	r7, r7
 80023ce:	1ac9      	subs	r1, r1, r3
 80023d0:	1bcb      	subs	r3, r1, r7
 80023d2:	4699      	mov	r9, r3
 80023d4:	2301      	movs	r3, #1
 80023d6:	465d      	mov	r5, fp
 80023d8:	4698      	mov	r8, r3
 80023da:	e55e      	b.n	8001e9a <__aeabi_dsub+0xa2>
 80023dc:	074b      	lsls	r3, r1, #29
 80023de:	08ff      	lsrs	r7, r7, #3
 80023e0:	433b      	orrs	r3, r7
 80023e2:	08cc      	lsrs	r4, r1, #3
 80023e4:	e692      	b.n	800210c <__aeabi_dsub+0x314>
 80023e6:	1bdc      	subs	r4, r3, r7
 80023e8:	4660      	mov	r0, ip
 80023ea:	42a3      	cmp	r3, r4
 80023ec:	41b6      	sbcs	r6, r6
 80023ee:	1a40      	subs	r0, r0, r1
 80023f0:	4276      	negs	r6, r6
 80023f2:	1b80      	subs	r0, r0, r6
 80023f4:	4681      	mov	r9, r0
 80023f6:	0200      	lsls	r0, r0, #8
 80023f8:	d560      	bpl.n	80024bc <__aeabi_dsub+0x6c4>
 80023fa:	1afc      	subs	r4, r7, r3
 80023fc:	42a7      	cmp	r7, r4
 80023fe:	41bf      	sbcs	r7, r7
 8002400:	4663      	mov	r3, ip
 8002402:	427f      	negs	r7, r7
 8002404:	1ac9      	subs	r1, r1, r3
 8002406:	1bcb      	subs	r3, r1, r7
 8002408:	4699      	mov	r9, r3
 800240a:	465d      	mov	r5, fp
 800240c:	e576      	b.n	8001efc <__aeabi_dsub+0x104>
 800240e:	08ff      	lsrs	r7, r7, #3
 8002410:	074b      	lsls	r3, r1, #29
 8002412:	433b      	orrs	r3, r7
 8002414:	08cc      	lsrs	r4, r1, #3
 8002416:	e667      	b.n	80020e8 <__aeabi_dsub+0x2f0>
 8002418:	000a      	movs	r2, r1
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	433a      	orrs	r2, r7
 800241e:	d100      	bne.n	8002422 <__aeabi_dsub+0x62a>
 8002420:	e66f      	b.n	8002102 <__aeabi_dsub+0x30a>
 8002422:	4662      	mov	r2, ip
 8002424:	0752      	lsls	r2, r2, #29
 8002426:	4313      	orrs	r3, r2
 8002428:	4662      	mov	r2, ip
 800242a:	08d4      	lsrs	r4, r2, #3
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	0312      	lsls	r2, r2, #12
 8002430:	4214      	tst	r4, r2
 8002432:	d007      	beq.n	8002444 <__aeabi_dsub+0x64c>
 8002434:	08c8      	lsrs	r0, r1, #3
 8002436:	4210      	tst	r0, r2
 8002438:	d104      	bne.n	8002444 <__aeabi_dsub+0x64c>
 800243a:	465d      	mov	r5, fp
 800243c:	0004      	movs	r4, r0
 800243e:	08fb      	lsrs	r3, r7, #3
 8002440:	0749      	lsls	r1, r1, #29
 8002442:	430b      	orrs	r3, r1
 8002444:	0f5a      	lsrs	r2, r3, #29
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	0752      	lsls	r2, r2, #29
 800244c:	4313      	orrs	r3, r2
 800244e:	e65d      	b.n	800210c <__aeabi_dsub+0x314>
 8002450:	074b      	lsls	r3, r1, #29
 8002452:	08ff      	lsrs	r7, r7, #3
 8002454:	433b      	orrs	r3, r7
 8002456:	08cc      	lsrs	r4, r1, #3
 8002458:	e649      	b.n	80020ee <__aeabi_dsub+0x2f6>
 800245a:	19dc      	adds	r4, r3, r7
 800245c:	429c      	cmp	r4, r3
 800245e:	419b      	sbcs	r3, r3
 8002460:	4461      	add	r1, ip
 8002462:	4689      	mov	r9, r1
 8002464:	425b      	negs	r3, r3
 8002466:	4499      	add	r9, r3
 8002468:	464b      	mov	r3, r9
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	d400      	bmi.n	8002470 <__aeabi_dsub+0x678>
 800246e:	e631      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 8002470:	464a      	mov	r2, r9
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <__aeabi_dsub+0x6d8>)
 8002474:	401a      	ands	r2, r3
 8002476:	2301      	movs	r3, #1
 8002478:	4691      	mov	r9, r2
 800247a:	4698      	mov	r8, r3
 800247c:	e62a      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 800247e:	0016      	movs	r6, r2
 8002480:	4664      	mov	r4, ip
 8002482:	3e20      	subs	r6, #32
 8002484:	40f4      	lsrs	r4, r6
 8002486:	46a0      	mov	r8, r4
 8002488:	2a20      	cmp	r2, #32
 800248a:	d005      	beq.n	8002498 <__aeabi_dsub+0x6a0>
 800248c:	2640      	movs	r6, #64	; 0x40
 800248e:	4664      	mov	r4, ip
 8002490:	1ab2      	subs	r2, r6, r2
 8002492:	4094      	lsls	r4, r2
 8002494:	4323      	orrs	r3, r4
 8002496:	469a      	mov	sl, r3
 8002498:	4654      	mov	r4, sl
 800249a:	1e63      	subs	r3, r4, #1
 800249c:	419c      	sbcs	r4, r3
 800249e:	4643      	mov	r3, r8
 80024a0:	431c      	orrs	r4, r3
 80024a2:	e5db      	b.n	800205c <__aeabi_dsub+0x264>
 80024a4:	0002      	movs	r2, r0
 80024a6:	2400      	movs	r4, #0
 80024a8:	2300      	movs	r3, #0
 80024aa:	e548      	b.n	8001f3e <__aeabi_dsub+0x146>
 80024ac:	19dc      	adds	r4, r3, r7
 80024ae:	42bc      	cmp	r4, r7
 80024b0:	41bf      	sbcs	r7, r7
 80024b2:	4461      	add	r1, ip
 80024b4:	4689      	mov	r9, r1
 80024b6:	427f      	negs	r7, r7
 80024b8:	44b9      	add	r9, r7
 80024ba:	e738      	b.n	800232e <__aeabi_dsub+0x536>
 80024bc:	464b      	mov	r3, r9
 80024be:	4323      	orrs	r3, r4
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x6cc>
 80024c2:	e69f      	b.n	8002204 <__aeabi_dsub+0x40c>
 80024c4:	e606      	b.n	80020d4 <__aeabi_dsub+0x2dc>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	000007fe 	.word	0x000007fe
 80024cc:	000007ff 	.word	0x000007ff
 80024d0:	ff7fffff 	.word	0xff7fffff
 80024d4:	08ff      	lsrs	r7, r7, #3
 80024d6:	074b      	lsls	r3, r1, #29
 80024d8:	433b      	orrs	r3, r7
 80024da:	08cc      	lsrs	r4, r1, #3
 80024dc:	e616      	b.n	800210c <__aeabi_dsub+0x314>
 80024de:	4662      	mov	r2, ip
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	0752      	lsls	r2, r2, #29
 80024e4:	4313      	orrs	r3, r2
 80024e6:	4662      	mov	r2, ip
 80024e8:	08d4      	lsrs	r4, r2, #3
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0312      	lsls	r2, r2, #12
 80024ee:	4214      	tst	r4, r2
 80024f0:	d007      	beq.n	8002502 <__aeabi_dsub+0x70a>
 80024f2:	08c8      	lsrs	r0, r1, #3
 80024f4:	4210      	tst	r0, r2
 80024f6:	d104      	bne.n	8002502 <__aeabi_dsub+0x70a>
 80024f8:	465d      	mov	r5, fp
 80024fa:	0004      	movs	r4, r0
 80024fc:	08fb      	lsrs	r3, r7, #3
 80024fe:	0749      	lsls	r1, r1, #29
 8002500:	430b      	orrs	r3, r1
 8002502:	0f5a      	lsrs	r2, r3, #29
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	0752      	lsls	r2, r2, #29
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	4313      	orrs	r3, r2
 800250c:	e5fe      	b.n	800210c <__aeabi_dsub+0x314>
 800250e:	2300      	movs	r3, #0
 8002510:	4a01      	ldr	r2, [pc, #4]	; (8002518 <__aeabi_dsub+0x720>)
 8002512:	001c      	movs	r4, r3
 8002514:	e513      	b.n	8001f3e <__aeabi_dsub+0x146>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	000007ff 	.word	0x000007ff

0800251c <__aeabi_dcmpun>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	0005      	movs	r5, r0
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <__aeabi_dcmpun+0x38>)
 8002522:	031c      	lsls	r4, r3, #12
 8002524:	0016      	movs	r6, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	030a      	lsls	r2, r1, #12
 800252a:	0049      	lsls	r1, r1, #1
 800252c:	0b12      	lsrs	r2, r2, #12
 800252e:	0d49      	lsrs	r1, r1, #21
 8002530:	0b24      	lsrs	r4, r4, #12
 8002532:	0d5b      	lsrs	r3, r3, #21
 8002534:	4281      	cmp	r1, r0
 8002536:	d008      	beq.n	800254a <__aeabi_dcmpun+0x2e>
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <__aeabi_dcmpun+0x38>)
 800253a:	2000      	movs	r0, #0
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <__aeabi_dcmpun+0x2c>
 8002540:	0020      	movs	r0, r4
 8002542:	4330      	orrs	r0, r6
 8002544:	1e43      	subs	r3, r0, #1
 8002546:	4198      	sbcs	r0, r3
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	2001      	movs	r0, #1
 800254c:	432a      	orrs	r2, r5
 800254e:	d1fb      	bne.n	8002548 <__aeabi_dcmpun+0x2c>
 8002550:	e7f2      	b.n	8002538 <__aeabi_dcmpun+0x1c>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__aeabi_d2iz>:
 8002558:	000a      	movs	r2, r1
 800255a:	b530      	push	{r4, r5, lr}
 800255c:	4c13      	ldr	r4, [pc, #76]	; (80025ac <__aeabi_d2iz+0x54>)
 800255e:	0053      	lsls	r3, r2, #1
 8002560:	0309      	lsls	r1, r1, #12
 8002562:	0005      	movs	r5, r0
 8002564:	0b09      	lsrs	r1, r1, #12
 8002566:	2000      	movs	r0, #0
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	0fd2      	lsrs	r2, r2, #31
 800256c:	42a3      	cmp	r3, r4
 800256e:	dd04      	ble.n	800257a <__aeabi_d2iz+0x22>
 8002570:	480f      	ldr	r0, [pc, #60]	; (80025b0 <__aeabi_d2iz+0x58>)
 8002572:	4283      	cmp	r3, r0
 8002574:	dd02      	ble.n	800257c <__aeabi_d2iz+0x24>
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <__aeabi_d2iz+0x5c>)
 8002578:	18d0      	adds	r0, r2, r3
 800257a:	bd30      	pop	{r4, r5, pc}
 800257c:	2080      	movs	r0, #128	; 0x80
 800257e:	0340      	lsls	r0, r0, #13
 8002580:	4301      	orrs	r1, r0
 8002582:	480d      	ldr	r0, [pc, #52]	; (80025b8 <__aeabi_d2iz+0x60>)
 8002584:	1ac0      	subs	r0, r0, r3
 8002586:	281f      	cmp	r0, #31
 8002588:	dd08      	ble.n	800259c <__aeabi_d2iz+0x44>
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <__aeabi_d2iz+0x64>)
 800258c:	1ac3      	subs	r3, r0, r3
 800258e:	40d9      	lsrs	r1, r3
 8002590:	000b      	movs	r3, r1
 8002592:	4258      	negs	r0, r3
 8002594:	2a00      	cmp	r2, #0
 8002596:	d1f0      	bne.n	800257a <__aeabi_d2iz+0x22>
 8002598:	0018      	movs	r0, r3
 800259a:	e7ee      	b.n	800257a <__aeabi_d2iz+0x22>
 800259c:	4c08      	ldr	r4, [pc, #32]	; (80025c0 <__aeabi_d2iz+0x68>)
 800259e:	40c5      	lsrs	r5, r0
 80025a0:	46a4      	mov	ip, r4
 80025a2:	4463      	add	r3, ip
 80025a4:	4099      	lsls	r1, r3
 80025a6:	000b      	movs	r3, r1
 80025a8:	432b      	orrs	r3, r5
 80025aa:	e7f2      	b.n	8002592 <__aeabi_d2iz+0x3a>
 80025ac:	000003fe 	.word	0x000003fe
 80025b0:	0000041d 	.word	0x0000041d
 80025b4:	7fffffff 	.word	0x7fffffff
 80025b8:	00000433 	.word	0x00000433
 80025bc:	00000413 	.word	0x00000413
 80025c0:	fffffbed 	.word	0xfffffbed

080025c4 <__aeabi_i2d>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d016      	beq.n	80025f8 <__aeabi_i2d+0x34>
 80025ca:	17c3      	asrs	r3, r0, #31
 80025cc:	18c5      	adds	r5, r0, r3
 80025ce:	405d      	eors	r5, r3
 80025d0:	0fc4      	lsrs	r4, r0, #31
 80025d2:	0028      	movs	r0, r5
 80025d4:	f000 f91c 	bl	8002810 <__clzsi2>
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <__aeabi_i2d+0x5c>)
 80025da:	1a12      	subs	r2, r2, r0
 80025dc:	280a      	cmp	r0, #10
 80025de:	dc16      	bgt.n	800260e <__aeabi_i2d+0x4a>
 80025e0:	0003      	movs	r3, r0
 80025e2:	002e      	movs	r6, r5
 80025e4:	3315      	adds	r3, #21
 80025e6:	409e      	lsls	r6, r3
 80025e8:	230b      	movs	r3, #11
 80025ea:	1a18      	subs	r0, r3, r0
 80025ec:	40c5      	lsrs	r5, r0
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	032d      	lsls	r5, r5, #12
 80025f2:	0b2d      	lsrs	r5, r5, #12
 80025f4:	0d53      	lsrs	r3, r2, #21
 80025f6:	e003      	b.n	8002600 <__aeabi_i2d+0x3c>
 80025f8:	2400      	movs	r4, #0
 80025fa:	2300      	movs	r3, #0
 80025fc:	2500      	movs	r5, #0
 80025fe:	2600      	movs	r6, #0
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	432b      	orrs	r3, r5
 8002604:	07e4      	lsls	r4, r4, #31
 8002606:	4323      	orrs	r3, r4
 8002608:	0030      	movs	r0, r6
 800260a:	0019      	movs	r1, r3
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	380b      	subs	r0, #11
 8002610:	4085      	lsls	r5, r0
 8002612:	0552      	lsls	r2, r2, #21
 8002614:	032d      	lsls	r5, r5, #12
 8002616:	2600      	movs	r6, #0
 8002618:	0b2d      	lsrs	r5, r5, #12
 800261a:	0d53      	lsrs	r3, r2, #21
 800261c:	e7f0      	b.n	8002600 <__aeabi_i2d+0x3c>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	0000041e 	.word	0x0000041e

08002624 <__aeabi_ui2d>:
 8002624:	b510      	push	{r4, lr}
 8002626:	1e04      	subs	r4, r0, #0
 8002628:	d010      	beq.n	800264c <__aeabi_ui2d+0x28>
 800262a:	f000 f8f1 	bl	8002810 <__clzsi2>
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <__aeabi_ui2d+0x48>)
 8002630:	1a1b      	subs	r3, r3, r0
 8002632:	280a      	cmp	r0, #10
 8002634:	dc11      	bgt.n	800265a <__aeabi_ui2d+0x36>
 8002636:	220b      	movs	r2, #11
 8002638:	0021      	movs	r1, r4
 800263a:	1a12      	subs	r2, r2, r0
 800263c:	40d1      	lsrs	r1, r2
 800263e:	3015      	adds	r0, #21
 8002640:	030a      	lsls	r2, r1, #12
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4084      	lsls	r4, r0
 8002646:	0b12      	lsrs	r2, r2, #12
 8002648:	0d5b      	lsrs	r3, r3, #21
 800264a:	e001      	b.n	8002650 <__aeabi_ui2d+0x2c>
 800264c:	2300      	movs	r3, #0
 800264e:	2200      	movs	r2, #0
 8002650:	051b      	lsls	r3, r3, #20
 8002652:	4313      	orrs	r3, r2
 8002654:	0020      	movs	r0, r4
 8002656:	0019      	movs	r1, r3
 8002658:	bd10      	pop	{r4, pc}
 800265a:	0022      	movs	r2, r4
 800265c:	380b      	subs	r0, #11
 800265e:	4082      	lsls	r2, r0
 8002660:	055b      	lsls	r3, r3, #21
 8002662:	0312      	lsls	r2, r2, #12
 8002664:	2400      	movs	r4, #0
 8002666:	0b12      	lsrs	r2, r2, #12
 8002668:	0d5b      	lsrs	r3, r3, #21
 800266a:	e7f1      	b.n	8002650 <__aeabi_ui2d+0x2c>
 800266c:	0000041e 	.word	0x0000041e

08002670 <__aeabi_f2d>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	0043      	lsls	r3, r0, #1
 8002674:	0246      	lsls	r6, r0, #9
 8002676:	0fc4      	lsrs	r4, r0, #31
 8002678:	20fe      	movs	r0, #254	; 0xfe
 800267a:	0e1b      	lsrs	r3, r3, #24
 800267c:	1c59      	adds	r1, r3, #1
 800267e:	0a75      	lsrs	r5, r6, #9
 8002680:	4208      	tst	r0, r1
 8002682:	d00c      	beq.n	800269e <__aeabi_f2d+0x2e>
 8002684:	22e0      	movs	r2, #224	; 0xe0
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4694      	mov	ip, r2
 800268a:	076d      	lsls	r5, r5, #29
 800268c:	0b36      	lsrs	r6, r6, #12
 800268e:	4463      	add	r3, ip
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	4333      	orrs	r3, r6
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	4323      	orrs	r3, r4
 8002698:	0028      	movs	r0, r5
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x5c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01b      	beq.n	80026de <__aeabi_f2d+0x6e>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f8b2 	bl	8002810 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x7a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002e      	movs	r6, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40de      	lsrs	r6, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <__aeabi_f2d+0x88>)
 80026c0:	0336      	lsls	r6, r6, #12
 80026c2:	1a12      	subs	r2, r2, r0
 80026c4:	0552      	lsls	r2, r2, #21
 80026c6:	0b36      	lsrs	r6, r6, #12
 80026c8:	0d53      	lsrs	r3, r2, #21
 80026ca:	e7e1      	b.n	8002690 <__aeabi_f2d+0x20>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d009      	beq.n	80026e4 <__aeabi_f2d+0x74>
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	0b36      	lsrs	r6, r6, #12
 80026d4:	0312      	lsls	r2, r2, #12
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <__aeabi_f2d+0x8c>)
 80026d8:	076d      	lsls	r5, r5, #29
 80026da:	4316      	orrs	r6, r2
 80026dc:	e7d8      	b.n	8002690 <__aeabi_f2d+0x20>
 80026de:	2300      	movs	r3, #0
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7d5      	b.n	8002690 <__aeabi_f2d+0x20>
 80026e4:	2600      	movs	r6, #0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <__aeabi_f2d+0x8c>)
 80026e8:	e7d2      	b.n	8002690 <__aeabi_f2d+0x20>
 80026ea:	0003      	movs	r3, r0
 80026ec:	3b0b      	subs	r3, #11
 80026ee:	409d      	lsls	r5, r3
 80026f0:	002e      	movs	r6, r5
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x4e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	00000389 	.word	0x00000389
 80026fc:	000007ff 	.word	0x000007ff

08002700 <__aeabi_d2f>:
 8002700:	0002      	movs	r2, r0
 8002702:	004b      	lsls	r3, r1, #1
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	0d5b      	lsrs	r3, r3, #21
 8002708:	030c      	lsls	r4, r1, #12
 800270a:	4e3d      	ldr	r6, [pc, #244]	; (8002800 <__aeabi_d2f+0x100>)
 800270c:	0a64      	lsrs	r4, r4, #9
 800270e:	0f40      	lsrs	r0, r0, #29
 8002710:	1c5f      	adds	r7, r3, #1
 8002712:	0fc9      	lsrs	r1, r1, #31
 8002714:	4304      	orrs	r4, r0
 8002716:	00d5      	lsls	r5, r2, #3
 8002718:	4237      	tst	r7, r6
 800271a:	d00a      	beq.n	8002732 <__aeabi_d2f+0x32>
 800271c:	4839      	ldr	r0, [pc, #228]	; (8002804 <__aeabi_d2f+0x104>)
 800271e:	181e      	adds	r6, r3, r0
 8002720:	2efe      	cmp	r6, #254	; 0xfe
 8002722:	dd16      	ble.n	8002752 <__aeabi_d2f+0x52>
 8002724:	20ff      	movs	r0, #255	; 0xff
 8002726:	2400      	movs	r4, #0
 8002728:	05c0      	lsls	r0, r0, #23
 800272a:	4320      	orrs	r0, r4
 800272c:	07c9      	lsls	r1, r1, #31
 800272e:	4308      	orrs	r0, r1
 8002730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <__aeabi_d2f+0x44>
 8002736:	432c      	orrs	r4, r5
 8002738:	d026      	beq.n	8002788 <__aeabi_d2f+0x88>
 800273a:	2205      	movs	r2, #5
 800273c:	0192      	lsls	r2, r2, #6
 800273e:	0a54      	lsrs	r4, r2, #9
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	e7f1      	b.n	8002728 <__aeabi_d2f+0x28>
 8002744:	4325      	orrs	r5, r4
 8002746:	d0ed      	beq.n	8002724 <__aeabi_d2f+0x24>
 8002748:	2080      	movs	r0, #128	; 0x80
 800274a:	03c0      	lsls	r0, r0, #15
 800274c:	4304      	orrs	r4, r0
 800274e:	20ff      	movs	r0, #255	; 0xff
 8002750:	e7ea      	b.n	8002728 <__aeabi_d2f+0x28>
 8002752:	2e00      	cmp	r6, #0
 8002754:	dd1b      	ble.n	800278e <__aeabi_d2f+0x8e>
 8002756:	0192      	lsls	r2, r2, #6
 8002758:	1e53      	subs	r3, r2, #1
 800275a:	419a      	sbcs	r2, r3
 800275c:	00e4      	lsls	r4, r4, #3
 800275e:	0f6d      	lsrs	r5, r5, #29
 8002760:	4322      	orrs	r2, r4
 8002762:	432a      	orrs	r2, r5
 8002764:	0753      	lsls	r3, r2, #29
 8002766:	d048      	beq.n	80027fa <__aeabi_d2f+0xfa>
 8002768:	230f      	movs	r3, #15
 800276a:	4013      	ands	r3, r2
 800276c:	2b04      	cmp	r3, #4
 800276e:	d000      	beq.n	8002772 <__aeabi_d2f+0x72>
 8002770:	3204      	adds	r2, #4
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	04db      	lsls	r3, r3, #19
 8002776:	4013      	ands	r3, r2
 8002778:	d03f      	beq.n	80027fa <__aeabi_d2f+0xfa>
 800277a:	1c70      	adds	r0, r6, #1
 800277c:	2efe      	cmp	r6, #254	; 0xfe
 800277e:	d0d1      	beq.n	8002724 <__aeabi_d2f+0x24>
 8002780:	0192      	lsls	r2, r2, #6
 8002782:	0a54      	lsrs	r4, r2, #9
 8002784:	b2c0      	uxtb	r0, r0
 8002786:	e7cf      	b.n	8002728 <__aeabi_d2f+0x28>
 8002788:	2000      	movs	r0, #0
 800278a:	2400      	movs	r4, #0
 800278c:	e7cc      	b.n	8002728 <__aeabi_d2f+0x28>
 800278e:	0032      	movs	r2, r6
 8002790:	3217      	adds	r2, #23
 8002792:	db22      	blt.n	80027da <__aeabi_d2f+0xda>
 8002794:	2080      	movs	r0, #128	; 0x80
 8002796:	0400      	lsls	r0, r0, #16
 8002798:	4320      	orrs	r0, r4
 800279a:	241e      	movs	r4, #30
 800279c:	1ba4      	subs	r4, r4, r6
 800279e:	2c1f      	cmp	r4, #31
 80027a0:	dd1d      	ble.n	80027de <__aeabi_d2f+0xde>
 80027a2:	2202      	movs	r2, #2
 80027a4:	4252      	negs	r2, r2
 80027a6:	1b96      	subs	r6, r2, r6
 80027a8:	0002      	movs	r2, r0
 80027aa:	40f2      	lsrs	r2, r6
 80027ac:	0016      	movs	r6, r2
 80027ae:	2c20      	cmp	r4, #32
 80027b0:	d004      	beq.n	80027bc <__aeabi_d2f+0xbc>
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <__aeabi_d2f+0x108>)
 80027b4:	4694      	mov	ip, r2
 80027b6:	4463      	add	r3, ip
 80027b8:	4098      	lsls	r0, r3
 80027ba:	4305      	orrs	r5, r0
 80027bc:	002a      	movs	r2, r5
 80027be:	1e53      	subs	r3, r2, #1
 80027c0:	419a      	sbcs	r2, r3
 80027c2:	4332      	orrs	r2, r6
 80027c4:	2600      	movs	r6, #0
 80027c6:	0753      	lsls	r3, r2, #29
 80027c8:	d1ce      	bne.n	8002768 <__aeabi_d2f+0x68>
 80027ca:	2480      	movs	r4, #128	; 0x80
 80027cc:	0013      	movs	r3, r2
 80027ce:	04e4      	lsls	r4, r4, #19
 80027d0:	2001      	movs	r0, #1
 80027d2:	4023      	ands	r3, r4
 80027d4:	4222      	tst	r2, r4
 80027d6:	d1d3      	bne.n	8002780 <__aeabi_d2f+0x80>
 80027d8:	e7b0      	b.n	800273c <__aeabi_d2f+0x3c>
 80027da:	2300      	movs	r3, #0
 80027dc:	e7ad      	b.n	800273a <__aeabi_d2f+0x3a>
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <__aeabi_d2f+0x10c>)
 80027e0:	4694      	mov	ip, r2
 80027e2:	002a      	movs	r2, r5
 80027e4:	40e2      	lsrs	r2, r4
 80027e6:	0014      	movs	r4, r2
 80027e8:	002a      	movs	r2, r5
 80027ea:	4463      	add	r3, ip
 80027ec:	409a      	lsls	r2, r3
 80027ee:	4098      	lsls	r0, r3
 80027f0:	1e55      	subs	r5, r2, #1
 80027f2:	41aa      	sbcs	r2, r5
 80027f4:	4302      	orrs	r2, r0
 80027f6:	4322      	orrs	r2, r4
 80027f8:	e7e4      	b.n	80027c4 <__aeabi_d2f+0xc4>
 80027fa:	0033      	movs	r3, r6
 80027fc:	e79e      	b.n	800273c <__aeabi_d2f+0x3c>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	000007fe 	.word	0x000007fe
 8002804:	fffffc80 	.word	0xfffffc80
 8002808:	fffffca2 	.word	0xfffffca2
 800280c:	fffffc82 	.word	0xfffffc82

08002810 <__clzsi2>:
 8002810:	211c      	movs	r1, #28
 8002812:	2301      	movs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	4298      	cmp	r0, r3
 8002818:	d301      	bcc.n	800281e <__clzsi2+0xe>
 800281a:	0c00      	lsrs	r0, r0, #16
 800281c:	3910      	subs	r1, #16
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	4298      	cmp	r0, r3
 8002822:	d301      	bcc.n	8002828 <__clzsi2+0x18>
 8002824:	0a00      	lsrs	r0, r0, #8
 8002826:	3908      	subs	r1, #8
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	4298      	cmp	r0, r3
 800282c:	d301      	bcc.n	8002832 <__clzsi2+0x22>
 800282e:	0900      	lsrs	r0, r0, #4
 8002830:	3904      	subs	r1, #4
 8002832:	a202      	add	r2, pc, #8	; (adr r2, 800283c <__clzsi2+0x2c>)
 8002834:	5c10      	ldrb	r0, [r2, r0]
 8002836:	1840      	adds	r0, r0, r1
 8002838:	4770      	bx	lr
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	02020304 	.word	0x02020304
 8002840:	01010101 	.word	0x01010101
	...

0800284c <__clzdi2>:
 800284c:	b510      	push	{r4, lr}
 800284e:	2900      	cmp	r1, #0
 8002850:	d103      	bne.n	800285a <__clzdi2+0xe>
 8002852:	f7ff ffdd 	bl	8002810 <__clzsi2>
 8002856:	3020      	adds	r0, #32
 8002858:	e002      	b.n	8002860 <__clzdi2+0x14>
 800285a:	0008      	movs	r0, r1
 800285c:	f7ff ffd8 	bl	8002810 <__clzsi2>
 8002860:	bd10      	pop	{r4, pc}
 8002862:	46c0      	nop			; (mov r8, r8)

08002864 <bmx160_set_i2c>:
sBmx160Dev_t bmx160_Obmx160_s;

I2C_HandleTypeDef *_pWire;

void bmx160_set_i2c(I2C_HandleTypeDef *pWire)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    _pWire = pWire;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <bmx160_set_i2c+0x18>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000234 	.word	0x20000234

08002880 <bmx160_begin>:
    BMX160_INT2_FIFO_FULL_MASK,
    BMX160_INT2_FIFO_WM_MASK
};

bool bmx160_begin()
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
    HAL_I2C_Init(_pWire);
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <bmx160_begin+0x54>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f001 fded 	bl	8004468 <HAL_I2C_Init>

    if (bmx160_scan() == true){
 800288e:	f000 fc1f 	bl	80030d0 <bmx160_scan>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d01a      	beq.n	80028cc <bmx160_begin+0x4c>
        bmx160_softReset();
 8002896:	f000 f81f 	bl	80028d8 <bmx160_softReset>
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x11);
 800289a:	2111      	movs	r1, #17
 800289c:	207e      	movs	r0, #126	; 0x7e
 800289e:	f000 fb6d 	bl	8002f7c <bmx160_writeBmxReg>
        osDelay(50);
 80028a2:	2032      	movs	r0, #50	; 0x32
 80028a4:	f004 fb9b 	bl	8006fde <osDelay>
        /* Set gyro to normal mode */
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x15);
 80028a8:	2115      	movs	r1, #21
 80028aa:	207e      	movs	r0, #126	; 0x7e
 80028ac:	f000 fb66 	bl	8002f7c <bmx160_writeBmxReg>
        osDelay(100);
 80028b0:	2064      	movs	r0, #100	; 0x64
 80028b2:	f004 fb94 	bl	8006fde <osDelay>
        /* Set mag to normal mode */
        bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x19);
 80028b6:	2119      	movs	r1, #25
 80028b8:	207e      	movs	r0, #126	; 0x7e
 80028ba:	f000 fb5f 	bl	8002f7c <bmx160_writeBmxReg>
        osDelay(10);
 80028be:	200a      	movs	r0, #10
 80028c0:	f004 fb8d 	bl	8006fde <osDelay>
        bmx160_setMagnConf();
 80028c4:	f000 f88d 	bl	80029e2 <bmx160_setMagnConf>
        return true;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <bmx160_begin+0x4e>
    }
    else
        return false;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000234 	.word	0x20000234

080028d8 <bmx160_softReset>:
    bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, 0x19);
    osDelay(100);
}

bool bmx160_softReset()
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
  int8_t rslt = BMX160_OK;
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
  rslt = bmx160__softReset(&bmx160_Obmx160_s);
 80028e4:	1dfc      	adds	r4, r7, #7
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <bmx160_softReset+0x34>)
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 f811 	bl	8002910 <bmx160__softReset>
 80028ee:	0003      	movs	r3, r0
 80028f0:	7023      	strb	r3, [r4, #0]
  if (rslt == 0)
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <bmx160_softReset+0x28>
    return true;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <bmx160_softReset+0x2a>
  else
    return false;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b003      	add	sp, #12
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000208 	.word	0x20000208

08002910 <bmx160__softReset>:

int8_t bmx160__softReset(sBmx160Dev_t *dev)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMX160_OK;
 8002918:	210f      	movs	r1, #15
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
  uint8_t data = BMX160_SOFT_RESET_CMD;
 8002920:	230e      	movs	r3, #14
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	22b6      	movs	r2, #182	; 0xb6
 8002926:	701a      	strb	r2, [r3, #0]
  if (dev == NULL){
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <bmx160__softReset+0x24>
    rslt = BMX160_E_NULL_PTR;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	22ff      	movs	r2, #255	; 0xff
 8002932:	701a      	strb	r2, [r3, #0]
  }
  bmx160_writeBmxReg(BMX160_COMMAND_REG_ADDR, data);
 8002934:	230e      	movs	r3, #14
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	0019      	movs	r1, r3
 800293c:	207e      	movs	r0, #126	; 0x7e
 800293e:	f000 fb1d 	bl	8002f7c <bmx160_writeBmxReg>
  osDelay(BMX160_SOFT_RESET_DELAY_MS);
 8002942:	200f      	movs	r0, #15
 8002944:	f004 fb4b 	bl	8006fde <osDelay>
  if (rslt == BMX160_OK){
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b25b      	sxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <bmx160__softReset+0x4c>
    bmx160_defaultParamSettg(dev);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f808 	bl	800296c <bmx160_defaultParamSettg>
  }  
  return rslt;
 800295c:	230f      	movs	r3, #15
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b25b      	sxtb	r3, r3
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <bmx160_defaultParamSettg>:

void bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = BMX160_GYRO_BW_NORMAL_MODE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = BMX160_GYRO_ODR_100HZ;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2208      	movs	r2, #8
 800297e:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = BMX160_GYRO_SUSPEND_MODE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2214      	movs	r2, #20
 8002984:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = BMX160_GYRO_RANGE_2000_DPS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = BMX160_ACCEL_BW_NORMAL_AVG4;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = BMX160_ACCEL_ODR_100HZ;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2208      	movs	r2, #8
 8002996:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = BMX160_ACCEL_SUSPEND_MODE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2210      	movs	r2, #16
 800299c:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = BMX160_ACCEL_RANGE_2G;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2203      	movs	r2, #3
 80029a2:	739a      	strb	r2, [r3, #14]
  

  dev->prevMagnCfg = dev->magnCfg;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	0010      	movs	r0, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	2204      	movs	r2, #4
 80029b0:	0019      	movs	r1, r3
 80029b2:	f005 fb8d 	bl	80080d0 <memcpy>
  dev->prevGyroCfg = dev->gyroCfg;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3218      	adds	r2, #24
 80029bc:	0010      	movs	r0, r2
 80029be:	3314      	adds	r3, #20
 80029c0:	2204      	movs	r2, #4
 80029c2:	0019      	movs	r1, r3
 80029c4:	f005 fb84 	bl	80080d0 <memcpy>
  dev->prevAccelCfg = dev->accelCfg;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3210      	adds	r2, #16
 80029ce:	0010      	movs	r0, r2
 80029d0:	330c      	adds	r3, #12
 80029d2:	2204      	movs	r2, #4
 80029d4:	0019      	movs	r1, r3
 80029d6:	f005 fb7b 	bl	80080d0 <memcpy>
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <bmx160_setMagnConf>:

void bmx160_setMagnConf()
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0
    bmx160_writeBmxReg(BMX160_MAGN_IF_0_ADDR, 0x80);
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	204c      	movs	r0, #76	; 0x4c
 80029ea:	f000 fac7 	bl	8002f7c <bmx160_writeBmxReg>
    osDelay(50);
 80029ee:	2032      	movs	r0, #50	; 0x32
 80029f0:	f004 faf5 	bl	8006fde <osDelay>
    // Sleep mode
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x01);
 80029f4:	2101      	movs	r1, #1
 80029f6:	204f      	movs	r0, #79	; 0x4f
 80029f8:	f000 fac0 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x4B);
 80029fc:	214b      	movs	r1, #75	; 0x4b
 80029fe:	204e      	movs	r0, #78	; 0x4e
 8002a00:	f000 fabc 	bl	8002f7c <bmx160_writeBmxReg>
    // REPXY regular preset
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x04);
 8002a04:	2104      	movs	r1, #4
 8002a06:	204f      	movs	r0, #79	; 0x4f
 8002a08:	f000 fab8 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x51);
 8002a0c:	2151      	movs	r1, #81	; 0x51
 8002a0e:	204e      	movs	r0, #78	; 0x4e
 8002a10:	f000 fab4 	bl	8002f7c <bmx160_writeBmxReg>
    // REPZ regular preset
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x0E);
 8002a14:	210e      	movs	r1, #14
 8002a16:	204f      	movs	r0, #79	; 0x4f
 8002a18:	f000 fab0 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x52);
 8002a1c:	2152      	movs	r1, #82	; 0x52
 8002a1e:	204e      	movs	r0, #78	; 0x4e
 8002a20:	f000 faac 	bl	8002f7c <bmx160_writeBmxReg>
    
    bmx160_writeBmxReg(BMX160_MAGN_IF_3_ADDR, 0x02);
 8002a24:	2102      	movs	r1, #2
 8002a26:	204f      	movs	r0, #79	; 0x4f
 8002a28:	f000 faa8 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_2_ADDR, 0x4C);
 8002a2c:	214c      	movs	r1, #76	; 0x4c
 8002a2e:	204e      	movs	r0, #78	; 0x4e
 8002a30:	f000 faa4 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_1_ADDR, 0x42);
 8002a34:	2142      	movs	r1, #66	; 0x42
 8002a36:	204d      	movs	r0, #77	; 0x4d
 8002a38:	f000 faa0 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_CONFIG_ADDR, 0x08);
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	2044      	movs	r0, #68	; 0x44
 8002a40:	f000 fa9c 	bl	8002f7c <bmx160_writeBmxReg>
    bmx160_writeBmxReg(BMX160_MAGN_IF_0_ADDR, 0x03);
 8002a44:	2103      	movs	r1, #3
 8002a46:	204c      	movs	r0, #76	; 0x4c
 8002a48:	f000 fa98 	bl	8002f7c <bmx160_writeBmxReg>
    osDelay(50);
 8002a4c:	2032      	movs	r0, #50	; 0x32
 8002a4e:	f004 fac6 	bl	8006fde <osDelay>
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <bmx160_getAllData>:
            BMX160_ACCEL_RANGE_CONST = BMX160_ACCEL_MG_LSB_2G * 10;
            break;
    }
}

void bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	b08d      	sub	sp, #52	; 0x34
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]

    uint8_t data[23];
    memset(data, 0, sizeof(data));
 8002a64:	2410      	movs	r4, #16
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	2217      	movs	r2, #23
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f005 fb38 	bl	80080e2 <memset>
    int16_t x = 0;
 8002a72:	252e      	movs	r5, #46	; 0x2e
 8002a74:	197b      	adds	r3, r7, r5
 8002a76:	2200      	movs	r2, #0
 8002a78:	801a      	strh	r2, [r3, #0]
    int16_t y = 0;
 8002a7a:	262c      	movs	r6, #44	; 0x2c
 8002a7c:	19bb      	adds	r3, r7, r6
 8002a7e:	2200      	movs	r2, #0
 8002a80:	801a      	strh	r2, [r3, #0]
    int16_t z = 0;
 8002a82:	232a      	movs	r3, #42	; 0x2a
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
    // put your main code here, to run repeatedly:
    bmx160_readReg(BMX160_MAG_DATA_ADDR, data, 23);
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2217      	movs	r2, #23
 8002a8e:	0019      	movs	r1, r3
 8002a90:	2004      	movs	r0, #4
 8002a92:	f000 faf3 	bl	800307c <bmx160_readReg>
    if(magn){
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d100      	bne.n	8002a9e <bmx160_getAllData+0x46>
 8002a9c:	e0c3      	b.n	8002c26 <bmx160_getAllData+0x1ce>
        x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 8002a9e:	0020      	movs	r0, r4
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b219      	sxth	r1, r3
 8002aa8:	183b      	adds	r3, r7, r0
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	002c      	movs	r4, r5
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b219      	sxth	r1, r3
 8002abe:	183b      	adds	r3, r7, r0
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	0035      	movs	r5, r6
 8002ac6:	197b      	adds	r3, r7, r5
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	795b      	ldrb	r3, [r3, #5]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	b219      	sxth	r1, r3
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	791b      	ldrb	r3, [r3, #4]
 8002ad8:	b21a      	sxth	r2, r3
 8002ada:	262a      	movs	r6, #42	; 0x2a
 8002adc:	19bb      	adds	r3, r7, r6
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	801a      	strh	r2, [r3, #0]
        magn->x = x * BMX160_MAGN_UT_LSB;
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fd ff8d 	bl	8000a08 <__aeabi_i2f>
 8002aee:	1c03      	adds	r3, r0, #0
 8002af0:	49fd      	ldr	r1, [pc, #1012]	; (8002ee8 <bmx160_getAllData+0x490>)
 8002af2:	1c18      	adds	r0, r3, #0
 8002af4:	f7fd fe62 	bl	80007bc <__aeabi_fmul>
 8002af8:	1c03      	adds	r3, r0, #0
 8002afa:	1c1a      	adds	r2, r3, #0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	21ff      	movs	r1, #255	; 0xff
 8002b00:	4011      	ands	r1, r2
 8002b02:	000c      	movs	r4, r1
 8002b04:	7819      	ldrb	r1, [r3, #0]
 8002b06:	2000      	movs	r0, #0
 8002b08:	4001      	ands	r1, r0
 8002b0a:	1c08      	adds	r0, r1, #0
 8002b0c:	1c21      	adds	r1, r4, #0
 8002b0e:	4301      	orrs	r1, r0
 8002b10:	7019      	strb	r1, [r3, #0]
 8002b12:	0a11      	lsrs	r1, r2, #8
 8002b14:	20ff      	movs	r0, #255	; 0xff
 8002b16:	4001      	ands	r1, r0
 8002b18:	000c      	movs	r4, r1
 8002b1a:	7859      	ldrb	r1, [r3, #1]
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	4001      	ands	r1, r0
 8002b20:	1c08      	adds	r0, r1, #0
 8002b22:	1c21      	adds	r1, r4, #0
 8002b24:	4301      	orrs	r1, r0
 8002b26:	7059      	strb	r1, [r3, #1]
 8002b28:	0c11      	lsrs	r1, r2, #16
 8002b2a:	20ff      	movs	r0, #255	; 0xff
 8002b2c:	4001      	ands	r1, r0
 8002b2e:	000c      	movs	r4, r1
 8002b30:	7899      	ldrb	r1, [r3, #2]
 8002b32:	2000      	movs	r0, #0
 8002b34:	4001      	ands	r1, r0
 8002b36:	1c08      	adds	r0, r1, #0
 8002b38:	1c21      	adds	r1, r4, #0
 8002b3a:	4301      	orrs	r1, r0
 8002b3c:	7099      	strb	r1, [r3, #2]
 8002b3e:	0e10      	lsrs	r0, r2, #24
 8002b40:	78da      	ldrb	r2, [r3, #3]
 8002b42:	2100      	movs	r1, #0
 8002b44:	400a      	ands	r2, r1
 8002b46:	1c11      	adds	r1, r2, #0
 8002b48:	1c02      	adds	r2, r0, #0
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	70da      	strb	r2, [r3, #3]
        magn->y = y * BMX160_MAGN_UT_LSB;
 8002b4e:	197b      	adds	r3, r7, r5
 8002b50:	2200      	movs	r2, #0
 8002b52:	5e9b      	ldrsh	r3, [r3, r2]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fd ff57 	bl	8000a08 <__aeabi_i2f>
 8002b5a:	1c03      	adds	r3, r0, #0
 8002b5c:	49e2      	ldr	r1, [pc, #904]	; (8002ee8 <bmx160_getAllData+0x490>)
 8002b5e:	1c18      	adds	r0, r3, #0
 8002b60:	f7fd fe2c 	bl	80007bc <__aeabi_fmul>
 8002b64:	1c03      	adds	r3, r0, #0
 8002b66:	1c1a      	adds	r2, r3, #0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	21ff      	movs	r1, #255	; 0xff
 8002b6c:	4011      	ands	r1, r2
 8002b6e:	000c      	movs	r4, r1
 8002b70:	7919      	ldrb	r1, [r3, #4]
 8002b72:	2000      	movs	r0, #0
 8002b74:	4001      	ands	r1, r0
 8002b76:	1c08      	adds	r0, r1, #0
 8002b78:	1c21      	adds	r1, r4, #0
 8002b7a:	4301      	orrs	r1, r0
 8002b7c:	7119      	strb	r1, [r3, #4]
 8002b7e:	0a11      	lsrs	r1, r2, #8
 8002b80:	20ff      	movs	r0, #255	; 0xff
 8002b82:	4001      	ands	r1, r0
 8002b84:	000c      	movs	r4, r1
 8002b86:	7959      	ldrb	r1, [r3, #5]
 8002b88:	2000      	movs	r0, #0
 8002b8a:	4001      	ands	r1, r0
 8002b8c:	1c08      	adds	r0, r1, #0
 8002b8e:	1c21      	adds	r1, r4, #0
 8002b90:	4301      	orrs	r1, r0
 8002b92:	7159      	strb	r1, [r3, #5]
 8002b94:	0c11      	lsrs	r1, r2, #16
 8002b96:	20ff      	movs	r0, #255	; 0xff
 8002b98:	4001      	ands	r1, r0
 8002b9a:	000c      	movs	r4, r1
 8002b9c:	7999      	ldrb	r1, [r3, #6]
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	4001      	ands	r1, r0
 8002ba2:	1c08      	adds	r0, r1, #0
 8002ba4:	1c21      	adds	r1, r4, #0
 8002ba6:	4301      	orrs	r1, r0
 8002ba8:	7199      	strb	r1, [r3, #6]
 8002baa:	0e10      	lsrs	r0, r2, #24
 8002bac:	79da      	ldrb	r2, [r3, #7]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	1c11      	adds	r1, r2, #0
 8002bb4:	1c02      	adds	r2, r0, #0
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	71da      	strb	r2, [r3, #7]
        magn->z = z * BMX160_MAGN_UT_LSB;
 8002bba:	19bb      	adds	r3, r7, r6
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fd ff21 	bl	8000a08 <__aeabi_i2f>
 8002bc6:	1c03      	adds	r3, r0, #0
 8002bc8:	49c7      	ldr	r1, [pc, #796]	; (8002ee8 <bmx160_getAllData+0x490>)
 8002bca:	1c18      	adds	r0, r3, #0
 8002bcc:	f7fd fdf6 	bl	80007bc <__aeabi_fmul>
 8002bd0:	1c03      	adds	r3, r0, #0
 8002bd2:	1c1a      	adds	r2, r3, #0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	21ff      	movs	r1, #255	; 0xff
 8002bd8:	4011      	ands	r1, r2
 8002bda:	000c      	movs	r4, r1
 8002bdc:	7a19      	ldrb	r1, [r3, #8]
 8002bde:	2000      	movs	r0, #0
 8002be0:	4001      	ands	r1, r0
 8002be2:	1c08      	adds	r0, r1, #0
 8002be4:	1c21      	adds	r1, r4, #0
 8002be6:	4301      	orrs	r1, r0
 8002be8:	7219      	strb	r1, [r3, #8]
 8002bea:	0a11      	lsrs	r1, r2, #8
 8002bec:	20ff      	movs	r0, #255	; 0xff
 8002bee:	4001      	ands	r1, r0
 8002bf0:	000c      	movs	r4, r1
 8002bf2:	7a59      	ldrb	r1, [r3, #9]
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	4001      	ands	r1, r0
 8002bf8:	1c08      	adds	r0, r1, #0
 8002bfa:	1c21      	adds	r1, r4, #0
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	7259      	strb	r1, [r3, #9]
 8002c00:	0c11      	lsrs	r1, r2, #16
 8002c02:	20ff      	movs	r0, #255	; 0xff
 8002c04:	4001      	ands	r1, r0
 8002c06:	000c      	movs	r4, r1
 8002c08:	7a99      	ldrb	r1, [r3, #10]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	4001      	ands	r1, r0
 8002c0e:	1c08      	adds	r0, r1, #0
 8002c10:	1c21      	adds	r1, r4, #0
 8002c12:	4301      	orrs	r1, r0
 8002c14:	7299      	strb	r1, [r3, #10]
 8002c16:	0e10      	lsrs	r0, r2, #24
 8002c18:	7ada      	ldrb	r2, [r3, #11]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	1c11      	adds	r1, r2, #0
 8002c20:	1c02      	adds	r2, r0, #0
 8002c22:	430a      	orrs	r2, r1
 8002c24:	72da      	strb	r2, [r3, #11]
    }
    if(gyro){
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <bmx160_getAllData+0x1d6>
 8002c2c:	e0c9      	b.n	8002dc2 <bmx160_getAllData+0x36a>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 8002c2e:	2010      	movs	r0, #16
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	7a5b      	ldrb	r3, [r3, #9]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	b219      	sxth	r1, r3
 8002c38:	183b      	adds	r3, r7, r0
 8002c3a:	7a1b      	ldrb	r3, [r3, #8]
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	242e      	movs	r4, #46	; 0x2e
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	430a      	orrs	r2, r1
 8002c44:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	7adb      	ldrb	r3, [r3, #11]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	b219      	sxth	r1, r3
 8002c4e:	183b      	adds	r3, r7, r0
 8002c50:	7a9b      	ldrb	r3, [r3, #10]
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	252c      	movs	r5, #44	; 0x2c
 8002c56:	197b      	adds	r3, r7, r5
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 8002c5c:	183b      	adds	r3, r7, r0
 8002c5e:	7b5b      	ldrb	r3, [r3, #13]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b219      	sxth	r1, r3
 8002c64:	183b      	adds	r3, r7, r0
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
 8002c68:	b21a      	sxth	r2, r3
 8002c6a:	262a      	movs	r6, #42	; 0x2a
 8002c6c:	19bb      	adds	r3, r7, r6
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	801a      	strh	r2, [r3, #0]
        gyro->x = x * BMX160_GYRO_RANGE_CONST;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2200      	movs	r2, #0
 8002c76:	5e9b      	ldrsh	r3, [r3, r2]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd fec5 	bl	8000a08 <__aeabi_i2f>
 8002c7e:	1c02      	adds	r2, r0, #0
 8002c80:	4b9a      	ldr	r3, [pc, #616]	; (8002eec <bmx160_getAllData+0x494>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1c19      	adds	r1, r3, #0
 8002c86:	1c10      	adds	r0, r2, #0
 8002c88:	f7fd fd98 	bl	80007bc <__aeabi_fmul>
 8002c8c:	1c03      	adds	r3, r0, #0
 8002c8e:	1c1a      	adds	r2, r3, #0
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	21ff      	movs	r1, #255	; 0xff
 8002c94:	4011      	ands	r1, r2
 8002c96:	000c      	movs	r4, r1
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	4001      	ands	r1, r0
 8002c9e:	1c08      	adds	r0, r1, #0
 8002ca0:	1c21      	adds	r1, r4, #0
 8002ca2:	4301      	orrs	r1, r0
 8002ca4:	7019      	strb	r1, [r3, #0]
 8002ca6:	0a11      	lsrs	r1, r2, #8
 8002ca8:	20ff      	movs	r0, #255	; 0xff
 8002caa:	4001      	ands	r1, r0
 8002cac:	000c      	movs	r4, r1
 8002cae:	7859      	ldrb	r1, [r3, #1]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4001      	ands	r1, r0
 8002cb4:	1c08      	adds	r0, r1, #0
 8002cb6:	1c21      	adds	r1, r4, #0
 8002cb8:	4301      	orrs	r1, r0
 8002cba:	7059      	strb	r1, [r3, #1]
 8002cbc:	0c11      	lsrs	r1, r2, #16
 8002cbe:	20ff      	movs	r0, #255	; 0xff
 8002cc0:	4001      	ands	r1, r0
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	7899      	ldrb	r1, [r3, #2]
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	4001      	ands	r1, r0
 8002cca:	1c08      	adds	r0, r1, #0
 8002ccc:	1c21      	adds	r1, r4, #0
 8002cce:	4301      	orrs	r1, r0
 8002cd0:	7099      	strb	r1, [r3, #2]
 8002cd2:	0e10      	lsrs	r0, r2, #24
 8002cd4:	78da      	ldrb	r2, [r3, #3]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	400a      	ands	r2, r1
 8002cda:	1c11      	adds	r1, r2, #0
 8002cdc:	1c02      	adds	r2, r0, #0
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	70da      	strb	r2, [r3, #3]
        gyro->y = y * BMX160_GYRO_RANGE_CONST;
 8002ce2:	197b      	adds	r3, r7, r5
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fe8d 	bl	8000a08 <__aeabi_i2f>
 8002cee:	1c02      	adds	r2, r0, #0
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <bmx160_getAllData+0x494>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	1c19      	adds	r1, r3, #0
 8002cf6:	1c10      	adds	r0, r2, #0
 8002cf8:	f7fd fd60 	bl	80007bc <__aeabi_fmul>
 8002cfc:	1c03      	adds	r3, r0, #0
 8002cfe:	1c1a      	adds	r2, r3, #0
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	21ff      	movs	r1, #255	; 0xff
 8002d04:	4011      	ands	r1, r2
 8002d06:	000c      	movs	r4, r1
 8002d08:	7919      	ldrb	r1, [r3, #4]
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	4001      	ands	r1, r0
 8002d0e:	1c08      	adds	r0, r1, #0
 8002d10:	1c21      	adds	r1, r4, #0
 8002d12:	4301      	orrs	r1, r0
 8002d14:	7119      	strb	r1, [r3, #4]
 8002d16:	0a11      	lsrs	r1, r2, #8
 8002d18:	20ff      	movs	r0, #255	; 0xff
 8002d1a:	4001      	ands	r1, r0
 8002d1c:	000c      	movs	r4, r1
 8002d1e:	7959      	ldrb	r1, [r3, #5]
 8002d20:	2000      	movs	r0, #0
 8002d22:	4001      	ands	r1, r0
 8002d24:	1c08      	adds	r0, r1, #0
 8002d26:	1c21      	adds	r1, r4, #0
 8002d28:	4301      	orrs	r1, r0
 8002d2a:	7159      	strb	r1, [r3, #5]
 8002d2c:	0c11      	lsrs	r1, r2, #16
 8002d2e:	20ff      	movs	r0, #255	; 0xff
 8002d30:	4001      	ands	r1, r0
 8002d32:	000c      	movs	r4, r1
 8002d34:	7999      	ldrb	r1, [r3, #6]
 8002d36:	2000      	movs	r0, #0
 8002d38:	4001      	ands	r1, r0
 8002d3a:	1c08      	adds	r0, r1, #0
 8002d3c:	1c21      	adds	r1, r4, #0
 8002d3e:	4301      	orrs	r1, r0
 8002d40:	7199      	strb	r1, [r3, #6]
 8002d42:	0e10      	lsrs	r0, r2, #24
 8002d44:	79da      	ldrb	r2, [r3, #7]
 8002d46:	2100      	movs	r1, #0
 8002d48:	400a      	ands	r2, r1
 8002d4a:	1c11      	adds	r1, r2, #0
 8002d4c:	1c02      	adds	r2, r0, #0
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	71da      	strb	r2, [r3, #7]
        gyro->z = z * BMX160_GYRO_RANGE_CONST;
 8002d52:	19bb      	adds	r3, r7, r6
 8002d54:	2200      	movs	r2, #0
 8002d56:	5e9b      	ldrsh	r3, [r3, r2]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7fd fe55 	bl	8000a08 <__aeabi_i2f>
 8002d5e:	1c02      	adds	r2, r0, #0
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <bmx160_getAllData+0x494>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1c19      	adds	r1, r3, #0
 8002d66:	1c10      	adds	r0, r2, #0
 8002d68:	f7fd fd28 	bl	80007bc <__aeabi_fmul>
 8002d6c:	1c03      	adds	r3, r0, #0
 8002d6e:	1c1a      	adds	r2, r3, #0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	21ff      	movs	r1, #255	; 0xff
 8002d74:	4011      	ands	r1, r2
 8002d76:	000c      	movs	r4, r1
 8002d78:	7a19      	ldrb	r1, [r3, #8]
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4001      	ands	r1, r0
 8002d7e:	1c08      	adds	r0, r1, #0
 8002d80:	1c21      	adds	r1, r4, #0
 8002d82:	4301      	orrs	r1, r0
 8002d84:	7219      	strb	r1, [r3, #8]
 8002d86:	0a11      	lsrs	r1, r2, #8
 8002d88:	20ff      	movs	r0, #255	; 0xff
 8002d8a:	4001      	ands	r1, r0
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	7a59      	ldrb	r1, [r3, #9]
 8002d90:	2000      	movs	r0, #0
 8002d92:	4001      	ands	r1, r0
 8002d94:	1c08      	adds	r0, r1, #0
 8002d96:	1c21      	adds	r1, r4, #0
 8002d98:	4301      	orrs	r1, r0
 8002d9a:	7259      	strb	r1, [r3, #9]
 8002d9c:	0c11      	lsrs	r1, r2, #16
 8002d9e:	20ff      	movs	r0, #255	; 0xff
 8002da0:	4001      	ands	r1, r0
 8002da2:	000c      	movs	r4, r1
 8002da4:	7a99      	ldrb	r1, [r3, #10]
 8002da6:	2000      	movs	r0, #0
 8002da8:	4001      	ands	r1, r0
 8002daa:	1c08      	adds	r0, r1, #0
 8002dac:	1c21      	adds	r1, r4, #0
 8002dae:	4301      	orrs	r1, r0
 8002db0:	7299      	strb	r1, [r3, #10]
 8002db2:	0e10      	lsrs	r0, r2, #24
 8002db4:	7ada      	ldrb	r2, [r3, #11]
 8002db6:	2100      	movs	r1, #0
 8002db8:	400a      	ands	r2, r1
 8002dba:	1c11      	adds	r1, r2, #0
 8002dbc:	1c02      	adds	r2, r0, #0
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	72da      	strb	r2, [r3, #11]
    }
    if(accel){
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d100      	bne.n	8002dca <bmx160_getAllData+0x372>
 8002dc8:	e0d1      	b.n	8002f6e <bmx160_getAllData+0x516>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 8002dca:	2010      	movs	r0, #16
 8002dcc:	183b      	adds	r3, r7, r0
 8002dce:	7bdb      	ldrb	r3, [r3, #15]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b219      	sxth	r1, r3
 8002dd4:	183b      	adds	r3, r7, r0
 8002dd6:	7b9b      	ldrb	r3, [r3, #14]
 8002dd8:	b21a      	sxth	r2, r3
 8002dda:	242e      	movs	r4, #46	; 0x2e
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	430a      	orrs	r2, r1
 8002de0:	801a      	strh	r2, [r3, #0]
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 8002de2:	183b      	adds	r3, r7, r0
 8002de4:	7c5b      	ldrb	r3, [r3, #17]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b219      	sxth	r1, r3
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	7c1b      	ldrb	r3, [r3, #16]
 8002dee:	b21a      	sxth	r2, r3
 8002df0:	252c      	movs	r5, #44	; 0x2c
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	430a      	orrs	r2, r1
 8002df6:	801a      	strh	r2, [r3, #0]
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	7cdb      	ldrb	r3, [r3, #19]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b219      	sxth	r1, r3
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	7c9b      	ldrb	r3, [r3, #18]
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	262a      	movs	r6, #42	; 0x2a
 8002e08:	19bb      	adds	r3, r7, r6
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	801a      	strh	r2, [r3, #0]
        accel->x = x * BMX160_ACCEL_RANGE_CONST;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2200      	movs	r2, #0
 8002e12:	5e9b      	ldrsh	r3, [r3, r2]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fd fdf7 	bl	8000a08 <__aeabi_i2f>
 8002e1a:	1c02      	adds	r2, r0, #0
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <bmx160_getAllData+0x498>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1c19      	adds	r1, r3, #0
 8002e22:	1c10      	adds	r0, r2, #0
 8002e24:	f7fd fcca 	bl	80007bc <__aeabi_fmul>
 8002e28:	1c03      	adds	r3, r0, #0
 8002e2a:	1c1a      	adds	r2, r3, #0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	21ff      	movs	r1, #255	; 0xff
 8002e30:	4011      	ands	r1, r2
 8002e32:	000c      	movs	r4, r1
 8002e34:	7819      	ldrb	r1, [r3, #0]
 8002e36:	2000      	movs	r0, #0
 8002e38:	4001      	ands	r1, r0
 8002e3a:	1c08      	adds	r0, r1, #0
 8002e3c:	1c21      	adds	r1, r4, #0
 8002e3e:	4301      	orrs	r1, r0
 8002e40:	7019      	strb	r1, [r3, #0]
 8002e42:	0a11      	lsrs	r1, r2, #8
 8002e44:	20ff      	movs	r0, #255	; 0xff
 8002e46:	4001      	ands	r1, r0
 8002e48:	000c      	movs	r4, r1
 8002e4a:	7859      	ldrb	r1, [r3, #1]
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4001      	ands	r1, r0
 8002e50:	1c08      	adds	r0, r1, #0
 8002e52:	1c21      	adds	r1, r4, #0
 8002e54:	4301      	orrs	r1, r0
 8002e56:	7059      	strb	r1, [r3, #1]
 8002e58:	0c11      	lsrs	r1, r2, #16
 8002e5a:	20ff      	movs	r0, #255	; 0xff
 8002e5c:	4001      	ands	r1, r0
 8002e5e:	000c      	movs	r4, r1
 8002e60:	7899      	ldrb	r1, [r3, #2]
 8002e62:	2000      	movs	r0, #0
 8002e64:	4001      	ands	r1, r0
 8002e66:	1c08      	adds	r0, r1, #0
 8002e68:	1c21      	adds	r1, r4, #0
 8002e6a:	4301      	orrs	r1, r0
 8002e6c:	7099      	strb	r1, [r3, #2]
 8002e6e:	0e10      	lsrs	r0, r2, #24
 8002e70:	78da      	ldrb	r2, [r3, #3]
 8002e72:	2100      	movs	r1, #0
 8002e74:	400a      	ands	r2, r1
 8002e76:	1c11      	adds	r1, r2, #0
 8002e78:	1c02      	adds	r2, r0, #0
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	70da      	strb	r2, [r3, #3]
        accel->y = y * BMX160_ACCEL_RANGE_CONST;
 8002e7e:	197b      	adds	r3, r7, r5
 8002e80:	2200      	movs	r2, #0
 8002e82:	5e9b      	ldrsh	r3, [r3, r2]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fd fdbf 	bl	8000a08 <__aeabi_i2f>
 8002e8a:	1c02      	adds	r2, r0, #0
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <bmx160_getAllData+0x498>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c19      	adds	r1, r3, #0
 8002e92:	1c10      	adds	r0, r2, #0
 8002e94:	f7fd fc92 	bl	80007bc <__aeabi_fmul>
 8002e98:	1c03      	adds	r3, r0, #0
 8002e9a:	1c1a      	adds	r2, r3, #0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	21ff      	movs	r1, #255	; 0xff
 8002ea0:	4011      	ands	r1, r2
 8002ea2:	000c      	movs	r4, r1
 8002ea4:	7919      	ldrb	r1, [r3, #4]
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	4001      	ands	r1, r0
 8002eaa:	1c08      	adds	r0, r1, #0
 8002eac:	1c21      	adds	r1, r4, #0
 8002eae:	4301      	orrs	r1, r0
 8002eb0:	7119      	strb	r1, [r3, #4]
 8002eb2:	0a11      	lsrs	r1, r2, #8
 8002eb4:	20ff      	movs	r0, #255	; 0xff
 8002eb6:	4001      	ands	r1, r0
 8002eb8:	000c      	movs	r4, r1
 8002eba:	7959      	ldrb	r1, [r3, #5]
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	4001      	ands	r1, r0
 8002ec0:	1c08      	adds	r0, r1, #0
 8002ec2:	1c21      	adds	r1, r4, #0
 8002ec4:	4301      	orrs	r1, r0
 8002ec6:	7159      	strb	r1, [r3, #5]
 8002ec8:	0c11      	lsrs	r1, r2, #16
 8002eca:	20ff      	movs	r0, #255	; 0xff
 8002ecc:	4001      	ands	r1, r0
 8002ece:	000c      	movs	r4, r1
 8002ed0:	7999      	ldrb	r1, [r3, #6]
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	4001      	ands	r1, r0
 8002ed6:	1c08      	adds	r0, r1, #0
 8002ed8:	1c21      	adds	r1, r4, #0
 8002eda:	4301      	orrs	r1, r0
 8002edc:	7199      	strb	r1, [r3, #6]
 8002ede:	0e10      	lsrs	r0, r2, #24
 8002ee0:	79da      	ldrb	r2, [r3, #7]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	e006      	b.n	8002ef4 <bmx160_getAllData+0x49c>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	3e99999a 	.word	0x3e99999a
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	1c11      	adds	r1, r2, #0
 8002ef8:	1c02      	adds	r2, r0, #0
 8002efa:	430a      	orrs	r2, r1
 8002efc:	71da      	strb	r2, [r3, #7]
        accel->z = z * BMX160_ACCEL_RANGE_CONST;
 8002efe:	19bb      	adds	r3, r7, r6
 8002f00:	2200      	movs	r2, #0
 8002f02:	5e9b      	ldrsh	r3, [r3, r2]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7fd fd7f 	bl	8000a08 <__aeabi_i2f>
 8002f0a:	1c02      	adds	r2, r0, #0
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <bmx160_getAllData+0x520>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c19      	adds	r1, r3, #0
 8002f12:	1c10      	adds	r0, r2, #0
 8002f14:	f7fd fc52 	bl	80007bc <__aeabi_fmul>
 8002f18:	1c03      	adds	r3, r0, #0
 8002f1a:	1c1a      	adds	r2, r3, #0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	21ff      	movs	r1, #255	; 0xff
 8002f20:	4011      	ands	r1, r2
 8002f22:	000c      	movs	r4, r1
 8002f24:	7a19      	ldrb	r1, [r3, #8]
 8002f26:	2000      	movs	r0, #0
 8002f28:	4001      	ands	r1, r0
 8002f2a:	1c08      	adds	r0, r1, #0
 8002f2c:	1c21      	adds	r1, r4, #0
 8002f2e:	4301      	orrs	r1, r0
 8002f30:	7219      	strb	r1, [r3, #8]
 8002f32:	0a11      	lsrs	r1, r2, #8
 8002f34:	20ff      	movs	r0, #255	; 0xff
 8002f36:	4001      	ands	r1, r0
 8002f38:	000c      	movs	r4, r1
 8002f3a:	7a59      	ldrb	r1, [r3, #9]
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4001      	ands	r1, r0
 8002f40:	1c08      	adds	r0, r1, #0
 8002f42:	1c21      	adds	r1, r4, #0
 8002f44:	4301      	orrs	r1, r0
 8002f46:	7259      	strb	r1, [r3, #9]
 8002f48:	0c11      	lsrs	r1, r2, #16
 8002f4a:	20ff      	movs	r0, #255	; 0xff
 8002f4c:	4001      	ands	r1, r0
 8002f4e:	000c      	movs	r4, r1
 8002f50:	7a99      	ldrb	r1, [r3, #10]
 8002f52:	2000      	movs	r0, #0
 8002f54:	4001      	ands	r1, r0
 8002f56:	1c08      	adds	r0, r1, #0
 8002f58:	1c21      	adds	r1, r4, #0
 8002f5a:	4301      	orrs	r1, r0
 8002f5c:	7299      	strb	r1, [r3, #10]
 8002f5e:	0e10      	lsrs	r0, r2, #24
 8002f60:	7ada      	ldrb	r2, [r3, #11]
 8002f62:	2100      	movs	r1, #0
 8002f64:	400a      	ands	r2, r1
 8002f66:	1c11      	adds	r1, r2, #0
 8002f68:	1c02      	adds	r2, r0, #0
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	72da      	strb	r2, [r3, #11]
    }
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b00d      	add	sp, #52	; 0x34
 8002f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	20000000 	.word	0x20000000

08002f7c <bmx160_writeBmxReg>:

void bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	0002      	movs	r2, r0
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	1dbb      	adds	r3, r7, #6
 8002f8a:	1c0a      	adds	r2, r1, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
    bmx160_writeReg(reg, &value, 1);
 8002f8e:	1db9      	adds	r1, r7, #6
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f804 	bl	8002fa4 <bmx160_writeReg>
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <bmx160_writeReg>:

void bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	46c6      	mov	lr, r8
 8002fa8:	b500      	push	{lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	61b9      	str	r1, [r7, #24]
 8002fb0:	0011      	movs	r1, r2
 8002fb2:	231f      	movs	r3, #31
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	1c02      	adds	r2, r0, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	261c      	movs	r6, #28
 8002fbc:	19bb      	adds	r3, r7, r6
 8002fbe:	1c0a      	adds	r2, r1, #0
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	466b      	mov	r3, sp
 8002fc4:	4698      	mov	r8, r3
	uint16_t total_len = len + 1;
 8002fc6:	2116      	movs	r1, #22
 8002fc8:	2018      	movs	r0, #24
 8002fca:	180a      	adds	r2, r1, r0
 8002fcc:	19d3      	adds	r3, r2, r7
 8002fce:	19ba      	adds	r2, r7, r6
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	801a      	strh	r2, [r3, #0]
	uint8_t temp[total_len];
 8002fd6:	180b      	adds	r3, r1, r0
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60fa      	str	r2, [r7, #12]
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	0002      	movs	r2, r0
 8002fee:	0f52      	lsrs	r2, r2, #29
 8002ff0:	000e      	movs	r6, r1
 8002ff2:	00f6      	lsls	r6, r6, #3
 8002ff4:	617e      	str	r6, [r7, #20]
 8002ff6:	697e      	ldr	r6, [r7, #20]
 8002ff8:	4316      	orrs	r6, r2
 8002ffa:	617e      	str	r6, [r7, #20]
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	613a      	str	r2, [r7, #16]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	0002      	movs	r2, r0
 800300e:	0f52      	lsrs	r2, r2, #29
 8003010:	000e      	movs	r6, r1
 8003012:	00f5      	lsls	r5, r6, #3
 8003014:	4315      	orrs	r5, r2
 8003016:	0002      	movs	r2, r0
 8003018:	00d4      	lsls	r4, r2, #3
 800301a:	3307      	adds	r3, #7
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	466a      	mov	r2, sp
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	4695      	mov	sp, r2
 8003026:	ab02      	add	r3, sp, #8
 8003028:	3300      	adds	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
	temp[0] = reg;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	211f      	movs	r1, #31
 8003030:	187a      	adds	r2, r7, r1
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	701a      	strb	r2, [r3, #0]
	memcpy(&temp[1], pBuf, len);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1c58      	adds	r0, r3, #1
 800303a:	261c      	movs	r6, #28
 800303c:	19bb      	adds	r3, r7, r6
 800303e:	881a      	ldrh	r2, [r3, #0]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	0019      	movs	r1, r3
 8003044:	f005 f844 	bl	80080d0 <memcpy>
    HAL_I2C_Master_Transmit(_pWire, BMX160_ADDR, temp, total_len, HAL_MAX_DELAY);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <bmx160_writeReg+0xd4>)
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	23d0      	movs	r3, #208	; 0xd0
 800304e:	b299      	uxth	r1, r3
 8003050:	2316      	movs	r3, #22
 8003052:	2218      	movs	r2, #24
 8003054:	189b      	adds	r3, r3, r2
 8003056:	19db      	adds	r3, r3, r7
 8003058:	881c      	ldrh	r4, [r3, #0]
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	2301      	movs	r3, #1
 800305e:	425b      	negs	r3, r3
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	0023      	movs	r3, r4
 8003064:	f001 fa96 	bl	8004594 <HAL_I2C_Master_Transmit>
 8003068:	46c5      	mov	sp, r8
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b00c      	add	sp, #48	; 0x30
 8003070:	bc80      	pop	{r7}
 8003072:	46b8      	mov	r8, r7
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	20000234 	.word	0x20000234

0800307c <bmx160_readReg>:

void bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b085      	sub	sp, #20
 8003080:	af02      	add	r7, sp, #8
 8003082:	6039      	str	r1, [r7, #0]
 8003084:	0011      	movs	r1, r2
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	1c02      	adds	r2, r0, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	1c0a      	adds	r2, r1, #0
 8003090:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_pWire, BMX160_ADDR, &reg, 1, HAL_MAX_DELAY);
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <bmx160_readReg+0x50>)
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	23d0      	movs	r3, #208	; 0xd0
 8003098:	b299      	uxth	r1, r3
 800309a:	1dfa      	adds	r2, r7, #7
 800309c:	2301      	movs	r3, #1
 800309e:	425b      	negs	r3, r3
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2301      	movs	r3, #1
 80030a4:	f001 fa76 	bl	8004594 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_pWire, BMX160_ADDR, pBuf, len, HAL_MAX_DELAY);
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <bmx160_readReg+0x50>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	23d0      	movs	r3, #208	; 0xd0
 80030ae:	b299      	uxth	r1, r3
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	881c      	ldrh	r4, [r3, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	2301      	movs	r3, #1
 80030b8:	425b      	negs	r3, r3
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	0023      	movs	r3, r4
 80030be:	f001 fb71 	bl	80047a4 <HAL_I2C_Master_Receive>
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b003      	add	sp, #12
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	20000234 	.word	0x20000234

080030d0 <bmx160_scan>:

bool bmx160_scan()
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(_pWire, BMX160_ADDR, 100, HAL_MAX_DELAY);
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <bmx160_scan+0x34>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	23d0      	movs	r3, #208	; 0xd0
 80030dc:	b299      	uxth	r1, r3
 80030de:	1dfc      	adds	r4, r7, #7
 80030e0:	2301      	movs	r3, #1
 80030e2:	425b      	negs	r3, r3
 80030e4:	2264      	movs	r2, #100	; 0x64
 80030e6:	f001 fc65 	bl	80049b4 <HAL_I2C_IsDeviceReady>
 80030ea:	0003      	movs	r3, r0
 80030ec:	7023      	strb	r3, [r4, #0]

    if (ret == HAL_OK) {
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <bmx160_scan+0x2a>
    	return true;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <bmx160_scan+0x2c>
    } else {
    	return false;
 80030fa:	2300      	movs	r3, #0
    }
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b003      	add	sp, #12
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	20000234 	.word	0x20000234

08003108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a06      	ldr	r2, [pc, #24]	; (8003130 <vApplicationGetIdleTaskMemory+0x28>)
 8003118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <vApplicationGetIdleTaskMemory+0x2c>)
 800311e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000238 	.word	0x20000238
 8003134:	2000028c 	.word	0x2000028c

08003138 <HAL_GPIO_EXTI_Callback>:
void StartSleepTask(void const * argument);

/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	0002      	movs	r2, r0
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_12)
 8003144:	1dbb      	adds	r3, r7, #6
 8003146:	881a      	ldrh	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	015b      	lsls	r3, r3, #5
 800314c:	429a      	cmp	r2, r3
 800314e:	d108      	bne.n	8003162 <HAL_GPIO_EXTI_Callback+0x2a>
    {
    	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_GPIO_EXTI_Callback+0x34>)
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	0152      	lsls	r2, r2, #5
 8003156:	615a      	str	r2, [r3, #20]
    	HAL_PWR_DisableSleepOnExit();
 8003158:	f002 f8ec 	bl	8005334 <HAL_PWR_DisableSleepOnExit>
    	reading_sensor_data = 1;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_GPIO_EXTI_Callback+0x38>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
    }
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40010400 	.word	0x40010400
 8003170:	20000640 	.word	0x20000640

08003174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b08e      	sub	sp, #56	; 0x38
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800317a:	f000 fcb5 	bl	8003ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800317e:	f000 f837 	bl	80031f0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003182:	f000 f95f 	bl	8003444 <MX_GPIO_Init>
  MX_DMA_Init();
 8003186:	f000 f93f 	bl	8003408 <MX_DMA_Init>
  MX_I2C2_Init();
 800318a:	f000 f89d 	bl	80032c8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800318e:	f000 f8db 	bl	8003348 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 8003192:	f000 f909 	bl	80033a8 <MX_USART5_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensorData */
  osThreadDef(readSensorData, StartReadSensorData, osPriorityRealtime, 0, 128);
 8003196:	211c      	movs	r1, #28
 8003198:	187b      	adds	r3, r7, r1
 800319a:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <main+0x6c>)
 800319c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800319e:	c331      	stmia	r3!, {r0, r4, r5}
 80031a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80031a2:	c331      	stmia	r3!, {r0, r4, r5}
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	601a      	str	r2, [r3, #0]
  readSensorDataHandle = osThreadCreate(osThread(readSensorData), NULL);
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2100      	movs	r1, #0
 80031ac:	0018      	movs	r0, r3
 80031ae:	f003 fec9 	bl	8006f44 <osThreadCreate>
 80031b2:	0002      	movs	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <main+0x70>)
 80031b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of sleepTask */
  osThreadDef(sleepTask, StartSleepTask, osPriorityBelowNormal, 0, 128);
 80031b8:	003b      	movs	r3, r7
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <main+0x74>)
 80031bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031be:	c313      	stmia	r3!, {r0, r1, r4}
 80031c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031c2:	c313      	stmia	r3!, {r0, r1, r4}
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	601a      	str	r2, [r3, #0]
  sleepTaskHandle = osThreadCreate(osThread(sleepTask), NULL);
 80031c8:	003b      	movs	r3, r7
 80031ca:	2100      	movs	r1, #0
 80031cc:	0018      	movs	r0, r3
 80031ce:	f003 feb9 	bl	8006f44 <osThreadCreate>
 80031d2:	0002      	movs	r2, r0
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <main+0x78>)
 80031d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80031d8:	f003 feac 	bl	8006f34 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80031dc:	e7fe      	b.n	80031dc <main+0x68>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	0800cb64 	.word	0x0800cb64
 80031e4:	20000638 	.word	0x20000638
 80031e8:	0800cb80 	.word	0x0800cb80
 80031ec:	2000063c 	.word	0x2000063c

080031f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b09d      	sub	sp, #116	; 0x74
 80031f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031f6:	2438      	movs	r4, #56	; 0x38
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	0018      	movs	r0, r3
 80031fc:	2338      	movs	r3, #56	; 0x38
 80031fe:	001a      	movs	r2, r3
 8003200:	2100      	movs	r1, #0
 8003202:	f004 ff6e 	bl	80080e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003206:	2324      	movs	r3, #36	; 0x24
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	0018      	movs	r0, r3
 800320c:	2314      	movs	r3, #20
 800320e:	001a      	movs	r2, r3
 8003210:	2100      	movs	r1, #0
 8003212:	f004 ff66 	bl	80080e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003216:	003b      	movs	r3, r7
 8003218:	0018      	movs	r0, r3
 800321a:	2324      	movs	r3, #36	; 0x24
 800321c:	001a      	movs	r2, r3
 800321e:	2100      	movs	r1, #0
 8003220:	f004 ff5f 	bl	80080e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <SystemClock_Config+0xd0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <SystemClock_Config+0xd4>)
 800322a:	401a      	ands	r2, r3
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <SystemClock_Config+0xd0>)
 800322e:	2180      	movs	r1, #128	; 0x80
 8003230:	0109      	lsls	r1, r1, #4
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003236:	0021      	movs	r1, r4
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2210      	movs	r2, #16
 800323c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2201      	movs	r2, #1
 8003242:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2200      	movs	r2, #0
 8003248:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800324a:	187b      	adds	r3, r7, r1
 800324c:	22a0      	movs	r2, #160	; 0xa0
 800324e:	0212      	lsls	r2, r2, #8
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003258:	187b      	adds	r3, r7, r1
 800325a:	0018      	movs	r0, r3
 800325c:	f002 f878 	bl	8005350 <HAL_RCC_OscConfig>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d001      	beq.n	8003268 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003264:	f000 fa1c 	bl	80036a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003268:	2124      	movs	r1, #36	; 0x24
 800326a:	187b      	adds	r3, r7, r1
 800326c:	220f      	movs	r2, #15
 800326e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2100      	movs	r1, #0
 800328c:	0018      	movs	r0, r3
 800328e:	f002 fc33 	bl	8005af8 <HAL_RCC_ClockConfig>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003296:	f000 fa03 	bl	80036a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800329a:	003b      	movs	r3, r7
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032a0:	003b      	movs	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a6:	003b      	movs	r3, r7
 80032a8:	0018      	movs	r0, r3
 80032aa:	f002 fe49 	bl	8005f40 <HAL_RCCEx_PeriphCLKConfig>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032b2:	f000 f9f5 	bl	80036a0 <Error_Handler>
  }
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b01d      	add	sp, #116	; 0x74
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	40007000 	.word	0x40007000
 80032c4:	ffffe7ff 	.word	0xffffe7ff

080032c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <MX_I2C2_Init+0x78>)
 80032ce:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <MX_I2C2_Init+0x7c>)
 80032d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <MX_I2C2_Init+0x78>)
 80032d4:	22e1      	movs	r2, #225	; 0xe1
 80032d6:	00d2      	lsls	r2, r2, #3
 80032d8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <MX_I2C2_Init+0x78>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <MX_I2C2_Init+0x78>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <MX_I2C2_Init+0x78>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <MX_I2C2_Init+0x78>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <MX_I2C2_Init+0x78>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_I2C2_Init+0x78>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <MX_I2C2_Init+0x78>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_I2C2_Init+0x78>)
 8003306:	0018      	movs	r0, r3
 8003308:	f001 f8ae 	bl	8004468 <HAL_I2C_Init>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d001      	beq.n	8003314 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003310:	f000 f9c6 	bl	80036a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_I2C2_Init+0x78>)
 8003316:	2100      	movs	r1, #0
 8003318:	0018      	movs	r0, r3
 800331a:	f001 ff1b 	bl	8005154 <HAL_I2CEx_ConfigAnalogFilter>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003322:	f000 f9bd 	bl	80036a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <MX_I2C2_Init+0x78>)
 8003328:	2100      	movs	r1, #0
 800332a:	0018      	movs	r0, r3
 800332c:	f001 ff5e 	bl	80051ec <HAL_I2CEx_ConfigDigitalFilter>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d001      	beq.n	8003338 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003334:	f000 f9b4 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	2000048c 	.word	0x2000048c
 8003344:	40005800 	.word	0x40005800

08003348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <MX_USART1_UART_Init+0x5c>)
 8003350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003354:	2296      	movs	r2, #150	; 0x96
 8003356:	0192      	lsls	r2, r2, #6
 8003358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <MX_USART1_UART_Init+0x58>)
 800338c:	0018      	movs	r0, r3
 800338e:	f002 ff33 	bl	80061f8 <HAL_UART_Init>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003396:	f000 f983 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200004e0 	.word	0x200004e0
 80033a4:	40013800 	.word	0x40013800

080033a8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <MX_USART5_UART_Init+0x5c>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033b4:	22e1      	movs	r2, #225	; 0xe1
 80033b6:	0252      	lsls	r2, r2, #9
 80033b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <MX_USART5_UART_Init+0x58>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f002 ff03 	bl	80061f8 <HAL_UART_Init>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d001      	beq.n	80033fa <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80033f6:	f000 f953 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000568 	.word	0x20000568
 8003404:	40005000 	.word	0x40005000

08003408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <MX_DMA_Init+0x38>)
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <MX_DMA_Init+0x38>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <MX_DMA_Init+0x38>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2103      	movs	r1, #3
 800342a:	200a      	movs	r0, #10
 800342c:	f000 fc78 	bl	8003d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003430:	200a      	movs	r0, #10
 8003432:	f000 fc8a 	bl	8003d4a <HAL_NVIC_EnableIRQ>

}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	40021000 	.word	0x40021000

08003444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b089      	sub	sp, #36	; 0x24
 8003448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344a:	240c      	movs	r4, #12
 800344c:	193b      	adds	r3, r7, r4
 800344e:	0018      	movs	r0, r3
 8003450:	2314      	movs	r3, #20
 8003452:	001a      	movs	r2, r3
 8003454:	2100      	movs	r1, #0
 8003456:	f004 fe44 	bl	80080e2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <MX_GPIO_Init+0xb8>)
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	4b27      	ldr	r3, [pc, #156]	; (80034fc <MX_GPIO_Init+0xb8>)
 8003460:	2102      	movs	r1, #2
 8003462:	430a      	orrs	r2, r1
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <MX_GPIO_Init+0xb8>)
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <MX_GPIO_Init+0xb8>)
 8003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <MX_GPIO_Init+0xb8>)
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <MX_GPIO_Init+0xb8>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	01db      	lsls	r3, r3, #7
 800348e:	481c      	ldr	r0, [pc, #112]	; (8003500 <MX_GPIO_Init+0xbc>)
 8003490:	2200      	movs	r2, #0
 8003492:	0019      	movs	r1, r3
 8003494:	f000 ffae 	bl	80043f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003498:	193b      	adds	r3, r7, r4
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	0152      	lsls	r2, r2, #5
 800349e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	2288      	movs	r2, #136	; 0x88
 80034a4:	0352      	lsls	r2, r2, #13
 80034a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <MX_GPIO_Init+0xbc>)
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f000 fe1f 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034ba:	0021      	movs	r1, r4
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	01d2      	lsls	r2, r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	2211      	movs	r2, #17
 80034c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <MX_GPIO_Init+0xbc>)
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f000 fe0b 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2103      	movs	r1, #3
 80034e6:	2007      	movs	r0, #7
 80034e8:	f000 fc1a 	bl	8003d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80034ec:	2007      	movs	r0, #7
 80034ee:	f000 fc2c 	bl	8003d4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b009      	add	sp, #36	; 0x24
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	50000400 	.word	0x50000400

08003504 <StartReadSensorData>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadSensorData */
void StartReadSensorData(void const * argument)
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b0a3      	sub	sp, #140	; 0x8c
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	reading_sensor_data = 1;
 800350c:	4b55      	ldr	r3, [pc, #340]	; (8003664 <StartReadSensorData+0x160>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	01db      	lsls	r3, r3, #7
 8003516:	4854      	ldr	r0, [pc, #336]	; (8003668 <StartReadSensorData+0x164>)
 8003518:	2201      	movs	r2, #1
 800351a:	0019      	movs	r1, r3
 800351c:	f000 ff6a 	bl	80043f4 <HAL_GPIO_WritePin>
	bmx160_set_i2c(&hi2c2);
 8003520:	4b52      	ldr	r3, [pc, #328]	; (800366c <StartReadSensorData+0x168>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff f99e 	bl	8002864 <bmx160_set_i2c>
	bmx160_begin();
 8003528:	f7ff f9aa 	bl	8002880 <bmx160_begin>
		sBmx160SensorData_t geo;
		sBmx160SensorData_t giro;
		sBmx160SensorData_t acel;

		if (COLLECT_MODE == 0) {
			bmx160_getAllData(&geo, &giro, &acel);
 800352c:	2430      	movs	r4, #48	; 0x30
 800352e:	2508      	movs	r5, #8
 8003530:	1963      	adds	r3, r4, r5
 8003532:	19da      	adds	r2, r3, r7
 8003534:	2640      	movs	r6, #64	; 0x40
 8003536:	1973      	adds	r3, r6, r5
 8003538:	19d9      	adds	r1, r3, r7
 800353a:	2350      	movs	r3, #80	; 0x50
 800353c:	195b      	adds	r3, r3, r5
 800353e:	19db      	adds	r3, r3, r7
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fa89 	bl	8002a58 <bmx160_getAllData>

			char *acel_data = NULL, *giro_data = NULL, *geo_data = NULL, *data = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	677b      	str	r3, [r7, #116]	; 0x74
 800354a:	2300      	movs	r3, #0
 800354c:	673b      	str	r3, [r7, #112]	; 0x70
 800354e:	2300      	movs	r3, #0
 8003550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003552:	2300      	movs	r3, #0
 8003554:	66bb      	str	r3, [r7, #104]	; 0x68
			sprintf(acel_data, "{x:%f,\ny:%f,\nz:%f}", acel.x, acel.y, acel.z);
 8003556:	1963      	adds	r3, r4, r5
 8003558:	19db      	adds	r3, r3, r7
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1c18      	adds	r0, r3, #0
 800355e:	f7ff f887 	bl	8002670 <__aeabi_f2d>
 8003562:	6038      	str	r0, [r7, #0]
 8003564:	6079      	str	r1, [r7, #4]
 8003566:	0026      	movs	r6, r4
 8003568:	1962      	adds	r2, r4, r5
 800356a:	19d3      	adds	r3, r2, r7
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	1c18      	adds	r0, r3, #0
 8003570:	f7ff f87e 	bl	8002670 <__aeabi_f2d>
 8003574:	0004      	movs	r4, r0
 8003576:	000d      	movs	r5, r1
 8003578:	2308      	movs	r3, #8
 800357a:	18f2      	adds	r2, r6, r3
 800357c:	19d3      	adds	r3, r2, r7
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	1c18      	adds	r0, r3, #0
 8003582:	f7ff f875 	bl	8002670 <__aeabi_f2d>
 8003586:	0002      	movs	r2, r0
 8003588:	000b      	movs	r3, r1
 800358a:	4939      	ldr	r1, [pc, #228]	; (8003670 <StartReadSensorData+0x16c>)
 800358c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800358e:	9202      	str	r2, [sp, #8]
 8003590:	9303      	str	r3, [sp, #12]
 8003592:	9400      	str	r4, [sp, #0]
 8003594:	9501      	str	r5, [sp, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f005 fc25 	bl	8008de8 <siprintf>
			sprintf(giro_data, "{x:%f,\ny:%f,\nz:%f}", giro.x, giro.y, giro.z);
 800359e:	2640      	movs	r6, #64	; 0x40
 80035a0:	2408      	movs	r4, #8
 80035a2:	1933      	adds	r3, r6, r4
 80035a4:	19db      	adds	r3, r3, r7
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c18      	adds	r0, r3, #0
 80035aa:	f7ff f861 	bl	8002670 <__aeabi_f2d>
 80035ae:	6038      	str	r0, [r7, #0]
 80035b0:	6079      	str	r1, [r7, #4]
 80035b2:	1932      	adds	r2, r6, r4
 80035b4:	19d3      	adds	r3, r2, r7
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	1c18      	adds	r0, r3, #0
 80035ba:	f7ff f859 	bl	8002670 <__aeabi_f2d>
 80035be:	0004      	movs	r4, r0
 80035c0:	000d      	movs	r5, r1
 80035c2:	2308      	movs	r3, #8
 80035c4:	18f2      	adds	r2, r6, r3
 80035c6:	19d3      	adds	r3, r2, r7
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	1c18      	adds	r0, r3, #0
 80035cc:	f7ff f850 	bl	8002670 <__aeabi_f2d>
 80035d0:	0002      	movs	r2, r0
 80035d2:	000b      	movs	r3, r1
 80035d4:	4926      	ldr	r1, [pc, #152]	; (8003670 <StartReadSensorData+0x16c>)
 80035d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80035d8:	9202      	str	r2, [sp, #8]
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	9400      	str	r4, [sp, #0]
 80035de:	9501      	str	r5, [sp, #4]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f005 fc00 	bl	8008de8 <siprintf>
			sprintf(geo_data, "{x:%f,\ny:%f,\nz:%f}", geo.x, geo.y, geo.z);
 80035e8:	2650      	movs	r6, #80	; 0x50
 80035ea:	2408      	movs	r4, #8
 80035ec:	1933      	adds	r3, r6, r4
 80035ee:	19db      	adds	r3, r3, r7
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1c18      	adds	r0, r3, #0
 80035f4:	f7ff f83c 	bl	8002670 <__aeabi_f2d>
 80035f8:	6038      	str	r0, [r7, #0]
 80035fa:	6079      	str	r1, [r7, #4]
 80035fc:	1932      	adds	r2, r6, r4
 80035fe:	19d3      	adds	r3, r2, r7
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	1c18      	adds	r0, r3, #0
 8003604:	f7ff f834 	bl	8002670 <__aeabi_f2d>
 8003608:	0004      	movs	r4, r0
 800360a:	000d      	movs	r5, r1
 800360c:	2308      	movs	r3, #8
 800360e:	18f3      	adds	r3, r6, r3
 8003610:	19db      	adds	r3, r3, r7
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	1c18      	adds	r0, r3, #0
 8003616:	f7ff f82b 	bl	8002670 <__aeabi_f2d>
 800361a:	0002      	movs	r2, r0
 800361c:	000b      	movs	r3, r1
 800361e:	4914      	ldr	r1, [pc, #80]	; (8003670 <StartReadSensorData+0x16c>)
 8003620:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003622:	9202      	str	r2, [sp, #8]
 8003624:	9303      	str	r3, [sp, #12]
 8003626:	9400      	str	r4, [sp, #0]
 8003628:	9501      	str	r5, [sp, #4]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f005 fbdb 	bl	8008de8 <siprintf>
			sprintf(data, "AT+S:acel=%s;giro=%s;geo=%s;", acel_data, giro_data, geo_data);
 8003632:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003634:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003636:	490f      	ldr	r1, [pc, #60]	; (8003674 <StartReadSensorData+0x170>)
 8003638:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	0023      	movs	r3, r4
 8003640:	f005 fbd2 	bl	8008de8 <siprintf>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)data, strlen(data));
 8003644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003646:	0018      	movs	r0, r3
 8003648:	f7fc fd5e 	bl	8000108 <strlen>
 800364c:	0003      	movs	r3, r0
 800364e:	b29a      	uxth	r2, r3
 8003650:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <StartReadSensorData+0x174>)
 8003654:	0018      	movs	r0, r3
 8003656:	f002 fe23 	bl	80062a0 <HAL_UART_Transmit_DMA>
			sprintf(geo_data, "{x:[%s],\ny:[%s],\nz:[%s]}", sensor_geo.x, sensor_geo.y, sensor_geo.z);
			sprintf(data, "AT+S:acel=%s;giro=%s;geo=%s;", acel_data, giro_data, geo_data);
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)data, strlen(data));

		}
		osDelay(INTERVAL_BETWEEN_READS);
 800365a:	200a      	movs	r0, #10
 800365c:	f003 fcbf 	bl	8006fde <osDelay>
	{
 8003660:	e764      	b.n	800352c <StartReadSensorData+0x28>
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000640 	.word	0x20000640
 8003668:	50000400 	.word	0x50000400
 800366c:	2000048c 	.word	0x2000048c
 8003670:	0800cb9c 	.word	0x0800cb9c
 8003674:	0800cbb0 	.word	0x0800cbb0
 8003678:	200004e0 	.word	0x200004e0

0800367c <StartSleepTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSleepTask */
void StartSleepTask(void const * argument)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSleepTask */
	/* Infinite loop */
	if (reading_sensor_data == 0) {
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <StartSleepTask+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <StartSleepTask+0x18>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800368c:	2101      	movs	r1, #1
 800368e:	2000      	movs	r0, #0
 8003690:	f001 fdf8 	bl	8005284 <HAL_PWR_EnterSLEEPMode>
	}
  /* USER CODE END StartSleepTask */
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000640 	.word	0x20000640

080036a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a4:	b672      	cpsid	i
}
 80036a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80036a8:	e7fe      	b.n	80036a8 <Error_Handler+0x8>
	...

080036ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_MspInit+0x34>)
 80036b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_MspInit+0x34>)
 80036b6:	2101      	movs	r1, #1
 80036b8:	430a      	orrs	r2, r1
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_MspInit+0x34>)
 80036be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_MspInit+0x34>)
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	0549      	lsls	r1, r1, #21
 80036c6:	430a      	orrs	r2, r1
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80036ca:	2302      	movs	r3, #2
 80036cc:	425b      	negs	r3, r3
 80036ce:	2200      	movs	r2, #0
 80036d0:	2103      	movs	r1, #3
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fb24 	bl	8003d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	240c      	movs	r4, #12
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	0018      	movs	r0, r3
 80036f2:	2314      	movs	r3, #20
 80036f4:	001a      	movs	r2, r3
 80036f6:	2100      	movs	r1, #0
 80036f8:	f004 fcf3 	bl	80080e2 <memset>
  if(hi2c->Instance==I2C2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_I2C_MspInit+0x80>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d129      	bne.n	800375a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_I2C_MspInit+0x84>)
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4b17      	ldr	r3, [pc, #92]	; (8003768 <HAL_I2C_MspInit+0x84>)
 800370c:	2102      	movs	r1, #2
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_I2C_MspInit+0x84>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	22c0      	movs	r2, #192	; 0xc0
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003726:	0021      	movs	r1, r4
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2212      	movs	r2, #18
 800372c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2203      	movs	r2, #3
 8003738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2206      	movs	r2, #6
 800373e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003740:	187b      	adds	r3, r7, r1
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <HAL_I2C_MspInit+0x88>)
 8003744:	0019      	movs	r1, r3
 8003746:	0010      	movs	r0, r2
 8003748:	f000 fcd6 	bl	80040f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_I2C_MspInit+0x84>)
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_I2C_MspInit+0x84>)
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	03c9      	lsls	r1, r1, #15
 8003756:	430a      	orrs	r2, r1
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b009      	add	sp, #36	; 0x24
 8003760:	bd90      	pop	{r4, r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	40005800 	.word	0x40005800
 8003768:	40021000 	.word	0x40021000
 800376c:	50000400 	.word	0x50000400

08003770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b08b      	sub	sp, #44	; 0x2c
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	2414      	movs	r4, #20
 800377a:	193b      	adds	r3, r7, r4
 800377c:	0018      	movs	r0, r3
 800377e:	2314      	movs	r3, #20
 8003780:	001a      	movs	r2, r3
 8003782:	2100      	movs	r1, #0
 8003784:	f004 fcad 	bl	80080e2 <memset>
  if(huart->Instance==USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a44      	ldr	r2, [pc, #272]	; (80038a0 <HAL_UART_MspInit+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d154      	bne.n	800383c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_UART_MspInit+0x134>)
 8003794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003796:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_UART_MspInit+0x134>)
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	01c9      	lsls	r1, r1, #7
 800379c:	430a      	orrs	r2, r1
 800379e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_UART_MspInit+0x134>)
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_UART_MspInit+0x134>)
 80037a6:	2101      	movs	r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ac:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_UART_MspInit+0x134>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	22c0      	movs	r2, #192	; 0xc0
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	0021      	movs	r1, r4
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2202      	movs	r2, #2
 80037c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2203      	movs	r2, #3
 80037d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	2204      	movs	r2, #4
 80037d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	187a      	adds	r2, r7, r1
 80037dc:	23a0      	movs	r3, #160	; 0xa0
 80037de:	05db      	lsls	r3, r3, #23
 80037e0:	0011      	movs	r1, r2
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fc88 	bl	80040f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_UART_MspInit+0x138>)
 80037ea:	4a30      	ldr	r2, [pc, #192]	; (80038ac <HAL_UART_MspInit+0x13c>)
 80037ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_UART_MspInit+0x138>)
 80037f0:	2203      	movs	r2, #3
 80037f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037f4:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_UART_MspInit+0x138>)
 80037f6:	2210      	movs	r2, #16
 80037f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fa:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_UART_MspInit+0x138>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003800:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800380c:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <HAL_UART_MspInit+0x138>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_UART_MspInit+0x138>)
 800381a:	2200      	movs	r2, #0
 800381c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003820:	0018      	movs	r0, r3
 8003822:	f000 faaf 	bl	8003d84 <HAL_DMA_Init>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d001      	beq.n	800382e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800382a:	f7ff ff39 	bl	80036a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003832:	671a      	str	r2, [r3, #112]	; 0x70
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_UART_MspInit+0x138>)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800383a:	e02d      	b.n	8003898 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART5)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_UART_MspInit+0x140>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d128      	bne.n	8003898 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_UART_MspInit+0x134>)
 8003848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_UART_MspInit+0x134>)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	0349      	lsls	r1, r1, #13
 8003850:	430a      	orrs	r2, r1
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_UART_MspInit+0x134>)
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_UART_MspInit+0x134>)
 800385a:	2102      	movs	r1, #2
 800385c:	430a      	orrs	r2, r1
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_UART_MspInit+0x134>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2202      	movs	r2, #2
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800386c:	2114      	movs	r1, #20
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2218      	movs	r2, #24
 8003872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2202      	movs	r2, #2
 8003878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2203      	movs	r2, #3
 8003884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003886:	187b      	adds	r3, r7, r1
 8003888:	2206      	movs	r2, #6
 800388a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388c:	187b      	adds	r3, r7, r1
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_UART_MspInit+0x144>)
 8003890:	0019      	movs	r1, r3
 8003892:	0010      	movs	r0, r2
 8003894:	f000 fc30 	bl	80040f8 <HAL_GPIO_Init>
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b00b      	add	sp, #44	; 0x2c
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40021000 	.word	0x40021000
 80038a8:	200005f0 	.word	0x200005f0
 80038ac:	4002001c 	.word	0x4002001c
 80038b0:	40005000 	.word	0x40005000
 80038b4:	50000400 	.word	0x50000400

080038b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <NMI_Handler+0x4>

080038be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <HardFault_Handler+0x4>

080038c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c8:	f000 f962 	bl	8003b90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80038cc:	f004 f890 	bl	80079f0 <xTaskGetSchedulerState>
 80038d0:	0003      	movs	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80038d6:	f004 f9ef 	bl	8007cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fda1 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <DMA1_Channel2_3_IRQHandler+0x14>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fb20 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	200005f0 	.word	0x200005f0

0800390c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  return 1;
 8003910:	2301      	movs	r3, #1
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_kill>:

int _kill(int pid, int sig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003922:	f004 fbab 	bl	800807c <__errno>
 8003926:	0003      	movs	r3, r0
 8003928:	2216      	movs	r2, #22
 800392a:	601a      	str	r2, [r3, #0]
  return -1;
 800392c:	2301      	movs	r3, #1
 800392e:	425b      	negs	r3, r3
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}

08003938 <_exit>:

void _exit (int status)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003940:	2301      	movs	r3, #1
 8003942:	425a      	negs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ffe5 	bl	8003918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800394e:	e7fe      	b.n	800394e <_exit+0x16>

08003950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e00a      	b.n	8003978 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003962:	e000      	b.n	8003966 <_read+0x16>
 8003964:	bf00      	nop
 8003966:	0001      	movs	r1, r0
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	60ba      	str	r2, [r7, #8]
 800396e:	b2ca      	uxtb	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	3301      	adds	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	dbf0      	blt.n	8003962 <_read+0x12>
  }

  return len;
 8003980:	687b      	ldr	r3, [r7, #4]
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}

0800398a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e009      	b.n	80039b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	60ba      	str	r2, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	e000      	b.n	80039aa <_write+0x20>
 80039a8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	dbf1      	blt.n	800399c <_write+0x12>
  }
  return len;
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b006      	add	sp, #24
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_close>:

int _close(int file)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	425b      	negs	r3, r3
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	0192      	lsls	r2, r2, #6
 80039e6:	605a      	str	r2, [r3, #4]
  return 0;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_isatty>:

int _isatty(int file)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <_sbrk+0x5c>)
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <_sbrk+0x60>)
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <_sbrk+0x64>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <_sbrk+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <_sbrk+0x64>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	18d3      	adds	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d207      	bcs.n	8003a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a4c:	f004 fb16 	bl	800807c <__errno>
 8003a50:	0003      	movs	r3, r0
 8003a52:	220c      	movs	r2, #12
 8003a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	425b      	negs	r3, r3
 8003a5a:	e009      	b.n	8003a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <_sbrk+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	18d2      	adds	r2, r2, r3
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <_sbrk+0x64>)
 8003a6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b006      	add	sp, #24
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20005000 	.word	0x20005000
 8003a7c:	00000400 	.word	0x00000400
 8003a80:	20000644 	.word	0x20000644
 8003a84:	200013a0 	.word	0x200013a0

08003a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003a94:	480d      	ldr	r0, [pc, #52]	; (8003acc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003a96:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a98:	f7ff fff6 	bl	8003a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a9c:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a9e:	490d      	ldr	r1, [pc, #52]	; (8003ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <LoopForever+0xe>)
  movs r3, #0
 8003aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa4:	e002      	b.n	8003aac <LoopCopyDataInit>

08003aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aaa:	3304      	adds	r3, #4

08003aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab0:	d3f9      	bcc.n	8003aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ab4:	4c0a      	ldr	r4, [pc, #40]	; (8003ae0 <LoopForever+0x16>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab8:	e001      	b.n	8003abe <LoopFillZerobss>

08003aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003abc:	3204      	adds	r2, #4

08003abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac0:	d3fb      	bcc.n	8003aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f004 fae1 	bl	8008088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ac6:	f7ff fb55 	bl	8003174 <main>

08003aca <LoopForever>:

LoopForever:
    b LoopForever
 8003aca:	e7fe      	b.n	8003aca <LoopForever>
   ldr   r0, =_estack
 8003acc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003ad8:	0800d1bc 	.word	0x0800d1bc
  ldr r2, =_sbss
 8003adc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003ae0:	200013a0 	.word	0x200013a0

08003ae4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC1_COMP_IRQHandler>
	...

08003ae8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_Init+0x3c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_Init+0x3c>)
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b00:	2003      	movs	r0, #3
 8003b02:	f000 f811 	bl	8003b28 <HAL_InitTick>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e001      	b.n	8003b16 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b12:	f7ff fdcb 	bl	80036ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	781b      	ldrb	r3, [r3, #0]
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b002      	add	sp, #8
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	40022000 	.word	0x40022000

08003b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <HAL_InitTick+0x5c>)
 8003b32:	681c      	ldr	r4, [r3, #0]
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_InitTick+0x60>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	0019      	movs	r1, r3
 8003b3a:	23fa      	movs	r3, #250	; 0xfa
 8003b3c:	0098      	lsls	r0, r3, #2
 8003b3e:	f7fc faff 	bl	8000140 <__udivsi3>
 8003b42:	0003      	movs	r3, r0
 8003b44:	0019      	movs	r1, r3
 8003b46:	0020      	movs	r0, r4
 8003b48:	f7fc fafa 	bl	8000140 <__udivsi3>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f90b 	bl	8003d6a <HAL_SYSTICK_Config>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e00f      	b.n	8003b7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d80b      	bhi.n	8003b7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	2301      	movs	r3, #1
 8003b66:	425b      	negs	r3, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f8d8 	bl	8003d20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_InitTick+0x64>)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b003      	add	sp, #12
 8003b82:	bd90      	pop	{r4, r7, pc}
 8003b84:	20000008 	.word	0x20000008
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_IncTick+0x1c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_IncTick+0x20>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	18d2      	adds	r2, r2, r3
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_IncTick+0x20>)
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	20000648 	.word	0x20000648

08003bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb8:	4b02      	ldr	r3, [pc, #8]	; (8003bc4 <HAL_GetTick+0x10>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	20000648 	.word	0x20000648

08003bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	0002      	movs	r2, r0
 8003bd0:	1dfb      	adds	r3, r7, #7
 8003bd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bda:	d809      	bhi.n	8003bf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bdc:	1dfb      	adds	r3, r7, #7
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	001a      	movs	r2, r3
 8003be2:	231f      	movs	r3, #31
 8003be4:	401a      	ands	r2, r3
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_EnableIRQ+0x30>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	4091      	lsls	r1, r2
 8003bec:	000a      	movs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
  }
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	0002      	movs	r2, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c10:	d828      	bhi.n	8003c64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c12:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <__NVIC_SetPriority+0xd4>)
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	33c0      	adds	r3, #192	; 0xc0
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	589b      	ldr	r3, [r3, r2]
 8003c22:	1dfa      	adds	r2, r7, #7
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	0011      	movs	r1, r2
 8003c28:	2203      	movs	r2, #3
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	00d2      	lsls	r2, r2, #3
 8003c2e:	21ff      	movs	r1, #255	; 0xff
 8003c30:	4091      	lsls	r1, r2
 8003c32:	000a      	movs	r2, r1
 8003c34:	43d2      	mvns	r2, r2
 8003c36:	401a      	ands	r2, r3
 8003c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	401a      	ands	r2, r3
 8003c42:	1dfb      	adds	r3, r7, #7
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	0018      	movs	r0, r3
 8003c48:	2303      	movs	r3, #3
 8003c4a:	4003      	ands	r3, r0
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c50:	481f      	ldr	r0, [pc, #124]	; (8003cd0 <__NVIC_SetPriority+0xd4>)
 8003c52:	1dfb      	adds	r3, r7, #7
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	33c0      	adds	r3, #192	; 0xc0
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c62:	e031      	b.n	8003cc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <__NVIC_SetPriority+0xd8>)
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	400b      	ands	r3, r1
 8003c70:	3b08      	subs	r3, #8
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3306      	adds	r3, #6
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1dfa      	adds	r2, r7, #7
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	0011      	movs	r1, r2
 8003c84:	2203      	movs	r2, #3
 8003c86:	400a      	ands	r2, r1
 8003c88:	00d2      	lsls	r2, r2, #3
 8003c8a:	21ff      	movs	r1, #255	; 0xff
 8003c8c:	4091      	lsls	r1, r2
 8003c8e:	000a      	movs	r2, r1
 8003c90:	43d2      	mvns	r2, r2
 8003c92:	401a      	ands	r2, r3
 8003c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	401a      	ands	r2, r3
 8003c9e:	1dfb      	adds	r3, r7, #7
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	4003      	ands	r3, r0
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cac:	4809      	ldr	r0, [pc, #36]	; (8003cd4 <__NVIC_SetPriority+0xd8>)
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	001c      	movs	r4, r3
 8003cb4:	230f      	movs	r3, #15
 8003cb6:	4023      	ands	r3, r4
 8003cb8:	3b08      	subs	r3, #8
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	3306      	adds	r3, #6
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	18c3      	adds	r3, r0, r3
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b003      	add	sp, #12
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1e5a      	subs	r2, r3, #1
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	045b      	lsls	r3, r3, #17
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d301      	bcc.n	8003cf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cec:	2301      	movs	r3, #1
 8003cee:	e010      	b.n	8003d12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <SysTick_Config+0x44>)
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ff7c 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SysTick_Config+0x44>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <SysTick_Config+0x44>)
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	e000e010 	.word	0xe000e010

08003d20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	1c02      	adds	r2, r0, #0
 8003d30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	0011      	movs	r1, r2
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff ff5d 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	0002      	movs	r2, r0
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d56:	1dfb      	adds	r3, r7, #7
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff ff33 	bl	8003bc8 <__NVIC_EnableIRQ>
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7ff ffaf 	bl	8003cd8 <SysTick_Config>
 8003d7a:	0003      	movs	r3, r0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e061      	b.n	8003e5a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a32      	ldr	r2, [pc, #200]	; (8003e64 <HAL_DMA_Init+0xe0>)
 8003d9c:	4694      	mov	ip, r2
 8003d9e:	4463      	add	r3, ip
 8003da0:	2114      	movs	r1, #20
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc f9cc 	bl	8000140 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	009a      	lsls	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <HAL_DMA_Init+0xe4>)
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2225      	movs	r2, #37	; 0x25
 8003dba:	2102      	movs	r1, #2
 8003dbc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_DMA_Init+0xe8>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	01db      	lsls	r3, r3, #7
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <HAL_DMA_Init+0xec>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	211c      	movs	r1, #28
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	210f      	movs	r1, #15
 8003e1e:	4099      	lsls	r1, r3
 8003e20:	000b      	movs	r3, r1
 8003e22:	43d9      	mvns	r1, r3
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_DMA_Init+0xec>)
 8003e26:	400a      	ands	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_DMA_Init+0xec>)
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	201c      	movs	r0, #28
 8003e38:	4003      	ands	r3, r0
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_DMA_Init+0xec>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2225      	movs	r2, #37	; 0x25
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	2100      	movs	r1, #0
 8003e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	bffdfff8 	.word	0xbffdfff8
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	ffff800f 	.word	0xffff800f
 8003e70:	400200a8 	.word	0x400200a8

08003e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2317      	movs	r3, #23
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2224      	movs	r2, #36	; 0x24
 8003e8e:	5c9b      	ldrb	r3, [r3, r2]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_DMA_Start_IT+0x24>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e04f      	b.n	8003f38 <HAL_DMA_Start_IT+0xc4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2225      	movs	r2, #37	; 0x25
 8003ea4:	5c9b      	ldrb	r3, [r3, r2]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d13a      	bne.n	8003f22 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2225      	movs	r2, #37	; 0x25
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f8e3 	bl	800409c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	210e      	movs	r1, #14
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e00f      	b.n	8003f10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2104      	movs	r1, #4
 8003efc:	438a      	bics	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	210a      	movs	r1, #10
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e007      	b.n	8003f32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2224      	movs	r2, #36	; 0x24
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2a:	2317      	movs	r3, #23
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003f32:	2317      	movs	r3, #23
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	221c      	movs	r2, #28
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2204      	movs	r2, #4
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d026      	beq.n	8003fba <HAL_DMA_IRQHandler+0x7a>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	4013      	ands	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d107      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	221c      	movs	r2, #28
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	4091      	lsls	r1, r2
 8003fa0:	000a      	movs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d100      	bne.n	8003fae <HAL_DMA_IRQHandler+0x6e>
 8003fac:	e071      	b.n	8004092 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003fb8:	e06b      	b.n	8004092 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	221c      	movs	r2, #28
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	0013      	movs	r3, r2
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d02d      	beq.n	800402a <HAL_DMA_IRQHandler+0xea>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d029      	beq.n	800402a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d10b      	bne.n	8003ffa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	210a      	movs	r1, #10
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2225      	movs	r2, #37	; 0x25
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	221c      	movs	r2, #28
 8004000:	401a      	ands	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2102      	movs	r1, #2
 8004008:	4091      	lsls	r1, r2
 800400a:	000a      	movs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d039      	beq.n	8004092 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	0010      	movs	r0, r2
 8004026:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004028:	e033      	b.n	8004092 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	221c      	movs	r2, #28
 8004030:	4013      	ands	r3, r2
 8004032:	2208      	movs	r2, #8
 8004034:	409a      	lsls	r2, r3
 8004036:	0013      	movs	r3, r2
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4013      	ands	r3, r2
 800403c:	d02a      	beq.n	8004094 <HAL_DMA_IRQHandler+0x154>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2208      	movs	r2, #8
 8004042:	4013      	ands	r3, r2
 8004044:	d026      	beq.n	8004094 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	210e      	movs	r1, #14
 8004052:	438a      	bics	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	221c      	movs	r2, #28
 800405c:	401a      	ands	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2101      	movs	r1, #1
 8004064:	4091      	lsls	r1, r2
 8004066:	000a      	movs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2225      	movs	r2, #37	; 0x25
 8004074:	2101      	movs	r1, #1
 8004076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2224      	movs	r2, #36	; 0x24
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	0010      	movs	r0, r2
 8004090:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46c0      	nop			; (mov r8, r8)
}
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}

0800409c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	221c      	movs	r2, #28
 80040b0:	401a      	ands	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2101      	movs	r1, #1
 80040b8:	4091      	lsls	r1, r2
 80040ba:	000a      	movs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d108      	bne.n	80040e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040de:	e007      	b.n	80040f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800410e:	e155      	b.n	80043bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4091      	lsls	r1, r2
 800411a:	000a      	movs	r2, r1
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <HAL_GPIO_Init+0x30>
 8004126:	e146      	b.n	80043b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	4013      	ands	r3, r2
 8004130:	2b01      	cmp	r3, #1
 8004132:	d005      	beq.n	8004140 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800413c:	2b02      	cmp	r3, #2
 800413e:	d130      	bne.n	80041a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	409a      	lsls	r2, r3
 800414e:	0013      	movs	r3, r2
 8004150:	43da      	mvns	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	0013      	movs	r3, r2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004176:	2201      	movs	r2, #1
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
 800417c:	0013      	movs	r3, r2
 800417e:	43da      	mvns	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	2201      	movs	r2, #1
 800418e:	401a      	ands	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	409a      	lsls	r2, r3
 8004194:	0013      	movs	r3, r2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d017      	beq.n	80041de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	43da      	mvns	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	0013      	movs	r3, r2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d123      	bne.n	8004232 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	08da      	lsrs	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3208      	adds	r2, #8
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	58d3      	ldr	r3, [r2, r3]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2207      	movs	r2, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	220f      	movs	r2, #15
 8004202:	409a      	lsls	r2, r3
 8004204:	0013      	movs	r3, r2
 8004206:	43da      	mvns	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2107      	movs	r1, #7
 8004216:	400b      	ands	r3, r1
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	409a      	lsls	r2, r3
 800421c:	0013      	movs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	08da      	lsrs	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3208      	adds	r2, #8
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	6939      	ldr	r1, [r7, #16]
 8004230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	409a      	lsls	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	43da      	mvns	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	401a      	ands	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	0013      	movs	r3, r2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	23c0      	movs	r3, #192	; 0xc0
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	4013      	ands	r3, r2
 8004270:	d100      	bne.n	8004274 <HAL_GPIO_Init+0x17c>
 8004272:	e0a0      	b.n	80043b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_GPIO_Init+0x2dc>)
 8004276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004278:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <HAL_GPIO_Init+0x2dc>)
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004280:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <HAL_GPIO_Init+0x2e0>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	589b      	ldr	r3, [r3, r2]
 800428c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2203      	movs	r2, #3
 8004292:	4013      	ands	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	409a      	lsls	r2, r3
 800429a:	0013      	movs	r3, r2
 800429c:	43da      	mvns	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	23a0      	movs	r3, #160	; 0xa0
 80042a8:	05db      	lsls	r3, r3, #23
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x1f6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_GPIO_Init+0x2e4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x1f2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a49      	ldr	r2, [pc, #292]	; (80043e0 <HAL_GPIO_Init+0x2e8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a48      	ldr	r2, [pc, #288]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x1ea>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a47      	ldr	r2, [pc, #284]	; (80043e8 <HAL_GPIO_Init+0x2f0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x1e6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a46      	ldr	r2, [pc, #280]	; (80043ec <HAL_GPIO_Init+0x2f4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x1e2>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e00a      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042da:	2306      	movs	r3, #6
 80042dc:	e008      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042de:	2304      	movs	r3, #4
 80042e0:	e006      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e004      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042ee:	2300      	movs	r3, #0
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	2103      	movs	r1, #3
 80042f4:	400a      	ands	r2, r1
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4093      	lsls	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004300:	4935      	ldr	r1, [pc, #212]	; (80043d8 <HAL_GPIO_Init+0x2e0>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	3302      	adds	r3, #2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43da      	mvns	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	035b      	lsls	r3, r3, #13
 8004326:	4013      	ands	r3, r2
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004332:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43da      	mvns	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	4013      	ands	r3, r2
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43da      	mvns	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	4013      	ands	r3, r2
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43da      	mvns	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	025b      	lsls	r3, r3, #9
 80043a4:	4013      	ands	r3, r2
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <HAL_GPIO_Init+0x2f8>)
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	40da      	lsrs	r2, r3
 80043c4:	1e13      	subs	r3, r2, #0
 80043c6:	d000      	beq.n	80043ca <HAL_GPIO_Init+0x2d2>
 80043c8:	e6a2      	b.n	8004110 <HAL_GPIO_Init+0x18>
  }
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	50000400 	.word	0x50000400
 80043e0:	50000800 	.word	0x50000800
 80043e4:	50000c00 	.word	0x50000c00
 80043e8:	50001000 	.word	0x50001000
 80043ec:	50001c00 	.word	0x50001c00
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	0008      	movs	r0, r1
 80043fe:	0011      	movs	r1, r2
 8004400:	1cbb      	adds	r3, r7, #2
 8004402:	1c02      	adds	r2, r0, #0
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	1c7b      	adds	r3, r7, #1
 8004408:	1c0a      	adds	r2, r1, #0
 800440a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800440c:	1c7b      	adds	r3, r7, #1
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004414:	1cbb      	adds	r3, r7, #2
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800441e:	1cbb      	adds	r3, r7, #2
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	0002      	movs	r2, r0
 8004438:	1dbb      	adds	r3, r7, #6
 800443a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	1dba      	adds	r2, r7, #6
 8004442:	8812      	ldrh	r2, [r2, #0]
 8004444:	4013      	ands	r3, r2
 8004446:	d008      	beq.n	800445a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800444a:	1dba      	adds	r2, r7, #6
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004450:	1dbb      	adds	r3, r7, #6
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	0018      	movs	r0, r3
 8004456:	f7fe fe6f 	bl	8003138 <HAL_GPIO_EXTI_Callback>
  }
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	40010400 	.word	0x40010400

08004468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e082      	b.n	8004580 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	; 0x41
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2240      	movs	r2, #64	; 0x40
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff f927 	bl	80036e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2241      	movs	r2, #65	; 0x41
 800449a:	2124      	movs	r1, #36	; 0x24
 800449c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	438a      	bics	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4934      	ldr	r1, [pc, #208]	; (8004588 <HAL_I2C_Init+0x120>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4931      	ldr	r1, [pc, #196]	; (800458c <HAL_I2C_Init+0x124>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d108      	bne.n	80044e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	0209      	lsls	r1, r1, #8
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e007      	b.n	80044f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2184      	movs	r1, #132	; 0x84
 80044f0:	0209      	lsls	r1, r1, #8
 80044f2:	430a      	orrs	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d104      	bne.n	8004508 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	491f      	ldr	r1, [pc, #124]	; (8004590 <HAL_I2C_Init+0x128>)
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	491a      	ldr	r1, [pc, #104]	; (800458c <HAL_I2C_Init+0x124>)
 8004524:	400a      	ands	r2, r1
 8004526:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	431a      	orrs	r2, r3
 8004532:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69d9      	ldr	r1, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2241      	movs	r2, #65	; 0x41
 800456c:	2120      	movs	r1, #32
 800456e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2242      	movs	r2, #66	; 0x42
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}
 8004588:	f0ffffff 	.word	0xf0ffffff
 800458c:	ffff7fff 	.word	0xffff7fff
 8004590:	02008000 	.word	0x02008000

08004594 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	0008      	movs	r0, r1
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	0019      	movs	r1, r3
 80045a2:	230a      	movs	r3, #10
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	1c02      	adds	r2, r0, #0
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	2308      	movs	r3, #8
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	1c0a      	adds	r2, r1, #0
 80045b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2241      	movs	r2, #65	; 0x41
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d000      	beq.n	80045c0 <HAL_I2C_Master_Transmit+0x2c>
 80045be:	e0e7      	b.n	8004790 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	5c9b      	ldrb	r3, [r3, r2]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_I2C_Master_Transmit+0x3a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0e1      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045d6:	f7ff faed 	bl	8003bb4 <HAL_GetTick>
 80045da:	0003      	movs	r3, r0
 80045dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	0219      	lsls	r1, r3, #8
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2319      	movs	r3, #25
 80045ea:	2201      	movs	r2, #1
 80045ec:	f000 fb1e 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0cc      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2241      	movs	r2, #65	; 0x41
 80045fc:	2121      	movs	r1, #33	; 0x21
 80045fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2242      	movs	r2, #66	; 0x42
 8004604:	2110      	movs	r1, #16
 8004606:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2208      	movs	r2, #8
 8004618:	18ba      	adds	r2, r7, r2
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d911      	bls.n	8004652 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	22ff      	movs	r2, #255	; 0xff
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	045c      	lsls	r4, r3, #17
 800463e:	230a      	movs	r3, #10
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	8819      	ldrh	r1, [r3, #0]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	4b55      	ldr	r3, [pc, #340]	; (800479c <HAL_I2C_Master_Transmit+0x208>)
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	0023      	movs	r3, r4
 800464c:	f000 fd48 	bl	80050e0 <I2C_TransferConfig>
 8004650:	e075      	b.n	800473e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	b2da      	uxtb	r2, r3
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	049c      	lsls	r4, r3, #18
 8004666:	230a      	movs	r3, #10
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	8819      	ldrh	r1, [r3, #0]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_I2C_Master_Transmit+0x208>)
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	0023      	movs	r3, r4
 8004674:	f000 fd34 	bl	80050e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004678:	e061      	b.n	800473e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 fb21 	bl	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004686:	1e03      	subs	r3, r0, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e081      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03a      	beq.n	800473e <HAL_I2C_Master_Transmit+0x1aa>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d136      	bne.n	800473e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	0013      	movs	r3, r2
 80046da:	2200      	movs	r2, #0
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	f000 faa5 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80046e2:	1e03      	subs	r3, r0, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e053      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2bff      	cmp	r3, #255	; 0xff
 80046f2:	d911      	bls.n	8004718 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	22ff      	movs	r2, #255	; 0xff
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	045c      	lsls	r4, r3, #17
 8004704:	230a      	movs	r3, #10
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	8819      	ldrh	r1, [r3, #0]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	2300      	movs	r3, #0
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	0023      	movs	r3, r4
 8004712:	f000 fce5 	bl	80050e0 <I2C_TransferConfig>
 8004716:	e012      	b.n	800473e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	049c      	lsls	r4, r3, #18
 800472c:	230a      	movs	r3, #10
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	8819      	ldrh	r1, [r3, #0]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0023      	movs	r3, r4
 800473a:	f000 fcd1 	bl	80050e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d198      	bne.n	800467a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 fb00 	bl	8004d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e01a      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2220      	movs	r2, #32
 8004762:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	490c      	ldr	r1, [pc, #48]	; (80047a0 <HAL_I2C_Master_Transmit+0x20c>)
 8004770:	400a      	ands	r2, r1
 8004772:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2241      	movs	r2, #65	; 0x41
 8004778:	2120      	movs	r1, #32
 800477a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2242      	movs	r2, #66	; 0x42
 8004780:	2100      	movs	r1, #0
 8004782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b007      	add	sp, #28
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	80002000 	.word	0x80002000
 80047a0:	fe00e800 	.word	0xfe00e800

080047a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	0008      	movs	r0, r1
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	0019      	movs	r1, r3
 80047b2:	230a      	movs	r3, #10
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	1c02      	adds	r2, r0, #0
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	2308      	movs	r3, #8
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	1c0a      	adds	r2, r1, #0
 80047c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2241      	movs	r2, #65	; 0x41
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d000      	beq.n	80047d0 <HAL_I2C_Master_Receive+0x2c>
 80047ce:	e0e8      	b.n	80049a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	5c9b      	ldrb	r3, [r3, r2]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Master_Receive+0x3a>
 80047da:	2302      	movs	r3, #2
 80047dc:	e0e2      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2240      	movs	r2, #64	; 0x40
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047e6:	f7ff f9e5 	bl	8003bb4 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	0219      	lsls	r1, r3, #8
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2319      	movs	r3, #25
 80047fa:	2201      	movs	r2, #1
 80047fc:	f000 fa16 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0cd      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2241      	movs	r2, #65	; 0x41
 800480c:	2122      	movs	r1, #34	; 0x22
 800480e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2242      	movs	r2, #66	; 0x42
 8004814:	2110      	movs	r1, #16
 8004816:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2208      	movs	r2, #8
 8004828:	18ba      	adds	r2, r7, r2
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d911      	bls.n	8004862 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	b2da      	uxtb	r2, r3
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	045c      	lsls	r4, r3, #17
 800484e:	230a      	movs	r3, #10
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	8819      	ldrh	r1, [r3, #0]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	4b55      	ldr	r3, [pc, #340]	; (80049ac <HAL_I2C_Master_Receive+0x208>)
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	0023      	movs	r3, r4
 800485c:	f000 fc40 	bl	80050e0 <I2C_TransferConfig>
 8004860:	e076      	b.n	8004950 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	b2da      	uxtb	r2, r3
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	049c      	lsls	r4, r3, #18
 8004876:	230a      	movs	r3, #10
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	8819      	ldrh	r1, [r3, #0]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <HAL_I2C_Master_Receive+0x208>)
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	0023      	movs	r3, r4
 8004884:	f000 fc2c 	bl	80050e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004888:	e062      	b.n	8004950 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 faa3 	bl	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004896:	1e03      	subs	r3, r0, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e082      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03a      	beq.n	8004950 <HAL_I2C_Master_Receive+0x1ac>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d136      	bne.n	8004950 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	0013      	movs	r3, r2
 80048ec:	2200      	movs	r2, #0
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	f000 f99c 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e053      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2bff      	cmp	r3, #255	; 0xff
 8004904:	d911      	bls.n	800492a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	b2da      	uxtb	r2, r3
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	045c      	lsls	r4, r3, #17
 8004916:	230a      	movs	r3, #10
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	8819      	ldrh	r1, [r3, #0]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	0023      	movs	r3, r4
 8004924:	f000 fbdc 	bl	80050e0 <I2C_TransferConfig>
 8004928:	e012      	b.n	8004950 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	b2da      	uxtb	r2, r3
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	049c      	lsls	r4, r3, #18
 800493e:	230a      	movs	r3, #10
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	8819      	ldrh	r1, [r3, #0]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	0023      	movs	r3, r4
 800494c:	f000 fbc8 	bl	80050e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d197      	bne.n	800488a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0018      	movs	r0, r3
 8004962:	f000 f9f7 	bl	8004d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e01a      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2220      	movs	r2, #32
 8004974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <HAL_I2C_Master_Receive+0x20c>)
 8004982:	400a      	ands	r2, r1
 8004984:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2241      	movs	r2, #65	; 0x41
 800498a:	2120      	movs	r1, #32
 800498c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2242      	movs	r2, #66	; 0x42
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b007      	add	sp, #28
 80049aa:	bd90      	pop	{r4, r7, pc}
 80049ac:	80002400 	.word	0x80002400
 80049b0:	fe00e800 	.word	0xfe00e800

080049b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	230a      	movs	r3, #10
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	1c0a      	adds	r2, r1, #0
 80049c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2241      	movs	r2, #65	; 0x41
 80049d0:	5c9b      	ldrb	r3, [r3, r2]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d000      	beq.n	80049da <HAL_I2C_IsDeviceReady+0x26>
 80049d8:	e0fd      	b.n	8004bd6 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	401a      	ands	r2, r3
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d101      	bne.n	80049f2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0f2      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	5c9b      	ldrb	r3, [r3, r2]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_I2C_IsDeviceReady+0x4c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e0eb      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	2101      	movs	r1, #1
 8004a06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2241      	movs	r2, #65	; 0x41
 8004a0c:	2124      	movs	r1, #36	; 0x24
 8004a0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_I2C_IsDeviceReady+0x7a>
 8004a1e:	230a      	movs	r3, #10
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	059b      	lsls	r3, r3, #22
 8004a26:	0d9b      	lsrs	r3, r3, #22
 8004a28:	4a6d      	ldr	r2, [pc, #436]	; (8004be0 <HAL_I2C_IsDeviceReady+0x22c>)
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	e006      	b.n	8004a3c <HAL_I2C_IsDeviceReady+0x88>
 8004a2e:	230a      	movs	r3, #10
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	059b      	lsls	r3, r3, #22
 8004a36:	0d9b      	lsrs	r3, r3, #22
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_I2C_IsDeviceReady+0x230>)
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004a42:	f7ff f8b7 	bl	8003bb4 <HAL_GetTick>
 8004a46:	0003      	movs	r3, r0
 8004a48:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2220      	movs	r2, #32
 8004a52:	4013      	ands	r3, r2
 8004a54:	3b20      	subs	r3, #32
 8004a56:	425a      	negs	r2, r3
 8004a58:	4153      	adcs	r3, r2
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	231f      	movs	r3, #31
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	3b10      	subs	r3, #16
 8004a6e:	425a      	negs	r2, r3
 8004a70:	4153      	adcs	r3, r2
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	231e      	movs	r3, #30
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a7a:	e035      	b.n	8004ae8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d01a      	beq.n	8004ab8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7ff f897 	bl	8003bb4 <HAL_GetTick>
 8004a86:	0002      	movs	r2, r0
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <HAL_I2C_IsDeviceReady+0xe4>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2241      	movs	r2, #65	; 0x41
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e08f      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	3b20      	subs	r3, #32
 8004ac4:	425a      	negs	r2, r3
 8004ac6:	4153      	adcs	r3, r2
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	231f      	movs	r3, #31
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	4013      	ands	r3, r2
 8004ada:	3b10      	subs	r3, #16
 8004adc:	425a      	negs	r2, r3
 8004ade:	4153      	adcs	r3, r2
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	231e      	movs	r3, #30
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004ae8:	231f      	movs	r3, #31
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_I2C_IsDeviceReady+0x148>
 8004af2:	231e      	movs	r3, #30
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0bf      	beq.n	8004a7c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2210      	movs	r2, #16
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d01a      	beq.n	8004b40 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	0013      	movs	r3, r2
 8004b14:	2200      	movs	r2, #0
 8004b16:	2120      	movs	r1, #32
 8004b18:	f000 f888 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	1e03      	subs	r3, r0, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e059      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2241      	movs	r2, #65	; 0x41
 8004b30:	2120      	movs	r1, #32
 8004b32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2240      	movs	r2, #64	; 0x40
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e04b      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	0013      	movs	r3, r2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2120      	movs	r1, #32
 8004b4e:	f000 f86d 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004b52:	1e03      	subs	r3, r0, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03e      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2220      	movs	r2, #32
 8004b68:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d119      	bne.n	8004ba6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	01c9      	lsls	r1, r1, #7
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	0013      	movs	r3, r2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2120      	movs	r1, #32
 8004b92:	f000 f84b 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e01c      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d900      	bls.n	8004bb6 <HAL_I2C_IsDeviceReady+0x202>
 8004bb4:	e72f      	b.n	8004a16 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2241      	movs	r2, #65	; 0x41
 8004bba:	2120      	movs	r1, #32
 8004bbc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2240      	movs	r2, #64	; 0x40
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b008      	add	sp, #32
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	02002000 	.word	0x02002000
 8004be4:	02002800 	.word	0x02002800

08004be8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d103      	bne.n	8004c06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d007      	beq.n	8004c24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2101      	movs	r1, #1
 8004c20:	430a      	orrs	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
  }
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3c:	e030      	b.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d02d      	beq.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fe ffb6 	bl	8003bb4 <HAL_GetTick>
 8004c48:	0002      	movs	r2, r0
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d122      	bne.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	425a      	negs	r2, r3
 8004c6a:	4153      	adcs	r3, r2
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	001a      	movs	r2, r3
 8004c70:	1dfb      	adds	r3, r7, #7
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d113      	bne.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2241      	movs	r2, #65	; 0x41
 8004c88:	2120      	movs	r1, #32
 8004c8a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2242      	movs	r2, #66	; 0x42
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e00f      	b.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	425a      	negs	r2, r3
 8004cb0:	4153      	adcs	r3, r2
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d0bf      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cd4:	e032      	b.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 f8ff 	bl	8004ee0 <I2C_IsErrorOccurred>
 8004ce2:	1e03      	subs	r3, r0, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e030      	b.n	8004d4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	d025      	beq.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fe ff60 	bl	8003bb4 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11a      	bne.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d013      	beq.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	2220      	movs	r2, #32
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2241      	movs	r2, #65	; 0x41
 8004d24:	2120      	movs	r1, #32
 8004d26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2242      	movs	r2, #66	; 0x42
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d1c5      	bne.n	8004cd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b004      	add	sp, #16
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d60:	e02f      	b.n	8004dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f8b9 	bl	8004ee0 <I2C_IsErrorOccurred>
 8004d6e:	1e03      	subs	r3, r0, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02d      	b.n	8004dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe ff1d 	bl	8003bb4 <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11a      	bne.n	8004dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2220      	movs	r2, #32
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d013      	beq.n	8004dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	2220      	movs	r2, #32
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2241      	movs	r2, #65	; 0x41
 8004daa:	2120      	movs	r1, #32
 8004dac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2242      	movs	r2, #66	; 0x42
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d1c8      	bne.n	8004d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b004      	add	sp, #16
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de8:	e06b      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f875 	bl	8004ee0 <I2C_IsErrorOccurred>
 8004df6:	1e03      	subs	r3, r0, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e069      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2220      	movs	r2, #32
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d138      	bne.n	8004e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2204      	movs	r2, #4
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d105      	bne.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e055      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d107      	bne.n	8004e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
 8004e42:	e002      	b.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	491f      	ldr	r1, [pc, #124]	; (8004edc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004e5e:	400a      	ands	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2241      	movs	r2, #65	; 0x41
 8004e66:	2120      	movs	r1, #32
 8004e68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2242      	movs	r2, #66	; 0x42
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e029      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fe fe99 	bl	8003bb4 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d116      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00f      	beq.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2240      	movs	r2, #64	; 0x40
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e007      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d18c      	bne.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	fe00e800 	.word	0xfe00e800

08004ee0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b08b      	sub	sp, #44	; 0x2c
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2327      	movs	r3, #39	; 0x27
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2210      	movs	r2, #16
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d100      	bne.n	8004f0e <I2C_IsErrorOccurred+0x2e>
 8004f0c:	e082      	b.n	8005014 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2210      	movs	r2, #16
 8004f14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f16:	e060      	b.n	8004fda <I2C_IsErrorOccurred+0xfa>
 8004f18:	2427      	movs	r4, #39	; 0x27
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	193a      	adds	r2, r7, r4
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	d058      	beq.n	8004fda <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f28:	f7fe fe44 	bl	8003bb4 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d306      	bcc.n	8004f46 <I2C_IsErrorOccurred+0x66>
 8004f38:	193b      	adds	r3, r7, r4
 8004f3a:	193a      	adds	r2, r7, r4
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d149      	bne.n	8004fda <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	01db      	lsls	r3, r3, #7
 8004f50:	4013      	ands	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f54:	2013      	movs	r0, #19
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	2142      	movs	r1, #66	; 0x42
 8004f5c:	5c52      	ldrb	r2, [r2, r1]
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d126      	bne.n	8004fc2 <I2C_IsErrorOccurred+0xe2>
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	01db      	lsls	r3, r3, #7
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d021      	beq.n	8004fc2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004f7e:	183b      	adds	r3, r7, r0
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d01d      	beq.n	8004fc2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	01c9      	lsls	r1, r1, #7
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f98:	f7fe fe0c 	bl	8003bb4 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa0:	e00f      	b.n	8004fc2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fa2:	f7fe fe07 	bl	8003bb4 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b19      	cmp	r3, #25
 8004fae:	d908      	bls.n	8004fc2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fb8:	2327      	movs	r3, #39	; 0x27
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]

              break;
 8004fc0:	e00b      	b.n	8004fda <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2127      	movs	r1, #39	; 0x27
 8004fce:	187a      	adds	r2, r7, r1
 8004fd0:	1879      	adds	r1, r7, r1
 8004fd2:	7809      	ldrb	r1, [r1, #0]
 8004fd4:	7011      	strb	r1, [r2, #0]
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d1e3      	bne.n	8004fa2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d004      	beq.n	8004ff2 <I2C_IsErrorOccurred+0x112>
 8004fe8:	2327      	movs	r3, #39	; 0x27
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d092      	beq.n	8004f18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ff2:	2327      	movs	r3, #39	; 0x27
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2220      	movs	r2, #32
 8005002:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2204      	movs	r2, #4
 8005008:	4313      	orrs	r3, r2
 800500a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800500c:	2327      	movs	r3, #39	; 0x27
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4013      	ands	r3, r2
 8005024:	d00c      	beq.n	8005040 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2201      	movs	r2, #1
 800502a:	4313      	orrs	r3, r2
 800502c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	0052      	lsls	r2, r2, #1
 8005036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005038:	2327      	movs	r3, #39	; 0x27
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4013      	ands	r3, r2
 8005048:	d00c      	beq.n	8005064 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2208      	movs	r2, #8
 800504e:	4313      	orrs	r3, r2
 8005050:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2280      	movs	r2, #128	; 0x80
 8005058:	00d2      	lsls	r2, r2, #3
 800505a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800505c:	2327      	movs	r3, #39	; 0x27
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4013      	ands	r3, r2
 800506c:	d00c      	beq.n	8005088 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2202      	movs	r2, #2
 8005072:	4313      	orrs	r3, r2
 8005074:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2280      	movs	r2, #128	; 0x80
 800507c:	0092      	lsls	r2, r2, #2
 800507e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005080:	2327      	movs	r3, #39	; 0x27
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005088:	2327      	movs	r3, #39	; 0x27
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01d      	beq.n	80050ce <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	0018      	movs	r0, r3
 8005096:	f7ff fda7 	bl	8004be8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	490d      	ldr	r1, [pc, #52]	; (80050dc <I2C_IsErrorOccurred+0x1fc>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2241      	movs	r2, #65	; 0x41
 80050ba:	2120      	movs	r1, #32
 80050bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2242      	movs	r2, #66	; 0x42
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80050ce:	2327      	movs	r3, #39	; 0x27
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	781b      	ldrb	r3, [r3, #0]
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b00b      	add	sp, #44	; 0x2c
 80050da:	bd90      	pop	{r4, r7, pc}
 80050dc:	fe00e800 	.word	0xfe00e800

080050e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	0008      	movs	r0, r1
 80050ea:	0011      	movs	r1, r2
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	240a      	movs	r4, #10
 80050f0:	193b      	adds	r3, r7, r4
 80050f2:	1c02      	adds	r2, r0, #0
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	2009      	movs	r0, #9
 80050f8:	183b      	adds	r3, r7, r0
 80050fa:	1c0a      	adds	r2, r1, #0
 80050fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	059b      	lsls	r3, r3, #22
 8005104:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005106:	183b      	adds	r3, r7, r0
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	0419      	lsls	r1, r3, #16
 800510c:	23ff      	movs	r3, #255	; 0xff
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005112:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	4313      	orrs	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512a:	0d51      	lsrs	r1, r2, #21
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	00d2      	lsls	r2, r2, #3
 8005130:	400a      	ands	r2, r1
 8005132:	4907      	ldr	r1, [pc, #28]	; (8005150 <I2C_TransferConfig+0x70>)
 8005134:	430a      	orrs	r2, r1
 8005136:	43d2      	mvns	r2, r2
 8005138:	401a      	ands	r2, r3
 800513a:	0011      	movs	r1, r2
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b007      	add	sp, #28
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	03ff63ff 	.word	0x03ff63ff

08005154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2241      	movs	r2, #65	; 0x41
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d138      	bne.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2240      	movs	r2, #64	; 0x40
 800516e:	5c9b      	ldrb	r3, [r3, r2]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005174:	2302      	movs	r3, #2
 8005176:	e032      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	2101      	movs	r1, #1
 800517e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2241      	movs	r2, #65	; 0x41
 8005184:	2124      	movs	r1, #36	; 0x24
 8005186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2101      	movs	r1, #1
 8005194:	438a      	bics	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4911      	ldr	r1, [pc, #68]	; (80051e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2241      	movs	r2, #65	; 0x41
 80051cc:	2120      	movs	r1, #32
 80051ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	0018      	movs	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	ffffefff 	.word	0xffffefff

080051ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2241      	movs	r2, #65	; 0x41
 80051fa:	5c9b      	ldrb	r3, [r3, r2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d139      	bne.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2240      	movs	r2, #64	; 0x40
 8005206:	5c9b      	ldrb	r3, [r3, r2]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800520c:	2302      	movs	r3, #2
 800520e:	e033      	b.n	8005278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	2101      	movs	r1, #1
 8005216:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2241      	movs	r2, #65	; 0x41
 800521c:	2124      	movs	r1, #36	; 0x24
 800521e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	438a      	bics	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800523c:	4013      	ands	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2241      	movs	r2, #65	; 0x41
 8005266:	2120      	movs	r1, #32
 8005268:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	2100      	movs	r1, #0
 8005270:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b004      	add	sp, #16
 800527e:	bd80      	pop	{r7, pc}
 8005280:	fffff0ff 	.word	0xfffff0ff

08005284 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	000a      	movs	r2, r1
 800528e:	1cfb      	adds	r3, r7, #3
 8005290:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80052a2:	4b21      	ldr	r3, [pc, #132]	; (8005328 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	2201      	movs	r2, #1
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_PWR_EnterSLEEPMode+0x40>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80052be:	491b      	ldr	r1, [pc, #108]	; (800532c <HAL_PWR_EnterSLEEPMode+0xa8>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2203      	movs	r2, #3
 80052ce:	4393      	bics	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_PWR_EnterSLEEPMode+0xac>)
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_PWR_EnterSLEEPMode+0xac>)
 80052e6:	2104      	movs	r1, #4
 80052e8:	438a      	bics	r2, r1
 80052ea:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80052ec:	1cfb      	adds	r3, r7, #3
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80052f4:	bf30      	wfi
 80052f6:	e002      	b.n	80052fe <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80052f8:	bf40      	sev
    __WFE();
 80052fa:	bf20      	wfe
    __WFE();
 80052fc:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_PWR_EnterSLEEPMode+0x94>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	0089      	lsls	r1, r1, #2
 8005314:	430a      	orrs	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8005318:	46c0      	nop			; (mov r8, r8)

}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b006      	add	sp, #24
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	40007000 	.word	0x40007000
 8005328:	40010000 	.word	0x40010000
 800532c:	fffffdff 	.word	0xfffffdff
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005338:	4b04      	ldr	r3, [pc, #16]	; (800534c <HAL_PWR_DisableSleepOnExit+0x18>)
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_PWR_DisableSleepOnExit+0x18>)
 800533e:	2102      	movs	r1, #2
 8005340:	438a      	bics	r2, r1
 8005342:	611a      	str	r2, [r3, #16]
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f000 fbbf 	bl	8005ae2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005364:	4bc9      	ldr	r3, [pc, #804]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	220c      	movs	r2, #12
 800536a:	4013      	ands	r3, r2
 800536c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800536e:	4bc7      	ldr	r3, [pc, #796]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	025b      	lsls	r3, r3, #9
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2201      	movs	r2, #1
 8005380:	4013      	ands	r3, r2
 8005382:	d100      	bne.n	8005386 <HAL_RCC_OscConfig+0x36>
 8005384:	e07e      	b.n	8005484 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d007      	beq.n	800539c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b0c      	cmp	r3, #12
 8005390:	d112      	bne.n	80053b8 <HAL_RCC_OscConfig+0x68>
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	025b      	lsls	r3, r3, #9
 8005398:	429a      	cmp	r2, r3
 800539a:	d10d      	bne.n	80053b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4bbb      	ldr	r3, [pc, #748]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	4013      	ands	r3, r2
 80053a6:	d100      	bne.n	80053aa <HAL_RCC_OscConfig+0x5a>
 80053a8:	e06b      	b.n	8005482 <HAL_RCC_OscConfig+0x132>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d167      	bne.n	8005482 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f000 fb95 	bl	8005ae2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	025b      	lsls	r3, r3, #9
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x84>
 80053c4:	4bb1      	ldr	r3, [pc, #708]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4bb0      	ldr	r3, [pc, #704]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	0249      	lsls	r1, r1, #9
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e027      	b.n	8005424 <HAL_RCC_OscConfig+0xd4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	23a0      	movs	r3, #160	; 0xa0
 80053da:	02db      	lsls	r3, r3, #11
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10e      	bne.n	80053fe <HAL_RCC_OscConfig+0xae>
 80053e0:	4baa      	ldr	r3, [pc, #680]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4ba9      	ldr	r3, [pc, #676]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	02c9      	lsls	r1, r1, #11
 80053ea:	430a      	orrs	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	4ba7      	ldr	r3, [pc, #668]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4ba6      	ldr	r3, [pc, #664]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80053f4:	2180      	movs	r1, #128	; 0x80
 80053f6:	0249      	lsls	r1, r1, #9
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e012      	b.n	8005424 <HAL_RCC_OscConfig+0xd4>
 80053fe:	4ba3      	ldr	r3, [pc, #652]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4ba2      	ldr	r3, [pc, #648]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005404:	49a2      	ldr	r1, [pc, #648]	; (8005690 <HAL_RCC_OscConfig+0x340>)
 8005406:	400a      	ands	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	4ba0      	ldr	r3, [pc, #640]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	025b      	lsls	r3, r3, #9
 8005412:	4013      	ands	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4b9c      	ldr	r3, [pc, #624]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b9b      	ldr	r3, [pc, #620]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800541e:	499d      	ldr	r1, [pc, #628]	; (8005694 <HAL_RCC_OscConfig+0x344>)
 8005420:	400a      	ands	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d015      	beq.n	8005458 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fe fbc2 	bl	8003bb4 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005434:	e009      	b.n	800544a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005436:	f7fe fbbd 	bl	8003bb4 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	; 0x64
 8005442:	d902      	bls.n	800544a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	f000 fb4c 	bl	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800544a:	4b90      	ldr	r3, [pc, #576]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	4013      	ands	r3, r2
 8005454:	d0ef      	beq.n	8005436 <HAL_RCC_OscConfig+0xe6>
 8005456:	e015      	b.n	8005484 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fe fbac 	bl	8003bb4 <HAL_GetTick>
 800545c:	0003      	movs	r3, r0
 800545e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005462:	f7fe fba7 	bl	8003bb4 <HAL_GetTick>
 8005466:	0002      	movs	r2, r0
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e336      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005474:	4b85      	ldr	r3, [pc, #532]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	029b      	lsls	r3, r3, #10
 800547c:	4013      	ands	r3, r2
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x112>
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005482:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	4013      	ands	r3, r2
 800548c:	d100      	bne.n	8005490 <HAL_RCC_OscConfig+0x140>
 800548e:	e099      	b.n	80055c4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2220      	movs	r2, #32
 800549a:	4013      	ands	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800549e:	4b7b      	ldr	r3, [pc, #492]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b7a      	ldr	r3, [pc, #488]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054a4:	2120      	movs	r1, #32
 80054a6:	430a      	orrs	r2, r1
 80054a8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2220      	movs	r2, #32
 80054ae:	4393      	bics	r3, r2
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d13e      	bne.n	800553c <HAL_RCC_OscConfig+0x1ec>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d13b      	bne.n	800553c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80054c4:	4b71      	ldr	r3, [pc, #452]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2204      	movs	r2, #4
 80054ca:	4013      	ands	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_RCC_OscConfig+0x188>
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e304      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d8:	4b6c      	ldr	r3, [pc, #432]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a6e      	ldr	r2, [pc, #440]	; (8005698 <HAL_RCC_OscConfig+0x348>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	021a      	lsls	r2, r3, #8
 80054e8:	4b68      	ldr	r3, [pc, #416]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80054ee:	4b67      	ldr	r3, [pc, #412]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2209      	movs	r2, #9
 80054f4:	4393      	bics	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	4b64      	ldr	r3, [pc, #400]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005500:	f000 fc42 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8005504:	0001      	movs	r1, r0
 8005506:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	220f      	movs	r2, #15
 800550e:	4013      	ands	r3, r2
 8005510:	4a62      	ldr	r2, [pc, #392]	; (800569c <HAL_RCC_OscConfig+0x34c>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	000a      	movs	r2, r1
 8005516:	40da      	lsrs	r2, r3
 8005518:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <HAL_RCC_OscConfig+0x350>)
 800551a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800551c:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <HAL_RCC_OscConfig+0x354>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2513      	movs	r5, #19
 8005522:	197c      	adds	r4, r7, r5
 8005524:	0018      	movs	r0, r3
 8005526:	f7fe faff 	bl	8003b28 <HAL_InitTick>
 800552a:	0003      	movs	r3, r0
 800552c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800552e:	197b      	adds	r3, r7, r5
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d046      	beq.n	80055c4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005536:	197b      	adds	r3, r7, r5
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	e2d2      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d027      	beq.n	8005592 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005542:	4b52      	ldr	r3, [pc, #328]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2209      	movs	r2, #9
 8005548:	4393      	bics	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	4b4f      	ldr	r3, [pc, #316]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe fb2e 	bl	8003bb4 <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555e:	f7fe fb29 	bl	8003bb4 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e2b8      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005570:	4b46      	ldr	r3, [pc, #280]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2204      	movs	r2, #4
 8005576:	4013      	ands	r3, r2
 8005578:	d0f1      	beq.n	800555e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4a46      	ldr	r2, [pc, #280]	; (8005698 <HAL_RCC_OscConfig+0x348>)
 8005580:	4013      	ands	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	4b40      	ldr	r3, [pc, #256]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	e018      	b.n	80055c4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b3e      	ldr	r3, [pc, #248]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b3d      	ldr	r3, [pc, #244]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005598:	2101      	movs	r1, #1
 800559a:	438a      	bics	r2, r1
 800559c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559e:	f7fe fb09 	bl	8003bb4 <HAL_GetTick>
 80055a2:	0003      	movs	r3, r0
 80055a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fe fb04 	bl	8003bb4 <HAL_GetTick>
 80055ac:	0002      	movs	r2, r0
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e293      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055ba:	4b34      	ldr	r3, [pc, #208]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2204      	movs	r2, #4
 80055c0:	4013      	ands	r3, r2
 80055c2:	d1f1      	bne.n	80055a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	4013      	ands	r3, r2
 80055cc:	d100      	bne.n	80055d0 <HAL_RCC_OscConfig+0x280>
 80055ce:	e0a2      	b.n	8005716 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d140      	bne.n	8005658 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	d005      	beq.n	80055ee <HAL_RCC_OscConfig+0x29e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e279      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ee:	4b27      	ldr	r3, [pc, #156]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4a2d      	ldr	r2, [pc, #180]	; (80056a8 <HAL_RCC_OscConfig+0x358>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	0a19      	lsrs	r1, r3, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	061a      	lsls	r2, r3, #24
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	0b5b      	lsrs	r3, r3, #13
 800561c:	3301      	adds	r3, #1
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	0212      	lsls	r2, r2, #8
 8005622:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	210f      	movs	r1, #15
 800562c:	400b      	ands	r3, r1
 800562e:	491b      	ldr	r1, [pc, #108]	; (800569c <HAL_RCC_OscConfig+0x34c>)
 8005630:	5ccb      	ldrb	r3, [r1, r3]
 8005632:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x350>)
 8005636:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005638:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <HAL_RCC_OscConfig+0x354>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2513      	movs	r5, #19
 800563e:	197c      	adds	r4, r7, r5
 8005640:	0018      	movs	r0, r3
 8005642:	f7fe fa71 	bl	8003b28 <HAL_InitTick>
 8005646:	0003      	movs	r3, r0
 8005648:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800564a:	197b      	adds	r3, r7, r5
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d061      	beq.n	8005716 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005652:	197b      	adds	r3, r7, r5
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	e244      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d040      	beq.n	80056e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <HAL_RCC_OscConfig+0x33c>)
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	0049      	lsls	r1, r1, #1
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566e:	f7fe faa1 	bl	8003bb4 <HAL_GetTick>
 8005672:	0003      	movs	r3, r0
 8005674:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005676:	e019      	b.n	80056ac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005678:	f7fe fa9c 	bl	8003bb4 <HAL_GetTick>
 800567c:	0002      	movs	r2, r0
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d912      	bls.n	80056ac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e22b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	40021000 	.word	0x40021000
 8005690:	fffeffff 	.word	0xfffeffff
 8005694:	fffbffff 	.word	0xfffbffff
 8005698:	ffffe0ff 	.word	0xffffe0ff
 800569c:	0800cc98 	.word	0x0800cc98
 80056a0:	20000008 	.word	0x20000008
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056ac:	4bca      	ldr	r3, [pc, #808]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d0df      	beq.n	8005678 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056b8:	4bc7      	ldr	r3, [pc, #796]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4ac7      	ldr	r2, [pc, #796]	; (80059dc <HAL_RCC_OscConfig+0x68c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c6:	4bc4      	ldr	r3, [pc, #784]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056cc:	4bc2      	ldr	r3, [pc, #776]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	0a19      	lsrs	r1, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	061a      	lsls	r2, r3, #24
 80056da:	4bbf      	ldr	r3, [pc, #764]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	e019      	b.n	8005716 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056e2:	4bbd      	ldr	r3, [pc, #756]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4bbc      	ldr	r3, [pc, #752]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80056e8:	49bd      	ldr	r1, [pc, #756]	; (80059e0 <HAL_RCC_OscConfig+0x690>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ee:	f7fe fa61 	bl	8003bb4 <HAL_GetTick>
 80056f2:	0003      	movs	r3, r0
 80056f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056f8:	f7fe fa5c 	bl	8003bb4 <HAL_GetTick>
 80056fc:	0002      	movs	r2, r0
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e1eb      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800570a:	4bb3      	ldr	r3, [pc, #716]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	4013      	ands	r3, r2
 800571e:	d036      	beq.n	800578e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005728:	4bab      	ldr	r3, [pc, #684]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800572a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800572c:	4baa      	ldr	r3, [pc, #680]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800572e:	2101      	movs	r1, #1
 8005730:	430a      	orrs	r2, r1
 8005732:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005734:	f7fe fa3e 	bl	8003bb4 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573e:	f7fe fa39 	bl	8003bb4 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e1c8      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005750:	4ba1      	ldr	r3, [pc, #644]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	2202      	movs	r2, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d0f1      	beq.n	800573e <HAL_RCC_OscConfig+0x3ee>
 800575a:	e018      	b.n	800578e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575c:	4b9e      	ldr	r3, [pc, #632]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800575e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005760:	4b9d      	ldr	r3, [pc, #628]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005762:	2101      	movs	r1, #1
 8005764:	438a      	bics	r2, r1
 8005766:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005768:	f7fe fa24 	bl	8003bb4 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005772:	f7fe fa1f 	bl	8003bb4 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1ae      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005784:	4b94      	ldr	r3, [pc, #592]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	d1f1      	bne.n	8005772 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2204      	movs	r2, #4
 8005794:	4013      	ands	r3, r2
 8005796:	d100      	bne.n	800579a <HAL_RCC_OscConfig+0x44a>
 8005798:	e0ae      	b.n	80058f8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579a:	2023      	movs	r0, #35	; 0x23
 800579c:	183b      	adds	r3, r7, r0
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a2:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80057a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	055b      	lsls	r3, r3, #21
 80057aa:	4013      	ands	r3, r2
 80057ac:	d109      	bne.n	80057c2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ae:	4b8a      	ldr	r3, [pc, #552]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80057b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b2:	4b89      	ldr	r3, [pc, #548]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80057b4:	2180      	movs	r1, #128	; 0x80
 80057b6:	0549      	lsls	r1, r1, #21
 80057b8:	430a      	orrs	r2, r1
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <HAL_RCC_OscConfig+0x694>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4013      	ands	r3, r2
 80057cc:	d11a      	bne.n	8005804 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ce:	4b85      	ldr	r3, [pc, #532]	; (80059e4 <HAL_RCC_OscConfig+0x694>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_RCC_OscConfig+0x694>)
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	0049      	lsls	r1, r1, #1
 80057d8:	430a      	orrs	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057dc:	f7fe f9ea 	bl	8003bb4 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e6:	f7fe f9e5 	bl	8003bb4 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b64      	cmp	r3, #100	; 0x64
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e174      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f8:	4b7a      	ldr	r3, [pc, #488]	; (80059e4 <HAL_RCC_OscConfig+0x694>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4013      	ands	r3, r2
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	429a      	cmp	r2, r3
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x4d0>
 8005810:	4b71      	ldr	r3, [pc, #452]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005814:	4b70      	ldr	r3, [pc, #448]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	0049      	lsls	r1, r1, #1
 800581a:	430a      	orrs	r2, r1
 800581c:	651a      	str	r2, [r3, #80]	; 0x50
 800581e:	e031      	b.n	8005884 <HAL_RCC_OscConfig+0x534>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_OscConfig+0x4f2>
 8005828:	4b6b      	ldr	r3, [pc, #428]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800582a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800582c:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800582e:	496c      	ldr	r1, [pc, #432]	; (80059e0 <HAL_RCC_OscConfig+0x690>)
 8005830:	400a      	ands	r2, r1
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
 8005834:	4b68      	ldr	r3, [pc, #416]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005838:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800583a:	496b      	ldr	r1, [pc, #428]	; (80059e8 <HAL_RCC_OscConfig+0x698>)
 800583c:	400a      	ands	r2, r1
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
 8005840:	e020      	b.n	8005884 <HAL_RCC_OscConfig+0x534>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	23a0      	movs	r3, #160	; 0xa0
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	429a      	cmp	r2, r3
 800584c:	d10e      	bne.n	800586c <HAL_RCC_OscConfig+0x51c>
 800584e:	4b62      	ldr	r3, [pc, #392]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005852:	4b61      	ldr	r3, [pc, #388]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	00c9      	lsls	r1, r1, #3
 8005858:	430a      	orrs	r2, r1
 800585a:	651a      	str	r2, [r3, #80]	; 0x50
 800585c:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800585e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005860:	4b5d      	ldr	r3, [pc, #372]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	0049      	lsls	r1, r1, #1
 8005866:	430a      	orrs	r2, r1
 8005868:	651a      	str	r2, [r3, #80]	; 0x50
 800586a:	e00b      	b.n	8005884 <HAL_RCC_OscConfig+0x534>
 800586c:	4b5a      	ldr	r3, [pc, #360]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800586e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005872:	495b      	ldr	r1, [pc, #364]	; (80059e0 <HAL_RCC_OscConfig+0x690>)
 8005874:	400a      	ands	r2, r1
 8005876:	651a      	str	r2, [r3, #80]	; 0x50
 8005878:	4b57      	ldr	r3, [pc, #348]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800587a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800587c:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800587e:	495a      	ldr	r1, [pc, #360]	; (80059e8 <HAL_RCC_OscConfig+0x698>)
 8005880:	400a      	ands	r2, r1
 8005882:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588c:	f7fe f992 	bl	8003bb4 <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005894:	e009      	b.n	80058aa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fe f98d 	bl	8003bb4 <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_RCC_OscConfig+0x69c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e11b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058aa:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80058ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4013      	ands	r3, r2
 80058b4:	d0ef      	beq.n	8005896 <HAL_RCC_OscConfig+0x546>
 80058b6:	e014      	b.n	80058e2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b8:	f7fe f97c 	bl	8003bb4 <HAL_GetTick>
 80058bc:	0003      	movs	r3, r0
 80058be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c0:	e009      	b.n	80058d6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fe f977 	bl	8003bb4 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4a47      	ldr	r2, [pc, #284]	; (80059ec <HAL_RCC_OscConfig+0x69c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e105      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058d6:	4b40      	ldr	r3, [pc, #256]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80058d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d1ef      	bne.n	80058c2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058e2:	2323      	movs	r3, #35	; 0x23
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d105      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80058ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80058f2:	493f      	ldr	r1, [pc, #252]	; (80059f0 <HAL_RCC_OscConfig+0x6a0>)
 80058f4:	400a      	ands	r2, r1
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2220      	movs	r2, #32
 80058fe:	4013      	ands	r3, r2
 8005900:	d049      	beq.n	8005996 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d026      	beq.n	8005958 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800590a:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005910:	2101      	movs	r1, #1
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 8005918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800591a:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800591c:	2101      	movs	r1, #1
 800591e:	430a      	orrs	r2, r1
 8005920:	635a      	str	r2, [r3, #52]	; 0x34
 8005922:	4b34      	ldr	r3, [pc, #208]	; (80059f4 <HAL_RCC_OscConfig+0x6a4>)
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <HAL_RCC_OscConfig+0x6a4>)
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	0189      	lsls	r1, r1, #6
 800592c:	430a      	orrs	r2, r1
 800592e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fe f940 	bl	8003bb4 <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800593a:	f7fe f93b 	bl	8003bb4 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0ca      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2202      	movs	r2, #2
 8005952:	4013      	ands	r3, r2
 8005954:	d0f1      	beq.n	800593a <HAL_RCC_OscConfig+0x5ea>
 8005956:	e01e      	b.n	8005996 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800595e:	2101      	movs	r1, #1
 8005960:	438a      	bics	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <HAL_RCC_OscConfig+0x6a4>)
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <HAL_RCC_OscConfig+0x6a4>)
 800596a:	4923      	ldr	r1, [pc, #140]	; (80059f8 <HAL_RCC_OscConfig+0x6a8>)
 800596c:	400a      	ands	r2, r1
 800596e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fe f920 	bl	8003bb4 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800597a:	f7fe f91b 	bl	8003bb4 <HAL_GetTick>
 800597e:	0002      	movs	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0aa      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800598c:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2202      	movs	r2, #2
 8005992:	4013      	ands	r3, r2
 8005994:	d1f1      	bne.n	800597a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d100      	bne.n	80059a0 <HAL_RCC_OscConfig+0x650>
 800599e:	e09f      	b.n	8005ae0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d100      	bne.n	80059a8 <HAL_RCC_OscConfig+0x658>
 80059a6:	e078      	b.n	8005a9a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d159      	bne.n	8005a64 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <HAL_RCC_OscConfig+0x688>)
 80059b6:	4911      	ldr	r1, [pc, #68]	; (80059fc <HAL_RCC_OscConfig+0x6ac>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7fe f8fa 	bl	8003bb4 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059c4:	e01c      	b.n	8005a00 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fe f8f5 	bl	8003bb4 <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d915      	bls.n	8005a00 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e084      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
 80059d8:	40021000 	.word	0x40021000
 80059dc:	ffff1fff 	.word	0xffff1fff
 80059e0:	fffffeff 	.word	0xfffffeff
 80059e4:	40007000 	.word	0x40007000
 80059e8:	fffffbff 	.word	0xfffffbff
 80059ec:	00001388 	.word	0x00001388
 80059f0:	efffffff 	.word	0xefffffff
 80059f4:	40010000 	.word	0x40010000
 80059f8:	ffffdfff 	.word	0xffffdfff
 80059fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a00:	4b3a      	ldr	r3, [pc, #232]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	049b      	lsls	r3, r3, #18
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d1dc      	bne.n	80059c6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a0c:	4b37      	ldr	r3, [pc, #220]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a37      	ldr	r2, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x7a0>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	431a      	orrs	r2, r3
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	0449      	lsls	r1, r1, #17
 8005a36:	430a      	orrs	r2, r1
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fe f8bb 	bl	8003bb4 <HAL_GetTick>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fe f8b6 	bl	8003bb4 <HAL_GetTick>
 8005a48:	0002      	movs	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e045      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a56:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	049b      	lsls	r3, r3, #18
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x6f4>
 8005a62:	e03d      	b.n	8005ae0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a6a:	4922      	ldr	r1, [pc, #136]	; (8005af4 <HAL_RCC_OscConfig+0x7a4>)
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a70:	f7fe f8a0 	bl	8003bb4 <HAL_GetTick>
 8005a74:	0003      	movs	r3, r0
 8005a76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7a:	f7fe f89b 	bl	8003bb4 <HAL_GetTick>
 8005a7e:	0002      	movs	r2, r0
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e02a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a8c:	4b17      	ldr	r3, [pc, #92]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	049b      	lsls	r3, r3, #18
 8005a94:	4013      	ands	r3, r2
 8005a96:	d1f0      	bne.n	8005a7a <HAL_RCC_OscConfig+0x72a>
 8005a98:	e022      	b.n	8005ae0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e01d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005aa6:	4b11      	ldr	r3, [pc, #68]	; (8005aec <HAL_RCC_OscConfig+0x79c>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	025b      	lsls	r3, r3, #9
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10f      	bne.n	8005adc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	23f0      	movs	r3, #240	; 0xf0
 8005ac0:	039b      	lsls	r3, r3, #14
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	23c0      	movs	r3, #192	; 0xc0
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b00a      	add	sp, #40	; 0x28
 8005ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	40021000 	.word	0x40021000
 8005af0:	ff02ffff 	.word	0xff02ffff
 8005af4:	feffffff 	.word	0xfeffffff

08005af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af8:	b5b0      	push	{r4, r5, r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e128      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b96      	ldr	r3, [pc, #600]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d91e      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b93      	ldr	r3, [pc, #588]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4393      	bics	r3, r2
 8005b22:	0019      	movs	r1, r3
 8005b24:	4b90      	ldr	r3, [pc, #576]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b2c:	f7fe f842 	bl	8003bb4 <HAL_GetTick>
 8005b30:	0003      	movs	r3, r0
 8005b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b34:	e009      	b.n	8005b4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b36:	f7fe f83d 	bl	8003bb4 <HAL_GetTick>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4a8a      	ldr	r2, [pc, #552]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e109      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b87      	ldr	r3, [pc, #540]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1ee      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b62:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	22f0      	movs	r2, #240	; 0xf0
 8005b68:	4393      	bics	r3, r2
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	4b7f      	ldr	r3, [pc, #508]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005b72:	430a      	orrs	r2, r1
 8005b74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d100      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x8a>
 8005b80:	e089      	b.n	8005c96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d107      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b8a:	4b79      	ldr	r3, [pc, #484]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	029b      	lsls	r3, r3, #10
 8005b92:	4013      	ands	r3, r2
 8005b94:	d120      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0e1      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ba2:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	2380      	movs	r3, #128	; 0x80
 8005ba8:	049b      	lsls	r3, r3, #18
 8005baa:	4013      	ands	r3, r2
 8005bac:	d114      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0d5      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bba:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d109      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0ca      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005bc8:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0c2      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd8:	4b65      	ldr	r3, [pc, #404]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	4393      	bics	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b62      	ldr	r3, [pc, #392]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bec:	f7fd ffe2 	bl	8003bb4 <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bfc:	e009      	b.n	8005c12 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfe:	f7fd ffd9 	bl	8003bb4 <HAL_GetTick>
 8005c02:	0002      	movs	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	4a58      	ldr	r2, [pc, #352]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0a5      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	220c      	movs	r2, #12
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d1ef      	bne.n	8005bfe <HAL_RCC_ClockConfig+0x106>
 8005c1e:	e03a      	b.n	8005c96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d111      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c28:	e009      	b.n	8005c3e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c2a:	f7fd ffc3 	bl	8003bb4 <HAL_GetTick>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	4a4d      	ldr	r2, [pc, #308]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e08f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	220c      	movs	r2, #12
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d1ef      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x132>
 8005c4a:	e024      	b.n	8005c96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d11b      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c54:	e009      	b.n	8005c6a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c56:	f7fd ffad 	bl	8003bb4 <HAL_GetTick>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	4a42      	ldr	r2, [pc, #264]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e079      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	220c      	movs	r2, #12
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d1ef      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x15e>
 8005c76:	e00e      	b.n	8005c96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c78:	f7fd ff9c 	bl	8003bb4 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a3a      	ldr	r2, [pc, #232]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e068      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c8c:	4b38      	ldr	r3, [pc, #224]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	220c      	movs	r2, #12
 8005c92:	4013      	ands	r3, r2
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d21e      	bcs.n	8005ce2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca4:	4b30      	ldr	r3, [pc, #192]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4393      	bics	r3, r2
 8005cac:	0019      	movs	r1, r3
 8005cae:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cb6:	f7fd ff7d 	bl	8003bb4 <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	e009      	b.n	8005cd4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fd ff78 	bl	8003bb4 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <HAL_RCC_ClockConfig+0x274>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e044      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <HAL_RCC_ClockConfig+0x270>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	4013      	ands	r3, r2
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d1ee      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <HAL_RCC_ClockConfig+0x27c>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2208      	movs	r2, #8
 8005d06:	4013      	ands	r3, r2
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_RCC_ClockConfig+0x280>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d20:	f000 f832 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8005d24:	0001      	movs	r1, r0
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_ClockConfig+0x278>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	4013      	ands	r3, r2
 8005d30:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <HAL_RCC_ClockConfig+0x284>)
 8005d32:	5cd3      	ldrb	r3, [r2, r3]
 8005d34:	000a      	movs	r2, r1
 8005d36:	40da      	lsrs	r2, r3
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <HAL_RCC_ClockConfig+0x288>)
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <HAL_RCC_ClockConfig+0x28c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	250b      	movs	r5, #11
 8005d42:	197c      	adds	r4, r7, r5
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fd feef 	bl	8003b28 <HAL_InitTick>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d4e:	197b      	adds	r3, r7, r5
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005d56:	197b      	adds	r3, r7, r5
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	e000      	b.n	8005d5e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	0018      	movs	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b004      	add	sp, #16
 8005d64:	bdb0      	pop	{r4, r5, r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	40022000 	.word	0x40022000
 8005d6c:	00001388 	.word	0x00001388
 8005d70:	40021000 	.word	0x40021000
 8005d74:	fffff8ff 	.word	0xfffff8ff
 8005d78:	ffffc7ff 	.word	0xffffc7ff
 8005d7c:	0800cc98 	.word	0x0800cc98
 8005d80:	20000008 	.word	0x20000008
 8005d84:	2000000c 	.word	0x2000000c

08005d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d88:	b5b0      	push	{r4, r5, r7, lr}
 8005d8a:	b08e      	sub	sp, #56	; 0x38
 8005d8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	230c      	movs	r3, #12
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d014      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005d9e:	d900      	bls.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005da0:	e07b      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x112>
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x24>
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005daa:	e076      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005dac:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	4013      	ands	r3, r2
 8005db4:	d002      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005db6:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005dba:	e07c      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005dbc:	4b42      	ldr	r3, [pc, #264]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dc0:	e079      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dc2:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x144>)
 8005dc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dc6:	e076      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	0c9a      	lsrs	r2, r3, #18
 8005dcc:	230f      	movs	r3, #15
 8005dce:	401a      	ands	r2, r3
 8005dd0:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x148>)
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	0d9a      	lsrs	r2, r3, #22
 8005dda:	2303      	movs	r3, #3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	4013      	ands	r3, r2
 8005dec:	d01a      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x144>)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	69b8      	ldr	r0, [r7, #24]
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	f7fa fb73 	bl	80004e8 <__aeabi_lmul>
 8005e02:	0002      	movs	r2, r0
 8005e04:	000b      	movs	r3, r1
 8005e06:	0010      	movs	r0, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f7fa fb47 	bl	80004a8 <__aeabi_uldivmod>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	000b      	movs	r3, r1
 8005e1e:	0013      	movs	r3, r2
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	e037      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e24:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d01a      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	68b8      	ldr	r0, [r7, #8]
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	f7fa fb53 	bl	80004e8 <__aeabi_lmul>
 8005e42:	0002      	movs	r2, r0
 8005e44:	000b      	movs	r3, r1
 8005e46:	0010      	movs	r0, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f7fa fb27 	bl	80004a8 <__aeabi_uldivmod>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	000b      	movs	r3, r1
 8005e5e:	0013      	movs	r3, r2
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
 8005e62:	e017      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	0018      	movs	r0, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f7fa fb3a 	bl	80004e8 <__aeabi_lmul>
 8005e74:	0002      	movs	r2, r0
 8005e76:	000b      	movs	r3, r1
 8005e78:	0010      	movs	r0, r2
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	001c      	movs	r4, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	001d      	movs	r5, r3
 8005e84:	0022      	movs	r2, r4
 8005e86:	002b      	movs	r3, r5
 8005e88:	f7fa fb0e 	bl	80004a8 <__aeabi_uldivmod>
 8005e8c:	0002      	movs	r2, r0
 8005e8e:	000b      	movs	r3, r1
 8005e90:	0013      	movs	r3, r2
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e98:	e00d      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	0b5b      	lsrs	r3, r3, #13
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	2280      	movs	r2, #128	; 0x80
 8005eac:	0212      	lsls	r2, r2, #8
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	0013      	movs	r3, r2
 8005eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005eb4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b00e      	add	sp, #56	; 0x38
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	003d0900 	.word	0x003d0900
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	007a1200 	.word	0x007a1200
 8005ed0:	0800ccb0 	.word	0x0800ccb0

08005ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eda:	681b      	ldr	r3, [r3, #0]
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	20000008 	.word	0x20000008

08005ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005eec:	f7ff fff2 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005ef0:	0001      	movs	r1, r0
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	2207      	movs	r2, #7
 8005efa:	4013      	ands	r3, r2
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	40d9      	lsrs	r1, r3
 8005f02:	000b      	movs	r3, r1
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	0800cca8 	.word	0x0800cca8

08005f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f18:	f7ff ffdc 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005f1c:	0001      	movs	r1, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	0adb      	lsrs	r3, r3, #11
 8005f24:	2207      	movs	r2, #7
 8005f26:	4013      	ands	r3, r2
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f2a:	5cd3      	ldrb	r3, [r2, r3]
 8005f2c:	40d9      	lsrs	r1, r3
 8005f2e:	000b      	movs	r3, r1
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	0800cca8 	.word	0x0800cca8

08005f40 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f48:	2017      	movs	r0, #23
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2220      	movs	r2, #32
 8005f56:	4013      	ands	r3, r2
 8005f58:	d100      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005f5a:	e0c7      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5c:	4b9b      	ldr	r3, [pc, #620]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	055b      	lsls	r3, r3, #21
 8005f64:	4013      	ands	r3, r2
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f68:	4b98      	ldr	r3, [pc, #608]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6c:	4b97      	ldr	r3, [pc, #604]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	0549      	lsls	r1, r1, #21
 8005f72:	430a      	orrs	r2, r1
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f76:	183b      	adds	r3, r7, r0
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7c:	4b94      	ldr	r3, [pc, #592]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4013      	ands	r3, r2
 8005f86:	d11a      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f88:	4b91      	ldr	r3, [pc, #580]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b90      	ldr	r3, [pc, #576]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	0049      	lsls	r1, r1, #1
 8005f92:	430a      	orrs	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f96:	f7fd fe0d 	bl	8003bb4 <HAL_GetTick>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa0:	f7fd fe08 	bl	8003bb4 <HAL_GetTick>
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e107      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	4b87      	ldr	r3, [pc, #540]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005fbe:	4b83      	ldr	r3, [pc, #524]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	23c0      	movs	r3, #192	; 0xc0
 8005fc4:	039b      	lsls	r3, r3, #14
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	23c0      	movs	r3, #192	; 0xc0
 8005fd0:	039b      	lsls	r3, r3, #14
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d013      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	23c0      	movs	r3, #192	; 0xc0
 8005fe0:	029b      	lsls	r3, r3, #10
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d10a      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fec:	4b77      	ldr	r3, [pc, #476]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	029b      	lsls	r3, r3, #10
 8005ff4:	401a      	ands	r2, r3
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d101      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0df      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006002:	4b72      	ldr	r3, [pc, #456]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006006:	23c0      	movs	r3, #192	; 0xc0
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	4013      	ands	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03b      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	23c0      	movs	r3, #192	; 0xc0
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	4013      	ands	r3, r2
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	429a      	cmp	r2, r3
 8006022:	d033      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2220      	movs	r2, #32
 800602a:	4013      	ands	r3, r2
 800602c:	d02e      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800602e:	4b67      	ldr	r3, [pc, #412]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	4a68      	ldr	r2, [pc, #416]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006038:	4b64      	ldr	r3, [pc, #400]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800603a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800603c:	4b63      	ldr	r3, [pc, #396]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	0309      	lsls	r1, r1, #12
 8006042:	430a      	orrs	r2, r1
 8006044:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006046:	4b61      	ldr	r3, [pc, #388]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800604a:	4b60      	ldr	r3, [pc, #384]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800604c:	4962      	ldr	r1, [pc, #392]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800604e:	400a      	ands	r2, r1
 8006050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006052:	4b5e      	ldr	r3, [pc, #376]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4013      	ands	r3, r2
 8006060:	d014      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd fda7 	bl	8003bb4 <HAL_GetTick>
 8006066:	0003      	movs	r3, r0
 8006068:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800606a:	e009      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606c:	f7fd fda2 	bl	8003bb4 <HAL_GetTick>
 8006070:	0002      	movs	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	4a59      	ldr	r2, [pc, #356]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e0a0      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006080:	4b52      	ldr	r3, [pc, #328]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4013      	ands	r3, r2
 800608a:	d0ef      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2220      	movs	r2, #32
 8006092:	4013      	ands	r3, r2
 8006094:	d01f      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	23c0      	movs	r3, #192	; 0xc0
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	401a      	ands	r2, r3
 80060a0:	23c0      	movs	r3, #192	; 0xc0
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80060a8:	4b48      	ldr	r3, [pc, #288]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4c      	ldr	r2, [pc, #304]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	23c0      	movs	r3, #192	; 0xc0
 80060b8:	039b      	lsls	r3, r3, #14
 80060ba:	401a      	ands	r2, r3
 80060bc:	4b43      	ldr	r3, [pc, #268]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	4b42      	ldr	r3, [pc, #264]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	23c0      	movs	r3, #192	; 0xc0
 80060cc:	029b      	lsls	r3, r3, #10
 80060ce:	401a      	ands	r2, r3
 80060d0:	4b3e      	ldr	r3, [pc, #248]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060d2:	430a      	orrs	r2, r1
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060d6:	2317      	movs	r3, #23
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e0:	4b3a      	ldr	r3, [pc, #232]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e4:	4b39      	ldr	r3, [pc, #228]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060e6:	493f      	ldr	r1, [pc, #252]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80060e8:	400a      	ands	r2, r1
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	4013      	ands	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060f6:	4b35      	ldr	r3, [pc, #212]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80060f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fa:	2203      	movs	r2, #3
 80060fc:	4393      	bics	r3, r2
 80060fe:	0019      	movs	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006106:	430a      	orrs	r2, r1
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2202      	movs	r2, #2
 8006110:	4013      	ands	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006114:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	220c      	movs	r2, #12
 800611a:	4393      	bics	r3, r2
 800611c:	0019      	movs	r1, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006124:	430a      	orrs	r2, r1
 8006126:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2204      	movs	r2, #4
 800612e:	4013      	ands	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006136:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006138:	4013      	ands	r3, r2
 800613a:	0019      	movs	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	4b22      	ldr	r3, [pc, #136]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006142:	430a      	orrs	r2, r1
 8006144:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2208      	movs	r2, #8
 800614c:	4013      	ands	r3, r2
 800614e:	d009      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006154:	4a25      	ldr	r2, [pc, #148]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006156:	4013      	ands	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006160:	430a      	orrs	r2, r1
 8006162:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4013      	ands	r3, r2
 800616e:	d009      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006170:	4b16      	ldr	r3, [pc, #88]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006180:	430a      	orrs	r2, r1
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2240      	movs	r2, #64	; 0x40
 800618a:	4013      	ands	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006194:	4013      	ands	r3, r2
 8006196:	0019      	movs	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	4013      	ands	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b0:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b006      	add	sp, #24
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	40021000 	.word	0x40021000
 80061d0:	40007000 	.word	0x40007000
 80061d4:	fffcffff 	.word	0xfffcffff
 80061d8:	fff7ffff 	.word	0xfff7ffff
 80061dc:	00001388 	.word	0x00001388
 80061e0:	ffcfffff 	.word	0xffcfffff
 80061e4:	efffffff 	.word	0xefffffff
 80061e8:	fffff3ff 	.word	0xfffff3ff
 80061ec:	ffffcfff 	.word	0xffffcfff
 80061f0:	fbffffff 	.word	0xfbffffff
 80061f4:	fff3ffff 	.word	0xfff3ffff

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e044      	b.n	8006294 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2278      	movs	r2, #120	; 0x78
 8006216:	2100      	movs	r1, #0
 8006218:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f7fd faa7 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	; 0x24
 8006226:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2101      	movs	r1, #1
 8006234:	438a      	bics	r2, r1
 8006236:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	0018      	movs	r0, r3
 800623c:	f000 f8d8 	bl	80063f0 <UART_SetConfig>
 8006240:	0003      	movs	r3, r0
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e024      	b.n	8006294 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	0018      	movs	r0, r3
 8006256:	f000 fb69 	bl	800692c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	490d      	ldr	r1, [pc, #52]	; (800629c <HAL_UART_Init+0xa4>)
 8006266:	400a      	ands	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	212a      	movs	r1, #42	; 0x2a
 8006276:	438a      	bics	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2101      	movs	r1, #1
 8006286:	430a      	orrs	r2, r1
 8006288:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0018      	movs	r0, r3
 800628e:	f000 fc01 	bl	8006a94 <UART_CheckIdleState>
 8006292:	0003      	movs	r3, r0
}
 8006294:	0018      	movs	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	b002      	add	sp, #8
 800629a:	bd80      	pop	{r7, pc}
 800629c:	ffffb7ff 	.word	0xffffb7ff

080062a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	1dbb      	adds	r3, r7, #6
 80062ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d000      	beq.n	80062b8 <HAL_UART_Transmit_DMA+0x18>
 80062b6:	e077      	b.n	80063a8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_UART_Transmit_DMA+0x26>
 80062be:	1dbb      	adds	r3, r7, #6
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06f      	b.n	80063aa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	015b      	lsls	r3, r3, #5
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d109      	bne.n	80062ea <HAL_UART_Transmit_DMA+0x4a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2201      	movs	r2, #1
 80062e2:	4013      	ands	r3, r2
 80062e4:	d001      	beq.n	80062ea <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e05f      	b.n	80063aa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1dba      	adds	r2, r7, #6
 80062f4:	2150      	movs	r1, #80	; 0x50
 80062f6:	8812      	ldrh	r2, [r2, #0]
 80062f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1dba      	adds	r2, r7, #6
 80062fe:	2152      	movs	r1, #82	; 0x52
 8006300:	8812      	ldrh	r2, [r2, #0]
 8006302:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2284      	movs	r2, #132	; 0x84
 8006308:	2100      	movs	r1, #0
 800630a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2221      	movs	r2, #33	; 0x21
 8006310:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	2b00      	cmp	r3, #0
 8006318:	d027      	beq.n	800636a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a25      	ldr	r2, [pc, #148]	; (80063b4 <HAL_UART_Transmit_DMA+0x114>)
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <HAL_UART_Transmit_DMA+0x118>)
 8006328:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_UART_Transmit_DMA+0x11c>)
 8006330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	2200      	movs	r2, #0
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	0019      	movs	r1, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3328      	adds	r3, #40	; 0x28
 800634a:	001a      	movs	r2, r3
 800634c:	1dbb      	adds	r3, r7, #6
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	f7fd fd90 	bl	8003e74 <HAL_DMA_Start_IT>
 8006354:	1e03      	subs	r3, r0, #0
 8006356:	d008      	beq.n	800636a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2284      	movs	r2, #132	; 0x84
 800635c:	2110      	movs	r1, #16
 800635e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e01f      	b.n	80063aa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006372:	f3ef 8310 	mrs	r3, PRIMASK
 8006376:	613b      	str	r3, [r7, #16]
  return(result);
 8006378:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f383 8810 	msr	PRIMASK, r3
}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f383 8810 	msr	PRIMASK, r3
}
 80063a2:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e000      	b.n	80063aa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
  }
}
 80063aa:	0018      	movs	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b008      	add	sp, #32
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	08006dc9 	.word	0x08006dc9
 80063b8:	08006e61 	.word	0x08006e61
 80063bc:	08006e7f 	.word	0x08006e7f

080063c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063d8:	46c0      	nop			; (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b002      	add	sp, #8
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f8:	231a      	movs	r3, #26
 80063fa:	2218      	movs	r2, #24
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	431a      	orrs	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4313      	orrs	r3, r2
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4ac3      	ldr	r2, [pc, #780]	; (8006730 <UART_SetConfig+0x340>)
 8006424:	4013      	ands	r3, r2
 8006426:	0019      	movs	r1, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4abe      	ldr	r2, [pc, #760]	; (8006734 <UART_SetConfig+0x344>)
 800643a:	4013      	ands	r3, r2
 800643c:	0019      	movs	r1, r3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4ab8      	ldr	r2, [pc, #736]	; (8006738 <UART_SetConfig+0x348>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006460:	4313      	orrs	r3, r2
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4ab4      	ldr	r2, [pc, #720]	; (800673c <UART_SetConfig+0x34c>)
 800646c:	4013      	ands	r3, r2
 800646e:	0019      	movs	r1, r3
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4ab0      	ldr	r2, [pc, #704]	; (8006740 <UART_SetConfig+0x350>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d131      	bne.n	80064e8 <UART_SetConfig+0xf8>
 8006484:	4baf      	ldr	r3, [pc, #700]	; (8006744 <UART_SetConfig+0x354>)
 8006486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006488:	2203      	movs	r2, #3
 800648a:	4013      	ands	r3, r2
 800648c:	2b03      	cmp	r3, #3
 800648e:	d01d      	beq.n	80064cc <UART_SetConfig+0xdc>
 8006490:	d823      	bhi.n	80064da <UART_SetConfig+0xea>
 8006492:	2b02      	cmp	r3, #2
 8006494:	d00c      	beq.n	80064b0 <UART_SetConfig+0xc0>
 8006496:	d820      	bhi.n	80064da <UART_SetConfig+0xea>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <UART_SetConfig+0xb2>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d00e      	beq.n	80064be <UART_SetConfig+0xce>
 80064a0:	e01b      	b.n	80064da <UART_SetConfig+0xea>
 80064a2:	231b      	movs	r3, #27
 80064a4:	2218      	movs	r2, #24
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	19db      	adds	r3, r3, r7
 80064aa:	2201      	movs	r2, #1
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e0b4      	b.n	800661a <UART_SetConfig+0x22a>
 80064b0:	231b      	movs	r3, #27
 80064b2:	2218      	movs	r2, #24
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	19db      	adds	r3, r3, r7
 80064b8:	2202      	movs	r2, #2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e0ad      	b.n	800661a <UART_SetConfig+0x22a>
 80064be:	231b      	movs	r3, #27
 80064c0:	2218      	movs	r2, #24
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	2204      	movs	r2, #4
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e0a6      	b.n	800661a <UART_SetConfig+0x22a>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2218      	movs	r2, #24
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2208      	movs	r2, #8
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e09f      	b.n	800661a <UART_SetConfig+0x22a>
 80064da:	231b      	movs	r3, #27
 80064dc:	2218      	movs	r2, #24
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2210      	movs	r2, #16
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e098      	b.n	800661a <UART_SetConfig+0x22a>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a96      	ldr	r2, [pc, #600]	; (8006748 <UART_SetConfig+0x358>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d131      	bne.n	8006556 <UART_SetConfig+0x166>
 80064f2:	4b94      	ldr	r3, [pc, #592]	; (8006744 <UART_SetConfig+0x354>)
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	220c      	movs	r2, #12
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b0c      	cmp	r3, #12
 80064fc:	d01d      	beq.n	800653a <UART_SetConfig+0x14a>
 80064fe:	d823      	bhi.n	8006548 <UART_SetConfig+0x158>
 8006500:	2b08      	cmp	r3, #8
 8006502:	d00c      	beq.n	800651e <UART_SetConfig+0x12e>
 8006504:	d820      	bhi.n	8006548 <UART_SetConfig+0x158>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART_SetConfig+0x120>
 800650a:	2b04      	cmp	r3, #4
 800650c:	d00e      	beq.n	800652c <UART_SetConfig+0x13c>
 800650e:	e01b      	b.n	8006548 <UART_SetConfig+0x158>
 8006510:	231b      	movs	r3, #27
 8006512:	2218      	movs	r2, #24
 8006514:	189b      	adds	r3, r3, r2
 8006516:	19db      	adds	r3, r3, r7
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e07d      	b.n	800661a <UART_SetConfig+0x22a>
 800651e:	231b      	movs	r3, #27
 8006520:	2218      	movs	r2, #24
 8006522:	189b      	adds	r3, r3, r2
 8006524:	19db      	adds	r3, r3, r7
 8006526:	2202      	movs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e076      	b.n	800661a <UART_SetConfig+0x22a>
 800652c:	231b      	movs	r3, #27
 800652e:	2218      	movs	r2, #24
 8006530:	189b      	adds	r3, r3, r2
 8006532:	19db      	adds	r3, r3, r7
 8006534:	2204      	movs	r2, #4
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e06f      	b.n	800661a <UART_SetConfig+0x22a>
 800653a:	231b      	movs	r3, #27
 800653c:	2218      	movs	r2, #24
 800653e:	189b      	adds	r3, r3, r2
 8006540:	19db      	adds	r3, r3, r7
 8006542:	2208      	movs	r2, #8
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e068      	b.n	800661a <UART_SetConfig+0x22a>
 8006548:	231b      	movs	r3, #27
 800654a:	2218      	movs	r2, #24
 800654c:	189b      	adds	r3, r3, r2
 800654e:	19db      	adds	r3, r3, r7
 8006550:	2210      	movs	r2, #16
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e061      	b.n	800661a <UART_SetConfig+0x22a>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7c      	ldr	r2, [pc, #496]	; (800674c <UART_SetConfig+0x35c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d106      	bne.n	800656e <UART_SetConfig+0x17e>
 8006560:	231b      	movs	r3, #27
 8006562:	2218      	movs	r2, #24
 8006564:	189b      	adds	r3, r3, r2
 8006566:	19db      	adds	r3, r3, r7
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e055      	b.n	800661a <UART_SetConfig+0x22a>
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a77      	ldr	r2, [pc, #476]	; (8006750 <UART_SetConfig+0x360>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d106      	bne.n	8006586 <UART_SetConfig+0x196>
 8006578:	231b      	movs	r3, #27
 800657a:	2218      	movs	r2, #24
 800657c:	189b      	adds	r3, r3, r2
 800657e:	19db      	adds	r3, r3, r7
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e049      	b.n	800661a <UART_SetConfig+0x22a>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6b      	ldr	r2, [pc, #428]	; (8006738 <UART_SetConfig+0x348>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d13e      	bne.n	800660e <UART_SetConfig+0x21e>
 8006590:	4b6c      	ldr	r3, [pc, #432]	; (8006744 <UART_SetConfig+0x354>)
 8006592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006594:	23c0      	movs	r3, #192	; 0xc0
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	4013      	ands	r3, r2
 800659a:	22c0      	movs	r2, #192	; 0xc0
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	4293      	cmp	r3, r2
 80065a0:	d027      	beq.n	80065f2 <UART_SetConfig+0x202>
 80065a2:	22c0      	movs	r2, #192	; 0xc0
 80065a4:	0112      	lsls	r2, r2, #4
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d82a      	bhi.n	8006600 <UART_SetConfig+0x210>
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	0112      	lsls	r2, r2, #4
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d011      	beq.n	80065d6 <UART_SetConfig+0x1e6>
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	0112      	lsls	r2, r2, #4
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d822      	bhi.n	8006600 <UART_SetConfig+0x210>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <UART_SetConfig+0x1d8>
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	00d2      	lsls	r2, r2, #3
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <UART_SetConfig+0x1f4>
 80065c6:	e01b      	b.n	8006600 <UART_SetConfig+0x210>
 80065c8:	231b      	movs	r3, #27
 80065ca:	2218      	movs	r2, #24
 80065cc:	189b      	adds	r3, r3, r2
 80065ce:	19db      	adds	r3, r3, r7
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e021      	b.n	800661a <UART_SetConfig+0x22a>
 80065d6:	231b      	movs	r3, #27
 80065d8:	2218      	movs	r2, #24
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	19db      	adds	r3, r3, r7
 80065de:	2202      	movs	r2, #2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e01a      	b.n	800661a <UART_SetConfig+0x22a>
 80065e4:	231b      	movs	r3, #27
 80065e6:	2218      	movs	r2, #24
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	19db      	adds	r3, r3, r7
 80065ec:	2204      	movs	r2, #4
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e013      	b.n	800661a <UART_SetConfig+0x22a>
 80065f2:	231b      	movs	r3, #27
 80065f4:	2218      	movs	r2, #24
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	19db      	adds	r3, r3, r7
 80065fa:	2208      	movs	r2, #8
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e00c      	b.n	800661a <UART_SetConfig+0x22a>
 8006600:	231b      	movs	r3, #27
 8006602:	2218      	movs	r2, #24
 8006604:	189b      	adds	r3, r3, r2
 8006606:	19db      	adds	r3, r3, r7
 8006608:	2210      	movs	r2, #16
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e005      	b.n	800661a <UART_SetConfig+0x22a>
 800660e:	231b      	movs	r3, #27
 8006610:	2218      	movs	r2, #24
 8006612:	189b      	adds	r3, r3, r2
 8006614:	19db      	adds	r3, r3, r7
 8006616:	2210      	movs	r2, #16
 8006618:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a46      	ldr	r2, [pc, #280]	; (8006738 <UART_SetConfig+0x348>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d000      	beq.n	8006626 <UART_SetConfig+0x236>
 8006624:	e09a      	b.n	800675c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006626:	231b      	movs	r3, #27
 8006628:	2218      	movs	r2, #24
 800662a:	189b      	adds	r3, r3, r2
 800662c:	19db      	adds	r3, r3, r7
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d01d      	beq.n	8006670 <UART_SetConfig+0x280>
 8006634:	dc20      	bgt.n	8006678 <UART_SetConfig+0x288>
 8006636:	2b04      	cmp	r3, #4
 8006638:	d015      	beq.n	8006666 <UART_SetConfig+0x276>
 800663a:	dc1d      	bgt.n	8006678 <UART_SetConfig+0x288>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <UART_SetConfig+0x256>
 8006640:	2b02      	cmp	r3, #2
 8006642:	d005      	beq.n	8006650 <UART_SetConfig+0x260>
 8006644:	e018      	b.n	8006678 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7ff fc4f 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 800664a:	0003      	movs	r3, r0
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800664e:	e01c      	b.n	800668a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006650:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <UART_SetConfig+0x354>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2210      	movs	r2, #16
 8006656:	4013      	ands	r3, r2
 8006658:	d002      	beq.n	8006660 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800665a:	4b3e      	ldr	r3, [pc, #248]	; (8006754 <UART_SetConfig+0x364>)
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800665e:	e014      	b.n	800668a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006660:	4b3d      	ldr	r3, [pc, #244]	; (8006758 <UART_SetConfig+0x368>)
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e011      	b.n	800668a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006666:	f7ff fb8f 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 800666a:	0003      	movs	r3, r0
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800666e:	e00c      	b.n	800668a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006676:	e008      	b.n	800668a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800667c:	231a      	movs	r3, #26
 800667e:	2218      	movs	r2, #24
 8006680:	189b      	adds	r3, r3, r2
 8006682:	19db      	adds	r3, r3, r7
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
        break;
 8006688:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d100      	bne.n	8006692 <UART_SetConfig+0x2a2>
 8006690:	e133      	b.n	80068fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	0013      	movs	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	189b      	adds	r3, r3, r2
 800669c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669e:	429a      	cmp	r2, r3
 80066a0:	d305      	bcc.n	80066ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d906      	bls.n	80066bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80066ae:	231a      	movs	r3, #26
 80066b0:	2218      	movs	r2, #24
 80066b2:	189b      	adds	r3, r3, r2
 80066b4:	19db      	adds	r3, r3, r7
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e11e      	b.n	80068fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	6939      	ldr	r1, [r7, #16]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	000b      	movs	r3, r1
 80066ca:	0e1b      	lsrs	r3, r3, #24
 80066cc:	0010      	movs	r0, r2
 80066ce:	0205      	lsls	r5, r0, #8
 80066d0:	431d      	orrs	r5, r3
 80066d2:	000b      	movs	r3, r1
 80066d4:	021c      	lsls	r4, r3, #8
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	1900      	adds	r0, r0, r4
 80066e8:	4169      	adcs	r1, r5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f7f9 fed6 	bl	80004a8 <__aeabi_uldivmod>
 80066fc:	0002      	movs	r2, r0
 80066fe:	000b      	movs	r3, r1
 8006700:	0013      	movs	r3, r2
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006706:	23c0      	movs	r3, #192	; 0xc0
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	429a      	cmp	r2, r3
 800670c:	d309      	bcc.n	8006722 <UART_SetConfig+0x332>
 800670e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	035b      	lsls	r3, r3, #13
 8006714:	429a      	cmp	r2, r3
 8006716:	d204      	bcs.n	8006722 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671e:	60da      	str	r2, [r3, #12]
 8006720:	e0eb      	b.n	80068fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006722:	231a      	movs	r3, #26
 8006724:	2218      	movs	r2, #24
 8006726:	189b      	adds	r3, r3, r2
 8006728:	19db      	adds	r3, r3, r7
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e0e4      	b.n	80068fa <UART_SetConfig+0x50a>
 8006730:	efff69f3 	.word	0xefff69f3
 8006734:	ffffcfff 	.word	0xffffcfff
 8006738:	40004800 	.word	0x40004800
 800673c:	fffff4ff 	.word	0xfffff4ff
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004c00 	.word	0x40004c00
 8006750:	40005000 	.word	0x40005000
 8006754:	003d0900 	.word	0x003d0900
 8006758:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	429a      	cmp	r2, r3
 8006766:	d000      	beq.n	800676a <UART_SetConfig+0x37a>
 8006768:	e070      	b.n	800684c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800676a:	231b      	movs	r3, #27
 800676c:	2218      	movs	r2, #24
 800676e:	189b      	adds	r3, r3, r2
 8006770:	19db      	adds	r3, r3, r7
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d822      	bhi.n	80067be <UART_SetConfig+0x3ce>
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	4b67      	ldr	r3, [pc, #412]	; (8006918 <UART_SetConfig+0x528>)
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006782:	f7ff fbb1 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8006786:	0003      	movs	r3, r0
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800678a:	e021      	b.n	80067d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800678c:	f7ff fbc2 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8006790:	0003      	movs	r3, r0
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006794:	e01c      	b.n	80067d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006796:	4b61      	ldr	r3, [pc, #388]	; (800691c <UART_SetConfig+0x52c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2210      	movs	r2, #16
 800679c:	4013      	ands	r3, r2
 800679e:	d002      	beq.n	80067a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80067a0:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <UART_SetConfig+0x530>)
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067a4:	e014      	b.n	80067d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80067a6:	4b5f      	ldr	r3, [pc, #380]	; (8006924 <UART_SetConfig+0x534>)
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067aa:	e011      	b.n	80067d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ac:	f7ff faec 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 80067b0:	0003      	movs	r3, r0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b4:	e00c      	b.n	80067d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067bc:	e008      	b.n	80067d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067c2:	231a      	movs	r3, #26
 80067c4:	2218      	movs	r2, #24
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
        break;
 80067ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d100      	bne.n	80067d8 <UART_SetConfig+0x3e8>
 80067d6:	e090      	b.n	80068fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	005a      	lsls	r2, r3, #1
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	18d2      	adds	r2, r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	0019      	movs	r1, r3
 80067ea:	0010      	movs	r0, r2
 80067ec:	f7f9 fca8 	bl	8000140 <__udivsi3>
 80067f0:	0003      	movs	r3, r0
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d921      	bls.n	800683e <UART_SetConfig+0x44e>
 80067fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	025b      	lsls	r3, r3, #9
 8006800:	429a      	cmp	r2, r3
 8006802:	d21c      	bcs.n	800683e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	b29a      	uxth	r2, r3
 8006808:	200e      	movs	r0, #14
 800680a:	2418      	movs	r4, #24
 800680c:	1903      	adds	r3, r0, r4
 800680e:	19db      	adds	r3, r3, r7
 8006810:	210f      	movs	r1, #15
 8006812:	438a      	bics	r2, r1
 8006814:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	b29b      	uxth	r3, r3
 800681c:	2207      	movs	r2, #7
 800681e:	4013      	ands	r3, r2
 8006820:	b299      	uxth	r1, r3
 8006822:	1903      	adds	r3, r0, r4
 8006824:	19db      	adds	r3, r3, r7
 8006826:	1902      	adds	r2, r0, r4
 8006828:	19d2      	adds	r2, r2, r7
 800682a:	8812      	ldrh	r2, [r2, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1902      	adds	r2, r0, r4
 8006836:	19d2      	adds	r2, r2, r7
 8006838:	8812      	ldrh	r2, [r2, #0]
 800683a:	60da      	str	r2, [r3, #12]
 800683c:	e05d      	b.n	80068fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800683e:	231a      	movs	r3, #26
 8006840:	2218      	movs	r2, #24
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e056      	b.n	80068fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684c:	231b      	movs	r3, #27
 800684e:	2218      	movs	r2, #24
 8006850:	189b      	adds	r3, r3, r2
 8006852:	19db      	adds	r3, r3, r7
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d822      	bhi.n	80068a0 <UART_SetConfig+0x4b0>
 800685a:	009a      	lsls	r2, r3, #2
 800685c:	4b32      	ldr	r3, [pc, #200]	; (8006928 <UART_SetConfig+0x538>)
 800685e:	18d3      	adds	r3, r2, r3
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7ff fb40 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8006868:	0003      	movs	r3, r0
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800686c:	e021      	b.n	80068b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686e:	f7ff fb51 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8006872:	0003      	movs	r3, r0
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006876:	e01c      	b.n	80068b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <UART_SetConfig+0x52c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2210      	movs	r2, #16
 800687e:	4013      	ands	r3, r2
 8006880:	d002      	beq.n	8006888 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006882:	4b27      	ldr	r3, [pc, #156]	; (8006920 <UART_SetConfig+0x530>)
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006886:	e014      	b.n	80068b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006888:	4b26      	ldr	r3, [pc, #152]	; (8006924 <UART_SetConfig+0x534>)
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800688c:	e011      	b.n	80068b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7ff fa7b 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8006892:	0003      	movs	r3, r0
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006896:	e00c      	b.n	80068b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800689e:	e008      	b.n	80068b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068a4:	231a      	movs	r3, #26
 80068a6:	2218      	movs	r2, #24
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	19db      	adds	r3, r3, r7
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
        break;
 80068b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d020      	beq.n	80068fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	085a      	lsrs	r2, r3, #1
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	18d2      	adds	r2, r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	0019      	movs	r1, r3
 80068c8:	0010      	movs	r0, r2
 80068ca:	f7f9 fc39 	bl	8000140 <__udivsi3>
 80068ce:	0003      	movs	r3, r0
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d90a      	bls.n	80068ee <UART_SetConfig+0x4fe>
 80068d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068da:	2380      	movs	r3, #128	; 0x80
 80068dc:	025b      	lsls	r3, r3, #9
 80068de:	429a      	cmp	r2, r3
 80068e0:	d205      	bcs.n	80068ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e005      	b.n	80068fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80068ee:	231a      	movs	r3, #26
 80068f0:	2218      	movs	r2, #24
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	19db      	adds	r3, r3, r7
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2200      	movs	r2, #0
 80068fe:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2200      	movs	r2, #0
 8006904:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006906:	231a      	movs	r3, #26
 8006908:	2218      	movs	r2, #24
 800690a:	189b      	adds	r3, r3, r2
 800690c:	19db      	adds	r3, r3, r7
 800690e:	781b      	ldrb	r3, [r3, #0]
}
 8006910:	0018      	movs	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	b00e      	add	sp, #56	; 0x38
 8006916:	bdb0      	pop	{r4, r5, r7, pc}
 8006918:	0800ccbc 	.word	0x0800ccbc
 800691c:	40021000 	.word	0x40021000
 8006920:	003d0900 	.word	0x003d0900
 8006924:	00f42400 	.word	0x00f42400
 8006928:	0800cce0 	.word	0x0800cce0

0800692c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2201      	movs	r2, #1
 800693a:	4013      	ands	r3, r2
 800693c:	d00b      	beq.n	8006956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a4a      	ldr	r2, [pc, #296]	; (8006a70 <UART_AdvFeatureConfig+0x144>)
 8006946:	4013      	ands	r3, r2
 8006948:	0019      	movs	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	2202      	movs	r2, #2
 800695c:	4013      	ands	r3, r2
 800695e:	d00b      	beq.n	8006978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4a43      	ldr	r2, [pc, #268]	; (8006a74 <UART_AdvFeatureConfig+0x148>)
 8006968:	4013      	ands	r3, r2
 800696a:	0019      	movs	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2204      	movs	r2, #4
 800697e:	4013      	ands	r3, r2
 8006980:	d00b      	beq.n	800699a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a3b      	ldr	r2, [pc, #236]	; (8006a78 <UART_AdvFeatureConfig+0x14c>)
 800698a:	4013      	ands	r3, r2
 800698c:	0019      	movs	r1, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2208      	movs	r2, #8
 80069a0:	4013      	ands	r3, r2
 80069a2:	d00b      	beq.n	80069bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <UART_AdvFeatureConfig+0x150>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	0019      	movs	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	2210      	movs	r2, #16
 80069c2:	4013      	ands	r3, r2
 80069c4:	d00b      	beq.n	80069de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <UART_AdvFeatureConfig+0x154>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	0019      	movs	r1, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	2220      	movs	r2, #32
 80069e4:	4013      	ands	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4a25      	ldr	r2, [pc, #148]	; (8006a84 <UART_AdvFeatureConfig+0x158>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	0019      	movs	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2240      	movs	r2, #64	; 0x40
 8006a06:	4013      	ands	r3, r2
 8006a08:	d01d      	beq.n	8006a46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <UART_AdvFeatureConfig+0x15c>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	0019      	movs	r1, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	035b      	lsls	r3, r3, #13
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d10b      	bne.n	8006a46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <UART_AdvFeatureConfig+0x160>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	0019      	movs	r1, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <UART_AdvFeatureConfig+0x164>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	fffdffff 	.word	0xfffdffff
 8006a74:	fffeffff 	.word	0xfffeffff
 8006a78:	fffbffff 	.word	0xfffbffff
 8006a7c:	ffff7fff 	.word	0xffff7fff
 8006a80:	ffffefff 	.word	0xffffefff
 8006a84:	ffffdfff 	.word	0xffffdfff
 8006a88:	ffefffff 	.word	0xffefffff
 8006a8c:	ff9fffff 	.word	0xff9fffff
 8006a90:	fff7ffff 	.word	0xfff7ffff

08006a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b092      	sub	sp, #72	; 0x48
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2284      	movs	r2, #132	; 0x84
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa4:	f7fd f886 	bl	8003bb4 <HAL_GetTick>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d12c      	bne.n	8006b14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	0391      	lsls	r1, r2, #14
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4a46      	ldr	r2, [pc, #280]	; (8006bdc <UART_CheckIdleState+0x148>)
 8006ac4:	9200      	str	r2, [sp, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f000 f88c 	bl	8006be4 <UART_WaitOnFlagUntilTimeout>
 8006acc:	1e03      	subs	r3, r0, #0
 8006ace:	d021      	beq.n	8006b14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ada:	2301      	movs	r3, #1
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	f383 8810 	msr	PRIMASK, r3
}
 8006ae4:	46c0      	nop			; (mov r8, r8)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	438a      	bics	r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	f383 8810 	msr	PRIMASK, r3
}
 8006b00:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2278      	movs	r2, #120	; 0x78
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e05f      	b.n	8006bd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2204      	movs	r2, #4
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d146      	bne.n	8006bb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b24:	2280      	movs	r2, #128	; 0x80
 8006b26:	03d1      	lsls	r1, r2, #15
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <UART_CheckIdleState+0x148>)
 8006b2c:	9200      	str	r2, [sp, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f000 f858 	bl	8006be4 <UART_WaitOnFlagUntilTimeout>
 8006b34:	1e03      	subs	r3, r0, #0
 8006b36:	d03b      	beq.n	8006bb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b38:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
 8006b42:	2301      	movs	r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f383 8810 	msr	PRIMASK, r3
}
 8006b4c:	46c0      	nop			; (mov r8, r8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4921      	ldr	r1, [pc, #132]	; (8006be0 <UART_CheckIdleState+0x14c>)
 8006b5a:	400a      	ands	r2, r1
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f383 8810 	msr	PRIMASK, r3
}
 8006b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
 8006b74:	2301      	movs	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f383 8810 	msr	PRIMASK, r3
}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	438a      	bics	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	f383 8810 	msr	PRIMASK, r3
}
 8006b9a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	2120      	movs	r1, #32
 8006ba2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2278      	movs	r2, #120	; 0x78
 8006ba8:	2100      	movs	r1, #0
 8006baa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e011      	b.n	8006bd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	2120      	movs	r1, #32
 8006bbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2278      	movs	r2, #120	; 0x78
 8006bce:	2100      	movs	r1, #0
 8006bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b010      	add	sp, #64	; 0x40
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	01ffffff 	.word	0x01ffffff
 8006be0:	fffffedf 	.word	0xfffffedf

08006be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	1dfb      	adds	r3, r7, #7
 8006bf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf4:	e04b      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	d048      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfc:	f7fc ffda 	bl	8003bb4 <HAL_GetTick>
 8006c00:	0002      	movs	r2, r0
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d302      	bcc.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e04b      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d035      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d111      	bne.n	8006c54 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2208      	movs	r2, #8
 8006c36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 f860 	bl	8006d00 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2284      	movs	r2, #132	; 0x84
 8006c44:	2108      	movs	r1, #8
 8006c46:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2278      	movs	r2, #120	; 0x78
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e02c      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	401a      	ands	r2, r3
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d112      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2280      	movs	r2, #128	; 0x80
 8006c6e:	0112      	lsls	r2, r2, #4
 8006c70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 f843 	bl	8006d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2284      	movs	r2, #132	; 0x84
 8006c7e:	2120      	movs	r1, #32
 8006c80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2278      	movs	r2, #120	; 0x78
 8006c86:	2100      	movs	r1, #0
 8006c88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e00f      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	4013      	ands	r3, r2
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	425a      	negs	r2, r3
 8006c9e:	4153      	adcs	r3, r2
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	001a      	movs	r2, r3
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d0a4      	beq.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b004      	add	sp, #16
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f383 8810 	msr	PRIMASK, r3
}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	21c0      	movs	r1, #192	; 0xc0
 8006ce0:	438a      	bics	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f383 8810 	msr	PRIMASK, r3
}
 8006cee:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b006      	add	sp, #24
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d08:	f3ef 8310 	mrs	r3, PRIMASK
 8006d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006d0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
 8006d12:	2301      	movs	r3, #1
 8006d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4926      	ldr	r1, [pc, #152]	; (8006dc4 <UART_EndRxTransfer+0xc4>)
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8006d40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
 8006d44:	2301      	movs	r3, #1
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	f383 8810 	msr	PRIMASK, r3
}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	438a      	bics	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f383 8810 	msr	PRIMASK, r3
}
 8006d6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d118      	bne.n	8006da6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d74:	f3ef 8310 	mrs	r3, PRIMASK
 8006d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7e:	2301      	movs	r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f383 8810 	msr	PRIMASK, r3
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2110      	movs	r1, #16
 8006d96:	438a      	bics	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2280      	movs	r2, #128	; 0x80
 8006daa:	2120      	movs	r1, #32
 8006dac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b00e      	add	sp, #56	; 0x38
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	fffffedf 	.word	0xfffffedf

08006dc8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	4013      	ands	r3, r2
 8006de0:	d135      	bne.n	8006e4e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	2252      	movs	r2, #82	; 0x52
 8006de6:	2100      	movs	r1, #0
 8006de8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dea:	f3ef 8310 	mrs	r3, PRIMASK
 8006dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8006df0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df4:	2301      	movs	r3, #1
 8006df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f383 8810 	msr	PRIMASK, r3
}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	438a      	bics	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f383 8810 	msr	PRIMASK, r3
}
 8006e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e20:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e22:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	2301      	movs	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f383 8810 	msr	PRIMASK, r3
}
 8006e30:	46c0      	nop			; (mov r8, r8)
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2140      	movs	r1, #64	; 0x40
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	e004      	b.n	8006e58 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7ff fab5 	bl	80063c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b00c      	add	sp, #48	; 0x30
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7ff faad 	bl	80063d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b004      	add	sp, #16
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2280      	movs	r2, #128	; 0x80
 8006e96:	589b      	ldr	r3, [r3, r2]
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d10a      	bne.n	8006ebe <UART_DMAError+0x40>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b21      	cmp	r3, #33	; 0x21
 8006eac:	d107      	bne.n	8006ebe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2252      	movs	r2, #82	; 0x52
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7ff fefc 	bl	8006cb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2240      	movs	r2, #64	; 0x40
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d10a      	bne.n	8006ee2 <UART_DMAError+0x64>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b22      	cmp	r3, #34	; 0x22
 8006ed0:	d107      	bne.n	8006ee2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	225a      	movs	r2, #90	; 0x5a
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff ff0f 	bl	8006d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2284      	movs	r2, #132	; 0x84
 8006ee6:	589b      	ldr	r3, [r3, r2]
 8006ee8:	2210      	movs	r2, #16
 8006eea:	431a      	orrs	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2184      	movs	r1, #132	; 0x84
 8006ef0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f7ff fa73 	bl	80063e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b006      	add	sp, #24
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	0002      	movs	r2, r0
 8006f0a:	1dbb      	adds	r3, r7, #6
 8006f0c:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f12:	1dbb      	adds	r3, r7, #6
 8006f14:	2200      	movs	r2, #0
 8006f16:	5e9b      	ldrsh	r3, [r3, r2]
 8006f18:	2b84      	cmp	r3, #132	; 0x84
 8006f1a:	d006      	beq.n	8006f2a <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006f1c:	1dbb      	adds	r3, r7, #6
 8006f1e:	2200      	movs	r2, #0
 8006f20:	5e9a      	ldrsh	r2, [r3, r2]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	18d3      	adds	r3, r2, r3
 8006f26:	3303      	adds	r3, #3
 8006f28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f38:	f000 faaa 	bl	8007490 <vTaskStartScheduler>
  
  return osOK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f46:	b089      	sub	sp, #36	; 0x24
 8006f48:	af04      	add	r7, sp, #16
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d020      	beq.n	8006f98 <osThreadCreate+0x54>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d01c      	beq.n	8006f98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685c      	ldr	r4, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681d      	ldr	r5, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691e      	ldr	r6, [r3, #16]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7ff ffc6 	bl	8006f02 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	9201      	str	r2, [sp, #4]
 8006f84:	9000      	str	r0, [sp, #0]
 8006f86:	000b      	movs	r3, r1
 8006f88:	0032      	movs	r2, r6
 8006f8a:	0029      	movs	r1, r5
 8006f8c:	0020      	movs	r0, r4
 8006f8e:	f000 f8e3 	bl	8007158 <xTaskCreateStatic>
 8006f92:	0003      	movs	r3, r0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e01d      	b.n	8006fd4 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685c      	ldr	r4, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fa4:	b29e      	uxth	r6, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2208      	movs	r2, #8
 8006faa:	5e9b      	ldrsh	r3, [r3, r2]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7ff ffa8 	bl	8006f02 <makeFreeRtosPriority>
 8006fb2:	0001      	movs	r1, r0
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	9100      	str	r1, [sp, #0]
 8006fbe:	0013      	movs	r3, r2
 8006fc0:	0032      	movs	r2, r6
 8006fc2:	0029      	movs	r1, r5
 8006fc4:	0020      	movs	r0, r4
 8006fc6:	f000 f90b 	bl	80071e0 <xTaskCreate>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d001      	beq.n	8006fd4 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e000      	b.n	8006fd6 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b005      	add	sp, #20
 8006fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <osDelay+0x16>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	e000      	b.n	8006ff6 <osDelay+0x18>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 fa24 	bl	8007444 <vTaskDelay>
  
  return osOK;
 8006ffc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ffe:	0018      	movs	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	b004      	add	sp, #16
 8007004:	bd80      	pop	{r7, pc}

08007006 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3308      	adds	r3, #8
 8007012:	001a      	movs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	4252      	negs	r2, r2
 800701e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3308      	adds	r3, #8
 8007024:	001a      	movs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3308      	adds	r3, #8
 800702e:	001a      	movs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	46bd      	mov	sp, r7
 800703e:	b002      	add	sp, #8
 8007040:	bd80      	pop	{r7, pc}

08007042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007050:	46c0      	nop			; (mov r8, r8)
 8007052:	46bd      	mov	sp, r7
 8007054:	b002      	add	sp, #8
 8007056:	bd80      	pop	{r7, pc}

08007058 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	46c0      	nop			; (mov r8, r8)
 8007096:	46bd      	mov	sp, r7
 8007098:	b004      	add	sp, #16
 800709a:	bd80      	pop	{r7, pc}

0800709c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3301      	adds	r3, #1
 80070b0:	d103      	bne.n	80070ba <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e00c      	b.n	80070d4 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3308      	adds	r3, #8
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e002      	b.n	80070c8 <vListInsert+0x2c>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d2f6      	bcs.n	80070c2 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
}
 8007100:	46c0      	nop			; (mov r8, r8)
 8007102:	46bd      	mov	sp, r7
 8007104:	b004      	add	sp, #16
 8007106:	bd80      	pop	{r7, pc}

08007108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6892      	ldr	r2, [r2, #8]
 800711e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6852      	ldr	r2, [r2, #4]
 8007128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d103      	bne.n	800713c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
}
 8007150:	0018      	movs	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	b004      	add	sp, #16
 8007156:	bd80      	pop	{r7, pc}

08007158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b08d      	sub	sp, #52	; 0x34
 800715c:	af04      	add	r7, sp, #16
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <xTaskCreateStatic+0x18>
 800716c:	b672      	cpsid	i
 800716e:	e7fe      	b.n	800716e <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xTaskCreateStatic+0x22>
 8007176:	b672      	cpsid	i
 8007178:	e7fe      	b.n	8007178 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800717a:	2354      	movs	r3, #84	; 0x54
 800717c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b54      	cmp	r3, #84	; 0x54
 8007182:	d001      	beq.n	8007188 <xTaskCreateStatic+0x30>
 8007184:	b672      	cpsid	i
 8007186:	e7fe      	b.n	8007186 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007188:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d020      	beq.n	80071d2 <xTaskCreateStatic+0x7a>
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d01d      	beq.n	80071d2 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2251      	movs	r2, #81	; 0x51
 80071a4:	2102      	movs	r1, #2
 80071a6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a8:	683c      	ldr	r4, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	2318      	movs	r3, #24
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	0023      	movs	r3, r4
 80071c4:	f000 f858 	bl	8007278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	0018      	movs	r0, r3
 80071cc:	f000 f8d6 	bl	800737c <prvAddNewTaskToReadyList>
 80071d0:	e001      	b.n	80071d6 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071d6:	69bb      	ldr	r3, [r7, #24]
	}
 80071d8:	0018      	movs	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	b009      	add	sp, #36	; 0x24
 80071de:	bd90      	pop	{r4, r7, pc}

080071e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b08d      	sub	sp, #52	; 0x34
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	1dbb      	adds	r3, r7, #6
 80071ee:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071f0:	1dbb      	adds	r3, r7, #6
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	0018      	movs	r0, r3
 80071f8:	f000 fd9a 	bl	8007d30 <pvPortMalloc>
 80071fc:	0003      	movs	r3, r0
 80071fe:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d010      	beq.n	8007228 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007206:	2054      	movs	r0, #84	; 0x54
 8007208:	f000 fd92 	bl	8007d30 <pvPortMalloc>
 800720c:	0003      	movs	r3, r0
 800720e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
 800721c:	e006      	b.n	800722c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fe2b 	bl	8007e7c <vPortFree>
 8007226:	e001      	b.n	800722c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2251      	movs	r2, #81	; 0x51
 8007236:	2100      	movs	r1, #0
 8007238:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723a:	1dbb      	adds	r3, r7, #6
 800723c:	881a      	ldrh	r2, [r3, #0]
 800723e:	683c      	ldr	r4, [r7, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	2300      	movs	r3, #0
 8007246:	9303      	str	r3, [sp, #12]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	0023      	movs	r3, r4
 8007256:	f000 f80f 	bl	8007278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	0018      	movs	r0, r3
 800725e:	f000 f88d 	bl	800737c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e002      	b.n	800726e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007268:	2301      	movs	r3, #1
 800726a:	425b      	negs	r3, r3
 800726c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800726e:	69bb      	ldr	r3, [r7, #24]
	}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b009      	add	sp, #36	; 0x24
 8007276:	bd90      	pop	{r4, r7, pc}

08007278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	493a      	ldr	r1, [pc, #232]	; (8007378 <prvInitialiseNewTask+0x100>)
 800728e:	468c      	mov	ip, r1
 8007290:	4463      	add	r3, ip
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	18d3      	adds	r3, r2, r3
 8007296:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2207      	movs	r2, #7
 800729c:	4393      	bics	r3, r2
 800729e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2207      	movs	r2, #7
 80072a4:	4013      	ands	r3, r2
 80072a6:	d001      	beq.n	80072ac <prvInitialiseNewTask+0x34>
 80072a8:	b672      	cpsid	i
 80072aa:	e7fe      	b.n	80072aa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d020      	beq.n	80072f4 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e013      	b.n	80072e0 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	18d3      	adds	r3, r2, r3
 80072be:	7818      	ldrb	r0, [r3, #0]
 80072c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c2:	2134      	movs	r1, #52	; 0x34
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	18d3      	adds	r3, r2, r3
 80072c8:	185b      	adds	r3, r3, r1
 80072ca:	1c02      	adds	r2, r0, #0
 80072cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	18d3      	adds	r3, r2, r3
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3301      	adds	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d9e8      	bls.n	80072b8 <prvInitialiseNewTask+0x40>
 80072e6:	e000      	b.n	80072ea <prvInitialiseNewTask+0x72>
			{
				break;
 80072e8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2243      	movs	r2, #67	; 0x43
 80072ee:	2100      	movs	r1, #0
 80072f0:	5499      	strb	r1, [r3, r2]
 80072f2:	e003      	b.n	80072fc <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	2234      	movs	r2, #52	; 0x34
 80072f8:	2100      	movs	r1, #0
 80072fa:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d901      	bls.n	8007306 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007302:	2306      	movs	r3, #6
 8007304:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	2200      	movs	r2, #0
 8007316:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	3304      	adds	r3, #4
 800731c:	0018      	movs	r0, r3
 800731e:	f7ff fe90 	bl	8007042 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	3318      	adds	r3, #24
 8007326:	0018      	movs	r0, r3
 8007328:	f7ff fe8b 	bl	8007042 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007330:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	2207      	movs	r2, #7
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007340:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	2200      	movs	r2, #0
 8007346:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2250      	movs	r2, #80	; 0x50
 800734c:	2100      	movs	r1, #0
 800734e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 fbba 	bl	8007ad0 <pxPortInitialiseStack>
 800735c:	0002      	movs	r2, r0
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	46bd      	mov	sp, r7
 8007372:	b006      	add	sp, #24
 8007374:	bd80      	pop	{r7, pc}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	3fffffff 	.word	0x3fffffff

0800737c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007384:	f000 fc3c 	bl	8007c00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007388:	4b28      	ldr	r3, [pc, #160]	; (800742c <prvAddNewTaskToReadyList+0xb0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	4b27      	ldr	r3, [pc, #156]	; (800742c <prvAddNewTaskToReadyList+0xb0>)
 8007390:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007392:	4b27      	ldr	r3, [pc, #156]	; (8007430 <prvAddNewTaskToReadyList+0xb4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800739a:	4b25      	ldr	r3, [pc, #148]	; (8007430 <prvAddNewTaskToReadyList+0xb4>)
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073a0:	4b22      	ldr	r3, [pc, #136]	; (800742c <prvAddNewTaskToReadyList+0xb0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d110      	bne.n	80073ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073a8:	f000 fa6a 	bl	8007880 <prvInitialiseTaskLists>
 80073ac:	e00d      	b.n	80073ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ae:	4b21      	ldr	r3, [pc, #132]	; (8007434 <prvAddNewTaskToReadyList+0xb8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <prvAddNewTaskToReadyList+0xb4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d802      	bhi.n	80073ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073c4:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <prvAddNewTaskToReadyList+0xb4>)
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <prvAddNewTaskToReadyList+0xbc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <prvAddNewTaskToReadyList+0xbc>)
 80073d2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	4b18      	ldr	r3, [pc, #96]	; (800743c <prvAddNewTaskToReadyList+0xc0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d903      	bls.n	80073e8 <prvAddNewTaskToReadyList+0x6c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4b15      	ldr	r3, [pc, #84]	; (800743c <prvAddNewTaskToReadyList+0xc0>)
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	0013      	movs	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	189b      	adds	r3, r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4a12      	ldr	r2, [pc, #72]	; (8007440 <prvAddNewTaskToReadyList+0xc4>)
 80073f6:	189a      	adds	r2, r3, r2
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	0019      	movs	r1, r3
 80073fe:	0010      	movs	r0, r2
 8007400:	f7ff fe2a 	bl	8007058 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007404:	f000 fc0e 	bl	8007c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvAddNewTaskToReadyList+0xb8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <prvAddNewTaskToReadyList+0xb4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	429a      	cmp	r2, r3
 800741c:	d201      	bcs.n	8007422 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800741e:	f000 fbdf 	bl	8007be0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	46bd      	mov	sp, r7
 8007426:	b002      	add	sp, #8
 8007428:	bd80      	pop	{r7, pc}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	2000074c 	.word	0x2000074c
 8007430:	2000064c 	.word	0x2000064c
 8007434:	20000758 	.word	0x20000758
 8007438:	20000768 	.word	0x20000768
 800743c:	20000754 	.word	0x20000754
 8007440:	20000650 	.word	0x20000650

08007444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d010      	beq.n	8007478 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <vTaskDelay+0x48>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <vTaskDelay+0x1e>
 800745e:	b672      	cpsid	i
 8007460:	e7fe      	b.n	8007460 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007462:	f000 f863 	bl	800752c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2100      	movs	r1, #0
 800746a:	0018      	movs	r0, r3
 800746c:	f000 fadc 	bl	8007a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007470:	f000 f868 	bl	8007544 <xTaskResumeAll>
 8007474:	0003      	movs	r3, r0
 8007476:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800747e:	f000 fbaf 	bl	8007be0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b004      	add	sp, #16
 8007488:	bd80      	pop	{r7, pc}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	20000774 	.word	0x20000774

08007490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b089      	sub	sp, #36	; 0x24
 8007494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800749e:	003a      	movs	r2, r7
 80074a0:	1d39      	adds	r1, r7, #4
 80074a2:	2308      	movs	r3, #8
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7fb fe2e 	bl	8003108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074ac:	683c      	ldr	r4, [r7, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	4918      	ldr	r1, [pc, #96]	; (8007514 <vTaskStartScheduler+0x84>)
 80074b4:	4818      	ldr	r0, [pc, #96]	; (8007518 <vTaskStartScheduler+0x88>)
 80074b6:	9202      	str	r2, [sp, #8]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	2300      	movs	r3, #0
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	0022      	movs	r2, r4
 80074c2:	f7ff fe49 	bl	8007158 <xTaskCreateStatic>
 80074c6:	0002      	movs	r2, r0
 80074c8:	4b14      	ldr	r3, [pc, #80]	; (800751c <vTaskStartScheduler+0x8c>)
 80074ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074cc:	4b13      	ldr	r3, [pc, #76]	; (800751c <vTaskStartScheduler+0x8c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074d4:	2301      	movs	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	e001      	b.n	80074de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10d      	bne.n	8007500 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80074e4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <vTaskStartScheduler+0x90>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	4252      	negs	r2, r2
 80074ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <vTaskStartScheduler+0x94>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <vTaskStartScheduler+0x98>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074fa:	f000 fb4d 	bl	8007b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074fe:	e004      	b.n	800750a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	d101      	bne.n	800750a <vTaskStartScheduler+0x7a>
 8007506:	b672      	cpsid	i
 8007508:	e7fe      	b.n	8007508 <vTaskStartScheduler+0x78>
}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b005      	add	sp, #20
 8007510:	bd90      	pop	{r4, r7, pc}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	0800cbd0 	.word	0x0800cbd0
 8007518:	08007861 	.word	0x08007861
 800751c:	20000770 	.word	0x20000770
 8007520:	2000076c 	.word	0x2000076c
 8007524:	20000758 	.word	0x20000758
 8007528:	20000750 	.word	0x20000750

0800752c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007530:	4b03      	ldr	r3, [pc, #12]	; (8007540 <vTaskSuspendAll+0x14>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	4b02      	ldr	r3, [pc, #8]	; (8007540 <vTaskSuspendAll+0x14>)
 8007538:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20000774 	.word	0x20000774

08007544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007552:	4b3a      	ldr	r3, [pc, #232]	; (800763c <xTaskResumeAll+0xf8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <xTaskResumeAll+0x1a>
 800755a:	b672      	cpsid	i
 800755c:	e7fe      	b.n	800755c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800755e:	f000 fb4f 	bl	8007c00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <xTaskResumeAll+0xf8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	1e5a      	subs	r2, r3, #1
 8007568:	4b34      	ldr	r3, [pc, #208]	; (800763c <xTaskResumeAll+0xf8>)
 800756a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800756c:	4b33      	ldr	r3, [pc, #204]	; (800763c <xTaskResumeAll+0xf8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d15b      	bne.n	800762c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007574:	4b32      	ldr	r3, [pc, #200]	; (8007640 <xTaskResumeAll+0xfc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d057      	beq.n	800762c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800757c:	e02f      	b.n	80075de <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xTaskResumeAll+0x100>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3318      	adds	r3, #24
 800758a:	0018      	movs	r0, r3
 800758c:	f7ff fdbc 	bl	8007108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3304      	adds	r3, #4
 8007594:	0018      	movs	r0, r3
 8007596:	f7ff fdb7 	bl	8007108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <xTaskResumeAll+0x104>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d903      	bls.n	80075ae <xTaskResumeAll+0x6a>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b27      	ldr	r3, [pc, #156]	; (8007648 <xTaskResumeAll+0x104>)
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	0013      	movs	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4a24      	ldr	r2, [pc, #144]	; (800764c <xTaskResumeAll+0x108>)
 80075bc:	189a      	adds	r2, r3, r2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3304      	adds	r3, #4
 80075c2:	0019      	movs	r1, r3
 80075c4:	0010      	movs	r0, r2
 80075c6:	f7ff fd47 	bl	8007058 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	4b20      	ldr	r3, [pc, #128]	; (8007650 <xTaskResumeAll+0x10c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d302      	bcc.n	80075de <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80075d8:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <xTaskResumeAll+0x110>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <xTaskResumeAll+0x100>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1cb      	bne.n	800757e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075ec:	f000 f9e2 	bl	80079b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80075f0:	4b19      	ldr	r3, [pc, #100]	; (8007658 <xTaskResumeAll+0x114>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00f      	beq.n	800761c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075fc:	f000 f82e 	bl	800765c <xTaskIncrementTick>
 8007600:	1e03      	subs	r3, r0, #0
 8007602:	d002      	beq.n	800760a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007604:	4b13      	ldr	r3, [pc, #76]	; (8007654 <xTaskResumeAll+0x110>)
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3b01      	subs	r3, #1
 800760e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f2      	bne.n	80075fc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <xTaskResumeAll+0x114>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <xTaskResumeAll+0x110>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007628:	f000 fada 	bl	8007be0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800762c:	f000 fafa 	bl	8007c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007630:	68bb      	ldr	r3, [r7, #8]
}
 8007632:	0018      	movs	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	b004      	add	sp, #16
 8007638:	bd80      	pop	{r7, pc}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	20000774 	.word	0x20000774
 8007640:	2000074c 	.word	0x2000074c
 8007644:	2000070c 	.word	0x2000070c
 8007648:	20000754 	.word	0x20000754
 800764c:	20000650 	.word	0x20000650
 8007650:	2000064c 	.word	0x2000064c
 8007654:	20000760 	.word	0x20000760
 8007658:	2000075c 	.word	0x2000075c

0800765c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007666:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <xTaskIncrementTick+0x134>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d000      	beq.n	8007670 <xTaskIncrementTick+0x14>
 800766e:	e07e      	b.n	800776e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007670:	4b48      	ldr	r3, [pc, #288]	; (8007794 <xTaskIncrementTick+0x138>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007678:	4b46      	ldr	r3, [pc, #280]	; (8007794 <xTaskIncrementTick+0x138>)
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d117      	bne.n	80076b4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007684:	4b44      	ldr	r3, [pc, #272]	; (8007798 <xTaskIncrementTick+0x13c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <xTaskIncrementTick+0x36>
 800768e:	b672      	cpsid	i
 8007690:	e7fe      	b.n	8007690 <xTaskIncrementTick+0x34>
 8007692:	4b41      	ldr	r3, [pc, #260]	; (8007798 <xTaskIncrementTick+0x13c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	4b40      	ldr	r3, [pc, #256]	; (800779c <xTaskIncrementTick+0x140>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4b3e      	ldr	r3, [pc, #248]	; (8007798 <xTaskIncrementTick+0x13c>)
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	4b3e      	ldr	r3, [pc, #248]	; (800779c <xTaskIncrementTick+0x140>)
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	4b3e      	ldr	r3, [pc, #248]	; (80077a0 <xTaskIncrementTick+0x144>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	4b3c      	ldr	r3, [pc, #240]	; (80077a0 <xTaskIncrementTick+0x144>)
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f000 f980 	bl	80079b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <xTaskIncrementTick+0x148>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d349      	bcc.n	8007752 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076be:	4b36      	ldr	r3, [pc, #216]	; (8007798 <xTaskIncrementTick+0x13c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c8:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <xTaskIncrementTick+0x148>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	4252      	negs	r2, r2
 80076ce:	601a      	str	r2, [r3, #0]
					break;
 80076d0:	e03f      	b.n	8007752 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d2:	4b31      	ldr	r3, [pc, #196]	; (8007798 <xTaskIncrementTick+0x13c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d203      	bcs.n	80076f2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076ea:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <xTaskIncrementTick+0x148>)
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076f0:	e02f      	b.n	8007752 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	3304      	adds	r3, #4
 80076f6:	0018      	movs	r0, r3
 80076f8:	f7ff fd06 	bl	8007108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	3318      	adds	r3, #24
 8007708:	0018      	movs	r0, r3
 800770a:	f7ff fcfd 	bl	8007108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	4b25      	ldr	r3, [pc, #148]	; (80077a8 <xTaskIncrementTick+0x14c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d903      	bls.n	8007722 <xTaskIncrementTick+0xc6>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <xTaskIncrementTick+0x14c>)
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	0013      	movs	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	189b      	adds	r3, r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <xTaskIncrementTick+0x150>)
 8007730:	189a      	adds	r2, r3, r2
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	3304      	adds	r3, #4
 8007736:	0019      	movs	r1, r3
 8007738:	0010      	movs	r0, r2
 800773a:	f7ff fc8d 	bl	8007058 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <xTaskIncrementTick+0x154>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	429a      	cmp	r2, r3
 800774a:	d3b8      	bcc.n	80076be <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007750:	e7b5      	b.n	80076be <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007752:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <xTaskIncrementTick+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007758:	4914      	ldr	r1, [pc, #80]	; (80077ac <xTaskIncrementTick+0x150>)
 800775a:	0013      	movs	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	189b      	adds	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	585b      	ldr	r3, [r3, r1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d907      	bls.n	8007778 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e004      	b.n	8007778 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800776e:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <xTaskIncrementTick+0x158>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <xTaskIncrementTick+0x158>)
 8007776:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <xTaskIncrementTick+0x15c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007784:	697b      	ldr	r3, [r7, #20]
}
 8007786:	0018      	movs	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	b006      	add	sp, #24
 800778c:	bd80      	pop	{r7, pc}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	20000774 	.word	0x20000774
 8007794:	20000750 	.word	0x20000750
 8007798:	20000704 	.word	0x20000704
 800779c:	20000708 	.word	0x20000708
 80077a0:	20000764 	.word	0x20000764
 80077a4:	2000076c 	.word	0x2000076c
 80077a8:	20000754 	.word	0x20000754
 80077ac:	20000650 	.word	0x20000650
 80077b0:	2000064c 	.word	0x2000064c
 80077b4:	2000075c 	.word	0x2000075c
 80077b8:	20000760 	.word	0x20000760

080077bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077c2:	4b22      	ldr	r3, [pc, #136]	; (800784c <vTaskSwitchContext+0x90>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077ca:	4b21      	ldr	r3, [pc, #132]	; (8007850 <vTaskSwitchContext+0x94>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077d0:	e037      	b.n	8007842 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <vTaskSwitchContext+0x94>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	4b1e      	ldr	r3, [pc, #120]	; (8007854 <vTaskSwitchContext+0x98>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	e007      	b.n	80077f0 <vTaskSwitchContext+0x34>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <vTaskSwitchContext+0x2e>
 80077e6:	b672      	cpsid	i
 80077e8:	e7fe      	b.n	80077e8 <vTaskSwitchContext+0x2c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	4919      	ldr	r1, [pc, #100]	; (8007858 <vTaskSwitchContext+0x9c>)
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	0013      	movs	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	189b      	adds	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	585b      	ldr	r3, [r3, r1]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ee      	beq.n	80077e0 <vTaskSwitchContext+0x24>
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	0013      	movs	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	189b      	adds	r3, r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4a12      	ldr	r2, [pc, #72]	; (8007858 <vTaskSwitchContext+0x9c>)
 800780e:	189b      	adds	r3, r3, r2
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	605a      	str	r2, [r3, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	429a      	cmp	r2, r3
 8007826:	d104      	bne.n	8007832 <vTaskSwitchContext+0x76>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	4b08      	ldr	r3, [pc, #32]	; (800785c <vTaskSwitchContext+0xa0>)
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <vTaskSwitchContext+0x98>)
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	46bd      	mov	sp, r7
 8007846:	b002      	add	sp, #8
 8007848:	bd80      	pop	{r7, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	20000774 	.word	0x20000774
 8007850:	20000760 	.word	0x20000760
 8007854:	20000754 	.word	0x20000754
 8007858:	20000650 	.word	0x20000650
 800785c:	2000064c 	.word	0x2000064c

08007860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007868:	f000 f84e 	bl	8007908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800786c:	4b03      	ldr	r3, [pc, #12]	; (800787c <prvIdleTask+0x1c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d9f9      	bls.n	8007868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007874:	f000 f9b4 	bl	8007be0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007878:	e7f6      	b.n	8007868 <prvIdleTask+0x8>
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	20000650 	.word	0x20000650

08007880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	e00c      	b.n	80078a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	0013      	movs	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	189b      	adds	r3, r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <prvInitialiseTaskLists+0x68>)
 8007898:	189b      	adds	r3, r3, r2
 800789a:	0018      	movs	r0, r3
 800789c:	f7ff fbb3 	bl	8007006 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3301      	adds	r3, #1
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	d9ef      	bls.n	800788c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <prvInitialiseTaskLists+0x6c>)
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7ff fba9 	bl	8007006 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b4:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <prvInitialiseTaskLists+0x70>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7ff fba5 	bl	8007006 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078bc:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <prvInitialiseTaskLists+0x74>)
 80078be:	0018      	movs	r0, r3
 80078c0:	f7ff fba1 	bl	8007006 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <prvInitialiseTaskLists+0x78>)
 80078c6:	0018      	movs	r0, r3
 80078c8:	f7ff fb9d 	bl	8007006 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <prvInitialiseTaskLists+0x7c>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff fb99 	bl	8007006 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvInitialiseTaskLists+0x80>)
 80078d6:	4a05      	ldr	r2, [pc, #20]	; (80078ec <prvInitialiseTaskLists+0x6c>)
 80078d8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <prvInitialiseTaskLists+0x84>)
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <prvInitialiseTaskLists+0x70>)
 80078de:	601a      	str	r2, [r3, #0]
}
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b002      	add	sp, #8
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20000650 	.word	0x20000650
 80078ec:	200006dc 	.word	0x200006dc
 80078f0:	200006f0 	.word	0x200006f0
 80078f4:	2000070c 	.word	0x2000070c
 80078f8:	20000720 	.word	0x20000720
 80078fc:	20000738 	.word	0x20000738
 8007900:	20000704 	.word	0x20000704
 8007904:	20000708 	.word	0x20000708

08007908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790e:	e01a      	b.n	8007946 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007910:	f000 f976 	bl	8007c00 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <prvCheckTasksWaitingTermination+0x50>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	0018      	movs	r0, r3
 8007922:	f7ff fbf1 	bl	8007108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	1e5a      	subs	r2, r3, #1
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 800792e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	1e5a      	subs	r2, r3, #1
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007938:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800793a:	f000 f973 	bl	8007c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0018      	movs	r0, r3
 8007942:	f000 f80f 	bl	8007964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e0      	bne.n	8007910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b002      	add	sp, #8
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000720 	.word	0x20000720
 800795c:	2000074c 	.word	0x2000074c
 8007960:	20000734 	.word	0x20000734

08007964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2251      	movs	r2, #81	; 0x51
 8007970:	5c9b      	ldrb	r3, [r3, r2]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	0018      	movs	r0, r3
 800797c:	f000 fa7e 	bl	8007e7c <vPortFree>
				vPortFree( pxTCB );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	0018      	movs	r0, r3
 8007984:	f000 fa7a 	bl	8007e7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007988:	e010      	b.n	80079ac <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2251      	movs	r2, #81	; 0x51
 800798e:	5c9b      	ldrb	r3, [r3, r2]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d104      	bne.n	800799e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	0018      	movs	r0, r3
 8007998:	f000 fa70 	bl	8007e7c <vPortFree>
	}
 800799c:	e006      	b.n	80079ac <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2251      	movs	r2, #81	; 0x51
 80079a2:	5c9b      	ldrb	r3, [r3, r2]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d001      	beq.n	80079ac <prvDeleteTCB+0x48>
 80079a8:	b672      	cpsid	i
 80079aa:	e7fe      	b.n	80079aa <prvDeleteTCB+0x46>
	}
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b002      	add	sp, #8
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <prvResetNextTaskUnblockTime+0x34>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c4:	4b09      	ldr	r3, [pc, #36]	; (80079ec <prvResetNextTaskUnblockTime+0x38>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	4252      	negs	r2, r2
 80079ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079cc:	e008      	b.n	80079e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvResetNextTaskUnblockTime+0x34>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <prvResetNextTaskUnblockTime+0x38>)
 80079de:	601a      	str	r2, [r3, #0]
}
 80079e0:	46c0      	nop			; (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b002      	add	sp, #8
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000704 	.word	0x20000704
 80079ec:	2000076c 	.word	0x2000076c

080079f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <xTaskGetSchedulerState+0x30>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079fe:	2301      	movs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	e008      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a04:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <xTaskGetSchedulerState+0x34>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e001      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a16:	687b      	ldr	r3, [r7, #4]
	}
 8007a18:	0018      	movs	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000758 	.word	0x20000758
 8007a24:	20000774 	.word	0x20000774

08007a28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a32:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a38:	4b20      	ldr	r3, [pc, #128]	; (8007abc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7ff fb62 	bl	8007108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3301      	adds	r3, #1
 8007a48:	d10b      	bne.n	8007a62 <prvAddCurrentTaskToDelayedList+0x3a>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d008      	beq.n	8007a62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a58:	0011      	movs	r1, r2
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7ff fafc 	bl	8007058 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a60:	e026      	b.n	8007ab0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	18d3      	adds	r3, r2, r3
 8007a68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a6a:	4b14      	ldr	r3, [pc, #80]	; (8007abc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d209      	bcs.n	8007a8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7a:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3304      	adds	r3, #4
 8007a84:	0019      	movs	r1, r3
 8007a86:	0010      	movs	r0, r2
 8007a88:	f7ff fb08 	bl	800709c <vListInsert>
}
 8007a8c:	e010      	b.n	8007ab0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3304      	adds	r3, #4
 8007a98:	0019      	movs	r1, r3
 8007a9a:	0010      	movs	r0, r2
 8007a9c:	f7ff fafe 	bl	800709c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d202      	bcs.n	8007ab0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007aaa:	4b08      	ldr	r3, [pc, #32]	; (8007acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	601a      	str	r2, [r3, #0]
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b004      	add	sp, #16
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000750 	.word	0x20000750
 8007abc:	2000064c 	.word	0x2000064c
 8007ac0:	20000738 	.word	0x20000738
 8007ac4:	20000708 	.word	0x20000708
 8007ac8:	20000704 	.word	0x20000704
 8007acc:	2000076c 	.word	0x2000076c

08007ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2280      	movs	r2, #128	; 0x80
 8007ae6:	0452      	lsls	r2, r2, #17
 8007ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3b04      	subs	r3, #4
 8007afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007afc:	4a08      	ldr	r2, [pc, #32]	; (8007b20 <pxPortInitialiseStack+0x50>)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b14      	subs	r3, #20
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b20      	subs	r3, #32
 8007b12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b14:	68fb      	ldr	r3, [r7, #12]
}
 8007b16:	0018      	movs	r0, r3
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b004      	add	sp, #16
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	08007b25 	.word	0x08007b25

08007b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <prvTaskExitError+0x2c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	d001      	beq.n	8007b3a <prvTaskExitError+0x16>
 8007b36:	b672      	cpsid	i
 8007b38:	e7fe      	b.n	8007b38 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007b3a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0fc      	beq.n	8007b3e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b44:	46c0      	nop			; (mov r8, r8)
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	b002      	add	sp, #8
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	20000014 	.word	0x20000014

08007b54 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007b60:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <pxCurrentTCBConst2>)
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	3020      	adds	r0, #32
 8007b68:	f380 8809 	msr	PSP, r0
 8007b6c:	2002      	movs	r0, #2
 8007b6e:	f380 8814 	msr	CONTROL, r0
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007b78:	46ae      	mov	lr, r5
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	bc04      	pop	{r2}
 8007b7e:	b662      	cpsie	i
 8007b80:	4718      	bx	r3
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46c0      	nop			; (mov r8, r8)
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	46c0      	nop			; (mov r8, r8)
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	46c0      	nop			; (mov r8, r8)

08007b90 <pxCurrentTCBConst2>:
 8007b90:	2000064c 	.word	0x2000064c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46c0      	nop			; (mov r8, r8)

08007b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <xPortStartScheduler+0x40>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <xPortStartScheduler+0x40>)
 8007ba2:	21ff      	movs	r1, #255	; 0xff
 8007ba4:	0409      	lsls	r1, r1, #16
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <xPortStartScheduler+0x40>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <xPortStartScheduler+0x40>)
 8007bb0:	21ff      	movs	r1, #255	; 0xff
 8007bb2:	0609      	lsls	r1, r1, #24
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007bb8:	f000 f898 	bl	8007cec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bbc:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <xPortStartScheduler+0x44>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007bc2:	f7ff ffcd 	bl	8007b60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bc6:	f7ff fdf9 	bl	80077bc <vTaskSwitchContext>
	prvTaskExitError();
 8007bca:	f7ff ffab 	bl	8007b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	e000ed20 	.word	0xe000ed20
 8007bdc:	20000014 	.word	0x20000014

08007be0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <vPortYield+0x1c>)
 8007be6:	2280      	movs	r2, #128	; 0x80
 8007be8:	0552      	lsls	r2, r2, #21
 8007bea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007bec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007bf0:	f3bf 8f6f 	isb	sy
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007c04:	b672      	cpsid	i
    uxCriticalNesting++;
 8007c06:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <vPortEnterCritical+0x20>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vPortEnterCritical+0x20>)
 8007c0e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007c10:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007c14:	f3bf 8f6f 	isb	sy
}
 8007c18:	46c0      	nop			; (mov r8, r8)
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	20000014 	.word	0x20000014

08007c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c28:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <vPortExitCritical+0x2c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <vPortExitCritical+0x10>
 8007c30:	b672      	cpsid	i
 8007c32:	e7fe      	b.n	8007c32 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <vPortExitCritical+0x2c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <vPortExitCritical+0x2c>)
 8007c3c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <vPortExitCritical+0x2c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d100      	bne.n	8007c48 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007c46:	b662      	cpsie	i
    }
}
 8007c48:	46c0      	nop			; (mov r8, r8)
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	20000014 	.word	0x20000014

08007c54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007c54:	f3ef 8010 	mrs	r0, PRIMASK
 8007c58:	b672      	cpsid	i
 8007c5a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	0018      	movs	r0, r3

08007c60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007c60:	f380 8810 	msr	PRIMASK, r0
 8007c64:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007c66:	46c0      	nop			; (mov r8, r8)
	...

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <pxCurrentTCBConst>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	3820      	subs	r0, #32
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c7e:	4644      	mov	r4, r8
 8007c80:	464d      	mov	r5, r9
 8007c82:	4656      	mov	r6, sl
 8007c84:	465f      	mov	r7, fp
 8007c86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c88:	b508      	push	{r3, lr}
 8007c8a:	b672      	cpsid	i
 8007c8c:	f7ff fd96 	bl	80077bc <vTaskSwitchContext>
 8007c90:	b662      	cpsie	i
 8007c92:	bc0c      	pop	{r2, r3}
 8007c94:	6811      	ldr	r1, [r2, #0]
 8007c96:	6808      	ldr	r0, [r1, #0]
 8007c98:	3010      	adds	r0, #16
 8007c9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007c9c:	46a0      	mov	r8, r4
 8007c9e:	46a9      	mov	r9, r5
 8007ca0:	46b2      	mov	sl, r6
 8007ca2:	46bb      	mov	fp, r7
 8007ca4:	f380 8809 	msr	PSP, r0
 8007ca8:	3820      	subs	r0, #32
 8007caa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007cac:	4718      	bx	r3
 8007cae:	46c0      	nop			; (mov r8, r8)

08007cb0 <pxCurrentTCBConst>:
 8007cb0:	2000064c 	.word	0x2000064c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	46c0      	nop			; (mov r8, r8)

08007cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cbe:	f7ff ffc9 	bl	8007c54 <ulSetInterruptMaskFromISR>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cc6:	f7ff fcc9 	bl	800765c <xTaskIncrementTick>
 8007cca:	1e03      	subs	r3, r0, #0
 8007ccc:	d003      	beq.n	8007cd6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007cce:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <xPortSysTickHandler+0x30>)
 8007cd0:	2280      	movs	r2, #128	; 0x80
 8007cd2:	0552      	lsls	r2, r2, #21
 8007cd4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7ff ffc1 	bl	8007c60 <vClearInterruptMaskFromISR>
}
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b002      	add	sp, #8
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <prvSetupTimerInterrupt+0x34>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <prvSetupTimerInterrupt+0x38>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <prvSetupTimerInterrupt+0x3c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	22fa      	movs	r2, #250	; 0xfa
 8007d02:	0091      	lsls	r1, r2, #2
 8007d04:	0018      	movs	r0, r3
 8007d06:	f7f8 fa1b 	bl	8000140 <__udivsi3>
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	001a      	movs	r2, r3
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <prvSetupTimerInterrupt+0x40>)
 8007d10:	3a01      	subs	r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <prvSetupTimerInterrupt+0x34>)
 8007d16:	2207      	movs	r2, #7
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	e000e010 	.word	0xe000e010
 8007d24:	e000e018 	.word	0xe000e018
 8007d28:	20000008 	.word	0x20000008
 8007d2c:	e000e014 	.word	0xe000e014

08007d30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007d3c:	f7ff fbf6 	bl	800752c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d40:	4b49      	ldr	r3, [pc, #292]	; (8007e68 <pvPortMalloc+0x138>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d48:	f000 f8e0 	bl	8007f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d4c:	4b47      	ldr	r3, [pc, #284]	; (8007e6c <pvPortMalloc+0x13c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4013      	ands	r3, r2
 8007d54:	d000      	beq.n	8007d58 <pvPortMalloc+0x28>
 8007d56:	e079      	b.n	8007e4c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007d5e:	2208      	movs	r2, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	189b      	adds	r3, r3, r2
 8007d64:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2207      	movs	r2, #7
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d00a      	beq.n	8007d84 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2207      	movs	r2, #7
 8007d72:	4393      	bics	r3, r2
 8007d74:	3308      	adds	r3, #8
 8007d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2207      	movs	r2, #7
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d001      	beq.n	8007d84 <pvPortMalloc+0x54>
 8007d80:	b672      	cpsid	i
 8007d82:	e7fe      	b.n	8007d82 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d060      	beq.n	8007e4c <pvPortMalloc+0x11c>
 8007d8a:	4b39      	ldr	r3, [pc, #228]	; (8007e70 <pvPortMalloc+0x140>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d85b      	bhi.n	8007e4c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d94:	4b37      	ldr	r3, [pc, #220]	; (8007e74 <pvPortMalloc+0x144>)
 8007d96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007d98:	4b36      	ldr	r3, [pc, #216]	; (8007e74 <pvPortMalloc+0x144>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d9e:	e004      	b.n	8007daa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d903      	bls.n	8007dbc <pvPortMalloc+0x8c>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f1      	bne.n	8007da0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dbc:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <pvPortMalloc+0x138>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d042      	beq.n	8007e4c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	2308      	movs	r3, #8
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d916      	bls.n	8007e16 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	18d3      	adds	r3, r2, r3
 8007dee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2207      	movs	r2, #7
 8007df4:	4013      	ands	r3, r2
 8007df6:	d001      	beq.n	8007dfc <pvPortMalloc+0xcc>
 8007df8:	b672      	cpsid	i
 8007dfa:	e7fe      	b.n	8007dfa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	0018      	movs	r0, r3
 8007e12:	f000 f8db 	bl	8007fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e16:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <pvPortMalloc+0x140>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <pvPortMalloc+0x140>)
 8007e22:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e24:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <pvPortMalloc+0x140>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <pvPortMalloc+0x148>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d203      	bcs.n	8007e38 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <pvPortMalloc+0x140>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <pvPortMalloc+0x148>)
 8007e36:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <pvPortMalloc+0x13c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e4c:	f7ff fb7a 	bl	8007544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2207      	movs	r2, #7
 8007e54:	4013      	ands	r3, r2
 8007e56:	d001      	beq.n	8007e5c <pvPortMalloc+0x12c>
 8007e58:	b672      	cpsid	i
 8007e5a:	e7fe      	b.n	8007e5a <pvPortMalloc+0x12a>
	return pvReturn;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	0018      	movs	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b006      	add	sp, #24
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	20001380 	.word	0x20001380
 8007e6c:	2000138c 	.word	0x2000138c
 8007e70:	20001384 	.word	0x20001384
 8007e74:	20001378 	.word	0x20001378
 8007e78:	20001388 	.word	0x20001388

08007e7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d035      	beq.n	8007efa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e8e:	2308      	movs	r3, #8
 8007e90:	425b      	negs	r3, r3
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	18d3      	adds	r3, r2, r3
 8007e96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <vPortFree+0x88>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d101      	bne.n	8007eac <vPortFree+0x30>
 8007ea8:	b672      	cpsid	i
 8007eaa:	e7fe      	b.n	8007eaa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <vPortFree+0x3c>
 8007eb4:	b672      	cpsid	i
 8007eb6:	e7fe      	b.n	8007eb6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <vPortFree+0x88>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	d01a      	beq.n	8007efa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d116      	bne.n	8007efa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <vPortFree+0x88>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	43db      	mvns	r3, r3
 8007ed6:	401a      	ands	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007edc:	f7ff fb26 	bl	800752c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <vPortFree+0x8c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	18d2      	adds	r2, r2, r3
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <vPortFree+0x8c>)
 8007eec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f000 f86b 	bl	8007fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ef6:	f7ff fb25 	bl	8007544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	46bd      	mov	sp, r7
 8007efe:	b004      	add	sp, #16
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	2000138c 	.word	0x2000138c
 8007f08:	20001384 	.word	0x20001384

08007f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f12:	23c0      	movs	r3, #192	; 0xc0
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f18:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <prvHeapInit+0xa8>)
 8007f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2207      	movs	r2, #7
 8007f20:	4013      	ands	r3, r2
 8007f22:	d00c      	beq.n	8007f3e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3307      	adds	r3, #7
 8007f28:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	4393      	bics	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <prvHeapInit+0xa8>)
 8007f3a:	18d3      	adds	r3, r2, r3
 8007f3c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f42:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <prvHeapInit+0xac>)
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f48:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <prvHeapInit+0xac>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	18d3      	adds	r3, r2, r3
 8007f54:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f56:	2208      	movs	r2, #8
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2207      	movs	r2, #7
 8007f62:	4393      	bics	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <prvHeapInit+0xb0>)
 8007f6a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007f6c:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <prvHeapInit+0xb0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <prvHeapInit+0xb0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <prvHeapInit+0xb0>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4b0a      	ldr	r3, [pc, #40]	; (8007fc0 <prvHeapInit+0xb4>)
 8007f98:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvHeapInit+0xb8>)
 8007fa0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fa2:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <prvHeapInit+0xbc>)
 8007fa4:	2280      	movs	r2, #128	; 0x80
 8007fa6:	0612      	lsls	r2, r2, #24
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	46bd      	mov	sp, r7
 8007fae:	b004      	add	sp, #16
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	20000778 	.word	0x20000778
 8007fb8:	20001378 	.word	0x20001378
 8007fbc:	20001380 	.word	0x20001380
 8007fc0:	20001388 	.word	0x20001388
 8007fc4:	20001384 	.word	0x20001384
 8007fc8:	2000138c 	.word	0x2000138c

08007fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <prvInsertBlockIntoFreeList+0xa8>)
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e002      	b.n	8007fe0 <prvInsertBlockIntoFreeList+0x14>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d8f7      	bhi.n	8007fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	18d3      	adds	r3, r2, r3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d108      	bne.n	800800e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	18d2      	adds	r2, r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	18d2      	adds	r2, r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d118      	bne.n	8008054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <prvInsertBlockIntoFreeList+0xac>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d00d      	beq.n	800804a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	18d2      	adds	r2, r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e008      	b.n	800805c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <prvInsertBlockIntoFreeList+0xac>)
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e003      	b.n	800805c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d002      	beq.n	800806a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	46bd      	mov	sp, r7
 800806e:	b004      	add	sp, #16
 8008070:	bd80      	pop	{r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	20001378 	.word	0x20001378
 8008078:	20001380 	.word	0x20001380

0800807c <__errno>:
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <__errno+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	20000018 	.word	0x20000018

08008088 <__libc_init_array>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	2600      	movs	r6, #0
 800808c:	4d0c      	ldr	r5, [pc, #48]	; (80080c0 <__libc_init_array+0x38>)
 800808e:	4c0d      	ldr	r4, [pc, #52]	; (80080c4 <__libc_init_array+0x3c>)
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	42a6      	cmp	r6, r4
 8008096:	d109      	bne.n	80080ac <__libc_init_array+0x24>
 8008098:	2600      	movs	r6, #0
 800809a:	f004 fd49 	bl	800cb30 <_init>
 800809e:	4d0a      	ldr	r5, [pc, #40]	; (80080c8 <__libc_init_array+0x40>)
 80080a0:	4c0a      	ldr	r4, [pc, #40]	; (80080cc <__libc_init_array+0x44>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	42a6      	cmp	r6, r4
 80080a8:	d105      	bne.n	80080b6 <__libc_init_array+0x2e>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	00b3      	lsls	r3, r6, #2
 80080ae:	58eb      	ldr	r3, [r5, r3]
 80080b0:	4798      	blx	r3
 80080b2:	3601      	adds	r6, #1
 80080b4:	e7ee      	b.n	8008094 <__libc_init_array+0xc>
 80080b6:	00b3      	lsls	r3, r6, #2
 80080b8:	58eb      	ldr	r3, [r5, r3]
 80080ba:	4798      	blx	r3
 80080bc:	3601      	adds	r6, #1
 80080be:	e7f2      	b.n	80080a6 <__libc_init_array+0x1e>
 80080c0:	0800d1b4 	.word	0x0800d1b4
 80080c4:	0800d1b4 	.word	0x0800d1b4
 80080c8:	0800d1b4 	.word	0x0800d1b4
 80080cc:	0800d1b8 	.word	0x0800d1b8

080080d0 <memcpy>:
 80080d0:	2300      	movs	r3, #0
 80080d2:	b510      	push	{r4, lr}
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d100      	bne.n	80080da <memcpy+0xa>
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	5ccc      	ldrb	r4, [r1, r3]
 80080dc:	54c4      	strb	r4, [r0, r3]
 80080de:	3301      	adds	r3, #1
 80080e0:	e7f8      	b.n	80080d4 <memcpy+0x4>

080080e2 <memset>:
 80080e2:	0003      	movs	r3, r0
 80080e4:	1882      	adds	r2, r0, r2
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d100      	bne.n	80080ec <memset+0xa>
 80080ea:	4770      	bx	lr
 80080ec:	7019      	strb	r1, [r3, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	e7f9      	b.n	80080e6 <memset+0x4>

080080f2 <__cvt>:
 80080f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080f4:	001e      	movs	r6, r3
 80080f6:	2300      	movs	r3, #0
 80080f8:	0014      	movs	r4, r2
 80080fa:	b08b      	sub	sp, #44	; 0x2c
 80080fc:	429e      	cmp	r6, r3
 80080fe:	da04      	bge.n	800810a <__cvt+0x18>
 8008100:	2180      	movs	r1, #128	; 0x80
 8008102:	0609      	lsls	r1, r1, #24
 8008104:	1873      	adds	r3, r6, r1
 8008106:	001e      	movs	r6, r3
 8008108:	232d      	movs	r3, #45	; 0x2d
 800810a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800810c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800810e:	7013      	strb	r3, [r2, #0]
 8008110:	2320      	movs	r3, #32
 8008112:	2203      	movs	r2, #3
 8008114:	439f      	bics	r7, r3
 8008116:	2f46      	cmp	r7, #70	; 0x46
 8008118:	d007      	beq.n	800812a <__cvt+0x38>
 800811a:	003b      	movs	r3, r7
 800811c:	3b45      	subs	r3, #69	; 0x45
 800811e:	4259      	negs	r1, r3
 8008120:	414b      	adcs	r3, r1
 8008122:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008124:	3a01      	subs	r2, #1
 8008126:	18cb      	adds	r3, r1, r3
 8008128:	9310      	str	r3, [sp, #64]	; 0x40
 800812a:	ab09      	add	r3, sp, #36	; 0x24
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	ab08      	add	r3, sp, #32
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008134:	9200      	str	r2, [sp, #0]
 8008136:	9302      	str	r3, [sp, #8]
 8008138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800813a:	0022      	movs	r2, r4
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	0033      	movs	r3, r6
 8008140:	f001 fdc4 	bl	8009ccc <_dtoa_r>
 8008144:	0005      	movs	r5, r0
 8008146:	2f47      	cmp	r7, #71	; 0x47
 8008148:	d102      	bne.n	8008150 <__cvt+0x5e>
 800814a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800814c:	07db      	lsls	r3, r3, #31
 800814e:	d528      	bpl.n	80081a2 <__cvt+0xb0>
 8008150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008152:	18eb      	adds	r3, r5, r3
 8008154:	9307      	str	r3, [sp, #28]
 8008156:	2f46      	cmp	r7, #70	; 0x46
 8008158:	d114      	bne.n	8008184 <__cvt+0x92>
 800815a:	782b      	ldrb	r3, [r5, #0]
 800815c:	2b30      	cmp	r3, #48	; 0x30
 800815e:	d10c      	bne.n	800817a <__cvt+0x88>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	0020      	movs	r0, r4
 8008166:	0031      	movs	r1, r6
 8008168:	f7f8 f970 	bl	800044c <__aeabi_dcmpeq>
 800816c:	2800      	cmp	r0, #0
 800816e:	d104      	bne.n	800817a <__cvt+0x88>
 8008170:	2301      	movs	r3, #1
 8008172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800817c:	9a07      	ldr	r2, [sp, #28]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	18d3      	adds	r3, r2, r3
 8008182:	9307      	str	r3, [sp, #28]
 8008184:	2200      	movs	r2, #0
 8008186:	2300      	movs	r3, #0
 8008188:	0020      	movs	r0, r4
 800818a:	0031      	movs	r1, r6
 800818c:	f7f8 f95e 	bl	800044c <__aeabi_dcmpeq>
 8008190:	2800      	cmp	r0, #0
 8008192:	d001      	beq.n	8008198 <__cvt+0xa6>
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	9309      	str	r3, [sp, #36]	; 0x24
 8008198:	2230      	movs	r2, #48	; 0x30
 800819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819c:	9907      	ldr	r1, [sp, #28]
 800819e:	428b      	cmp	r3, r1
 80081a0:	d306      	bcc.n	80081b0 <__cvt+0xbe>
 80081a2:	0028      	movs	r0, r5
 80081a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081a8:	1b5b      	subs	r3, r3, r5
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	b00b      	add	sp, #44	; 0x2c
 80081ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b0:	1c59      	adds	r1, r3, #1
 80081b2:	9109      	str	r1, [sp, #36]	; 0x24
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	e7f0      	b.n	800819a <__cvt+0xa8>

080081b8 <__exponent>:
 80081b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ba:	1c83      	adds	r3, r0, #2
 80081bc:	b087      	sub	sp, #28
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	0005      	movs	r5, r0
 80081c2:	000c      	movs	r4, r1
 80081c4:	232b      	movs	r3, #43	; 0x2b
 80081c6:	7002      	strb	r2, [r0, #0]
 80081c8:	2900      	cmp	r1, #0
 80081ca:	da01      	bge.n	80081d0 <__exponent+0x18>
 80081cc:	424c      	negs	r4, r1
 80081ce:	3302      	adds	r3, #2
 80081d0:	706b      	strb	r3, [r5, #1]
 80081d2:	2c09      	cmp	r4, #9
 80081d4:	dd31      	ble.n	800823a <__exponent+0x82>
 80081d6:	270a      	movs	r7, #10
 80081d8:	ab04      	add	r3, sp, #16
 80081da:	1dde      	adds	r6, r3, #7
 80081dc:	0020      	movs	r0, r4
 80081de:	0039      	movs	r1, r7
 80081e0:	9601      	str	r6, [sp, #4]
 80081e2:	f7f8 f91d 	bl	8000420 <__aeabi_idivmod>
 80081e6:	3e01      	subs	r6, #1
 80081e8:	3130      	adds	r1, #48	; 0x30
 80081ea:	0020      	movs	r0, r4
 80081ec:	7031      	strb	r1, [r6, #0]
 80081ee:	0039      	movs	r1, r7
 80081f0:	9402      	str	r4, [sp, #8]
 80081f2:	f7f8 f82f 	bl	8000254 <__divsi3>
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	0004      	movs	r4, r0
 80081fa:	2b63      	cmp	r3, #99	; 0x63
 80081fc:	dcee      	bgt.n	80081dc <__exponent+0x24>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3430      	adds	r4, #48	; 0x30
 8008202:	1e9a      	subs	r2, r3, #2
 8008204:	0013      	movs	r3, r2
 8008206:	9903      	ldr	r1, [sp, #12]
 8008208:	7014      	strb	r4, [r2, #0]
 800820a:	a804      	add	r0, sp, #16
 800820c:	3007      	adds	r0, #7
 800820e:	4298      	cmp	r0, r3
 8008210:	d80e      	bhi.n	8008230 <__exponent+0x78>
 8008212:	ab04      	add	r3, sp, #16
 8008214:	3307      	adds	r3, #7
 8008216:	2000      	movs	r0, #0
 8008218:	429a      	cmp	r2, r3
 800821a:	d804      	bhi.n	8008226 <__exponent+0x6e>
 800821c:	ab04      	add	r3, sp, #16
 800821e:	3009      	adds	r0, #9
 8008220:	18c0      	adds	r0, r0, r3
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	1ac0      	subs	r0, r0, r3
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	1818      	adds	r0, r3, r0
 800822a:	1b40      	subs	r0, r0, r5
 800822c:	b007      	add	sp, #28
 800822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008230:	7818      	ldrb	r0, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	7008      	strb	r0, [r1, #0]
 8008236:	3101      	adds	r1, #1
 8008238:	e7e7      	b.n	800820a <__exponent+0x52>
 800823a:	2330      	movs	r3, #48	; 0x30
 800823c:	18e4      	adds	r4, r4, r3
 800823e:	70ab      	strb	r3, [r5, #2]
 8008240:	1d28      	adds	r0, r5, #4
 8008242:	70ec      	strb	r4, [r5, #3]
 8008244:	e7f1      	b.n	800822a <__exponent+0x72>
	...

08008248 <_printf_float>:
 8008248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800824a:	b095      	sub	sp, #84	; 0x54
 800824c:	000c      	movs	r4, r1
 800824e:	9209      	str	r2, [sp, #36]	; 0x24
 8008250:	001e      	movs	r6, r3
 8008252:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008254:	0007      	movs	r7, r0
 8008256:	f002 fec7 	bl	800afe8 <_localeconv_r>
 800825a:	6803      	ldr	r3, [r0, #0]
 800825c:	0018      	movs	r0, r3
 800825e:	930c      	str	r3, [sp, #48]	; 0x30
 8008260:	f7f7 ff52 	bl	8000108 <strlen>
 8008264:	2300      	movs	r3, #0
 8008266:	9312      	str	r3, [sp, #72]	; 0x48
 8008268:	7e23      	ldrb	r3, [r4, #24]
 800826a:	2207      	movs	r2, #7
 800826c:	930a      	str	r3, [sp, #40]	; 0x28
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	900e      	str	r0, [sp, #56]	; 0x38
 8008272:	930d      	str	r3, [sp, #52]	; 0x34
 8008274:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008276:	682b      	ldr	r3, [r5, #0]
 8008278:	05c9      	lsls	r1, r1, #23
 800827a:	d547      	bpl.n	800830c <_printf_float+0xc4>
 800827c:	189b      	adds	r3, r3, r2
 800827e:	4393      	bics	r3, r2
 8008280:	001a      	movs	r2, r3
 8008282:	3208      	adds	r2, #8
 8008284:	602a      	str	r2, [r5, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	64a2      	str	r2, [r4, #72]	; 0x48
 800828c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800828e:	2201      	movs	r2, #1
 8008290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008292:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008294:	930b      	str	r3, [sp, #44]	; 0x2c
 8008296:	006b      	lsls	r3, r5, #1
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	930f      	str	r3, [sp, #60]	; 0x3c
 800829c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800829e:	4ba7      	ldr	r3, [pc, #668]	; (800853c <_printf_float+0x2f4>)
 80082a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082a2:	4252      	negs	r2, r2
 80082a4:	f7fa f93a 	bl	800251c <__aeabi_dcmpun>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d131      	bne.n	8008310 <_printf_float+0xc8>
 80082ac:	2201      	movs	r2, #1
 80082ae:	4ba3      	ldr	r3, [pc, #652]	; (800853c <_printf_float+0x2f4>)
 80082b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80082b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082b4:	4252      	negs	r2, r2
 80082b6:	f7f8 f8d9 	bl	800046c <__aeabi_dcmple>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d128      	bne.n	8008310 <_printf_float+0xc8>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	0029      	movs	r1, r5
 80082c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80082c6:	f7f8 f8c7 	bl	8000458 <__aeabi_dcmplt>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d003      	beq.n	80082d6 <_printf_float+0x8e>
 80082ce:	0023      	movs	r3, r4
 80082d0:	222d      	movs	r2, #45	; 0x2d
 80082d2:	3343      	adds	r3, #67	; 0x43
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	4d99      	ldr	r5, [pc, #612]	; (8008540 <_printf_float+0x2f8>)
 80082da:	2b47      	cmp	r3, #71	; 0x47
 80082dc:	d900      	bls.n	80082e0 <_printf_float+0x98>
 80082de:	4d99      	ldr	r5, [pc, #612]	; (8008544 <_printf_float+0x2fc>)
 80082e0:	2303      	movs	r3, #3
 80082e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	3301      	adds	r3, #1
 80082e8:	439a      	bics	r2, r3
 80082ea:	2300      	movs	r3, #0
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	0021      	movs	r1, r4
 80082f4:	0038      	movs	r0, r7
 80082f6:	9600      	str	r6, [sp, #0]
 80082f8:	aa13      	add	r2, sp, #76	; 0x4c
 80082fa:	f000 f9e7 	bl	80086cc <_printf_common>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d000      	beq.n	8008304 <_printf_float+0xbc>
 8008302:	e0a2      	b.n	800844a <_printf_float+0x202>
 8008304:	2001      	movs	r0, #1
 8008306:	4240      	negs	r0, r0
 8008308:	b015      	add	sp, #84	; 0x54
 800830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830c:	3307      	adds	r3, #7
 800830e:	e7b6      	b.n	800827e <_printf_float+0x36>
 8008310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008312:	002b      	movs	r3, r5
 8008314:	0010      	movs	r0, r2
 8008316:	0029      	movs	r1, r5
 8008318:	f7fa f900 	bl	800251c <__aeabi_dcmpun>
 800831c:	2800      	cmp	r0, #0
 800831e:	d00b      	beq.n	8008338 <_printf_float+0xf0>
 8008320:	2d00      	cmp	r5, #0
 8008322:	da03      	bge.n	800832c <_printf_float+0xe4>
 8008324:	0023      	movs	r3, r4
 8008326:	222d      	movs	r2, #45	; 0x2d
 8008328:	3343      	adds	r3, #67	; 0x43
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832e:	4d86      	ldr	r5, [pc, #536]	; (8008548 <_printf_float+0x300>)
 8008330:	2b47      	cmp	r3, #71	; 0x47
 8008332:	d9d5      	bls.n	80082e0 <_printf_float+0x98>
 8008334:	4d85      	ldr	r5, [pc, #532]	; (800854c <_printf_float+0x304>)
 8008336:	e7d3      	b.n	80082e0 <_printf_float+0x98>
 8008338:	2220      	movs	r2, #32
 800833a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	4391      	bics	r1, r2
 8008340:	910f      	str	r1, [sp, #60]	; 0x3c
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	d149      	bne.n	80083da <_printf_float+0x192>
 8008346:	3307      	adds	r3, #7
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	2380      	movs	r3, #128	; 0x80
 800834c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4313      	orrs	r3, r2
 8008352:	2200      	movs	r2, #0
 8008354:	9206      	str	r2, [sp, #24]
 8008356:	aa12      	add	r2, sp, #72	; 0x48
 8008358:	9205      	str	r2, [sp, #20]
 800835a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835c:	a908      	add	r1, sp, #32
 800835e:	9204      	str	r2, [sp, #16]
 8008360:	aa11      	add	r2, sp, #68	; 0x44
 8008362:	9203      	str	r2, [sp, #12]
 8008364:	2223      	movs	r2, #35	; 0x23
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	6863      	ldr	r3, [r4, #4]
 800836c:	1852      	adds	r2, r2, r1
 800836e:	9202      	str	r2, [sp, #8]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	0038      	movs	r0, r7
 8008374:	002b      	movs	r3, r5
 8008376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008378:	f7ff febb 	bl	80080f2 <__cvt>
 800837c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800837e:	0005      	movs	r5, r0
 8008380:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008382:	2b47      	cmp	r3, #71	; 0x47
 8008384:	d108      	bne.n	8008398 <_printf_float+0x150>
 8008386:	1ccb      	adds	r3, r1, #3
 8008388:	db02      	blt.n	8008390 <_printf_float+0x148>
 800838a:	6863      	ldr	r3, [r4, #4]
 800838c:	4299      	cmp	r1, r3
 800838e:	dd48      	ble.n	8008422 <_printf_float+0x1da>
 8008390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008392:	3b02      	subs	r3, #2
 8008394:	b2db      	uxtb	r3, r3
 8008396:	930a      	str	r3, [sp, #40]	; 0x28
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	2b65      	cmp	r3, #101	; 0x65
 800839c:	d824      	bhi.n	80083e8 <_printf_float+0x1a0>
 800839e:	0020      	movs	r0, r4
 80083a0:	001a      	movs	r2, r3
 80083a2:	3901      	subs	r1, #1
 80083a4:	3050      	adds	r0, #80	; 0x50
 80083a6:	9111      	str	r1, [sp, #68]	; 0x44
 80083a8:	f7ff ff06 	bl	80081b8 <__exponent>
 80083ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80083b0:	1813      	adds	r3, r2, r0
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	2a01      	cmp	r2, #1
 80083b6:	dc02      	bgt.n	80083be <_printf_float+0x176>
 80083b8:	6822      	ldr	r2, [r4, #0]
 80083ba:	07d2      	lsls	r2, r2, #31
 80083bc:	d501      	bpl.n	80083c2 <_printf_float+0x17a>
 80083be:	3301      	adds	r3, #1
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	2323      	movs	r3, #35	; 0x23
 80083c4:	aa08      	add	r2, sp, #32
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d100      	bne.n	80083d0 <_printf_float+0x188>
 80083ce:	e78f      	b.n	80082f0 <_printf_float+0xa8>
 80083d0:	0023      	movs	r3, r4
 80083d2:	222d      	movs	r2, #45	; 0x2d
 80083d4:	3343      	adds	r3, #67	; 0x43
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e78a      	b.n	80082f0 <_printf_float+0xa8>
 80083da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083dc:	2a47      	cmp	r2, #71	; 0x47
 80083de:	d1b4      	bne.n	800834a <_printf_float+0x102>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1b2      	bne.n	800834a <_printf_float+0x102>
 80083e4:	3301      	adds	r3, #1
 80083e6:	e7af      	b.n	8008348 <_printf_float+0x100>
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	2b66      	cmp	r3, #102	; 0x66
 80083ec:	d11b      	bne.n	8008426 <_printf_float+0x1de>
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	dd0d      	ble.n	8008410 <_printf_float+0x1c8>
 80083f4:	6121      	str	r1, [r4, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <_printf_float+0x1b8>
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	07d2      	lsls	r2, r2, #31
 80083fe:	d502      	bpl.n	8008406 <_printf_float+0x1be>
 8008400:	3301      	adds	r3, #1
 8008402:	1859      	adds	r1, r3, r1
 8008404:	6121      	str	r1, [r4, #16]
 8008406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008408:	65a3      	str	r3, [r4, #88]	; 0x58
 800840a:	2300      	movs	r3, #0
 800840c:	930b      	str	r3, [sp, #44]	; 0x2c
 800840e:	e7d8      	b.n	80083c2 <_printf_float+0x17a>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <_printf_float+0x1d4>
 8008414:	2201      	movs	r2, #1
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	4211      	tst	r1, r2
 800841a:	d000      	beq.n	800841e <_printf_float+0x1d6>
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	6122      	str	r2, [r4, #16]
 8008420:	e7f1      	b.n	8008406 <_printf_float+0x1be>
 8008422:	2367      	movs	r3, #103	; 0x67
 8008424:	930a      	str	r3, [sp, #40]	; 0x28
 8008426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008428:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800842a:	4293      	cmp	r3, r2
 800842c:	db06      	blt.n	800843c <_printf_float+0x1f4>
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	6123      	str	r3, [r4, #16]
 8008432:	07d2      	lsls	r2, r2, #31
 8008434:	d5e7      	bpl.n	8008406 <_printf_float+0x1be>
 8008436:	3301      	adds	r3, #1
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	e7e4      	b.n	8008406 <_printf_float+0x1be>
 800843c:	2101      	movs	r1, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	dc01      	bgt.n	8008446 <_printf_float+0x1fe>
 8008442:	1849      	adds	r1, r1, r1
 8008444:	1ac9      	subs	r1, r1, r3
 8008446:	1852      	adds	r2, r2, r1
 8008448:	e7e9      	b.n	800841e <_printf_float+0x1d6>
 800844a:	6822      	ldr	r2, [r4, #0]
 800844c:	0553      	lsls	r3, r2, #21
 800844e:	d407      	bmi.n	8008460 <_printf_float+0x218>
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	002a      	movs	r2, r5
 8008454:	0038      	movs	r0, r7
 8008456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008458:	47b0      	blx	r6
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d128      	bne.n	80084b0 <_printf_float+0x268>
 800845e:	e751      	b.n	8008304 <_printf_float+0xbc>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	2b65      	cmp	r3, #101	; 0x65
 8008464:	d800      	bhi.n	8008468 <_printf_float+0x220>
 8008466:	e0e1      	b.n	800862c <_printf_float+0x3e4>
 8008468:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800846a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800846c:	2200      	movs	r2, #0
 800846e:	2300      	movs	r3, #0
 8008470:	f7f7 ffec 	bl	800044c <__aeabi_dcmpeq>
 8008474:	2800      	cmp	r0, #0
 8008476:	d031      	beq.n	80084dc <_printf_float+0x294>
 8008478:	2301      	movs	r3, #1
 800847a:	0038      	movs	r0, r7
 800847c:	4a34      	ldr	r2, [pc, #208]	; (8008550 <_printf_float+0x308>)
 800847e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008480:	47b0      	blx	r6
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d100      	bne.n	8008488 <_printf_float+0x240>
 8008486:	e73d      	b.n	8008304 <_printf_float+0xbc>
 8008488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800848c:	4293      	cmp	r3, r2
 800848e:	db02      	blt.n	8008496 <_printf_float+0x24e>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07db      	lsls	r3, r3, #31
 8008494:	d50c      	bpl.n	80084b0 <_printf_float+0x268>
 8008496:	0038      	movs	r0, r7
 8008498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800849a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800849c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800849e:	47b0      	blx	r6
 80084a0:	2500      	movs	r5, #0
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d100      	bne.n	80084a8 <_printf_float+0x260>
 80084a6:	e72d      	b.n	8008304 <_printf_float+0xbc>
 80084a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084aa:	3b01      	subs	r3, #1
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dc0a      	bgt.n	80084c6 <_printf_float+0x27e>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	079b      	lsls	r3, r3, #30
 80084b4:	d500      	bpl.n	80084b8 <_printf_float+0x270>
 80084b6:	e106      	b.n	80086c6 <_printf_float+0x47e>
 80084b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084ba:	68e0      	ldr	r0, [r4, #12]
 80084bc:	4298      	cmp	r0, r3
 80084be:	db00      	blt.n	80084c2 <_printf_float+0x27a>
 80084c0:	e722      	b.n	8008308 <_printf_float+0xc0>
 80084c2:	0018      	movs	r0, r3
 80084c4:	e720      	b.n	8008308 <_printf_float+0xc0>
 80084c6:	0022      	movs	r2, r4
 80084c8:	2301      	movs	r3, #1
 80084ca:	0038      	movs	r0, r7
 80084cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ce:	321a      	adds	r2, #26
 80084d0:	47b0      	blx	r6
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	d100      	bne.n	80084d8 <_printf_float+0x290>
 80084d6:	e715      	b.n	8008304 <_printf_float+0xbc>
 80084d8:	3501      	adds	r5, #1
 80084da:	e7e5      	b.n	80084a8 <_printf_float+0x260>
 80084dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dc38      	bgt.n	8008554 <_printf_float+0x30c>
 80084e2:	2301      	movs	r3, #1
 80084e4:	0038      	movs	r0, r7
 80084e6:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <_printf_float+0x308>)
 80084e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ea:	47b0      	blx	r6
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d100      	bne.n	80084f2 <_printf_float+0x2aa>
 80084f0:	e708      	b.n	8008304 <_printf_float+0xbc>
 80084f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084f6:	4313      	orrs	r3, r2
 80084f8:	d102      	bne.n	8008500 <_printf_float+0x2b8>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	07db      	lsls	r3, r3, #31
 80084fe:	d5d7      	bpl.n	80084b0 <_printf_float+0x268>
 8008500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008502:	0038      	movs	r0, r7
 8008504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008506:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008508:	47b0      	blx	r6
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	d100      	bne.n	8008510 <_printf_float+0x2c8>
 800850e:	e6f9      	b.n	8008304 <_printf_float+0xbc>
 8008510:	2300      	movs	r3, #0
 8008512:	930a      	str	r3, [sp, #40]	; 0x28
 8008514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008518:	425b      	negs	r3, r3
 800851a:	4293      	cmp	r3, r2
 800851c:	dc01      	bgt.n	8008522 <_printf_float+0x2da>
 800851e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008520:	e797      	b.n	8008452 <_printf_float+0x20a>
 8008522:	0022      	movs	r2, r4
 8008524:	2301      	movs	r3, #1
 8008526:	0038      	movs	r0, r7
 8008528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800852a:	321a      	adds	r2, #26
 800852c:	47b0      	blx	r6
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	d100      	bne.n	8008534 <_printf_float+0x2ec>
 8008532:	e6e7      	b.n	8008304 <_printf_float+0xbc>
 8008534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008536:	3301      	adds	r3, #1
 8008538:	e7eb      	b.n	8008512 <_printf_float+0x2ca>
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	7fefffff 	.word	0x7fefffff
 8008540:	0800cd08 	.word	0x0800cd08
 8008544:	0800cd0c 	.word	0x0800cd0c
 8008548:	0800cd10 	.word	0x0800cd10
 800854c:	0800cd14 	.word	0x0800cd14
 8008550:	0800cd18 	.word	0x0800cd18
 8008554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008558:	920a      	str	r2, [sp, #40]	; 0x28
 800855a:	429a      	cmp	r2, r3
 800855c:	dd00      	ble.n	8008560 <_printf_float+0x318>
 800855e:	930a      	str	r3, [sp, #40]	; 0x28
 8008560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	dc3c      	bgt.n	80085e0 <_printf_float+0x398>
 8008566:	2300      	movs	r3, #0
 8008568:	930d      	str	r3, [sp, #52]	; 0x34
 800856a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856c:	43db      	mvns	r3, r3
 800856e:	17db      	asrs	r3, r3, #31
 8008570:	930f      	str	r3, [sp, #60]	; 0x3c
 8008572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008576:	930b      	str	r3, [sp, #44]	; 0x2c
 8008578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857a:	4013      	ands	r3, r2
 800857c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008582:	4293      	cmp	r3, r2
 8008584:	dc34      	bgt.n	80085f0 <_printf_float+0x3a8>
 8008586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800858a:	4293      	cmp	r3, r2
 800858c:	db3d      	blt.n	800860a <_printf_float+0x3c2>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	07db      	lsls	r3, r3, #31
 8008592:	d43a      	bmi.n	800860a <_printf_float+0x3c2>
 8008594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	9911      	ldr	r1, [sp, #68]	; 0x44
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	1a52      	subs	r2, r2, r1
 800859e:	920a      	str	r2, [sp, #40]	; 0x28
 80085a0:	429a      	cmp	r2, r3
 80085a2:	dd00      	ble.n	80085a6 <_printf_float+0x35e>
 80085a4:	930a      	str	r3, [sp, #40]	; 0x28
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc36      	bgt.n	800861a <_printf_float+0x3d2>
 80085ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ae:	2500      	movs	r5, #0
 80085b0:	43db      	mvns	r3, r3
 80085b2:	17db      	asrs	r3, r3, #31
 80085b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c0:	400a      	ands	r2, r1
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc00      	bgt.n	80085ca <_printf_float+0x382>
 80085c8:	e772      	b.n	80084b0 <_printf_float+0x268>
 80085ca:	0022      	movs	r2, r4
 80085cc:	2301      	movs	r3, #1
 80085ce:	0038      	movs	r0, r7
 80085d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085d2:	321a      	adds	r2, #26
 80085d4:	47b0      	blx	r6
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d100      	bne.n	80085dc <_printf_float+0x394>
 80085da:	e693      	b.n	8008304 <_printf_float+0xbc>
 80085dc:	3501      	adds	r5, #1
 80085de:	e7ea      	b.n	80085b6 <_printf_float+0x36e>
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	002a      	movs	r2, r5
 80085e4:	0038      	movs	r0, r7
 80085e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085e8:	47b0      	blx	r6
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d1bb      	bne.n	8008566 <_printf_float+0x31e>
 80085ee:	e689      	b.n	8008304 <_printf_float+0xbc>
 80085f0:	0022      	movs	r2, r4
 80085f2:	2301      	movs	r3, #1
 80085f4:	0038      	movs	r0, r7
 80085f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f8:	321a      	adds	r2, #26
 80085fa:	47b0      	blx	r6
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d100      	bne.n	8008602 <_printf_float+0x3ba>
 8008600:	e680      	b.n	8008304 <_printf_float+0xbc>
 8008602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008604:	3301      	adds	r3, #1
 8008606:	930d      	str	r3, [sp, #52]	; 0x34
 8008608:	e7b3      	b.n	8008572 <_printf_float+0x32a>
 800860a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800860c:	0038      	movs	r0, r7
 800860e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008612:	47b0      	blx	r6
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d1bd      	bne.n	8008594 <_printf_float+0x34c>
 8008618:	e674      	b.n	8008304 <_printf_float+0xbc>
 800861a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861c:	0038      	movs	r0, r7
 800861e:	18ea      	adds	r2, r5, r3
 8008620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008624:	47b0      	blx	r6
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d1c0      	bne.n	80085ac <_printf_float+0x364>
 800862a:	e66b      	b.n	8008304 <_printf_float+0xbc>
 800862c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800862e:	2b01      	cmp	r3, #1
 8008630:	dc02      	bgt.n	8008638 <_printf_float+0x3f0>
 8008632:	2301      	movs	r3, #1
 8008634:	421a      	tst	r2, r3
 8008636:	d034      	beq.n	80086a2 <_printf_float+0x45a>
 8008638:	2301      	movs	r3, #1
 800863a:	002a      	movs	r2, r5
 800863c:	0038      	movs	r0, r7
 800863e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d100      	bne.n	8008648 <_printf_float+0x400>
 8008646:	e65d      	b.n	8008304 <_printf_float+0xbc>
 8008648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864a:	0038      	movs	r0, r7
 800864c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800864e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008650:	47b0      	blx	r6
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d100      	bne.n	8008658 <_printf_float+0x410>
 8008656:	e655      	b.n	8008304 <_printf_float+0xbc>
 8008658:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800865a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800865c:	2200      	movs	r2, #0
 800865e:	2300      	movs	r3, #0
 8008660:	f7f7 fef4 	bl	800044c <__aeabi_dcmpeq>
 8008664:	2800      	cmp	r0, #0
 8008666:	d11a      	bne.n	800869e <_printf_float+0x456>
 8008668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800866a:	1c6a      	adds	r2, r5, #1
 800866c:	3b01      	subs	r3, #1
 800866e:	0038      	movs	r0, r7
 8008670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008672:	47b0      	blx	r6
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d10e      	bne.n	8008696 <_printf_float+0x44e>
 8008678:	e644      	b.n	8008304 <_printf_float+0xbc>
 800867a:	0022      	movs	r2, r4
 800867c:	2301      	movs	r3, #1
 800867e:	0038      	movs	r0, r7
 8008680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008682:	321a      	adds	r2, #26
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d100      	bne.n	800868c <_printf_float+0x444>
 800868a:	e63b      	b.n	8008304 <_printf_float+0xbc>
 800868c:	3501      	adds	r5, #1
 800868e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008690:	3b01      	subs	r3, #1
 8008692:	42ab      	cmp	r3, r5
 8008694:	dcf1      	bgt.n	800867a <_printf_float+0x432>
 8008696:	0022      	movs	r2, r4
 8008698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869a:	3250      	adds	r2, #80	; 0x50
 800869c:	e6da      	b.n	8008454 <_printf_float+0x20c>
 800869e:	2500      	movs	r5, #0
 80086a0:	e7f5      	b.n	800868e <_printf_float+0x446>
 80086a2:	002a      	movs	r2, r5
 80086a4:	e7e3      	b.n	800866e <_printf_float+0x426>
 80086a6:	0022      	movs	r2, r4
 80086a8:	2301      	movs	r3, #1
 80086aa:	0038      	movs	r0, r7
 80086ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ae:	3219      	adds	r2, #25
 80086b0:	47b0      	blx	r6
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d100      	bne.n	80086b8 <_printf_float+0x470>
 80086b6:	e625      	b.n	8008304 <_printf_float+0xbc>
 80086b8:	3501      	adds	r5, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf0      	bgt.n	80086a6 <_printf_float+0x45e>
 80086c4:	e6f8      	b.n	80084b8 <_printf_float+0x270>
 80086c6:	2500      	movs	r5, #0
 80086c8:	e7f7      	b.n	80086ba <_printf_float+0x472>
 80086ca:	46c0      	nop			; (mov r8, r8)

080086cc <_printf_common>:
 80086cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ce:	0015      	movs	r5, r2
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	688a      	ldr	r2, [r1, #8]
 80086d4:	690b      	ldr	r3, [r1, #16]
 80086d6:	000c      	movs	r4, r1
 80086d8:	9000      	str	r0, [sp, #0]
 80086da:	4293      	cmp	r3, r2
 80086dc:	da00      	bge.n	80086e0 <_printf_common+0x14>
 80086de:	0013      	movs	r3, r2
 80086e0:	0022      	movs	r2, r4
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	3243      	adds	r2, #67	; 0x43
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d001      	beq.n	80086f0 <_printf_common+0x24>
 80086ec:	3301      	adds	r3, #1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	069b      	lsls	r3, r3, #26
 80086f4:	d502      	bpl.n	80086fc <_printf_common+0x30>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	3302      	adds	r3, #2
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	2306      	movs	r3, #6
 8008700:	0017      	movs	r7, r2
 8008702:	401f      	ands	r7, r3
 8008704:	421a      	tst	r2, r3
 8008706:	d027      	beq.n	8008758 <_printf_common+0x8c>
 8008708:	0023      	movs	r3, r4
 800870a:	3343      	adds	r3, #67	; 0x43
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	1e5a      	subs	r2, r3, #1
 8008710:	4193      	sbcs	r3, r2
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	0692      	lsls	r2, r2, #26
 8008716:	d430      	bmi.n	800877a <_printf_common+0xae>
 8008718:	0022      	movs	r2, r4
 800871a:	9901      	ldr	r1, [sp, #4]
 800871c:	9800      	ldr	r0, [sp, #0]
 800871e:	9e08      	ldr	r6, [sp, #32]
 8008720:	3243      	adds	r2, #67	; 0x43
 8008722:	47b0      	blx	r6
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d025      	beq.n	8008774 <_printf_common+0xa8>
 8008728:	2306      	movs	r3, #6
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	682a      	ldr	r2, [r5, #0]
 800872e:	68e1      	ldr	r1, [r4, #12]
 8008730:	2500      	movs	r5, #0
 8008732:	4003      	ands	r3, r0
 8008734:	2b04      	cmp	r3, #4
 8008736:	d103      	bne.n	8008740 <_printf_common+0x74>
 8008738:	1a8d      	subs	r5, r1, r2
 800873a:	43eb      	mvns	r3, r5
 800873c:	17db      	asrs	r3, r3, #31
 800873e:	401d      	ands	r5, r3
 8008740:	68a3      	ldr	r3, [r4, #8]
 8008742:	6922      	ldr	r2, [r4, #16]
 8008744:	4293      	cmp	r3, r2
 8008746:	dd01      	ble.n	800874c <_printf_common+0x80>
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	18ed      	adds	r5, r5, r3
 800874c:	2700      	movs	r7, #0
 800874e:	42bd      	cmp	r5, r7
 8008750:	d120      	bne.n	8008794 <_printf_common+0xc8>
 8008752:	2000      	movs	r0, #0
 8008754:	e010      	b.n	8008778 <_printf_common+0xac>
 8008756:	3701      	adds	r7, #1
 8008758:	68e3      	ldr	r3, [r4, #12]
 800875a:	682a      	ldr	r2, [r5, #0]
 800875c:	1a9b      	subs	r3, r3, r2
 800875e:	42bb      	cmp	r3, r7
 8008760:	ddd2      	ble.n	8008708 <_printf_common+0x3c>
 8008762:	0022      	movs	r2, r4
 8008764:	2301      	movs	r3, #1
 8008766:	9901      	ldr	r1, [sp, #4]
 8008768:	9800      	ldr	r0, [sp, #0]
 800876a:	9e08      	ldr	r6, [sp, #32]
 800876c:	3219      	adds	r2, #25
 800876e:	47b0      	blx	r6
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d1f0      	bne.n	8008756 <_printf_common+0x8a>
 8008774:	2001      	movs	r0, #1
 8008776:	4240      	negs	r0, r0
 8008778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800877a:	2030      	movs	r0, #48	; 0x30
 800877c:	18e1      	adds	r1, r4, r3
 800877e:	3143      	adds	r1, #67	; 0x43
 8008780:	7008      	strb	r0, [r1, #0]
 8008782:	0021      	movs	r1, r4
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	3145      	adds	r1, #69	; 0x45
 8008788:	7809      	ldrb	r1, [r1, #0]
 800878a:	18a2      	adds	r2, r4, r2
 800878c:	3243      	adds	r2, #67	; 0x43
 800878e:	3302      	adds	r3, #2
 8008790:	7011      	strb	r1, [r2, #0]
 8008792:	e7c1      	b.n	8008718 <_printf_common+0x4c>
 8008794:	0022      	movs	r2, r4
 8008796:	2301      	movs	r3, #1
 8008798:	9901      	ldr	r1, [sp, #4]
 800879a:	9800      	ldr	r0, [sp, #0]
 800879c:	9e08      	ldr	r6, [sp, #32]
 800879e:	321a      	adds	r2, #26
 80087a0:	47b0      	blx	r6
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d0e6      	beq.n	8008774 <_printf_common+0xa8>
 80087a6:	3701      	adds	r7, #1
 80087a8:	e7d1      	b.n	800874e <_printf_common+0x82>
	...

080087ac <_printf_i>:
 80087ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ae:	b08b      	sub	sp, #44	; 0x2c
 80087b0:	9206      	str	r2, [sp, #24]
 80087b2:	000a      	movs	r2, r1
 80087b4:	3243      	adds	r2, #67	; 0x43
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	9005      	str	r0, [sp, #20]
 80087ba:	9204      	str	r2, [sp, #16]
 80087bc:	7e0a      	ldrb	r2, [r1, #24]
 80087be:	000c      	movs	r4, r1
 80087c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087c2:	2a78      	cmp	r2, #120	; 0x78
 80087c4:	d807      	bhi.n	80087d6 <_printf_i+0x2a>
 80087c6:	2a62      	cmp	r2, #98	; 0x62
 80087c8:	d809      	bhi.n	80087de <_printf_i+0x32>
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d100      	bne.n	80087d0 <_printf_i+0x24>
 80087ce:	e0c1      	b.n	8008954 <_printf_i+0x1a8>
 80087d0:	2a58      	cmp	r2, #88	; 0x58
 80087d2:	d100      	bne.n	80087d6 <_printf_i+0x2a>
 80087d4:	e08c      	b.n	80088f0 <_printf_i+0x144>
 80087d6:	0026      	movs	r6, r4
 80087d8:	3642      	adds	r6, #66	; 0x42
 80087da:	7032      	strb	r2, [r6, #0]
 80087dc:	e022      	b.n	8008824 <_printf_i+0x78>
 80087de:	0010      	movs	r0, r2
 80087e0:	3863      	subs	r0, #99	; 0x63
 80087e2:	2815      	cmp	r0, #21
 80087e4:	d8f7      	bhi.n	80087d6 <_printf_i+0x2a>
 80087e6:	f7f7 fca1 	bl	800012c <__gnu_thumb1_case_shi>
 80087ea:	0016      	.short	0x0016
 80087ec:	fff6001f 	.word	0xfff6001f
 80087f0:	fff6fff6 	.word	0xfff6fff6
 80087f4:	001ffff6 	.word	0x001ffff6
 80087f8:	fff6fff6 	.word	0xfff6fff6
 80087fc:	fff6fff6 	.word	0xfff6fff6
 8008800:	003600a8 	.word	0x003600a8
 8008804:	fff6009a 	.word	0xfff6009a
 8008808:	00b9fff6 	.word	0x00b9fff6
 800880c:	0036fff6 	.word	0x0036fff6
 8008810:	fff6fff6 	.word	0xfff6fff6
 8008814:	009e      	.short	0x009e
 8008816:	0026      	movs	r6, r4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	3642      	adds	r6, #66	; 0x42
 800881c:	1d11      	adds	r1, r2, #4
 800881e:	6019      	str	r1, [r3, #0]
 8008820:	6813      	ldr	r3, [r2, #0]
 8008822:	7033      	strb	r3, [r6, #0]
 8008824:	2301      	movs	r3, #1
 8008826:	e0a7      	b.n	8008978 <_printf_i+0x1cc>
 8008828:	6808      	ldr	r0, [r1, #0]
 800882a:	6819      	ldr	r1, [r3, #0]
 800882c:	1d0a      	adds	r2, r1, #4
 800882e:	0605      	lsls	r5, r0, #24
 8008830:	d50b      	bpl.n	800884a <_printf_i+0x9e>
 8008832:	680d      	ldr	r5, [r1, #0]
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	2d00      	cmp	r5, #0
 8008838:	da03      	bge.n	8008842 <_printf_i+0x96>
 800883a:	232d      	movs	r3, #45	; 0x2d
 800883c:	9a04      	ldr	r2, [sp, #16]
 800883e:	426d      	negs	r5, r5
 8008840:	7013      	strb	r3, [r2, #0]
 8008842:	4b61      	ldr	r3, [pc, #388]	; (80089c8 <_printf_i+0x21c>)
 8008844:	270a      	movs	r7, #10
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	e01b      	b.n	8008882 <_printf_i+0xd6>
 800884a:	680d      	ldr	r5, [r1, #0]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	0641      	lsls	r1, r0, #25
 8008850:	d5f1      	bpl.n	8008836 <_printf_i+0x8a>
 8008852:	b22d      	sxth	r5, r5
 8008854:	e7ef      	b.n	8008836 <_printf_i+0x8a>
 8008856:	680d      	ldr	r5, [r1, #0]
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	1d08      	adds	r0, r1, #4
 800885c:	6018      	str	r0, [r3, #0]
 800885e:	062e      	lsls	r6, r5, #24
 8008860:	d501      	bpl.n	8008866 <_printf_i+0xba>
 8008862:	680d      	ldr	r5, [r1, #0]
 8008864:	e003      	b.n	800886e <_printf_i+0xc2>
 8008866:	066d      	lsls	r5, r5, #25
 8008868:	d5fb      	bpl.n	8008862 <_printf_i+0xb6>
 800886a:	680d      	ldr	r5, [r1, #0]
 800886c:	b2ad      	uxth	r5, r5
 800886e:	4b56      	ldr	r3, [pc, #344]	; (80089c8 <_printf_i+0x21c>)
 8008870:	2708      	movs	r7, #8
 8008872:	9303      	str	r3, [sp, #12]
 8008874:	2a6f      	cmp	r2, #111	; 0x6f
 8008876:	d000      	beq.n	800887a <_printf_i+0xce>
 8008878:	3702      	adds	r7, #2
 800887a:	0023      	movs	r3, r4
 800887c:	2200      	movs	r2, #0
 800887e:	3343      	adds	r3, #67	; 0x43
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	6863      	ldr	r3, [r4, #4]
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	db03      	blt.n	8008892 <_printf_i+0xe6>
 800888a:	2204      	movs	r2, #4
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	4391      	bics	r1, r2
 8008890:	6021      	str	r1, [r4, #0]
 8008892:	2d00      	cmp	r5, #0
 8008894:	d102      	bne.n	800889c <_printf_i+0xf0>
 8008896:	9e04      	ldr	r6, [sp, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <_printf_i+0x10a>
 800889c:	9e04      	ldr	r6, [sp, #16]
 800889e:	0028      	movs	r0, r5
 80088a0:	0039      	movs	r1, r7
 80088a2:	f7f7 fcd3 	bl	800024c <__aeabi_uidivmod>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	3e01      	subs	r6, #1
 80088aa:	5c5b      	ldrb	r3, [r3, r1]
 80088ac:	7033      	strb	r3, [r6, #0]
 80088ae:	002b      	movs	r3, r5
 80088b0:	0005      	movs	r5, r0
 80088b2:	429f      	cmp	r7, r3
 80088b4:	d9f3      	bls.n	800889e <_printf_i+0xf2>
 80088b6:	2f08      	cmp	r7, #8
 80088b8:	d109      	bne.n	80088ce <_printf_i+0x122>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	07db      	lsls	r3, r3, #31
 80088be:	d506      	bpl.n	80088ce <_printf_i+0x122>
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	6922      	ldr	r2, [r4, #16]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	dc02      	bgt.n	80088ce <_printf_i+0x122>
 80088c8:	2330      	movs	r3, #48	; 0x30
 80088ca:	3e01      	subs	r6, #1
 80088cc:	7033      	strb	r3, [r6, #0]
 80088ce:	9b04      	ldr	r3, [sp, #16]
 80088d0:	1b9b      	subs	r3, r3, r6
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	0021      	movs	r1, r4
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	9805      	ldr	r0, [sp, #20]
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	aa09      	add	r2, sp, #36	; 0x24
 80088e0:	f7ff fef4 	bl	80086cc <_printf_common>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d14c      	bne.n	8008982 <_printf_i+0x1d6>
 80088e8:	2001      	movs	r0, #1
 80088ea:	4240      	negs	r0, r0
 80088ec:	b00b      	add	sp, #44	; 0x2c
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f0:	3145      	adds	r1, #69	; 0x45
 80088f2:	700a      	strb	r2, [r1, #0]
 80088f4:	4a34      	ldr	r2, [pc, #208]	; (80089c8 <_printf_i+0x21c>)
 80088f6:	9203      	str	r2, [sp, #12]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	6821      	ldr	r1, [r4, #0]
 80088fc:	ca20      	ldmia	r2!, {r5}
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	0608      	lsls	r0, r1, #24
 8008902:	d516      	bpl.n	8008932 <_printf_i+0x186>
 8008904:	07cb      	lsls	r3, r1, #31
 8008906:	d502      	bpl.n	800890e <_printf_i+0x162>
 8008908:	2320      	movs	r3, #32
 800890a:	4319      	orrs	r1, r3
 800890c:	6021      	str	r1, [r4, #0]
 800890e:	2710      	movs	r7, #16
 8008910:	2d00      	cmp	r5, #0
 8008912:	d1b2      	bne.n	800887a <_printf_i+0xce>
 8008914:	2320      	movs	r3, #32
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	439a      	bics	r2, r3
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	e7ad      	b.n	800887a <_printf_i+0xce>
 800891e:	2220      	movs	r2, #32
 8008920:	6809      	ldr	r1, [r1, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	6022      	str	r2, [r4, #0]
 8008926:	0022      	movs	r2, r4
 8008928:	2178      	movs	r1, #120	; 0x78
 800892a:	3245      	adds	r2, #69	; 0x45
 800892c:	7011      	strb	r1, [r2, #0]
 800892e:	4a27      	ldr	r2, [pc, #156]	; (80089cc <_printf_i+0x220>)
 8008930:	e7e1      	b.n	80088f6 <_printf_i+0x14a>
 8008932:	0648      	lsls	r0, r1, #25
 8008934:	d5e6      	bpl.n	8008904 <_printf_i+0x158>
 8008936:	b2ad      	uxth	r5, r5
 8008938:	e7e4      	b.n	8008904 <_printf_i+0x158>
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	680d      	ldr	r5, [r1, #0]
 800893e:	1d10      	adds	r0, r2, #4
 8008940:	6949      	ldr	r1, [r1, #20]
 8008942:	6018      	str	r0, [r3, #0]
 8008944:	6813      	ldr	r3, [r2, #0]
 8008946:	062e      	lsls	r6, r5, #24
 8008948:	d501      	bpl.n	800894e <_printf_i+0x1a2>
 800894a:	6019      	str	r1, [r3, #0]
 800894c:	e002      	b.n	8008954 <_printf_i+0x1a8>
 800894e:	066d      	lsls	r5, r5, #25
 8008950:	d5fb      	bpl.n	800894a <_printf_i+0x19e>
 8008952:	8019      	strh	r1, [r3, #0]
 8008954:	2300      	movs	r3, #0
 8008956:	9e04      	ldr	r6, [sp, #16]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	e7bb      	b.n	80088d4 <_printf_i+0x128>
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	1d11      	adds	r1, r2, #4
 8008960:	6019      	str	r1, [r3, #0]
 8008962:	6816      	ldr	r6, [r2, #0]
 8008964:	2100      	movs	r1, #0
 8008966:	0030      	movs	r0, r6
 8008968:	6862      	ldr	r2, [r4, #4]
 800896a:	f002 fb5d 	bl	800b028 <memchr>
 800896e:	2800      	cmp	r0, #0
 8008970:	d001      	beq.n	8008976 <_printf_i+0x1ca>
 8008972:	1b80      	subs	r0, r0, r6
 8008974:	6060      	str	r0, [r4, #4]
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	2300      	movs	r3, #0
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	7013      	strb	r3, [r2, #0]
 8008980:	e7a8      	b.n	80088d4 <_printf_i+0x128>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	0032      	movs	r2, r6
 8008986:	9906      	ldr	r1, [sp, #24]
 8008988:	9805      	ldr	r0, [sp, #20]
 800898a:	9d07      	ldr	r5, [sp, #28]
 800898c:	47a8      	blx	r5
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d0aa      	beq.n	80088e8 <_printf_i+0x13c>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	079b      	lsls	r3, r3, #30
 8008996:	d415      	bmi.n	80089c4 <_printf_i+0x218>
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	68e0      	ldr	r0, [r4, #12]
 800899c:	4298      	cmp	r0, r3
 800899e:	daa5      	bge.n	80088ec <_printf_i+0x140>
 80089a0:	0018      	movs	r0, r3
 80089a2:	e7a3      	b.n	80088ec <_printf_i+0x140>
 80089a4:	0022      	movs	r2, r4
 80089a6:	2301      	movs	r3, #1
 80089a8:	9906      	ldr	r1, [sp, #24]
 80089aa:	9805      	ldr	r0, [sp, #20]
 80089ac:	9e07      	ldr	r6, [sp, #28]
 80089ae:	3219      	adds	r2, #25
 80089b0:	47b0      	blx	r6
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d098      	beq.n	80088e8 <_printf_i+0x13c>
 80089b6:	3501      	adds	r5, #1
 80089b8:	68e3      	ldr	r3, [r4, #12]
 80089ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	42ab      	cmp	r3, r5
 80089c0:	dcf0      	bgt.n	80089a4 <_printf_i+0x1f8>
 80089c2:	e7e9      	b.n	8008998 <_printf_i+0x1ec>
 80089c4:	2500      	movs	r5, #0
 80089c6:	e7f7      	b.n	80089b8 <_printf_i+0x20c>
 80089c8:	0800cd1a 	.word	0x0800cd1a
 80089cc:	0800cd2b 	.word	0x0800cd2b

080089d0 <_scanf_float>:
 80089d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d2:	b08b      	sub	sp, #44	; 0x2c
 80089d4:	0015      	movs	r5, r2
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	22ae      	movs	r2, #174	; 0xae
 80089da:	2000      	movs	r0, #0
 80089dc:	9306      	str	r3, [sp, #24]
 80089de:	688b      	ldr	r3, [r1, #8]
 80089e0:	000e      	movs	r6, r1
 80089e2:	1e59      	subs	r1, r3, #1
 80089e4:	0052      	lsls	r2, r2, #1
 80089e6:	9005      	str	r0, [sp, #20]
 80089e8:	4291      	cmp	r1, r2
 80089ea:	d905      	bls.n	80089f8 <_scanf_float+0x28>
 80089ec:	3b5e      	subs	r3, #94	; 0x5e
 80089ee:	3bff      	subs	r3, #255	; 0xff
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	235e      	movs	r3, #94	; 0x5e
 80089f4:	33ff      	adds	r3, #255	; 0xff
 80089f6:	60b3      	str	r3, [r6, #8]
 80089f8:	23f0      	movs	r3, #240	; 0xf0
 80089fa:	6832      	ldr	r2, [r6, #0]
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	6033      	str	r3, [r6, #0]
 8008a02:	0033      	movs	r3, r6
 8008a04:	2400      	movs	r4, #0
 8008a06:	331c      	adds	r3, #28
 8008a08:	001f      	movs	r7, r3
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	9402      	str	r4, [sp, #8]
 8008a0e:	9408      	str	r4, [sp, #32]
 8008a10:	9407      	str	r4, [sp, #28]
 8008a12:	9400      	str	r4, [sp, #0]
 8008a14:	9404      	str	r4, [sp, #16]
 8008a16:	68b2      	ldr	r2, [r6, #8]
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	d00a      	beq.n	8008a32 <_scanf_float+0x62>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b4e      	cmp	r3, #78	; 0x4e
 8008a22:	d844      	bhi.n	8008aae <_scanf_float+0xde>
 8008a24:	0018      	movs	r0, r3
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d82c      	bhi.n	8008a84 <_scanf_float+0xb4>
 8008a2a:	382b      	subs	r0, #43	; 0x2b
 8008a2c:	b2c1      	uxtb	r1, r0
 8008a2e:	290e      	cmp	r1, #14
 8008a30:	d92a      	bls.n	8008a88 <_scanf_float+0xb8>
 8008a32:	9b00      	ldr	r3, [sp, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <_scanf_float+0x70>
 8008a38:	6832      	ldr	r2, [r6, #0]
 8008a3a:	4ba4      	ldr	r3, [pc, #656]	; (8008ccc <_scanf_float+0x2fc>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d900      	bls.n	8008a4a <_scanf_float+0x7a>
 8008a48:	e0f9      	b.n	8008c3e <_scanf_float+0x26e>
 8008a4a:	24be      	movs	r4, #190	; 0xbe
 8008a4c:	0064      	lsls	r4, r4, #1
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	429f      	cmp	r7, r3
 8008a52:	d900      	bls.n	8008a56 <_scanf_float+0x86>
 8008a54:	e0e9      	b.n	8008c2a <_scanf_float+0x25a>
 8008a56:	2301      	movs	r3, #1
 8008a58:	9302      	str	r3, [sp, #8]
 8008a5a:	e185      	b.n	8008d68 <_scanf_float+0x398>
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	3861      	subs	r0, #97	; 0x61
 8008a60:	280d      	cmp	r0, #13
 8008a62:	d8e6      	bhi.n	8008a32 <_scanf_float+0x62>
 8008a64:	f7f7 fb62 	bl	800012c <__gnu_thumb1_case_shi>
 8008a68:	ffe50083 	.word	0xffe50083
 8008a6c:	ffe5ffe5 	.word	0xffe5ffe5
 8008a70:	00a200b6 	.word	0x00a200b6
 8008a74:	ffe5ffe5 	.word	0xffe5ffe5
 8008a78:	ffe50089 	.word	0xffe50089
 8008a7c:	ffe5ffe5 	.word	0xffe5ffe5
 8008a80:	0065ffe5 	.word	0x0065ffe5
 8008a84:	3841      	subs	r0, #65	; 0x41
 8008a86:	e7eb      	b.n	8008a60 <_scanf_float+0x90>
 8008a88:	280e      	cmp	r0, #14
 8008a8a:	d8d2      	bhi.n	8008a32 <_scanf_float+0x62>
 8008a8c:	f7f7 fb4e 	bl	800012c <__gnu_thumb1_case_shi>
 8008a90:	ffd1004b 	.word	0xffd1004b
 8008a94:	0098004b 	.word	0x0098004b
 8008a98:	0020ffd1 	.word	0x0020ffd1
 8008a9c:	00400040 	.word	0x00400040
 8008aa0:	00400040 	.word	0x00400040
 8008aa4:	00400040 	.word	0x00400040
 8008aa8:	00400040 	.word	0x00400040
 8008aac:	0040      	.short	0x0040
 8008aae:	2b6e      	cmp	r3, #110	; 0x6e
 8008ab0:	d809      	bhi.n	8008ac6 <_scanf_float+0xf6>
 8008ab2:	2b60      	cmp	r3, #96	; 0x60
 8008ab4:	d8d2      	bhi.n	8008a5c <_scanf_float+0x8c>
 8008ab6:	2b54      	cmp	r3, #84	; 0x54
 8008ab8:	d07d      	beq.n	8008bb6 <_scanf_float+0x1e6>
 8008aba:	2b59      	cmp	r3, #89	; 0x59
 8008abc:	d1b9      	bne.n	8008a32 <_scanf_float+0x62>
 8008abe:	2c07      	cmp	r4, #7
 8008ac0:	d1b7      	bne.n	8008a32 <_scanf_float+0x62>
 8008ac2:	2408      	movs	r4, #8
 8008ac4:	e02c      	b.n	8008b20 <_scanf_float+0x150>
 8008ac6:	2b74      	cmp	r3, #116	; 0x74
 8008ac8:	d075      	beq.n	8008bb6 <_scanf_float+0x1e6>
 8008aca:	2b79      	cmp	r3, #121	; 0x79
 8008acc:	d0f7      	beq.n	8008abe <_scanf_float+0xee>
 8008ace:	e7b0      	b.n	8008a32 <_scanf_float+0x62>
 8008ad0:	6831      	ldr	r1, [r6, #0]
 8008ad2:	05c8      	lsls	r0, r1, #23
 8008ad4:	d51c      	bpl.n	8008b10 <_scanf_float+0x140>
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	4399      	bics	r1, r3
 8008ada:	9b00      	ldr	r3, [sp, #0]
 8008adc:	6031      	str	r1, [r6, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	9b05      	ldr	r3, [sp, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <_scanf_float+0x120>
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	3201      	adds	r2, #1
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	60b2      	str	r2, [r6, #8]
 8008af0:	68b3      	ldr	r3, [r6, #8]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	60b3      	str	r3, [r6, #8]
 8008af6:	6933      	ldr	r3, [r6, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	6133      	str	r3, [r6, #16]
 8008afc:	686b      	ldr	r3, [r5, #4]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	606b      	str	r3, [r5, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dc00      	bgt.n	8008b08 <_scanf_float+0x138>
 8008b06:	e086      	b.n	8008c16 <_scanf_float+0x246>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	e782      	b.n	8008a16 <_scanf_float+0x46>
 8008b10:	9a02      	ldr	r2, [sp, #8]
 8008b12:	1912      	adds	r2, r2, r4
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	d18c      	bne.n	8008a32 <_scanf_float+0x62>
 8008b18:	4a6d      	ldr	r2, [pc, #436]	; (8008cd0 <_scanf_float+0x300>)
 8008b1a:	6831      	ldr	r1, [r6, #0]
 8008b1c:	400a      	ands	r2, r1
 8008b1e:	6032      	str	r2, [r6, #0]
 8008b20:	703b      	strb	r3, [r7, #0]
 8008b22:	3701      	adds	r7, #1
 8008b24:	e7e4      	b.n	8008af0 <_scanf_float+0x120>
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	6832      	ldr	r2, [r6, #0]
 8008b2a:	420a      	tst	r2, r1
 8008b2c:	d081      	beq.n	8008a32 <_scanf_float+0x62>
 8008b2e:	438a      	bics	r2, r1
 8008b30:	e7f5      	b.n	8008b1e <_scanf_float+0x14e>
 8008b32:	9a02      	ldr	r2, [sp, #8]
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	d10f      	bne.n	8008b58 <_scanf_float+0x188>
 8008b38:	9a00      	ldr	r2, [sp, #0]
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	d10f      	bne.n	8008b5e <_scanf_float+0x18e>
 8008b3e:	6832      	ldr	r2, [r6, #0]
 8008b40:	21e0      	movs	r1, #224	; 0xe0
 8008b42:	0010      	movs	r0, r2
 8008b44:	00c9      	lsls	r1, r1, #3
 8008b46:	4008      	ands	r0, r1
 8008b48:	4288      	cmp	r0, r1
 8008b4a:	d108      	bne.n	8008b5e <_scanf_float+0x18e>
 8008b4c:	4961      	ldr	r1, [pc, #388]	; (8008cd4 <_scanf_float+0x304>)
 8008b4e:	400a      	ands	r2, r1
 8008b50:	6032      	str	r2, [r6, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	9202      	str	r2, [sp, #8]
 8008b56:	e7e3      	b.n	8008b20 <_scanf_float+0x150>
 8008b58:	9a02      	ldr	r2, [sp, #8]
 8008b5a:	2a02      	cmp	r2, #2
 8008b5c:	d059      	beq.n	8008c12 <_scanf_float+0x242>
 8008b5e:	2c01      	cmp	r4, #1
 8008b60:	d002      	beq.n	8008b68 <_scanf_float+0x198>
 8008b62:	2c04      	cmp	r4, #4
 8008b64:	d000      	beq.n	8008b68 <_scanf_float+0x198>
 8008b66:	e764      	b.n	8008a32 <_scanf_float+0x62>
 8008b68:	3401      	adds	r4, #1
 8008b6a:	b2e4      	uxtb	r4, r4
 8008b6c:	e7d8      	b.n	8008b20 <_scanf_float+0x150>
 8008b6e:	9a02      	ldr	r2, [sp, #8]
 8008b70:	2a01      	cmp	r2, #1
 8008b72:	d000      	beq.n	8008b76 <_scanf_float+0x1a6>
 8008b74:	e75d      	b.n	8008a32 <_scanf_float+0x62>
 8008b76:	2202      	movs	r2, #2
 8008b78:	e7ec      	b.n	8008b54 <_scanf_float+0x184>
 8008b7a:	2c00      	cmp	r4, #0
 8008b7c:	d110      	bne.n	8008ba0 <_scanf_float+0x1d0>
 8008b7e:	9a00      	ldr	r2, [sp, #0]
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	d000      	beq.n	8008b86 <_scanf_float+0x1b6>
 8008b84:	e758      	b.n	8008a38 <_scanf_float+0x68>
 8008b86:	6832      	ldr	r2, [r6, #0]
 8008b88:	21e0      	movs	r1, #224	; 0xe0
 8008b8a:	0010      	movs	r0, r2
 8008b8c:	00c9      	lsls	r1, r1, #3
 8008b8e:	4008      	ands	r0, r1
 8008b90:	4288      	cmp	r0, r1
 8008b92:	d000      	beq.n	8008b96 <_scanf_float+0x1c6>
 8008b94:	e754      	b.n	8008a40 <_scanf_float+0x70>
 8008b96:	494f      	ldr	r1, [pc, #316]	; (8008cd4 <_scanf_float+0x304>)
 8008b98:	3401      	adds	r4, #1
 8008b9a:	400a      	ands	r2, r1
 8008b9c:	6032      	str	r2, [r6, #0]
 8008b9e:	e7bf      	b.n	8008b20 <_scanf_float+0x150>
 8008ba0:	21fd      	movs	r1, #253	; 0xfd
 8008ba2:	1ee2      	subs	r2, r4, #3
 8008ba4:	420a      	tst	r2, r1
 8008ba6:	d000      	beq.n	8008baa <_scanf_float+0x1da>
 8008ba8:	e743      	b.n	8008a32 <_scanf_float+0x62>
 8008baa:	e7dd      	b.n	8008b68 <_scanf_float+0x198>
 8008bac:	2c02      	cmp	r4, #2
 8008bae:	d000      	beq.n	8008bb2 <_scanf_float+0x1e2>
 8008bb0:	e73f      	b.n	8008a32 <_scanf_float+0x62>
 8008bb2:	2403      	movs	r4, #3
 8008bb4:	e7b4      	b.n	8008b20 <_scanf_float+0x150>
 8008bb6:	2c06      	cmp	r4, #6
 8008bb8:	d000      	beq.n	8008bbc <_scanf_float+0x1ec>
 8008bba:	e73a      	b.n	8008a32 <_scanf_float+0x62>
 8008bbc:	2407      	movs	r4, #7
 8008bbe:	e7af      	b.n	8008b20 <_scanf_float+0x150>
 8008bc0:	6832      	ldr	r2, [r6, #0]
 8008bc2:	0591      	lsls	r1, r2, #22
 8008bc4:	d400      	bmi.n	8008bc8 <_scanf_float+0x1f8>
 8008bc6:	e734      	b.n	8008a32 <_scanf_float+0x62>
 8008bc8:	4943      	ldr	r1, [pc, #268]	; (8008cd8 <_scanf_float+0x308>)
 8008bca:	400a      	ands	r2, r1
 8008bcc:	6032      	str	r2, [r6, #0]
 8008bce:	9a00      	ldr	r2, [sp, #0]
 8008bd0:	9204      	str	r2, [sp, #16]
 8008bd2:	e7a5      	b.n	8008b20 <_scanf_float+0x150>
 8008bd4:	21a0      	movs	r1, #160	; 0xa0
 8008bd6:	2080      	movs	r0, #128	; 0x80
 8008bd8:	6832      	ldr	r2, [r6, #0]
 8008bda:	00c9      	lsls	r1, r1, #3
 8008bdc:	4011      	ands	r1, r2
 8008bde:	00c0      	lsls	r0, r0, #3
 8008be0:	4281      	cmp	r1, r0
 8008be2:	d006      	beq.n	8008bf2 <_scanf_float+0x222>
 8008be4:	4202      	tst	r2, r0
 8008be6:	d100      	bne.n	8008bea <_scanf_float+0x21a>
 8008be8:	e723      	b.n	8008a32 <_scanf_float+0x62>
 8008bea:	9900      	ldr	r1, [sp, #0]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d100      	bne.n	8008bf2 <_scanf_float+0x222>
 8008bf0:	e726      	b.n	8008a40 <_scanf_float+0x70>
 8008bf2:	0591      	lsls	r1, r2, #22
 8008bf4:	d404      	bmi.n	8008c00 <_scanf_float+0x230>
 8008bf6:	9900      	ldr	r1, [sp, #0]
 8008bf8:	9804      	ldr	r0, [sp, #16]
 8008bfa:	9708      	str	r7, [sp, #32]
 8008bfc:	1a09      	subs	r1, r1, r0
 8008bfe:	9107      	str	r1, [sp, #28]
 8008c00:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <_scanf_float+0x304>)
 8008c02:	400a      	ands	r2, r1
 8008c04:	21c0      	movs	r1, #192	; 0xc0
 8008c06:	0049      	lsls	r1, r1, #1
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	6032      	str	r2, [r6, #0]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	9200      	str	r2, [sp, #0]
 8008c10:	e786      	b.n	8008b20 <_scanf_float+0x150>
 8008c12:	2203      	movs	r2, #3
 8008c14:	e79e      	b.n	8008b54 <_scanf_float+0x184>
 8008c16:	23c0      	movs	r3, #192	; 0xc0
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	0029      	movs	r1, r5
 8008c1c:	58f3      	ldr	r3, [r6, r3]
 8008c1e:	9801      	ldr	r0, [sp, #4]
 8008c20:	4798      	blx	r3
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d100      	bne.n	8008c28 <_scanf_float+0x258>
 8008c26:	e6f6      	b.n	8008a16 <_scanf_float+0x46>
 8008c28:	e703      	b.n	8008a32 <_scanf_float+0x62>
 8008c2a:	3f01      	subs	r7, #1
 8008c2c:	5933      	ldr	r3, [r6, r4]
 8008c2e:	002a      	movs	r2, r5
 8008c30:	7839      	ldrb	r1, [r7, #0]
 8008c32:	9801      	ldr	r0, [sp, #4]
 8008c34:	4798      	blx	r3
 8008c36:	6933      	ldr	r3, [r6, #16]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	6133      	str	r3, [r6, #16]
 8008c3c:	e707      	b.n	8008a4e <_scanf_float+0x7e>
 8008c3e:	1e63      	subs	r3, r4, #1
 8008c40:	2b06      	cmp	r3, #6
 8008c42:	d80e      	bhi.n	8008c62 <_scanf_float+0x292>
 8008c44:	9702      	str	r7, [sp, #8]
 8008c46:	2c02      	cmp	r4, #2
 8008c48:	d920      	bls.n	8008c8c <_scanf_float+0x2bc>
 8008c4a:	1be3      	subs	r3, r4, r7
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	9305      	str	r3, [sp, #20]
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	9a05      	ldr	r2, [sp, #20]
 8008c54:	189b      	adds	r3, r3, r2
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d827      	bhi.n	8008cac <_scanf_float+0x2dc>
 8008c5c:	3c03      	subs	r4, #3
 8008c5e:	b2e4      	uxtb	r4, r4
 8008c60:	1b3f      	subs	r7, r7, r4
 8008c62:	6833      	ldr	r3, [r6, #0]
 8008c64:	05da      	lsls	r2, r3, #23
 8008c66:	d554      	bpl.n	8008d12 <_scanf_float+0x342>
 8008c68:	055b      	lsls	r3, r3, #21
 8008c6a:	d537      	bpl.n	8008cdc <_scanf_float+0x30c>
 8008c6c:	24be      	movs	r4, #190	; 0xbe
 8008c6e:	0064      	lsls	r4, r4, #1
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	429f      	cmp	r7, r3
 8008c74:	d800      	bhi.n	8008c78 <_scanf_float+0x2a8>
 8008c76:	e6ee      	b.n	8008a56 <_scanf_float+0x86>
 8008c78:	3f01      	subs	r7, #1
 8008c7a:	5933      	ldr	r3, [r6, r4]
 8008c7c:	002a      	movs	r2, r5
 8008c7e:	7839      	ldrb	r1, [r7, #0]
 8008c80:	9801      	ldr	r0, [sp, #4]
 8008c82:	4798      	blx	r3
 8008c84:	6933      	ldr	r3, [r6, #16]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	6133      	str	r3, [r6, #16]
 8008c8a:	e7f1      	b.n	8008c70 <_scanf_float+0x2a0>
 8008c8c:	24be      	movs	r4, #190	; 0xbe
 8008c8e:	0064      	lsls	r4, r4, #1
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	429f      	cmp	r7, r3
 8008c94:	d800      	bhi.n	8008c98 <_scanf_float+0x2c8>
 8008c96:	e6de      	b.n	8008a56 <_scanf_float+0x86>
 8008c98:	3f01      	subs	r7, #1
 8008c9a:	5933      	ldr	r3, [r6, r4]
 8008c9c:	002a      	movs	r2, r5
 8008c9e:	7839      	ldrb	r1, [r7, #0]
 8008ca0:	9801      	ldr	r0, [sp, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	6933      	ldr	r3, [r6, #16]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	6133      	str	r3, [r6, #16]
 8008caa:	e7f1      	b.n	8008c90 <_scanf_float+0x2c0>
 8008cac:	9b02      	ldr	r3, [sp, #8]
 8008cae:	002a      	movs	r2, r5
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	7819      	ldrb	r1, [r3, #0]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	23be      	movs	r3, #190	; 0xbe
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	58f3      	ldr	r3, [r6, r3]
 8008cbc:	9801      	ldr	r0, [sp, #4]
 8008cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc0:	4798      	blx	r3
 8008cc2:	6933      	ldr	r3, [r6, #16]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	6133      	str	r3, [r6, #16]
 8008cc8:	e7c2      	b.n	8008c50 <_scanf_float+0x280>
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	fffffeff 	.word	0xfffffeff
 8008cd0:	fffffe7f 	.word	0xfffffe7f
 8008cd4:	fffff87f 	.word	0xfffff87f
 8008cd8:	fffffd7f 	.word	0xfffffd7f
 8008cdc:	6933      	ldr	r3, [r6, #16]
 8008cde:	1e7c      	subs	r4, r7, #1
 8008ce0:	7821      	ldrb	r1, [r4, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	6133      	str	r3, [r6, #16]
 8008ce6:	2965      	cmp	r1, #101	; 0x65
 8008ce8:	d00c      	beq.n	8008d04 <_scanf_float+0x334>
 8008cea:	2945      	cmp	r1, #69	; 0x45
 8008cec:	d00a      	beq.n	8008d04 <_scanf_float+0x334>
 8008cee:	23be      	movs	r3, #190	; 0xbe
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	58f3      	ldr	r3, [r6, r3]
 8008cf4:	002a      	movs	r2, r5
 8008cf6:	9801      	ldr	r0, [sp, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	6933      	ldr	r3, [r6, #16]
 8008cfc:	1ebc      	subs	r4, r7, #2
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	7821      	ldrb	r1, [r4, #0]
 8008d02:	6133      	str	r3, [r6, #16]
 8008d04:	23be      	movs	r3, #190	; 0xbe
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	002a      	movs	r2, r5
 8008d0a:	58f3      	ldr	r3, [r6, r3]
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	0027      	movs	r7, r4
 8008d12:	6832      	ldr	r2, [r6, #0]
 8008d14:	2310      	movs	r3, #16
 8008d16:	0011      	movs	r1, r2
 8008d18:	4019      	ands	r1, r3
 8008d1a:	9102      	str	r1, [sp, #8]
 8008d1c:	421a      	tst	r2, r3
 8008d1e:	d158      	bne.n	8008dd2 <_scanf_float+0x402>
 8008d20:	23c0      	movs	r3, #192	; 0xc0
 8008d22:	7039      	strb	r1, [r7, #0]
 8008d24:	6832      	ldr	r2, [r6, #0]
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2280      	movs	r2, #128	; 0x80
 8008d2c:	00d2      	lsls	r2, r2, #3
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d11d      	bne.n	8008d6e <_scanf_float+0x39e>
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	9a00      	ldr	r2, [sp, #0]
 8008d36:	9900      	ldr	r1, [sp, #0]
 8008d38:	1a9a      	subs	r2, r3, r2
 8008d3a:	428b      	cmp	r3, r1
 8008d3c:	d124      	bne.n	8008d88 <_scanf_float+0x3b8>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	9903      	ldr	r1, [sp, #12]
 8008d42:	9801      	ldr	r0, [sp, #4]
 8008d44:	f000 fe9c 	bl	8009a80 <_strtod_r>
 8008d48:	9b06      	ldr	r3, [sp, #24]
 8008d4a:	000d      	movs	r5, r1
 8008d4c:	6831      	ldr	r1, [r6, #0]
 8008d4e:	0004      	movs	r4, r0
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	078a      	lsls	r2, r1, #30
 8008d54:	d525      	bpl.n	8008da2 <_scanf_float+0x3d2>
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	9906      	ldr	r1, [sp, #24]
 8008d5a:	600a      	str	r2, [r1, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	601c      	str	r4, [r3, #0]
 8008d60:	605d      	str	r5, [r3, #4]
 8008d62:	68f3      	ldr	r3, [r6, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60f3      	str	r3, [r6, #12]
 8008d68:	9802      	ldr	r0, [sp, #8]
 8008d6a:	b00b      	add	sp, #44	; 0x2c
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	9b07      	ldr	r3, [sp, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0e4      	beq.n	8008d3e <_scanf_float+0x36e>
 8008d74:	9b08      	ldr	r3, [sp, #32]
 8008d76:	9a02      	ldr	r2, [sp, #8]
 8008d78:	1c59      	adds	r1, r3, #1
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	230a      	movs	r3, #10
 8008d7e:	f000 ff15 	bl	8009bac <_strtol_r>
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	9f08      	ldr	r7, [sp, #32]
 8008d86:	1ac2      	subs	r2, r0, r3
 8008d88:	0033      	movs	r3, r6
 8008d8a:	3370      	adds	r3, #112	; 0x70
 8008d8c:	33ff      	adds	r3, #255	; 0xff
 8008d8e:	429f      	cmp	r7, r3
 8008d90:	d302      	bcc.n	8008d98 <_scanf_float+0x3c8>
 8008d92:	0037      	movs	r7, r6
 8008d94:	376f      	adds	r7, #111	; 0x6f
 8008d96:	37ff      	adds	r7, #255	; 0xff
 8008d98:	0038      	movs	r0, r7
 8008d9a:	490f      	ldr	r1, [pc, #60]	; (8008dd8 <_scanf_float+0x408>)
 8008d9c:	f000 f824 	bl	8008de8 <siprintf>
 8008da0:	e7cd      	b.n	8008d3e <_scanf_float+0x36e>
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	0749      	lsls	r1, r1, #29
 8008da6:	d4d7      	bmi.n	8008d58 <_scanf_float+0x388>
 8008da8:	9906      	ldr	r1, [sp, #24]
 8008daa:	0020      	movs	r0, r4
 8008dac:	600a      	str	r2, [r1, #0]
 8008dae:	681f      	ldr	r7, [r3, #0]
 8008db0:	0022      	movs	r2, r4
 8008db2:	002b      	movs	r3, r5
 8008db4:	0029      	movs	r1, r5
 8008db6:	f7f9 fbb1 	bl	800251c <__aeabi_dcmpun>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d004      	beq.n	8008dc8 <_scanf_float+0x3f8>
 8008dbe:	4807      	ldr	r0, [pc, #28]	; (8008ddc <_scanf_float+0x40c>)
 8008dc0:	f000 f80e 	bl	8008de0 <nanf>
 8008dc4:	6038      	str	r0, [r7, #0]
 8008dc6:	e7cc      	b.n	8008d62 <_scanf_float+0x392>
 8008dc8:	0020      	movs	r0, r4
 8008dca:	0029      	movs	r1, r5
 8008dcc:	f7f9 fc98 	bl	8002700 <__aeabi_d2f>
 8008dd0:	e7f8      	b.n	8008dc4 <_scanf_float+0x3f4>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e640      	b.n	8008a58 <_scanf_float+0x88>
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	0800cd3c 	.word	0x0800cd3c
 8008ddc:	0800d148 	.word	0x0800d148

08008de0 <nanf>:
 8008de0:	4800      	ldr	r0, [pc, #0]	; (8008de4 <nanf+0x4>)
 8008de2:	4770      	bx	lr
 8008de4:	7fc00000 	.word	0x7fc00000

08008de8 <siprintf>:
 8008de8:	b40e      	push	{r1, r2, r3}
 8008dea:	b500      	push	{lr}
 8008dec:	490b      	ldr	r1, [pc, #44]	; (8008e1c <siprintf+0x34>)
 8008dee:	b09c      	sub	sp, #112	; 0x70
 8008df0:	ab1d      	add	r3, sp, #116	; 0x74
 8008df2:	9002      	str	r0, [sp, #8]
 8008df4:	9006      	str	r0, [sp, #24]
 8008df6:	9107      	str	r1, [sp, #28]
 8008df8:	9104      	str	r1, [sp, #16]
 8008dfa:	4809      	ldr	r0, [pc, #36]	; (8008e20 <siprintf+0x38>)
 8008dfc:	4909      	ldr	r1, [pc, #36]	; (8008e24 <siprintf+0x3c>)
 8008dfe:	cb04      	ldmia	r3!, {r2}
 8008e00:	9105      	str	r1, [sp, #20]
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	a902      	add	r1, sp, #8
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	f002 ff54 	bl	800bcb4 <_svfiprintf_r>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9a02      	ldr	r2, [sp, #8]
 8008e10:	7013      	strb	r3, [r2, #0]
 8008e12:	b01c      	add	sp, #112	; 0x70
 8008e14:	bc08      	pop	{r3}
 8008e16:	b003      	add	sp, #12
 8008e18:	4718      	bx	r3
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	7fffffff 	.word	0x7fffffff
 8008e20:	20000018 	.word	0x20000018
 8008e24:	ffff0208 	.word	0xffff0208

08008e28 <sulp>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	0016      	movs	r6, r2
 8008e2c:	000d      	movs	r5, r1
 8008e2e:	f002 fc8b 	bl	800b748 <__ulp>
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	d00d      	beq.n	8008e52 <sulp+0x2a>
 8008e36:	236b      	movs	r3, #107	; 0x6b
 8008e38:	006a      	lsls	r2, r5, #1
 8008e3a:	0d52      	lsrs	r2, r2, #21
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd07      	ble.n	8008e52 <sulp+0x2a>
 8008e42:	2400      	movs	r4, #0
 8008e44:	4a03      	ldr	r2, [pc, #12]	; (8008e54 <sulp+0x2c>)
 8008e46:	051b      	lsls	r3, r3, #20
 8008e48:	189d      	adds	r5, r3, r2
 8008e4a:	002b      	movs	r3, r5
 8008e4c:	0022      	movs	r2, r4
 8008e4e:	f7f8 fd67 	bl	8001920 <__aeabi_dmul>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	3ff00000 	.word	0x3ff00000

08008e58 <_strtod_l>:
 8008e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e5a:	001d      	movs	r5, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	b0a5      	sub	sp, #148	; 0x94
 8008e60:	9320      	str	r3, [sp, #128]	; 0x80
 8008e62:	4bac      	ldr	r3, [pc, #688]	; (8009114 <_strtod_l+0x2bc>)
 8008e64:	9005      	str	r0, [sp, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	9108      	str	r1, [sp, #32]
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	9307      	str	r3, [sp, #28]
 8008e6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e70:	f7f7 f94a 	bl	8000108 <strlen>
 8008e74:	2600      	movs	r6, #0
 8008e76:	0004      	movs	r4, r0
 8008e78:	2700      	movs	r7, #0
 8008e7a:	9b08      	ldr	r3, [sp, #32]
 8008e7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008e7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008e80:	7813      	ldrb	r3, [r2, #0]
 8008e82:	2b2b      	cmp	r3, #43	; 0x2b
 8008e84:	d058      	beq.n	8008f38 <_strtod_l+0xe0>
 8008e86:	d844      	bhi.n	8008f12 <_strtod_l+0xba>
 8008e88:	2b0d      	cmp	r3, #13
 8008e8a:	d83d      	bhi.n	8008f08 <_strtod_l+0xb0>
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d83d      	bhi.n	8008f0c <_strtod_l+0xb4>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d047      	beq.n	8008f24 <_strtod_l+0xcc>
 8008e94:	2300      	movs	r3, #0
 8008e96:	930e      	str	r3, [sp, #56]	; 0x38
 8008e98:	2200      	movs	r2, #0
 8008e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e9e:	9306      	str	r3, [sp, #24]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b30      	cmp	r3, #48	; 0x30
 8008ea4:	d000      	beq.n	8008ea8 <_strtod_l+0x50>
 8008ea6:	e07f      	b.n	8008fa8 <_strtod_l+0x150>
 8008ea8:	9b06      	ldr	r3, [sp, #24]
 8008eaa:	3220      	adds	r2, #32
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	4393      	bics	r3, r2
 8008eb0:	2b58      	cmp	r3, #88	; 0x58
 8008eb2:	d000      	beq.n	8008eb6 <_strtod_l+0x5e>
 8008eb4:	e06e      	b.n	8008f94 <_strtod_l+0x13c>
 8008eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb8:	9502      	str	r5, [sp, #8]
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	ab20      	add	r3, sp, #128	; 0x80
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	4a95      	ldr	r2, [pc, #596]	; (8009118 <_strtod_l+0x2c0>)
 8008ec2:	ab21      	add	r3, sp, #132	; 0x84
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	a91f      	add	r1, sp, #124	; 0x7c
 8008ec8:	f001 fd84 	bl	800a9d4 <__gethex>
 8008ecc:	2307      	movs	r3, #7
 8008ece:	0005      	movs	r5, r0
 8008ed0:	0004      	movs	r4, r0
 8008ed2:	401d      	ands	r5, r3
 8008ed4:	4218      	tst	r0, r3
 8008ed6:	d006      	beq.n	8008ee6 <_strtod_l+0x8e>
 8008ed8:	2d06      	cmp	r5, #6
 8008eda:	d12f      	bne.n	8008f3c <_strtod_l+0xe4>
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	931f      	str	r3, [sp, #124]	; 0x7c
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <_strtod_l+0x9a>
 8008eec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01c      	beq.n	8008f32 <_strtod_l+0xda>
 8008ef8:	2380      	movs	r3, #128	; 0x80
 8008efa:	0032      	movs	r2, r6
 8008efc:	061b      	lsls	r3, r3, #24
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	0010      	movs	r0, r2
 8008f02:	0019      	movs	r1, r3
 8008f04:	b025      	add	sp, #148	; 0x94
 8008f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d1c3      	bne.n	8008e94 <_strtod_l+0x3c>
 8008f0c:	3201      	adds	r2, #1
 8008f0e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f10:	e7b5      	b.n	8008e7e <_strtod_l+0x26>
 8008f12:	2b2d      	cmp	r3, #45	; 0x2d
 8008f14:	d1be      	bne.n	8008e94 <_strtod_l+0x3c>
 8008f16:	3b2c      	subs	r3, #44	; 0x2c
 8008f18:	930e      	str	r3, [sp, #56]	; 0x38
 8008f1a:	1c53      	adds	r3, r2, #1
 8008f1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008f1e:	7853      	ldrb	r3, [r2, #1]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1b9      	bne.n	8008e98 <_strtod_l+0x40>
 8008f24:	9b08      	ldr	r3, [sp, #32]
 8008f26:	931f      	str	r3, [sp, #124]	; 0x7c
 8008f28:	2300      	movs	r3, #0
 8008f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1dc      	bne.n	8008eec <_strtod_l+0x94>
 8008f32:	0032      	movs	r2, r6
 8008f34:	003b      	movs	r3, r7
 8008f36:	e7e3      	b.n	8008f00 <_strtod_l+0xa8>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e7ed      	b.n	8008f18 <_strtod_l+0xc0>
 8008f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d007      	beq.n	8008f52 <_strtod_l+0xfa>
 8008f42:	2135      	movs	r1, #53	; 0x35
 8008f44:	a822      	add	r0, sp, #136	; 0x88
 8008f46:	f002 fd00 	bl	800b94a <__copybits>
 8008f4a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	f002 f8bb 	bl	800b0c8 <_Bfree>
 8008f52:	1e68      	subs	r0, r5, #1
 8008f54:	2804      	cmp	r0, #4
 8008f56:	d806      	bhi.n	8008f66 <_strtod_l+0x10e>
 8008f58:	f7f7 f8de 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008f5c:	1816030b 	.word	0x1816030b
 8008f60:	0b          	.byte	0x0b
 8008f61:	00          	.byte	0x00
 8008f62:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008f64:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008f66:	0723      	lsls	r3, r4, #28
 8008f68:	d5bd      	bpl.n	8008ee6 <_strtod_l+0x8e>
 8008f6a:	2380      	movs	r3, #128	; 0x80
 8008f6c:	061b      	lsls	r3, r3, #24
 8008f6e:	431f      	orrs	r7, r3
 8008f70:	e7b9      	b.n	8008ee6 <_strtod_l+0x8e>
 8008f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f74:	4a69      	ldr	r2, [pc, #420]	; (800911c <_strtod_l+0x2c4>)
 8008f76:	496a      	ldr	r1, [pc, #424]	; (8009120 <_strtod_l+0x2c8>)
 8008f78:	401a      	ands	r2, r3
 8008f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008f7e:	185b      	adds	r3, r3, r1
 8008f80:	051b      	lsls	r3, r3, #20
 8008f82:	431a      	orrs	r2, r3
 8008f84:	0017      	movs	r7, r2
 8008f86:	e7ee      	b.n	8008f66 <_strtod_l+0x10e>
 8008f88:	4f66      	ldr	r7, [pc, #408]	; (8009124 <_strtod_l+0x2cc>)
 8008f8a:	e7ec      	b.n	8008f66 <_strtod_l+0x10e>
 8008f8c:	2601      	movs	r6, #1
 8008f8e:	4f66      	ldr	r7, [pc, #408]	; (8009128 <_strtod_l+0x2d0>)
 8008f90:	4276      	negs	r6, r6
 8008f92:	e7e8      	b.n	8008f66 <_strtod_l+0x10e>
 8008f94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b30      	cmp	r3, #48	; 0x30
 8008f9e:	d0f9      	beq.n	8008f94 <_strtod_l+0x13c>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0a0      	beq.n	8008ee6 <_strtod_l+0x8e>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008faa:	220a      	movs	r2, #10
 8008fac:	9310      	str	r3, [sp, #64]	; 0x40
 8008fae:	2300      	movs	r3, #0
 8008fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008fb8:	7805      	ldrb	r5, [r0, #0]
 8008fba:	002b      	movs	r3, r5
 8008fbc:	3b30      	subs	r3, #48	; 0x30
 8008fbe:	b2d9      	uxtb	r1, r3
 8008fc0:	2909      	cmp	r1, #9
 8008fc2:	d927      	bls.n	8009014 <_strtod_l+0x1bc>
 8008fc4:	0022      	movs	r2, r4
 8008fc6:	9907      	ldr	r1, [sp, #28]
 8008fc8:	f002 ff8c 	bl	800bee4 <strncmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d033      	beq.n	8009038 <_strtod_l+0x1e0>
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	002b      	movs	r3, r5
 8008fd4:	4684      	mov	ip, r0
 8008fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd8:	900c      	str	r0, [sp, #48]	; 0x30
 8008fda:	9206      	str	r2, [sp, #24]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	0019      	movs	r1, r3
 8008fe0:	4391      	bics	r1, r2
 8008fe2:	000a      	movs	r2, r1
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	9107      	str	r1, [sp, #28]
 8008fe8:	2a45      	cmp	r2, #69	; 0x45
 8008fea:	d000      	beq.n	8008fee <_strtod_l+0x196>
 8008fec:	e0c5      	b.n	800917a <_strtod_l+0x322>
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff2:	4303      	orrs	r3, r0
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	428b      	cmp	r3, r1
 8008ff8:	d094      	beq.n	8008f24 <_strtod_l+0xcc>
 8008ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ffc:	9308      	str	r3, [sp, #32]
 8008ffe:	3301      	adds	r3, #1
 8009000:	931f      	str	r3, [sp, #124]	; 0x7c
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b2b      	cmp	r3, #43	; 0x2b
 8009008:	d076      	beq.n	80090f8 <_strtod_l+0x2a0>
 800900a:	000c      	movs	r4, r1
 800900c:	2b2d      	cmp	r3, #45	; 0x2d
 800900e:	d179      	bne.n	8009104 <_strtod_l+0x2ac>
 8009010:	2401      	movs	r4, #1
 8009012:	e072      	b.n	80090fa <_strtod_l+0x2a2>
 8009014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009016:	2908      	cmp	r1, #8
 8009018:	dc09      	bgt.n	800902e <_strtod_l+0x1d6>
 800901a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800901c:	4351      	muls	r1, r2
 800901e:	185b      	adds	r3, r3, r1
 8009020:	930b      	str	r3, [sp, #44]	; 0x2c
 8009022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009024:	3001      	adds	r0, #1
 8009026:	3301      	adds	r3, #1
 8009028:	9309      	str	r3, [sp, #36]	; 0x24
 800902a:	901f      	str	r0, [sp, #124]	; 0x7c
 800902c:	e7c3      	b.n	8008fb6 <_strtod_l+0x15e>
 800902e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009030:	4351      	muls	r1, r2
 8009032:	185b      	adds	r3, r3, r1
 8009034:	930f      	str	r3, [sp, #60]	; 0x3c
 8009036:	e7f4      	b.n	8009022 <_strtod_l+0x1ca>
 8009038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800903a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800903c:	191c      	adds	r4, r3, r4
 800903e:	941f      	str	r4, [sp, #124]	; 0x7c
 8009040:	7823      	ldrb	r3, [r4, #0]
 8009042:	2a00      	cmp	r2, #0
 8009044:	d039      	beq.n	80090ba <_strtod_l+0x262>
 8009046:	900c      	str	r0, [sp, #48]	; 0x30
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	001a      	movs	r2, r3
 800904c:	3a30      	subs	r2, #48	; 0x30
 800904e:	2a09      	cmp	r2, #9
 8009050:	d912      	bls.n	8009078 <_strtod_l+0x220>
 8009052:	2201      	movs	r2, #1
 8009054:	4694      	mov	ip, r2
 8009056:	e7c1      	b.n	8008fdc <_strtod_l+0x184>
 8009058:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800905a:	3001      	adds	r0, #1
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	921f      	str	r2, [sp, #124]	; 0x7c
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b30      	cmp	r3, #48	; 0x30
 8009064:	d0f8      	beq.n	8009058 <_strtod_l+0x200>
 8009066:	001a      	movs	r2, r3
 8009068:	3a31      	subs	r2, #49	; 0x31
 800906a:	2a08      	cmp	r2, #8
 800906c:	d83f      	bhi.n	80090ee <_strtod_l+0x296>
 800906e:	900c      	str	r0, [sp, #48]	; 0x30
 8009070:	2000      	movs	r0, #0
 8009072:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009074:	9006      	str	r0, [sp, #24]
 8009076:	9210      	str	r2, [sp, #64]	; 0x40
 8009078:	001a      	movs	r2, r3
 800907a:	1c41      	adds	r1, r0, #1
 800907c:	3a30      	subs	r2, #48	; 0x30
 800907e:	2b30      	cmp	r3, #48	; 0x30
 8009080:	d015      	beq.n	80090ae <_strtod_l+0x256>
 8009082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009084:	185b      	adds	r3, r3, r1
 8009086:	210a      	movs	r1, #10
 8009088:	930c      	str	r3, [sp, #48]	; 0x30
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	18c4      	adds	r4, r0, r3
 800908e:	42a3      	cmp	r3, r4
 8009090:	d115      	bne.n	80090be <_strtod_l+0x266>
 8009092:	9906      	ldr	r1, [sp, #24]
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	3101      	adds	r1, #1
 8009098:	1809      	adds	r1, r1, r0
 800909a:	181b      	adds	r3, r3, r0
 800909c:	9106      	str	r1, [sp, #24]
 800909e:	2b08      	cmp	r3, #8
 80090a0:	dc1b      	bgt.n	80090da <_strtod_l+0x282>
 80090a2:	230a      	movs	r3, #10
 80090a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090a6:	434b      	muls	r3, r1
 80090a8:	2100      	movs	r1, #0
 80090aa:	18d3      	adds	r3, r2, r3
 80090ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090b0:	0008      	movs	r0, r1
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	e7c7      	b.n	800904a <_strtod_l+0x1f2>
 80090ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090bc:	e7d1      	b.n	8009062 <_strtod_l+0x20a>
 80090be:	2b08      	cmp	r3, #8
 80090c0:	dc04      	bgt.n	80090cc <_strtod_l+0x274>
 80090c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090c4:	434d      	muls	r5, r1
 80090c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80090c8:	3301      	adds	r3, #1
 80090ca:	e7e0      	b.n	800908e <_strtod_l+0x236>
 80090cc:	1c5d      	adds	r5, r3, #1
 80090ce:	2d10      	cmp	r5, #16
 80090d0:	dcfa      	bgt.n	80090c8 <_strtod_l+0x270>
 80090d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090d4:	434d      	muls	r5, r1
 80090d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80090d8:	e7f6      	b.n	80090c8 <_strtod_l+0x270>
 80090da:	9b06      	ldr	r3, [sp, #24]
 80090dc:	2100      	movs	r1, #0
 80090de:	2b10      	cmp	r3, #16
 80090e0:	dce5      	bgt.n	80090ae <_strtod_l+0x256>
 80090e2:	230a      	movs	r3, #10
 80090e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80090e6:	4343      	muls	r3, r0
 80090e8:	18d3      	adds	r3, r2, r3
 80090ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ec:	e7df      	b.n	80090ae <_strtod_l+0x256>
 80090ee:	2200      	movs	r2, #0
 80090f0:	920c      	str	r2, [sp, #48]	; 0x30
 80090f2:	9206      	str	r2, [sp, #24]
 80090f4:	3201      	adds	r2, #1
 80090f6:	e7ad      	b.n	8009054 <_strtod_l+0x1fc>
 80090f8:	2400      	movs	r4, #0
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	3302      	adds	r3, #2
 80090fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	789b      	ldrb	r3, [r3, #2]
 8009104:	001a      	movs	r2, r3
 8009106:	3a30      	subs	r2, #48	; 0x30
 8009108:	2a09      	cmp	r2, #9
 800910a:	d913      	bls.n	8009134 <_strtod_l+0x2dc>
 800910c:	9a08      	ldr	r2, [sp, #32]
 800910e:	921f      	str	r2, [sp, #124]	; 0x7c
 8009110:	2200      	movs	r2, #0
 8009112:	e031      	b.n	8009178 <_strtod_l+0x320>
 8009114:	0800cf90 	.word	0x0800cf90
 8009118:	0800cd44 	.word	0x0800cd44
 800911c:	ffefffff 	.word	0xffefffff
 8009120:	00000433 	.word	0x00000433
 8009124:	7ff00000 	.word	0x7ff00000
 8009128:	7fffffff 	.word	0x7fffffff
 800912c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	921f      	str	r2, [sp, #124]	; 0x7c
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b30      	cmp	r3, #48	; 0x30
 8009136:	d0f9      	beq.n	800912c <_strtod_l+0x2d4>
 8009138:	2200      	movs	r2, #0
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	001a      	movs	r2, r3
 800913e:	3a31      	subs	r2, #49	; 0x31
 8009140:	2a08      	cmp	r2, #8
 8009142:	d81a      	bhi.n	800917a <_strtod_l+0x322>
 8009144:	3b30      	subs	r3, #48	; 0x30
 8009146:	001a      	movs	r2, r3
 8009148:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800914e:	1c59      	adds	r1, r3, #1
 8009150:	911f      	str	r1, [sp, #124]	; 0x7c
 8009152:	785b      	ldrb	r3, [r3, #1]
 8009154:	001d      	movs	r5, r3
 8009156:	3d30      	subs	r5, #48	; 0x30
 8009158:	2d09      	cmp	r5, #9
 800915a:	d939      	bls.n	80091d0 <_strtod_l+0x378>
 800915c:	9d07      	ldr	r5, [sp, #28]
 800915e:	1b49      	subs	r1, r1, r5
 8009160:	4db0      	ldr	r5, [pc, #704]	; (8009424 <_strtod_l+0x5cc>)
 8009162:	9507      	str	r5, [sp, #28]
 8009164:	2908      	cmp	r1, #8
 8009166:	dc03      	bgt.n	8009170 <_strtod_l+0x318>
 8009168:	9207      	str	r2, [sp, #28]
 800916a:	42aa      	cmp	r2, r5
 800916c:	dd00      	ble.n	8009170 <_strtod_l+0x318>
 800916e:	9507      	str	r5, [sp, #28]
 8009170:	2c00      	cmp	r4, #0
 8009172:	d002      	beq.n	800917a <_strtod_l+0x322>
 8009174:	9a07      	ldr	r2, [sp, #28]
 8009176:	4252      	negs	r2, r2
 8009178:	9207      	str	r2, [sp, #28]
 800917a:	9a06      	ldr	r2, [sp, #24]
 800917c:	2a00      	cmp	r2, #0
 800917e:	d14b      	bne.n	8009218 <_strtod_l+0x3c0>
 8009180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009182:	4310      	orrs	r0, r2
 8009184:	d000      	beq.n	8009188 <_strtod_l+0x330>
 8009186:	e6ae      	b.n	8008ee6 <_strtod_l+0x8e>
 8009188:	4662      	mov	r2, ip
 800918a:	2a00      	cmp	r2, #0
 800918c:	d000      	beq.n	8009190 <_strtod_l+0x338>
 800918e:	e6c9      	b.n	8008f24 <_strtod_l+0xcc>
 8009190:	2b69      	cmp	r3, #105	; 0x69
 8009192:	d025      	beq.n	80091e0 <_strtod_l+0x388>
 8009194:	dc21      	bgt.n	80091da <_strtod_l+0x382>
 8009196:	2b49      	cmp	r3, #73	; 0x49
 8009198:	d022      	beq.n	80091e0 <_strtod_l+0x388>
 800919a:	2b4e      	cmp	r3, #78	; 0x4e
 800919c:	d000      	beq.n	80091a0 <_strtod_l+0x348>
 800919e:	e6c1      	b.n	8008f24 <_strtod_l+0xcc>
 80091a0:	49a1      	ldr	r1, [pc, #644]	; (8009428 <_strtod_l+0x5d0>)
 80091a2:	a81f      	add	r0, sp, #124	; 0x7c
 80091a4:	f001 fe64 	bl	800ae70 <__match>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d100      	bne.n	80091ae <_strtod_l+0x356>
 80091ac:	e6ba      	b.n	8008f24 <_strtod_l+0xcc>
 80091ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b28      	cmp	r3, #40	; 0x28
 80091b4:	d12a      	bne.n	800920c <_strtod_l+0x3b4>
 80091b6:	499d      	ldr	r1, [pc, #628]	; (800942c <_strtod_l+0x5d4>)
 80091b8:	aa22      	add	r2, sp, #136	; 0x88
 80091ba:	a81f      	add	r0, sp, #124	; 0x7c
 80091bc:	f001 fe6c 	bl	800ae98 <__hexnan>
 80091c0:	2805      	cmp	r0, #5
 80091c2:	d123      	bne.n	800920c <_strtod_l+0x3b4>
 80091c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c6:	4a9a      	ldr	r2, [pc, #616]	; (8009430 <_strtod_l+0x5d8>)
 80091c8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80091ca:	431a      	orrs	r2, r3
 80091cc:	0017      	movs	r7, r2
 80091ce:	e68a      	b.n	8008ee6 <_strtod_l+0x8e>
 80091d0:	210a      	movs	r1, #10
 80091d2:	434a      	muls	r2, r1
 80091d4:	18d2      	adds	r2, r2, r3
 80091d6:	3a30      	subs	r2, #48	; 0x30
 80091d8:	e7b8      	b.n	800914c <_strtod_l+0x2f4>
 80091da:	2b6e      	cmp	r3, #110	; 0x6e
 80091dc:	d0e0      	beq.n	80091a0 <_strtod_l+0x348>
 80091de:	e6a1      	b.n	8008f24 <_strtod_l+0xcc>
 80091e0:	4994      	ldr	r1, [pc, #592]	; (8009434 <_strtod_l+0x5dc>)
 80091e2:	a81f      	add	r0, sp, #124	; 0x7c
 80091e4:	f001 fe44 	bl	800ae70 <__match>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d100      	bne.n	80091ee <_strtod_l+0x396>
 80091ec:	e69a      	b.n	8008f24 <_strtod_l+0xcc>
 80091ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091f0:	4991      	ldr	r1, [pc, #580]	; (8009438 <_strtod_l+0x5e0>)
 80091f2:	3b01      	subs	r3, #1
 80091f4:	a81f      	add	r0, sp, #124	; 0x7c
 80091f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80091f8:	f001 fe3a 	bl	800ae70 <__match>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d102      	bne.n	8009206 <_strtod_l+0x3ae>
 8009200:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009202:	3301      	adds	r3, #1
 8009204:	931f      	str	r3, [sp, #124]	; 0x7c
 8009206:	2600      	movs	r6, #0
 8009208:	4f89      	ldr	r7, [pc, #548]	; (8009430 <_strtod_l+0x5d8>)
 800920a:	e66c      	b.n	8008ee6 <_strtod_l+0x8e>
 800920c:	488b      	ldr	r0, [pc, #556]	; (800943c <_strtod_l+0x5e4>)
 800920e:	f002 fe51 	bl	800beb4 <nan>
 8009212:	0006      	movs	r6, r0
 8009214:	000f      	movs	r7, r1
 8009216:	e666      	b.n	8008ee6 <_strtod_l+0x8e>
 8009218:	9b07      	ldr	r3, [sp, #28]
 800921a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	930a      	str	r3, [sp, #40]	; 0x28
 8009220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <_strtod_l+0x3d2>
 8009226:	9b06      	ldr	r3, [sp, #24]
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	9c06      	ldr	r4, [sp, #24]
 800922c:	2c10      	cmp	r4, #16
 800922e:	dd00      	ble.n	8009232 <_strtod_l+0x3da>
 8009230:	2410      	movs	r4, #16
 8009232:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009234:	f7f9 f9f6 	bl	8002624 <__aeabi_ui2d>
 8009238:	9b06      	ldr	r3, [sp, #24]
 800923a:	0006      	movs	r6, r0
 800923c:	000f      	movs	r7, r1
 800923e:	2b09      	cmp	r3, #9
 8009240:	dd15      	ble.n	800926e <_strtod_l+0x416>
 8009242:	0022      	movs	r2, r4
 8009244:	4b7e      	ldr	r3, [pc, #504]	; (8009440 <_strtod_l+0x5e8>)
 8009246:	3a09      	subs	r2, #9
 8009248:	00d2      	lsls	r2, r2, #3
 800924a:	189b      	adds	r3, r3, r2
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f7f8 fb66 	bl	8001920 <__aeabi_dmul>
 8009254:	0006      	movs	r6, r0
 8009256:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009258:	000f      	movs	r7, r1
 800925a:	f7f9 f9e3 	bl	8002624 <__aeabi_ui2d>
 800925e:	0002      	movs	r2, r0
 8009260:	000b      	movs	r3, r1
 8009262:	0030      	movs	r0, r6
 8009264:	0039      	movs	r1, r7
 8009266:	f7f7 fc1d 	bl	8000aa4 <__aeabi_dadd>
 800926a:	0006      	movs	r6, r0
 800926c:	000f      	movs	r7, r1
 800926e:	9b06      	ldr	r3, [sp, #24]
 8009270:	2b0f      	cmp	r3, #15
 8009272:	dc39      	bgt.n	80092e8 <_strtod_l+0x490>
 8009274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d100      	bne.n	800927c <_strtod_l+0x424>
 800927a:	e634      	b.n	8008ee6 <_strtod_l+0x8e>
 800927c:	dd24      	ble.n	80092c8 <_strtod_l+0x470>
 800927e:	2b16      	cmp	r3, #22
 8009280:	dc09      	bgt.n	8009296 <_strtod_l+0x43e>
 8009282:	496f      	ldr	r1, [pc, #444]	; (8009440 <_strtod_l+0x5e8>)
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	18c9      	adds	r1, r1, r3
 8009288:	0032      	movs	r2, r6
 800928a:	6808      	ldr	r0, [r1, #0]
 800928c:	6849      	ldr	r1, [r1, #4]
 800928e:	003b      	movs	r3, r7
 8009290:	f7f8 fb46 	bl	8001920 <__aeabi_dmul>
 8009294:	e7bd      	b.n	8009212 <_strtod_l+0x3ba>
 8009296:	2325      	movs	r3, #37	; 0x25
 8009298:	9a06      	ldr	r2, [sp, #24]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929e:	4293      	cmp	r3, r2
 80092a0:	db22      	blt.n	80092e8 <_strtod_l+0x490>
 80092a2:	240f      	movs	r4, #15
 80092a4:	9b06      	ldr	r3, [sp, #24]
 80092a6:	4d66      	ldr	r5, [pc, #408]	; (8009440 <_strtod_l+0x5e8>)
 80092a8:	1ae4      	subs	r4, r4, r3
 80092aa:	00e1      	lsls	r1, r4, #3
 80092ac:	1869      	adds	r1, r5, r1
 80092ae:	0032      	movs	r2, r6
 80092b0:	6808      	ldr	r0, [r1, #0]
 80092b2:	6849      	ldr	r1, [r1, #4]
 80092b4:	003b      	movs	r3, r7
 80092b6:	f7f8 fb33 	bl	8001920 <__aeabi_dmul>
 80092ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092bc:	1b1c      	subs	r4, r3, r4
 80092be:	00e4      	lsls	r4, r4, #3
 80092c0:	192c      	adds	r4, r5, r4
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	e7e3      	b.n	8009290 <_strtod_l+0x438>
 80092c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ca:	3316      	adds	r3, #22
 80092cc:	db0c      	blt.n	80092e8 <_strtod_l+0x490>
 80092ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092d0:	9a07      	ldr	r2, [sp, #28]
 80092d2:	0030      	movs	r0, r6
 80092d4:	1a9a      	subs	r2, r3, r2
 80092d6:	4b5a      	ldr	r3, [pc, #360]	; (8009440 <_strtod_l+0x5e8>)
 80092d8:	00d2      	lsls	r2, r2, #3
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	0039      	movs	r1, r7
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f7f7 ff1b 	bl	800111c <__aeabi_ddiv>
 80092e6:	e794      	b.n	8009212 <_strtod_l+0x3ba>
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	1b1c      	subs	r4, r3, r4
 80092ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ee:	18e4      	adds	r4, r4, r3
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	dd72      	ble.n	80093da <_strtod_l+0x582>
 80092f4:	230f      	movs	r3, #15
 80092f6:	0021      	movs	r1, r4
 80092f8:	4019      	ands	r1, r3
 80092fa:	421c      	tst	r4, r3
 80092fc:	d00a      	beq.n	8009314 <_strtod_l+0x4bc>
 80092fe:	00cb      	lsls	r3, r1, #3
 8009300:	494f      	ldr	r1, [pc, #316]	; (8009440 <_strtod_l+0x5e8>)
 8009302:	0032      	movs	r2, r6
 8009304:	18c9      	adds	r1, r1, r3
 8009306:	6808      	ldr	r0, [r1, #0]
 8009308:	6849      	ldr	r1, [r1, #4]
 800930a:	003b      	movs	r3, r7
 800930c:	f7f8 fb08 	bl	8001920 <__aeabi_dmul>
 8009310:	0006      	movs	r6, r0
 8009312:	000f      	movs	r7, r1
 8009314:	230f      	movs	r3, #15
 8009316:	439c      	bics	r4, r3
 8009318:	d04a      	beq.n	80093b0 <_strtod_l+0x558>
 800931a:	3326      	adds	r3, #38	; 0x26
 800931c:	33ff      	adds	r3, #255	; 0xff
 800931e:	429c      	cmp	r4, r3
 8009320:	dd22      	ble.n	8009368 <_strtod_l+0x510>
 8009322:	2300      	movs	r3, #0
 8009324:	9306      	str	r3, [sp, #24]
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	930b      	str	r3, [sp, #44]	; 0x2c
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	2322      	movs	r3, #34	; 0x22
 800932e:	2600      	movs	r6, #0
 8009330:	9a05      	ldr	r2, [sp, #20]
 8009332:	4f3f      	ldr	r7, [pc, #252]	; (8009430 <_strtod_l+0x5d8>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009338:	42b3      	cmp	r3, r6
 800933a:	d100      	bne.n	800933e <_strtod_l+0x4e6>
 800933c:	e5d3      	b.n	8008ee6 <_strtod_l+0x8e>
 800933e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009340:	9805      	ldr	r0, [sp, #20]
 8009342:	f001 fec1 	bl	800b0c8 <_Bfree>
 8009346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009348:	9805      	ldr	r0, [sp, #20]
 800934a:	f001 febd 	bl	800b0c8 <_Bfree>
 800934e:	9907      	ldr	r1, [sp, #28]
 8009350:	9805      	ldr	r0, [sp, #20]
 8009352:	f001 feb9 	bl	800b0c8 <_Bfree>
 8009356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009358:	9805      	ldr	r0, [sp, #20]
 800935a:	f001 feb5 	bl	800b0c8 <_Bfree>
 800935e:	9906      	ldr	r1, [sp, #24]
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	f001 feb1 	bl	800b0c8 <_Bfree>
 8009366:	e5be      	b.n	8008ee6 <_strtod_l+0x8e>
 8009368:	2300      	movs	r3, #0
 800936a:	0030      	movs	r0, r6
 800936c:	0039      	movs	r1, r7
 800936e:	4d35      	ldr	r5, [pc, #212]	; (8009444 <_strtod_l+0x5ec>)
 8009370:	1124      	asrs	r4, r4, #4
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	2c01      	cmp	r4, #1
 8009376:	dc1e      	bgt.n	80093b6 <_strtod_l+0x55e>
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <_strtod_l+0x528>
 800937c:	0006      	movs	r6, r0
 800937e:	000f      	movs	r7, r1
 8009380:	4b31      	ldr	r3, [pc, #196]	; (8009448 <_strtod_l+0x5f0>)
 8009382:	0032      	movs	r2, r6
 8009384:	18ff      	adds	r7, r7, r3
 8009386:	9b08      	ldr	r3, [sp, #32]
 8009388:	00dd      	lsls	r5, r3, #3
 800938a:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <_strtod_l+0x5ec>)
 800938c:	195d      	adds	r5, r3, r5
 800938e:	6828      	ldr	r0, [r5, #0]
 8009390:	6869      	ldr	r1, [r5, #4]
 8009392:	003b      	movs	r3, r7
 8009394:	f7f8 fac4 	bl	8001920 <__aeabi_dmul>
 8009398:	4b25      	ldr	r3, [pc, #148]	; (8009430 <_strtod_l+0x5d8>)
 800939a:	4a2c      	ldr	r2, [pc, #176]	; (800944c <_strtod_l+0x5f4>)
 800939c:	0006      	movs	r6, r0
 800939e:	400b      	ands	r3, r1
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d8be      	bhi.n	8009322 <_strtod_l+0x4ca>
 80093a4:	4a2a      	ldr	r2, [pc, #168]	; (8009450 <_strtod_l+0x5f8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d913      	bls.n	80093d2 <_strtod_l+0x57a>
 80093aa:	2601      	movs	r6, #1
 80093ac:	4f29      	ldr	r7, [pc, #164]	; (8009454 <_strtod_l+0x5fc>)
 80093ae:	4276      	negs	r6, r6
 80093b0:	2300      	movs	r3, #0
 80093b2:	9308      	str	r3, [sp, #32]
 80093b4:	e087      	b.n	80094c6 <_strtod_l+0x66e>
 80093b6:	2201      	movs	r2, #1
 80093b8:	4214      	tst	r4, r2
 80093ba:	d004      	beq.n	80093c6 <_strtod_l+0x56e>
 80093bc:	682a      	ldr	r2, [r5, #0]
 80093be:	686b      	ldr	r3, [r5, #4]
 80093c0:	f7f8 faae 	bl	8001920 <__aeabi_dmul>
 80093c4:	2301      	movs	r3, #1
 80093c6:	9a08      	ldr	r2, [sp, #32]
 80093c8:	1064      	asrs	r4, r4, #1
 80093ca:	3201      	adds	r2, #1
 80093cc:	9208      	str	r2, [sp, #32]
 80093ce:	3508      	adds	r5, #8
 80093d0:	e7d0      	b.n	8009374 <_strtod_l+0x51c>
 80093d2:	23d4      	movs	r3, #212	; 0xd4
 80093d4:	049b      	lsls	r3, r3, #18
 80093d6:	18cf      	adds	r7, r1, r3
 80093d8:	e7ea      	b.n	80093b0 <_strtod_l+0x558>
 80093da:	2c00      	cmp	r4, #0
 80093dc:	d0e8      	beq.n	80093b0 <_strtod_l+0x558>
 80093de:	4264      	negs	r4, r4
 80093e0:	220f      	movs	r2, #15
 80093e2:	0023      	movs	r3, r4
 80093e4:	4013      	ands	r3, r2
 80093e6:	4214      	tst	r4, r2
 80093e8:	d00a      	beq.n	8009400 <_strtod_l+0x5a8>
 80093ea:	00da      	lsls	r2, r3, #3
 80093ec:	4b14      	ldr	r3, [pc, #80]	; (8009440 <_strtod_l+0x5e8>)
 80093ee:	0030      	movs	r0, r6
 80093f0:	189b      	adds	r3, r3, r2
 80093f2:	0039      	movs	r1, r7
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f7f7 fe90 	bl	800111c <__aeabi_ddiv>
 80093fc:	0006      	movs	r6, r0
 80093fe:	000f      	movs	r7, r1
 8009400:	1124      	asrs	r4, r4, #4
 8009402:	d0d5      	beq.n	80093b0 <_strtod_l+0x558>
 8009404:	2c1f      	cmp	r4, #31
 8009406:	dd27      	ble.n	8009458 <_strtod_l+0x600>
 8009408:	2300      	movs	r3, #0
 800940a:	9306      	str	r3, [sp, #24]
 800940c:	9307      	str	r3, [sp, #28]
 800940e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009410:	9309      	str	r3, [sp, #36]	; 0x24
 8009412:	2322      	movs	r3, #34	; 0x22
 8009414:	9a05      	ldr	r2, [sp, #20]
 8009416:	2600      	movs	r6, #0
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	2700      	movs	r7, #0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d18d      	bne.n	800933e <_strtod_l+0x4e6>
 8009422:	e560      	b.n	8008ee6 <_strtod_l+0x8e>
 8009424:	00004e1f 	.word	0x00004e1f
 8009428:	0800cd15 	.word	0x0800cd15
 800942c:	0800cd58 	.word	0x0800cd58
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	0800cd0d 	.word	0x0800cd0d
 8009438:	0800ce9c 	.word	0x0800ce9c
 800943c:	0800d148 	.word	0x0800d148
 8009440:	0800d028 	.word	0x0800d028
 8009444:	0800d000 	.word	0x0800d000
 8009448:	fcb00000 	.word	0xfcb00000
 800944c:	7ca00000 	.word	0x7ca00000
 8009450:	7c900000 	.word	0x7c900000
 8009454:	7fefffff 	.word	0x7fefffff
 8009458:	2310      	movs	r3, #16
 800945a:	0022      	movs	r2, r4
 800945c:	401a      	ands	r2, r3
 800945e:	9208      	str	r2, [sp, #32]
 8009460:	421c      	tst	r4, r3
 8009462:	d001      	beq.n	8009468 <_strtod_l+0x610>
 8009464:	335a      	adds	r3, #90	; 0x5a
 8009466:	9308      	str	r3, [sp, #32]
 8009468:	0030      	movs	r0, r6
 800946a:	0039      	movs	r1, r7
 800946c:	2300      	movs	r3, #0
 800946e:	4dc5      	ldr	r5, [pc, #788]	; (8009784 <_strtod_l+0x92c>)
 8009470:	2201      	movs	r2, #1
 8009472:	4214      	tst	r4, r2
 8009474:	d004      	beq.n	8009480 <_strtod_l+0x628>
 8009476:	682a      	ldr	r2, [r5, #0]
 8009478:	686b      	ldr	r3, [r5, #4]
 800947a:	f7f8 fa51 	bl	8001920 <__aeabi_dmul>
 800947e:	2301      	movs	r3, #1
 8009480:	1064      	asrs	r4, r4, #1
 8009482:	3508      	adds	r5, #8
 8009484:	2c00      	cmp	r4, #0
 8009486:	d1f3      	bne.n	8009470 <_strtod_l+0x618>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <_strtod_l+0x638>
 800948c:	0006      	movs	r6, r0
 800948e:	000f      	movs	r7, r1
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00f      	beq.n	80094b6 <_strtod_l+0x65e>
 8009496:	236b      	movs	r3, #107	; 0x6b
 8009498:	007a      	lsls	r2, r7, #1
 800949a:	0d52      	lsrs	r2, r2, #21
 800949c:	0039      	movs	r1, r7
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dd08      	ble.n	80094b6 <_strtod_l+0x65e>
 80094a4:	2b1f      	cmp	r3, #31
 80094a6:	dc00      	bgt.n	80094aa <_strtod_l+0x652>
 80094a8:	e124      	b.n	80096f4 <_strtod_l+0x89c>
 80094aa:	2600      	movs	r6, #0
 80094ac:	2b34      	cmp	r3, #52	; 0x34
 80094ae:	dc00      	bgt.n	80094b2 <_strtod_l+0x65a>
 80094b0:	e119      	b.n	80096e6 <_strtod_l+0x88e>
 80094b2:	27dc      	movs	r7, #220	; 0xdc
 80094b4:	04bf      	lsls	r7, r7, #18
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	0030      	movs	r0, r6
 80094bc:	0039      	movs	r1, r7
 80094be:	f7f6 ffc5 	bl	800044c <__aeabi_dcmpeq>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1a0      	bne.n	8009408 <_strtod_l+0x5b0>
 80094c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	9805      	ldr	r0, [sp, #20]
 80094d2:	f001 fe61 	bl	800b198 <__s2b>
 80094d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80094d8:	2800      	cmp	r0, #0
 80094da:	d100      	bne.n	80094de <_strtod_l+0x686>
 80094dc:	e721      	b.n	8009322 <_strtod_l+0x4ca>
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	9907      	ldr	r1, [sp, #28]
 80094e2:	17da      	asrs	r2, r3, #31
 80094e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e6:	1a5b      	subs	r3, r3, r1
 80094e8:	401a      	ands	r2, r3
 80094ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ec:	9215      	str	r2, [sp, #84]	; 0x54
 80094ee:	43db      	mvns	r3, r3
 80094f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f2:	17db      	asrs	r3, r3, #31
 80094f4:	401a      	ands	r2, r3
 80094f6:	2300      	movs	r3, #0
 80094f8:	921a      	str	r2, [sp, #104]	; 0x68
 80094fa:	9306      	str	r3, [sp, #24]
 80094fc:	9307      	str	r3, [sp, #28]
 80094fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009500:	9805      	ldr	r0, [sp, #20]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	f001 fd9c 	bl	800b040 <_Balloc>
 8009508:	9009      	str	r0, [sp, #36]	; 0x24
 800950a:	2800      	cmp	r0, #0
 800950c:	d100      	bne.n	8009510 <_strtod_l+0x6b8>
 800950e:	e70d      	b.n	800932c <_strtod_l+0x4d4>
 8009510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	310c      	adds	r1, #12
 8009518:	1c9a      	adds	r2, r3, #2
 800951a:	0092      	lsls	r2, r2, #2
 800951c:	300c      	adds	r0, #12
 800951e:	930c      	str	r3, [sp, #48]	; 0x30
 8009520:	f7fe fdd6 	bl	80080d0 <memcpy>
 8009524:	ab22      	add	r3, sp, #136	; 0x88
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	ab21      	add	r3, sp, #132	; 0x84
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	0032      	movs	r2, r6
 800952e:	003b      	movs	r3, r7
 8009530:	9805      	ldr	r0, [sp, #20]
 8009532:	9612      	str	r6, [sp, #72]	; 0x48
 8009534:	9713      	str	r7, [sp, #76]	; 0x4c
 8009536:	f002 f97b 	bl	800b830 <__d2b>
 800953a:	9020      	str	r0, [sp, #128]	; 0x80
 800953c:	2800      	cmp	r0, #0
 800953e:	d100      	bne.n	8009542 <_strtod_l+0x6ea>
 8009540:	e6f4      	b.n	800932c <_strtod_l+0x4d4>
 8009542:	2101      	movs	r1, #1
 8009544:	9805      	ldr	r0, [sp, #20]
 8009546:	f001 febb 	bl	800b2c0 <__i2b>
 800954a:	9007      	str	r0, [sp, #28]
 800954c:	2800      	cmp	r0, #0
 800954e:	d100      	bne.n	8009552 <_strtod_l+0x6fa>
 8009550:	e6ec      	b.n	800932c <_strtod_l+0x4d4>
 8009552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009554:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009556:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009558:	1ad4      	subs	r4, r2, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	db01      	blt.n	8009562 <_strtod_l+0x70a>
 800955e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009560:	195d      	adds	r5, r3, r5
 8009562:	9908      	ldr	r1, [sp, #32]
 8009564:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009566:	1a5b      	subs	r3, r3, r1
 8009568:	2136      	movs	r1, #54	; 0x36
 800956a:	189b      	adds	r3, r3, r2
 800956c:	1a8a      	subs	r2, r1, r2
 800956e:	4986      	ldr	r1, [pc, #536]	; (8009788 <_strtod_l+0x930>)
 8009570:	2001      	movs	r0, #1
 8009572:	468c      	mov	ip, r1
 8009574:	2100      	movs	r1, #0
 8009576:	3b01      	subs	r3, #1
 8009578:	9110      	str	r1, [sp, #64]	; 0x40
 800957a:	9014      	str	r0, [sp, #80]	; 0x50
 800957c:	4563      	cmp	r3, ip
 800957e:	da07      	bge.n	8009590 <_strtod_l+0x738>
 8009580:	4661      	mov	r1, ip
 8009582:	1ac9      	subs	r1, r1, r3
 8009584:	1a52      	subs	r2, r2, r1
 8009586:	291f      	cmp	r1, #31
 8009588:	dd00      	ble.n	800958c <_strtod_l+0x734>
 800958a:	e0b8      	b.n	80096fe <_strtod_l+0x8a6>
 800958c:	4088      	lsls	r0, r1
 800958e:	9014      	str	r0, [sp, #80]	; 0x50
 8009590:	18ab      	adds	r3, r5, r2
 8009592:	930c      	str	r3, [sp, #48]	; 0x30
 8009594:	18a4      	adds	r4, r4, r2
 8009596:	9b08      	ldr	r3, [sp, #32]
 8009598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800959a:	191c      	adds	r4, r3, r4
 800959c:	002b      	movs	r3, r5
 800959e:	4295      	cmp	r5, r2
 80095a0:	dd00      	ble.n	80095a4 <_strtod_l+0x74c>
 80095a2:	0013      	movs	r3, r2
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	dd00      	ble.n	80095aa <_strtod_l+0x752>
 80095a8:	0023      	movs	r3, r4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dd04      	ble.n	80095b8 <_strtod_l+0x760>
 80095ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095b0:	1ae4      	subs	r4, r4, r3
 80095b2:	1ad2      	subs	r2, r2, r3
 80095b4:	920c      	str	r2, [sp, #48]	; 0x30
 80095b6:	1aed      	subs	r5, r5, r3
 80095b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dd17      	ble.n	80095ee <_strtod_l+0x796>
 80095be:	001a      	movs	r2, r3
 80095c0:	9907      	ldr	r1, [sp, #28]
 80095c2:	9805      	ldr	r0, [sp, #20]
 80095c4:	f001 ff42 	bl	800b44c <__pow5mult>
 80095c8:	9007      	str	r0, [sp, #28]
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d100      	bne.n	80095d0 <_strtod_l+0x778>
 80095ce:	e6ad      	b.n	800932c <_strtod_l+0x4d4>
 80095d0:	0001      	movs	r1, r0
 80095d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80095d4:	9805      	ldr	r0, [sp, #20]
 80095d6:	f001 fe89 	bl	800b2ec <__multiply>
 80095da:	900f      	str	r0, [sp, #60]	; 0x3c
 80095dc:	2800      	cmp	r0, #0
 80095de:	d100      	bne.n	80095e2 <_strtod_l+0x78a>
 80095e0:	e6a4      	b.n	800932c <_strtod_l+0x4d4>
 80095e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80095e4:	9805      	ldr	r0, [sp, #20]
 80095e6:	f001 fd6f 	bl	800b0c8 <_Bfree>
 80095ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ec:	9320      	str	r3, [sp, #128]	; 0x80
 80095ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dd00      	ble.n	80095f6 <_strtod_l+0x79e>
 80095f4:	e089      	b.n	800970a <_strtod_l+0x8b2>
 80095f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dd08      	ble.n	800960e <_strtod_l+0x7b6>
 80095fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009600:	9805      	ldr	r0, [sp, #20]
 8009602:	f001 ff23 	bl	800b44c <__pow5mult>
 8009606:	9009      	str	r0, [sp, #36]	; 0x24
 8009608:	2800      	cmp	r0, #0
 800960a:	d100      	bne.n	800960e <_strtod_l+0x7b6>
 800960c:	e68e      	b.n	800932c <_strtod_l+0x4d4>
 800960e:	2c00      	cmp	r4, #0
 8009610:	dd08      	ble.n	8009624 <_strtod_l+0x7cc>
 8009612:	0022      	movs	r2, r4
 8009614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009616:	9805      	ldr	r0, [sp, #20]
 8009618:	f001 ff74 	bl	800b504 <__lshift>
 800961c:	9009      	str	r0, [sp, #36]	; 0x24
 800961e:	2800      	cmp	r0, #0
 8009620:	d100      	bne.n	8009624 <_strtod_l+0x7cc>
 8009622:	e683      	b.n	800932c <_strtod_l+0x4d4>
 8009624:	2d00      	cmp	r5, #0
 8009626:	dd08      	ble.n	800963a <_strtod_l+0x7e2>
 8009628:	002a      	movs	r2, r5
 800962a:	9907      	ldr	r1, [sp, #28]
 800962c:	9805      	ldr	r0, [sp, #20]
 800962e:	f001 ff69 	bl	800b504 <__lshift>
 8009632:	9007      	str	r0, [sp, #28]
 8009634:	2800      	cmp	r0, #0
 8009636:	d100      	bne.n	800963a <_strtod_l+0x7e2>
 8009638:	e678      	b.n	800932c <_strtod_l+0x4d4>
 800963a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800963e:	9805      	ldr	r0, [sp, #20]
 8009640:	f001 ffea 	bl	800b618 <__mdiff>
 8009644:	9006      	str	r0, [sp, #24]
 8009646:	2800      	cmp	r0, #0
 8009648:	d100      	bne.n	800964c <_strtod_l+0x7f4>
 800964a:	e66f      	b.n	800932c <_strtod_l+0x4d4>
 800964c:	2200      	movs	r2, #0
 800964e:	68c3      	ldr	r3, [r0, #12]
 8009650:	9907      	ldr	r1, [sp, #28]
 8009652:	60c2      	str	r2, [r0, #12]
 8009654:	930f      	str	r3, [sp, #60]	; 0x3c
 8009656:	f001 ffc3 	bl	800b5e0 <__mcmp>
 800965a:	2800      	cmp	r0, #0
 800965c:	da5f      	bge.n	800971e <_strtod_l+0x8c6>
 800965e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009660:	4333      	orrs	r3, r6
 8009662:	d000      	beq.n	8009666 <_strtod_l+0x80e>
 8009664:	e08a      	b.n	800977c <_strtod_l+0x924>
 8009666:	033b      	lsls	r3, r7, #12
 8009668:	d000      	beq.n	800966c <_strtod_l+0x814>
 800966a:	e087      	b.n	800977c <_strtod_l+0x924>
 800966c:	22d6      	movs	r2, #214	; 0xd6
 800966e:	4b47      	ldr	r3, [pc, #284]	; (800978c <_strtod_l+0x934>)
 8009670:	04d2      	lsls	r2, r2, #19
 8009672:	403b      	ands	r3, r7
 8009674:	4293      	cmp	r3, r2
 8009676:	d800      	bhi.n	800967a <_strtod_l+0x822>
 8009678:	e080      	b.n	800977c <_strtod_l+0x924>
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	930a      	str	r3, [sp, #40]	; 0x28
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <_strtod_l+0x836>
 8009684:	9b06      	ldr	r3, [sp, #24]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	930a      	str	r3, [sp, #40]	; 0x28
 800968a:	2b01      	cmp	r3, #1
 800968c:	dd76      	ble.n	800977c <_strtod_l+0x924>
 800968e:	9906      	ldr	r1, [sp, #24]
 8009690:	2201      	movs	r2, #1
 8009692:	9805      	ldr	r0, [sp, #20]
 8009694:	f001 ff36 	bl	800b504 <__lshift>
 8009698:	9907      	ldr	r1, [sp, #28]
 800969a:	9006      	str	r0, [sp, #24]
 800969c:	f001 ffa0 	bl	800b5e0 <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dd6b      	ble.n	800977c <_strtod_l+0x924>
 80096a4:	9908      	ldr	r1, [sp, #32]
 80096a6:	003b      	movs	r3, r7
 80096a8:	4a38      	ldr	r2, [pc, #224]	; (800978c <_strtod_l+0x934>)
 80096aa:	2900      	cmp	r1, #0
 80096ac:	d100      	bne.n	80096b0 <_strtod_l+0x858>
 80096ae:	e092      	b.n	80097d6 <_strtod_l+0x97e>
 80096b0:	0011      	movs	r1, r2
 80096b2:	20d6      	movs	r0, #214	; 0xd6
 80096b4:	4039      	ands	r1, r7
 80096b6:	04c0      	lsls	r0, r0, #19
 80096b8:	4281      	cmp	r1, r0
 80096ba:	dd00      	ble.n	80096be <_strtod_l+0x866>
 80096bc:	e08b      	b.n	80097d6 <_strtod_l+0x97e>
 80096be:	23dc      	movs	r3, #220	; 0xdc
 80096c0:	049b      	lsls	r3, r3, #18
 80096c2:	4299      	cmp	r1, r3
 80096c4:	dc00      	bgt.n	80096c8 <_strtod_l+0x870>
 80096c6:	e6a4      	b.n	8009412 <_strtod_l+0x5ba>
 80096c8:	0030      	movs	r0, r6
 80096ca:	0039      	movs	r1, r7
 80096cc:	2200      	movs	r2, #0
 80096ce:	4b30      	ldr	r3, [pc, #192]	; (8009790 <_strtod_l+0x938>)
 80096d0:	f7f8 f926 	bl	8001920 <__aeabi_dmul>
 80096d4:	0006      	movs	r6, r0
 80096d6:	000f      	movs	r7, r1
 80096d8:	4308      	orrs	r0, r1
 80096da:	d000      	beq.n	80096de <_strtod_l+0x886>
 80096dc:	e62f      	b.n	800933e <_strtod_l+0x4e6>
 80096de:	2322      	movs	r3, #34	; 0x22
 80096e0:	9a05      	ldr	r2, [sp, #20]
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e62b      	b.n	800933e <_strtod_l+0x4e6>
 80096e6:	234b      	movs	r3, #75	; 0x4b
 80096e8:	1a9a      	subs	r2, r3, r2
 80096ea:	3b4c      	subs	r3, #76	; 0x4c
 80096ec:	4093      	lsls	r3, r2
 80096ee:	4019      	ands	r1, r3
 80096f0:	000f      	movs	r7, r1
 80096f2:	e6e0      	b.n	80094b6 <_strtod_l+0x65e>
 80096f4:	2201      	movs	r2, #1
 80096f6:	4252      	negs	r2, r2
 80096f8:	409a      	lsls	r2, r3
 80096fa:	4016      	ands	r6, r2
 80096fc:	e6db      	b.n	80094b6 <_strtod_l+0x65e>
 80096fe:	4925      	ldr	r1, [pc, #148]	; (8009794 <_strtod_l+0x93c>)
 8009700:	1acb      	subs	r3, r1, r3
 8009702:	0001      	movs	r1, r0
 8009704:	4099      	lsls	r1, r3
 8009706:	9110      	str	r1, [sp, #64]	; 0x40
 8009708:	e741      	b.n	800958e <_strtod_l+0x736>
 800970a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800970c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800970e:	9805      	ldr	r0, [sp, #20]
 8009710:	f001 fef8 	bl	800b504 <__lshift>
 8009714:	9020      	str	r0, [sp, #128]	; 0x80
 8009716:	2800      	cmp	r0, #0
 8009718:	d000      	beq.n	800971c <_strtod_l+0x8c4>
 800971a:	e76c      	b.n	80095f6 <_strtod_l+0x79e>
 800971c:	e606      	b.n	800932c <_strtod_l+0x4d4>
 800971e:	970c      	str	r7, [sp, #48]	; 0x30
 8009720:	2800      	cmp	r0, #0
 8009722:	d176      	bne.n	8009812 <_strtod_l+0x9ba>
 8009724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009726:	033b      	lsls	r3, r7, #12
 8009728:	0b1b      	lsrs	r3, r3, #12
 800972a:	2a00      	cmp	r2, #0
 800972c:	d038      	beq.n	80097a0 <_strtod_l+0x948>
 800972e:	4a1a      	ldr	r2, [pc, #104]	; (8009798 <_strtod_l+0x940>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d138      	bne.n	80097a6 <_strtod_l+0x94e>
 8009734:	2201      	movs	r2, #1
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	4252      	negs	r2, r2
 800973a:	0031      	movs	r1, r6
 800973c:	0010      	movs	r0, r2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <_strtod_l+0x902>
 8009742:	24d4      	movs	r4, #212	; 0xd4
 8009744:	4b11      	ldr	r3, [pc, #68]	; (800978c <_strtod_l+0x934>)
 8009746:	0010      	movs	r0, r2
 8009748:	403b      	ands	r3, r7
 800974a:	04e4      	lsls	r4, r4, #19
 800974c:	42a3      	cmp	r3, r4
 800974e:	d804      	bhi.n	800975a <_strtod_l+0x902>
 8009750:	306c      	adds	r0, #108	; 0x6c
 8009752:	0d1b      	lsrs	r3, r3, #20
 8009754:	1ac3      	subs	r3, r0, r3
 8009756:	409a      	lsls	r2, r3
 8009758:	0010      	movs	r0, r2
 800975a:	4281      	cmp	r1, r0
 800975c:	d123      	bne.n	80097a6 <_strtod_l+0x94e>
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <_strtod_l+0x944>)
 8009760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009762:	429a      	cmp	r2, r3
 8009764:	d102      	bne.n	800976c <_strtod_l+0x914>
 8009766:	1c4b      	adds	r3, r1, #1
 8009768:	d100      	bne.n	800976c <_strtod_l+0x914>
 800976a:	e5df      	b.n	800932c <_strtod_l+0x4d4>
 800976c:	4b07      	ldr	r3, [pc, #28]	; (800978c <_strtod_l+0x934>)
 800976e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009770:	2600      	movs	r6, #0
 8009772:	401a      	ands	r2, r3
 8009774:	0013      	movs	r3, r2
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	0352      	lsls	r2, r2, #13
 800977a:	189f      	adds	r7, r3, r2
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1a2      	bne.n	80096c8 <_strtod_l+0x870>
 8009782:	e5dc      	b.n	800933e <_strtod_l+0x4e6>
 8009784:	0800cd70 	.word	0x0800cd70
 8009788:	fffffc02 	.word	0xfffffc02
 800978c:	7ff00000 	.word	0x7ff00000
 8009790:	39500000 	.word	0x39500000
 8009794:	fffffbe2 	.word	0xfffffbe2
 8009798:	000fffff 	.word	0x000fffff
 800979c:	7fefffff 	.word	0x7fefffff
 80097a0:	4333      	orrs	r3, r6
 80097a2:	d100      	bne.n	80097a6 <_strtod_l+0x94e>
 80097a4:	e77e      	b.n	80096a4 <_strtod_l+0x84c>
 80097a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01d      	beq.n	80097e8 <_strtod_l+0x990>
 80097ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097b0:	4213      	tst	r3, r2
 80097b2:	d0e3      	beq.n	800977c <_strtod_l+0x924>
 80097b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097b6:	0030      	movs	r0, r6
 80097b8:	0039      	movs	r1, r7
 80097ba:	9a08      	ldr	r2, [sp, #32]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d017      	beq.n	80097f0 <_strtod_l+0x998>
 80097c0:	f7ff fb32 	bl	8008e28 <sulp>
 80097c4:	0002      	movs	r2, r0
 80097c6:	000b      	movs	r3, r1
 80097c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80097ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80097cc:	f7f7 f96a 	bl	8000aa4 <__aeabi_dadd>
 80097d0:	0006      	movs	r6, r0
 80097d2:	000f      	movs	r7, r1
 80097d4:	e7d2      	b.n	800977c <_strtod_l+0x924>
 80097d6:	2601      	movs	r6, #1
 80097d8:	4013      	ands	r3, r2
 80097da:	4a99      	ldr	r2, [pc, #612]	; (8009a40 <_strtod_l+0xbe8>)
 80097dc:	4276      	negs	r6, r6
 80097de:	189b      	adds	r3, r3, r2
 80097e0:	4a98      	ldr	r2, [pc, #608]	; (8009a44 <_strtod_l+0xbec>)
 80097e2:	431a      	orrs	r2, r3
 80097e4:	0017      	movs	r7, r2
 80097e6:	e7c9      	b.n	800977c <_strtod_l+0x924>
 80097e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097ea:	4233      	tst	r3, r6
 80097ec:	d0c6      	beq.n	800977c <_strtod_l+0x924>
 80097ee:	e7e1      	b.n	80097b4 <_strtod_l+0x95c>
 80097f0:	f7ff fb1a 	bl	8008e28 <sulp>
 80097f4:	0002      	movs	r2, r0
 80097f6:	000b      	movs	r3, r1
 80097f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80097fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80097fc:	f7f8 fafc 	bl	8001df8 <__aeabi_dsub>
 8009800:	2200      	movs	r2, #0
 8009802:	2300      	movs	r3, #0
 8009804:	0006      	movs	r6, r0
 8009806:	000f      	movs	r7, r1
 8009808:	f7f6 fe20 	bl	800044c <__aeabi_dcmpeq>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0b5      	beq.n	800977c <_strtod_l+0x924>
 8009810:	e5ff      	b.n	8009412 <_strtod_l+0x5ba>
 8009812:	9907      	ldr	r1, [sp, #28]
 8009814:	9806      	ldr	r0, [sp, #24]
 8009816:	f002 f86f 	bl	800b8f8 <__ratio>
 800981a:	2380      	movs	r3, #128	; 0x80
 800981c:	2200      	movs	r2, #0
 800981e:	05db      	lsls	r3, r3, #23
 8009820:	0004      	movs	r4, r0
 8009822:	000d      	movs	r5, r1
 8009824:	f7f6 fe22 	bl	800046c <__aeabi_dcmple>
 8009828:	2800      	cmp	r0, #0
 800982a:	d075      	beq.n	8009918 <_strtod_l+0xac0>
 800982c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d047      	beq.n	80098c2 <_strtod_l+0xa6a>
 8009832:	2300      	movs	r3, #0
 8009834:	4c84      	ldr	r4, [pc, #528]	; (8009a48 <_strtod_l+0xbf0>)
 8009836:	2500      	movs	r5, #0
 8009838:	9310      	str	r3, [sp, #64]	; 0x40
 800983a:	9411      	str	r4, [sp, #68]	; 0x44
 800983c:	4c82      	ldr	r4, [pc, #520]	; (8009a48 <_strtod_l+0xbf0>)
 800983e:	4a83      	ldr	r2, [pc, #524]	; (8009a4c <_strtod_l+0xbf4>)
 8009840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009842:	4013      	ands	r3, r2
 8009844:	9314      	str	r3, [sp, #80]	; 0x50
 8009846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009848:	4b81      	ldr	r3, [pc, #516]	; (8009a50 <_strtod_l+0xbf8>)
 800984a:	429a      	cmp	r2, r3
 800984c:	d000      	beq.n	8009850 <_strtod_l+0x9f8>
 800984e:	e0ac      	b.n	80099aa <_strtod_l+0xb52>
 8009850:	4a80      	ldr	r2, [pc, #512]	; (8009a54 <_strtod_l+0xbfc>)
 8009852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009854:	4694      	mov	ip, r2
 8009856:	4463      	add	r3, ip
 8009858:	001f      	movs	r7, r3
 800985a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800985c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800985e:	0030      	movs	r0, r6
 8009860:	0039      	movs	r1, r7
 8009862:	920c      	str	r2, [sp, #48]	; 0x30
 8009864:	930d      	str	r3, [sp, #52]	; 0x34
 8009866:	f001 ff6f 	bl	800b748 <__ulp>
 800986a:	0002      	movs	r2, r0
 800986c:	000b      	movs	r3, r1
 800986e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009870:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009872:	f7f8 f855 	bl	8001920 <__aeabi_dmul>
 8009876:	0032      	movs	r2, r6
 8009878:	003b      	movs	r3, r7
 800987a:	f7f7 f913 	bl	8000aa4 <__aeabi_dadd>
 800987e:	4a73      	ldr	r2, [pc, #460]	; (8009a4c <_strtod_l+0xbf4>)
 8009880:	4b75      	ldr	r3, [pc, #468]	; (8009a58 <_strtod_l+0xc00>)
 8009882:	0006      	movs	r6, r0
 8009884:	400a      	ands	r2, r1
 8009886:	429a      	cmp	r2, r3
 8009888:	d95e      	bls.n	8009948 <_strtod_l+0xaf0>
 800988a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800988c:	4b73      	ldr	r3, [pc, #460]	; (8009a5c <_strtod_l+0xc04>)
 800988e:	429a      	cmp	r2, r3
 8009890:	d103      	bne.n	800989a <_strtod_l+0xa42>
 8009892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009894:	3301      	adds	r3, #1
 8009896:	d100      	bne.n	800989a <_strtod_l+0xa42>
 8009898:	e548      	b.n	800932c <_strtod_l+0x4d4>
 800989a:	2601      	movs	r6, #1
 800989c:	4f6f      	ldr	r7, [pc, #444]	; (8009a5c <_strtod_l+0xc04>)
 800989e:	4276      	negs	r6, r6
 80098a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80098a2:	9805      	ldr	r0, [sp, #20]
 80098a4:	f001 fc10 	bl	800b0c8 <_Bfree>
 80098a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098aa:	9805      	ldr	r0, [sp, #20]
 80098ac:	f001 fc0c 	bl	800b0c8 <_Bfree>
 80098b0:	9907      	ldr	r1, [sp, #28]
 80098b2:	9805      	ldr	r0, [sp, #20]
 80098b4:	f001 fc08 	bl	800b0c8 <_Bfree>
 80098b8:	9906      	ldr	r1, [sp, #24]
 80098ba:	9805      	ldr	r0, [sp, #20]
 80098bc:	f001 fc04 	bl	800b0c8 <_Bfree>
 80098c0:	e61d      	b.n	80094fe <_strtod_l+0x6a6>
 80098c2:	2e00      	cmp	r6, #0
 80098c4:	d11c      	bne.n	8009900 <_strtod_l+0xaa8>
 80098c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c8:	031b      	lsls	r3, r3, #12
 80098ca:	d11f      	bne.n	800990c <_strtod_l+0xab4>
 80098cc:	2200      	movs	r2, #0
 80098ce:	0020      	movs	r0, r4
 80098d0:	0029      	movs	r1, r5
 80098d2:	4b5d      	ldr	r3, [pc, #372]	; (8009a48 <_strtod_l+0xbf0>)
 80098d4:	f7f6 fdc0 	bl	8000458 <__aeabi_dcmplt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d11a      	bne.n	8009912 <_strtod_l+0xaba>
 80098dc:	0020      	movs	r0, r4
 80098de:	0029      	movs	r1, r5
 80098e0:	2200      	movs	r2, #0
 80098e2:	4b5f      	ldr	r3, [pc, #380]	; (8009a60 <_strtod_l+0xc08>)
 80098e4:	f7f8 f81c 	bl	8001920 <__aeabi_dmul>
 80098e8:	0005      	movs	r5, r0
 80098ea:	000c      	movs	r4, r1
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	061b      	lsls	r3, r3, #24
 80098f0:	18e3      	adds	r3, r4, r3
 80098f2:	951c      	str	r5, [sp, #112]	; 0x70
 80098f4:	931d      	str	r3, [sp, #116]	; 0x74
 80098f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098fa:	9210      	str	r2, [sp, #64]	; 0x40
 80098fc:	9311      	str	r3, [sp, #68]	; 0x44
 80098fe:	e79e      	b.n	800983e <_strtod_l+0x9e6>
 8009900:	2e01      	cmp	r6, #1
 8009902:	d103      	bne.n	800990c <_strtod_l+0xab4>
 8009904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d100      	bne.n	800990c <_strtod_l+0xab4>
 800990a:	e582      	b.n	8009412 <_strtod_l+0x5ba>
 800990c:	2300      	movs	r3, #0
 800990e:	4c55      	ldr	r4, [pc, #340]	; (8009a64 <_strtod_l+0xc0c>)
 8009910:	e791      	b.n	8009836 <_strtod_l+0x9de>
 8009912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009914:	4c52      	ldr	r4, [pc, #328]	; (8009a60 <_strtod_l+0xc08>)
 8009916:	e7e9      	b.n	80098ec <_strtod_l+0xa94>
 8009918:	2200      	movs	r2, #0
 800991a:	0020      	movs	r0, r4
 800991c:	0029      	movs	r1, r5
 800991e:	4b50      	ldr	r3, [pc, #320]	; (8009a60 <_strtod_l+0xc08>)
 8009920:	f7f7 fffe 	bl	8001920 <__aeabi_dmul>
 8009924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009926:	0005      	movs	r5, r0
 8009928:	000b      	movs	r3, r1
 800992a:	000c      	movs	r4, r1
 800992c:	2a00      	cmp	r2, #0
 800992e:	d107      	bne.n	8009940 <_strtod_l+0xae8>
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	0612      	lsls	r2, r2, #24
 8009934:	188b      	adds	r3, r1, r2
 8009936:	9016      	str	r0, [sp, #88]	; 0x58
 8009938:	9317      	str	r3, [sp, #92]	; 0x5c
 800993a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800993c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800993e:	e7dc      	b.n	80098fa <_strtod_l+0xaa2>
 8009940:	0002      	movs	r2, r0
 8009942:	9216      	str	r2, [sp, #88]	; 0x58
 8009944:	9317      	str	r3, [sp, #92]	; 0x5c
 8009946:	e7f8      	b.n	800993a <_strtod_l+0xae2>
 8009948:	23d4      	movs	r3, #212	; 0xd4
 800994a:	049b      	lsls	r3, r3, #18
 800994c:	18cf      	adds	r7, r1, r3
 800994e:	9b08      	ldr	r3, [sp, #32]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1a5      	bne.n	80098a0 <_strtod_l+0xa48>
 8009954:	4b3d      	ldr	r3, [pc, #244]	; (8009a4c <_strtod_l+0xbf4>)
 8009956:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009958:	403b      	ands	r3, r7
 800995a:	429a      	cmp	r2, r3
 800995c:	d1a0      	bne.n	80098a0 <_strtod_l+0xa48>
 800995e:	0028      	movs	r0, r5
 8009960:	0021      	movs	r1, r4
 8009962:	f7f6 fe0d 	bl	8000580 <__aeabi_d2lz>
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_l2d>
 800996a:	0002      	movs	r2, r0
 800996c:	000b      	movs	r3, r1
 800996e:	0028      	movs	r0, r5
 8009970:	0021      	movs	r1, r4
 8009972:	f7f8 fa41 	bl	8001df8 <__aeabi_dsub>
 8009976:	033b      	lsls	r3, r7, #12
 8009978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800997a:	0b1b      	lsrs	r3, r3, #12
 800997c:	4333      	orrs	r3, r6
 800997e:	4313      	orrs	r3, r2
 8009980:	0004      	movs	r4, r0
 8009982:	000d      	movs	r5, r1
 8009984:	4a38      	ldr	r2, [pc, #224]	; (8009a68 <_strtod_l+0xc10>)
 8009986:	2b00      	cmp	r3, #0
 8009988:	d055      	beq.n	8009a36 <_strtod_l+0xbde>
 800998a:	4b38      	ldr	r3, [pc, #224]	; (8009a6c <_strtod_l+0xc14>)
 800998c:	f7f6 fd64 	bl	8000458 <__aeabi_dcmplt>
 8009990:	2800      	cmp	r0, #0
 8009992:	d000      	beq.n	8009996 <_strtod_l+0xb3e>
 8009994:	e4d3      	b.n	800933e <_strtod_l+0x4e6>
 8009996:	0020      	movs	r0, r4
 8009998:	0029      	movs	r1, r5
 800999a:	4a35      	ldr	r2, [pc, #212]	; (8009a70 <_strtod_l+0xc18>)
 800999c:	4b30      	ldr	r3, [pc, #192]	; (8009a60 <_strtod_l+0xc08>)
 800999e:	f7f6 fd6f 	bl	8000480 <__aeabi_dcmpgt>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d100      	bne.n	80099a8 <_strtod_l+0xb50>
 80099a6:	e77b      	b.n	80098a0 <_strtod_l+0xa48>
 80099a8:	e4c9      	b.n	800933e <_strtod_l+0x4e6>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02b      	beq.n	8009a08 <_strtod_l+0xbb0>
 80099b0:	23d4      	movs	r3, #212	; 0xd4
 80099b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099b4:	04db      	lsls	r3, r3, #19
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d826      	bhi.n	8009a08 <_strtod_l+0xbb0>
 80099ba:	0028      	movs	r0, r5
 80099bc:	0021      	movs	r1, r4
 80099be:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <_strtod_l+0xc1c>)
 80099c0:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <_strtod_l+0xc20>)
 80099c2:	f7f6 fd53 	bl	800046c <__aeabi_dcmple>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d017      	beq.n	80099fa <_strtod_l+0xba2>
 80099ca:	0028      	movs	r0, r5
 80099cc:	0021      	movs	r1, r4
 80099ce:	f7f6 fdb9 	bl	8000544 <__aeabi_d2uiz>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d100      	bne.n	80099d8 <_strtod_l+0xb80>
 80099d6:	3001      	adds	r0, #1
 80099d8:	f7f8 fe24 	bl	8002624 <__aeabi_ui2d>
 80099dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099de:	0005      	movs	r5, r0
 80099e0:	000b      	movs	r3, r1
 80099e2:	000c      	movs	r4, r1
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	d122      	bne.n	8009a2e <_strtod_l+0xbd6>
 80099e8:	2280      	movs	r2, #128	; 0x80
 80099ea:	0612      	lsls	r2, r2, #24
 80099ec:	188b      	adds	r3, r1, r2
 80099ee:	9018      	str	r0, [sp, #96]	; 0x60
 80099f0:	9319      	str	r3, [sp, #100]	; 0x64
 80099f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099f6:	9210      	str	r2, [sp, #64]	; 0x40
 80099f8:	9311      	str	r3, [sp, #68]	; 0x44
 80099fa:	22d6      	movs	r2, #214	; 0xd6
 80099fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099fe:	04d2      	lsls	r2, r2, #19
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	9311      	str	r3, [sp, #68]	; 0x44
 8009a08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009a0e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009a10:	f001 fe9a 	bl	800b748 <__ulp>
 8009a14:	0002      	movs	r2, r0
 8009a16:	000b      	movs	r3, r1
 8009a18:	0030      	movs	r0, r6
 8009a1a:	0039      	movs	r1, r7
 8009a1c:	f7f7 ff80 	bl	8001920 <__aeabi_dmul>
 8009a20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a24:	f7f7 f83e 	bl	8000aa4 <__aeabi_dadd>
 8009a28:	0006      	movs	r6, r0
 8009a2a:	000f      	movs	r7, r1
 8009a2c:	e78f      	b.n	800994e <_strtod_l+0xaf6>
 8009a2e:	0002      	movs	r2, r0
 8009a30:	9218      	str	r2, [sp, #96]	; 0x60
 8009a32:	9319      	str	r3, [sp, #100]	; 0x64
 8009a34:	e7dd      	b.n	80099f2 <_strtod_l+0xb9a>
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <_strtod_l+0xc24>)
 8009a38:	f7f6 fd0e 	bl	8000458 <__aeabi_dcmplt>
 8009a3c:	e7b1      	b.n	80099a2 <_strtod_l+0xb4a>
 8009a3e:	46c0      	nop			; (mov r8, r8)
 8009a40:	fff00000 	.word	0xfff00000
 8009a44:	000fffff 	.word	0x000fffff
 8009a48:	3ff00000 	.word	0x3ff00000
 8009a4c:	7ff00000 	.word	0x7ff00000
 8009a50:	7fe00000 	.word	0x7fe00000
 8009a54:	fcb00000 	.word	0xfcb00000
 8009a58:	7c9fffff 	.word	0x7c9fffff
 8009a5c:	7fefffff 	.word	0x7fefffff
 8009a60:	3fe00000 	.word	0x3fe00000
 8009a64:	bff00000 	.word	0xbff00000
 8009a68:	94a03595 	.word	0x94a03595
 8009a6c:	3fdfffff 	.word	0x3fdfffff
 8009a70:	35afe535 	.word	0x35afe535
 8009a74:	ffc00000 	.word	0xffc00000
 8009a78:	41dfffff 	.word	0x41dfffff
 8009a7c:	3fcfffff 	.word	0x3fcfffff

08009a80 <_strtod_r>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <_strtod_r+0xc>)
 8009a84:	f7ff f9e8 	bl	8008e58 <_strtod_l>
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	46c0      	nop			; (mov r8, r8)
 8009a8c:	20000080 	.word	0x20000080

08009a90 <_strtol_l.constprop.0>:
 8009a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a92:	b087      	sub	sp, #28
 8009a94:	001e      	movs	r6, r3
 8009a96:	9005      	str	r0, [sp, #20]
 8009a98:	9101      	str	r1, [sp, #4]
 8009a9a:	9202      	str	r2, [sp, #8]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d045      	beq.n	8009b2c <_strtol_l.constprop.0+0x9c>
 8009aa0:	000b      	movs	r3, r1
 8009aa2:	2e24      	cmp	r6, #36	; 0x24
 8009aa4:	d842      	bhi.n	8009b2c <_strtol_l.constprop.0+0x9c>
 8009aa6:	4a3f      	ldr	r2, [pc, #252]	; (8009ba4 <_strtol_l.constprop.0+0x114>)
 8009aa8:	2108      	movs	r1, #8
 8009aaa:	4694      	mov	ip, r2
 8009aac:	001a      	movs	r2, r3
 8009aae:	4660      	mov	r0, ip
 8009ab0:	7814      	ldrb	r4, [r2, #0]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	5d00      	ldrb	r0, [r0, r4]
 8009ab6:	001d      	movs	r5, r3
 8009ab8:	0007      	movs	r7, r0
 8009aba:	400f      	ands	r7, r1
 8009abc:	4208      	tst	r0, r1
 8009abe:	d1f5      	bne.n	8009aac <_strtol_l.constprop.0+0x1c>
 8009ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ac2:	d13a      	bne.n	8009b3a <_strtol_l.constprop.0+0xaa>
 8009ac4:	2701      	movs	r7, #1
 8009ac6:	781c      	ldrb	r4, [r3, #0]
 8009ac8:	1c95      	adds	r5, r2, #2
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	d065      	beq.n	8009b9a <_strtol_l.constprop.0+0x10a>
 8009ace:	2e10      	cmp	r6, #16
 8009ad0:	d109      	bne.n	8009ae6 <_strtol_l.constprop.0+0x56>
 8009ad2:	2c30      	cmp	r4, #48	; 0x30
 8009ad4:	d107      	bne.n	8009ae6 <_strtol_l.constprop.0+0x56>
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	782b      	ldrb	r3, [r5, #0]
 8009ada:	4393      	bics	r3, r2
 8009adc:	2b58      	cmp	r3, #88	; 0x58
 8009ade:	d157      	bne.n	8009b90 <_strtol_l.constprop.0+0x100>
 8009ae0:	2610      	movs	r6, #16
 8009ae2:	786c      	ldrb	r4, [r5, #1]
 8009ae4:	3502      	adds	r5, #2
 8009ae6:	4b30      	ldr	r3, [pc, #192]	; (8009ba8 <_strtol_l.constprop.0+0x118>)
 8009ae8:	0031      	movs	r1, r6
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	0018      	movs	r0, r3
 8009aee:	9303      	str	r3, [sp, #12]
 8009af0:	f7f6 fbac 	bl	800024c <__aeabi_uidivmod>
 8009af4:	2300      	movs	r3, #0
 8009af6:	2201      	movs	r2, #1
 8009af8:	4684      	mov	ip, r0
 8009afa:	0018      	movs	r0, r3
 8009afc:	9104      	str	r1, [sp, #16]
 8009afe:	4252      	negs	r2, r2
 8009b00:	0021      	movs	r1, r4
 8009b02:	3930      	subs	r1, #48	; 0x30
 8009b04:	2909      	cmp	r1, #9
 8009b06:	d81d      	bhi.n	8009b44 <_strtol_l.constprop.0+0xb4>
 8009b08:	000c      	movs	r4, r1
 8009b0a:	42a6      	cmp	r6, r4
 8009b0c:	dd28      	ble.n	8009b60 <_strtol_l.constprop.0+0xd0>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	db24      	blt.n	8009b5c <_strtol_l.constprop.0+0xcc>
 8009b12:	0013      	movs	r3, r2
 8009b14:	4584      	cmp	ip, r0
 8009b16:	d306      	bcc.n	8009b26 <_strtol_l.constprop.0+0x96>
 8009b18:	d102      	bne.n	8009b20 <_strtol_l.constprop.0+0x90>
 8009b1a:	9904      	ldr	r1, [sp, #16]
 8009b1c:	42a1      	cmp	r1, r4
 8009b1e:	db02      	blt.n	8009b26 <_strtol_l.constprop.0+0x96>
 8009b20:	2301      	movs	r3, #1
 8009b22:	4370      	muls	r0, r6
 8009b24:	1820      	adds	r0, r4, r0
 8009b26:	782c      	ldrb	r4, [r5, #0]
 8009b28:	3501      	adds	r5, #1
 8009b2a:	e7e9      	b.n	8009b00 <_strtol_l.constprop.0+0x70>
 8009b2c:	f7fe faa6 	bl	800807c <__errno>
 8009b30:	2316      	movs	r3, #22
 8009b32:	6003      	str	r3, [r0, #0]
 8009b34:	2000      	movs	r0, #0
 8009b36:	b007      	add	sp, #28
 8009b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3a:	2c2b      	cmp	r4, #43	; 0x2b
 8009b3c:	d1c5      	bne.n	8009aca <_strtol_l.constprop.0+0x3a>
 8009b3e:	781c      	ldrb	r4, [r3, #0]
 8009b40:	1c95      	adds	r5, r2, #2
 8009b42:	e7c2      	b.n	8009aca <_strtol_l.constprop.0+0x3a>
 8009b44:	0021      	movs	r1, r4
 8009b46:	3941      	subs	r1, #65	; 0x41
 8009b48:	2919      	cmp	r1, #25
 8009b4a:	d801      	bhi.n	8009b50 <_strtol_l.constprop.0+0xc0>
 8009b4c:	3c37      	subs	r4, #55	; 0x37
 8009b4e:	e7dc      	b.n	8009b0a <_strtol_l.constprop.0+0x7a>
 8009b50:	0021      	movs	r1, r4
 8009b52:	3961      	subs	r1, #97	; 0x61
 8009b54:	2919      	cmp	r1, #25
 8009b56:	d803      	bhi.n	8009b60 <_strtol_l.constprop.0+0xd0>
 8009b58:	3c57      	subs	r4, #87	; 0x57
 8009b5a:	e7d6      	b.n	8009b0a <_strtol_l.constprop.0+0x7a>
 8009b5c:	0013      	movs	r3, r2
 8009b5e:	e7e2      	b.n	8009b26 <_strtol_l.constprop.0+0x96>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	da09      	bge.n	8009b78 <_strtol_l.constprop.0+0xe8>
 8009b64:	2322      	movs	r3, #34	; 0x22
 8009b66:	9a05      	ldr	r2, [sp, #20]
 8009b68:	9803      	ldr	r0, [sp, #12]
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0e1      	beq.n	8009b36 <_strtol_l.constprop.0+0xa6>
 8009b72:	1e6b      	subs	r3, r5, #1
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	e007      	b.n	8009b88 <_strtol_l.constprop.0+0xf8>
 8009b78:	2f00      	cmp	r7, #0
 8009b7a:	d000      	beq.n	8009b7e <_strtol_l.constprop.0+0xee>
 8009b7c:	4240      	negs	r0, r0
 8009b7e:	9a02      	ldr	r2, [sp, #8]
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	d0d8      	beq.n	8009b36 <_strtol_l.constprop.0+0xa6>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f4      	bne.n	8009b72 <_strtol_l.constprop.0+0xe2>
 8009b88:	9b02      	ldr	r3, [sp, #8]
 8009b8a:	9a01      	ldr	r2, [sp, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e7d2      	b.n	8009b36 <_strtol_l.constprop.0+0xa6>
 8009b90:	2430      	movs	r4, #48	; 0x30
 8009b92:	2e00      	cmp	r6, #0
 8009b94:	d1a7      	bne.n	8009ae6 <_strtol_l.constprop.0+0x56>
 8009b96:	3608      	adds	r6, #8
 8009b98:	e7a5      	b.n	8009ae6 <_strtol_l.constprop.0+0x56>
 8009b9a:	2c30      	cmp	r4, #48	; 0x30
 8009b9c:	d09b      	beq.n	8009ad6 <_strtol_l.constprop.0+0x46>
 8009b9e:	260a      	movs	r6, #10
 8009ba0:	e7a1      	b.n	8009ae6 <_strtol_l.constprop.0+0x56>
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	0800cd99 	.word	0x0800cd99
 8009ba8:	7fffffff 	.word	0x7fffffff

08009bac <_strtol_r>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	f7ff ff6f 	bl	8009a90 <_strtol_l.constprop.0>
 8009bb2:	bd10      	pop	{r4, pc}

08009bb4 <quorem>:
 8009bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb6:	0006      	movs	r6, r0
 8009bb8:	690b      	ldr	r3, [r1, #16]
 8009bba:	6932      	ldr	r2, [r6, #16]
 8009bbc:	b087      	sub	sp, #28
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	9103      	str	r1, [sp, #12]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	db65      	blt.n	8009c92 <quorem+0xde>
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	009c      	lsls	r4, r3, #2
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	000b      	movs	r3, r1
 8009bce:	3314      	adds	r3, #20
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	191b      	adds	r3, r3, r4
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	0033      	movs	r3, r6
 8009bd8:	3314      	adds	r3, #20
 8009bda:	9302      	str	r3, [sp, #8]
 8009bdc:	191c      	adds	r4, r3, r4
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	6827      	ldr	r7, [r4, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	0038      	movs	r0, r7
 8009be6:	1c5d      	adds	r5, r3, #1
 8009be8:	0029      	movs	r1, r5
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	f7f6 faa8 	bl	8000140 <__udivsi3>
 8009bf0:	9001      	str	r0, [sp, #4]
 8009bf2:	42af      	cmp	r7, r5
 8009bf4:	d324      	bcc.n	8009c40 <quorem+0x8c>
 8009bf6:	2500      	movs	r5, #0
 8009bf8:	46ac      	mov	ip, r5
 8009bfa:	9802      	ldr	r0, [sp, #8]
 8009bfc:	9f05      	ldr	r7, [sp, #20]
 8009bfe:	cf08      	ldmia	r7!, {r3}
 8009c00:	9a01      	ldr	r2, [sp, #4]
 8009c02:	b299      	uxth	r1, r3
 8009c04:	4351      	muls	r1, r2
 8009c06:	0c1b      	lsrs	r3, r3, #16
 8009c08:	4353      	muls	r3, r2
 8009c0a:	1949      	adds	r1, r1, r5
 8009c0c:	0c0a      	lsrs	r2, r1, #16
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	6802      	ldr	r2, [r0, #0]
 8009c12:	b289      	uxth	r1, r1
 8009c14:	b292      	uxth	r2, r2
 8009c16:	4462      	add	r2, ip
 8009c18:	1a52      	subs	r2, r2, r1
 8009c1a:	6801      	ldr	r1, [r0, #0]
 8009c1c:	0c1d      	lsrs	r5, r3, #16
 8009c1e:	0c09      	lsrs	r1, r1, #16
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	1acb      	subs	r3, r1, r3
 8009c24:	1411      	asrs	r1, r2, #16
 8009c26:	185b      	adds	r3, r3, r1
 8009c28:	1419      	asrs	r1, r3, #16
 8009c2a:	b292      	uxth	r2, r2
 8009c2c:	041b      	lsls	r3, r3, #16
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	9b04      	ldr	r3, [sp, #16]
 8009c32:	468c      	mov	ip, r1
 8009c34:	c004      	stmia	r0!, {r2}
 8009c36:	42bb      	cmp	r3, r7
 8009c38:	d2e1      	bcs.n	8009bfe <quorem+0x4a>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d030      	beq.n	8009ca2 <quorem+0xee>
 8009c40:	0030      	movs	r0, r6
 8009c42:	9903      	ldr	r1, [sp, #12]
 8009c44:	f001 fccc 	bl	800b5e0 <__mcmp>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	db21      	blt.n	8009c90 <quorem+0xdc>
 8009c4c:	0030      	movs	r0, r6
 8009c4e:	2400      	movs	r4, #0
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	9903      	ldr	r1, [sp, #12]
 8009c54:	3301      	adds	r3, #1
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	3014      	adds	r0, #20
 8009c5a:	3114      	adds	r1, #20
 8009c5c:	6803      	ldr	r3, [r0, #0]
 8009c5e:	c920      	ldmia	r1!, {r5}
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	1914      	adds	r4, r2, r4
 8009c64:	b2aa      	uxth	r2, r5
 8009c66:	1aa2      	subs	r2, r4, r2
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	0c2d      	lsrs	r5, r5, #16
 8009c6c:	1414      	asrs	r4, r2, #16
 8009c6e:	1b5b      	subs	r3, r3, r5
 8009c70:	191b      	adds	r3, r3, r4
 8009c72:	141c      	asrs	r4, r3, #16
 8009c74:	b292      	uxth	r2, r2
 8009c76:	041b      	lsls	r3, r3, #16
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	c008      	stmia	r0!, {r3}
 8009c7c:	9b04      	ldr	r3, [sp, #16]
 8009c7e:	428b      	cmp	r3, r1
 8009c80:	d2ec      	bcs.n	8009c5c <quorem+0xa8>
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	9a02      	ldr	r2, [sp, #8]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	18d3      	adds	r3, r2, r3
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d015      	beq.n	8009cbc <quorem+0x108>
 8009c90:	9801      	ldr	r0, [sp, #4]
 8009c92:	b007      	add	sp, #28
 8009c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <quorem+0xf6>
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	9b02      	ldr	r3, [sp, #8]
 8009ca4:	3c04      	subs	r4, #4
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	d3f5      	bcc.n	8009c96 <quorem+0xe2>
 8009caa:	9b00      	ldr	r3, [sp, #0]
 8009cac:	6133      	str	r3, [r6, #16]
 8009cae:	e7c7      	b.n	8009c40 <quorem+0x8c>
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d106      	bne.n	8009cc4 <quorem+0x110>
 8009cb6:	9a00      	ldr	r2, [sp, #0]
 8009cb8:	3a01      	subs	r2, #1
 8009cba:	9200      	str	r2, [sp, #0]
 8009cbc:	9a02      	ldr	r2, [sp, #8]
 8009cbe:	3b04      	subs	r3, #4
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d3f5      	bcc.n	8009cb0 <quorem+0xfc>
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	6133      	str	r3, [r6, #16]
 8009cc8:	e7e2      	b.n	8009c90 <quorem+0xdc>
	...

08009ccc <_dtoa_r>:
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	b09d      	sub	sp, #116	; 0x74
 8009cd0:	9202      	str	r2, [sp, #8]
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	9b02      	ldr	r3, [sp, #8]
 8009cd6:	9c03      	ldr	r4, [sp, #12]
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	9409      	str	r4, [sp, #36]	; 0x24
 8009cdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009cde:	0007      	movs	r7, r0
 8009ce0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009ce2:	2c00      	cmp	r4, #0
 8009ce4:	d10e      	bne.n	8009d04 <_dtoa_r+0x38>
 8009ce6:	2010      	movs	r0, #16
 8009ce8:	f001 f982 	bl	800aff0 <malloc>
 8009cec:	1e02      	subs	r2, r0, #0
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf0:	d104      	bne.n	8009cfc <_dtoa_r+0x30>
 8009cf2:	21ea      	movs	r1, #234	; 0xea
 8009cf4:	4bc7      	ldr	r3, [pc, #796]	; (800a014 <_dtoa_r+0x348>)
 8009cf6:	48c8      	ldr	r0, [pc, #800]	; (800a018 <_dtoa_r+0x34c>)
 8009cf8:	f002 f914 	bl	800bf24 <__assert_func>
 8009cfc:	6044      	str	r4, [r0, #4]
 8009cfe:	6084      	str	r4, [r0, #8]
 8009d00:	6004      	str	r4, [r0, #0]
 8009d02:	60c4      	str	r4, [r0, #12]
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	6819      	ldr	r1, [r3, #0]
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	d00a      	beq.n	8009d22 <_dtoa_r+0x56>
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4093      	lsls	r3, r2
 8009d12:	604a      	str	r2, [r1, #4]
 8009d14:	608b      	str	r3, [r1, #8]
 8009d16:	0038      	movs	r0, r7
 8009d18:	f001 f9d6 	bl	800b0c8 <_Bfree>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da20      	bge.n	8009d6a <_dtoa_r+0x9e>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	602b      	str	r3, [r5, #0]
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	085b      	lsrs	r3, r3, #1
 8009d32:	9309      	str	r3, [sp, #36]	; 0x24
 8009d34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d36:	4bb9      	ldr	r3, [pc, #740]	; (800a01c <_dtoa_r+0x350>)
 8009d38:	4ab8      	ldr	r2, [pc, #736]	; (800a01c <_dtoa_r+0x350>)
 8009d3a:	402b      	ands	r3, r5
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d117      	bne.n	8009d70 <_dtoa_r+0xa4>
 8009d40:	4bb7      	ldr	r3, [pc, #732]	; (800a020 <_dtoa_r+0x354>)
 8009d42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d44:	0328      	lsls	r0, r5, #12
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	0b00      	lsrs	r0, r0, #12
 8009d4c:	4318      	orrs	r0, r3
 8009d4e:	d101      	bne.n	8009d54 <_dtoa_r+0x88>
 8009d50:	f000 fdbf 	bl	800a8d2 <_dtoa_r+0xc06>
 8009d54:	48b3      	ldr	r0, [pc, #716]	; (800a024 <_dtoa_r+0x358>)
 8009d56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d58:	9006      	str	r0, [sp, #24]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <_dtoa_r+0x98>
 8009d5e:	4bb2      	ldr	r3, [pc, #712]	; (800a028 <_dtoa_r+0x35c>)
 8009d60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	9806      	ldr	r0, [sp, #24]
 8009d66:	b01d      	add	sp, #116	; 0x74
 8009d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	e7e1      	b.n	8009d34 <_dtoa_r+0x68>
 8009d70:	9b08      	ldr	r3, [sp, #32]
 8009d72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009d74:	9312      	str	r3, [sp, #72]	; 0x48
 8009d76:	9413      	str	r4, [sp, #76]	; 0x4c
 8009d78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f7f6 fb64 	bl	800044c <__aeabi_dcmpeq>
 8009d84:	1e04      	subs	r4, r0, #0
 8009d86:	d009      	beq.n	8009d9c <_dtoa_r+0xd0>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	4ba7      	ldr	r3, [pc, #668]	; (800a02c <_dtoa_r+0x360>)
 8009d90:	9306      	str	r3, [sp, #24]
 8009d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0e5      	beq.n	8009d64 <_dtoa_r+0x98>
 8009d98:	4ba5      	ldr	r3, [pc, #660]	; (800a030 <_dtoa_r+0x364>)
 8009d9a:	e7e1      	b.n	8009d60 <_dtoa_r+0x94>
 8009d9c:	ab1a      	add	r3, sp, #104	; 0x68
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	ab1b      	add	r3, sp, #108	; 0x6c
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	0038      	movs	r0, r7
 8009da6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009daa:	f001 fd41 	bl	800b830 <__d2b>
 8009dae:	006e      	lsls	r6, r5, #1
 8009db0:	9005      	str	r0, [sp, #20]
 8009db2:	0d76      	lsrs	r6, r6, #21
 8009db4:	d100      	bne.n	8009db8 <_dtoa_r+0xec>
 8009db6:	e07c      	b.n	8009eb2 <_dtoa_r+0x1e6>
 8009db8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009dba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dbe:	4a9d      	ldr	r2, [pc, #628]	; (800a034 <_dtoa_r+0x368>)
 8009dc0:	031b      	lsls	r3, r3, #12
 8009dc2:	0b1b      	lsrs	r3, r3, #12
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	0011      	movs	r1, r2
 8009dc8:	4b9b      	ldr	r3, [pc, #620]	; (800a038 <_dtoa_r+0x36c>)
 8009dca:	9418      	str	r4, [sp, #96]	; 0x60
 8009dcc:	18f6      	adds	r6, r6, r3
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4b9a      	ldr	r3, [pc, #616]	; (800a03c <_dtoa_r+0x370>)
 8009dd2:	f7f8 f811 	bl	8001df8 <__aeabi_dsub>
 8009dd6:	4a9a      	ldr	r2, [pc, #616]	; (800a040 <_dtoa_r+0x374>)
 8009dd8:	4b9a      	ldr	r3, [pc, #616]	; (800a044 <_dtoa_r+0x378>)
 8009dda:	f7f7 fda1 	bl	8001920 <__aeabi_dmul>
 8009dde:	4a9a      	ldr	r2, [pc, #616]	; (800a048 <_dtoa_r+0x37c>)
 8009de0:	4b9a      	ldr	r3, [pc, #616]	; (800a04c <_dtoa_r+0x380>)
 8009de2:	f7f6 fe5f 	bl	8000aa4 <__aeabi_dadd>
 8009de6:	0004      	movs	r4, r0
 8009de8:	0030      	movs	r0, r6
 8009dea:	000d      	movs	r5, r1
 8009dec:	f7f8 fbea 	bl	80025c4 <__aeabi_i2d>
 8009df0:	4a97      	ldr	r2, [pc, #604]	; (800a050 <_dtoa_r+0x384>)
 8009df2:	4b98      	ldr	r3, [pc, #608]	; (800a054 <_dtoa_r+0x388>)
 8009df4:	f7f7 fd94 	bl	8001920 <__aeabi_dmul>
 8009df8:	0002      	movs	r2, r0
 8009dfa:	000b      	movs	r3, r1
 8009dfc:	0020      	movs	r0, r4
 8009dfe:	0029      	movs	r1, r5
 8009e00:	f7f6 fe50 	bl	8000aa4 <__aeabi_dadd>
 8009e04:	0004      	movs	r4, r0
 8009e06:	000d      	movs	r5, r1
 8009e08:	f7f8 fba6 	bl	8002558 <__aeabi_d2iz>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	9002      	str	r0, [sp, #8]
 8009e10:	2300      	movs	r3, #0
 8009e12:	0020      	movs	r0, r4
 8009e14:	0029      	movs	r1, r5
 8009e16:	f7f6 fb1f 	bl	8000458 <__aeabi_dcmplt>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d00b      	beq.n	8009e36 <_dtoa_r+0x16a>
 8009e1e:	9802      	ldr	r0, [sp, #8]
 8009e20:	f7f8 fbd0 	bl	80025c4 <__aeabi_i2d>
 8009e24:	002b      	movs	r3, r5
 8009e26:	0022      	movs	r2, r4
 8009e28:	f7f6 fb10 	bl	800044c <__aeabi_dcmpeq>
 8009e2c:	4243      	negs	r3, r0
 8009e2e:	4158      	adcs	r0, r3
 8009e30:	9b02      	ldr	r3, [sp, #8]
 8009e32:	1a1b      	subs	r3, r3, r0
 8009e34:	9302      	str	r3, [sp, #8]
 8009e36:	2301      	movs	r3, #1
 8009e38:	9316      	str	r3, [sp, #88]	; 0x58
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	2b16      	cmp	r3, #22
 8009e3e:	d80f      	bhi.n	8009e60 <_dtoa_r+0x194>
 8009e40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e44:	00da      	lsls	r2, r3, #3
 8009e46:	4b84      	ldr	r3, [pc, #528]	; (800a058 <_dtoa_r+0x38c>)
 8009e48:	189b      	adds	r3, r3, r2
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f7f6 fb03 	bl	8000458 <__aeabi_dcmplt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d049      	beq.n	8009eea <_dtoa_r+0x21e>
 8009e56:	9b02      	ldr	r3, [sp, #8]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9316      	str	r3, [sp, #88]	; 0x58
 8009e60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009e62:	1b9e      	subs	r6, r3, r6
 8009e64:	2300      	movs	r3, #0
 8009e66:	930a      	str	r3, [sp, #40]	; 0x28
 8009e68:	0033      	movs	r3, r6
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e6e:	d504      	bpl.n	8009e7a <_dtoa_r+0x1ae>
 8009e70:	2301      	movs	r3, #1
 8009e72:	1b9b      	subs	r3, r3, r6
 8009e74:	930a      	str	r3, [sp, #40]	; 0x28
 8009e76:	2300      	movs	r3, #0
 8009e78:	930d      	str	r3, [sp, #52]	; 0x34
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	db36      	blt.n	8009eee <_dtoa_r+0x222>
 8009e80:	9a02      	ldr	r2, [sp, #8]
 8009e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e84:	4694      	mov	ip, r2
 8009e86:	4463      	add	r3, ip
 8009e88:	930d      	str	r3, [sp, #52]	; 0x34
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	9215      	str	r2, [sp, #84]	; 0x54
 8009e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e92:	2401      	movs	r4, #1
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d864      	bhi.n	8009f62 <_dtoa_r+0x296>
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	dd02      	ble.n	8009ea2 <_dtoa_r+0x1d6>
 8009e9c:	2400      	movs	r4, #0
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	9322      	str	r3, [sp, #136]	; 0x88
 8009ea2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ea4:	1e98      	subs	r0, r3, #2
 8009ea6:	2803      	cmp	r0, #3
 8009ea8:	d864      	bhi.n	8009f74 <_dtoa_r+0x2a8>
 8009eaa:	f7f6 f935 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009eae:	3829      	.short	0x3829
 8009eb0:	5836      	.short	0x5836
 8009eb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009eb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009eb6:	189e      	adds	r6, r3, r2
 8009eb8:	4b68      	ldr	r3, [pc, #416]	; (800a05c <_dtoa_r+0x390>)
 8009eba:	18f2      	adds	r2, r6, r3
 8009ebc:	2a20      	cmp	r2, #32
 8009ebe:	dd0f      	ble.n	8009ee0 <_dtoa_r+0x214>
 8009ec0:	2340      	movs	r3, #64	; 0x40
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	409d      	lsls	r5, r3
 8009ec6:	4b66      	ldr	r3, [pc, #408]	; (800a060 <_dtoa_r+0x394>)
 8009ec8:	9802      	ldr	r0, [sp, #8]
 8009eca:	18f3      	adds	r3, r6, r3
 8009ecc:	40d8      	lsrs	r0, r3
 8009ece:	4328      	orrs	r0, r5
 8009ed0:	f7f8 fba8 	bl	8002624 <__aeabi_ui2d>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	4c63      	ldr	r4, [pc, #396]	; (800a064 <_dtoa_r+0x398>)
 8009ed8:	3e01      	subs	r6, #1
 8009eda:	1909      	adds	r1, r1, r4
 8009edc:	9318      	str	r3, [sp, #96]	; 0x60
 8009ede:	e776      	b.n	8009dce <_dtoa_r+0x102>
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	9802      	ldr	r0, [sp, #8]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	4098      	lsls	r0, r3
 8009ee8:	e7f2      	b.n	8009ed0 <_dtoa_r+0x204>
 8009eea:	9016      	str	r0, [sp, #88]	; 0x58
 8009eec:	e7b8      	b.n	8009e60 <_dtoa_r+0x194>
 8009eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef0:	9a02      	ldr	r2, [sp, #8]
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef6:	4253      	negs	r3, r2
 8009ef8:	930e      	str	r3, [sp, #56]	; 0x38
 8009efa:	2300      	movs	r3, #0
 8009efc:	9315      	str	r3, [sp, #84]	; 0x54
 8009efe:	e7c7      	b.n	8009e90 <_dtoa_r+0x1c4>
 8009f00:	2300      	movs	r3, #0
 8009f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f06:	930c      	str	r3, [sp, #48]	; 0x30
 8009f08:	9307      	str	r3, [sp, #28]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dc13      	bgt.n	8009f36 <_dtoa_r+0x26a>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	001a      	movs	r2, r3
 8009f12:	930c      	str	r3, [sp, #48]	; 0x30
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	9223      	str	r2, [sp, #140]	; 0x8c
 8009f18:	e00d      	b.n	8009f36 <_dtoa_r+0x26a>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e7f1      	b.n	8009f02 <_dtoa_r+0x236>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f24:	4694      	mov	ip, r2
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	4463      	add	r3, ip
 8009f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dc00      	bgt.n	8009f36 <_dtoa_r+0x26a>
 8009f34:	2301      	movs	r3, #1
 8009f36:	2200      	movs	r2, #0
 8009f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f3a:	6042      	str	r2, [r0, #4]
 8009f3c:	3204      	adds	r2, #4
 8009f3e:	0015      	movs	r5, r2
 8009f40:	3514      	adds	r5, #20
 8009f42:	6841      	ldr	r1, [r0, #4]
 8009f44:	429d      	cmp	r5, r3
 8009f46:	d919      	bls.n	8009f7c <_dtoa_r+0x2b0>
 8009f48:	0038      	movs	r0, r7
 8009f4a:	f001 f879 	bl	800b040 <_Balloc>
 8009f4e:	9006      	str	r0, [sp, #24]
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d117      	bne.n	8009f84 <_dtoa_r+0x2b8>
 8009f54:	21d5      	movs	r1, #213	; 0xd5
 8009f56:	0002      	movs	r2, r0
 8009f58:	4b43      	ldr	r3, [pc, #268]	; (800a068 <_dtoa_r+0x39c>)
 8009f5a:	0049      	lsls	r1, r1, #1
 8009f5c:	e6cb      	b.n	8009cf6 <_dtoa_r+0x2a>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7de      	b.n	8009f20 <_dtoa_r+0x254>
 8009f62:	2300      	movs	r3, #0
 8009f64:	940f      	str	r4, [sp, #60]	; 0x3c
 8009f66:	9322      	str	r3, [sp, #136]	; 0x88
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6c:	9307      	str	r3, [sp, #28]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	3313      	adds	r3, #19
 8009f72:	e7d0      	b.n	8009f16 <_dtoa_r+0x24a>
 8009f74:	2301      	movs	r3, #1
 8009f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f78:	3b02      	subs	r3, #2
 8009f7a:	e7f6      	b.n	8009f6a <_dtoa_r+0x29e>
 8009f7c:	3101      	adds	r1, #1
 8009f7e:	6041      	str	r1, [r0, #4]
 8009f80:	0052      	lsls	r2, r2, #1
 8009f82:	e7dc      	b.n	8009f3e <_dtoa_r+0x272>
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	9a06      	ldr	r2, [sp, #24]
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	9b07      	ldr	r3, [sp, #28]
 8009f8c:	2b0e      	cmp	r3, #14
 8009f8e:	d900      	bls.n	8009f92 <_dtoa_r+0x2c6>
 8009f90:	e0eb      	b.n	800a16a <_dtoa_r+0x49e>
 8009f92:	2c00      	cmp	r4, #0
 8009f94:	d100      	bne.n	8009f98 <_dtoa_r+0x2cc>
 8009f96:	e0e8      	b.n	800a16a <_dtoa_r+0x49e>
 8009f98:	9b02      	ldr	r3, [sp, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	dd68      	ble.n	800a070 <_dtoa_r+0x3a4>
 8009f9e:	001a      	movs	r2, r3
 8009fa0:	210f      	movs	r1, #15
 8009fa2:	4b2d      	ldr	r3, [pc, #180]	; (800a058 <_dtoa_r+0x38c>)
 8009fa4:	400a      	ands	r2, r1
 8009fa6:	00d2      	lsls	r2, r2, #3
 8009fa8:	189b      	adds	r3, r3, r2
 8009faa:	681d      	ldr	r5, [r3, #0]
 8009fac:	685e      	ldr	r6, [r3, #4]
 8009fae:	9b02      	ldr	r3, [sp, #8]
 8009fb0:	111c      	asrs	r4, r3, #4
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	9310      	str	r3, [sp, #64]	; 0x40
 8009fb6:	9b02      	ldr	r3, [sp, #8]
 8009fb8:	05db      	lsls	r3, r3, #23
 8009fba:	d50b      	bpl.n	8009fd4 <_dtoa_r+0x308>
 8009fbc:	4b2b      	ldr	r3, [pc, #172]	; (800a06c <_dtoa_r+0x3a0>)
 8009fbe:	400c      	ands	r4, r1
 8009fc0:	6a1a      	ldr	r2, [r3, #32]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009fc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009fc8:	f7f7 f8a8 	bl	800111c <__aeabi_ddiv>
 8009fcc:	2303      	movs	r3, #3
 8009fce:	9008      	str	r0, [sp, #32]
 8009fd0:	9109      	str	r1, [sp, #36]	; 0x24
 8009fd2:	9310      	str	r3, [sp, #64]	; 0x40
 8009fd4:	4b25      	ldr	r3, [pc, #148]	; (800a06c <_dtoa_r+0x3a0>)
 8009fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8009fd8:	2c00      	cmp	r4, #0
 8009fda:	d108      	bne.n	8009fee <_dtoa_r+0x322>
 8009fdc:	9808      	ldr	r0, [sp, #32]
 8009fde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fe0:	002a      	movs	r2, r5
 8009fe2:	0033      	movs	r3, r6
 8009fe4:	f7f7 f89a 	bl	800111c <__aeabi_ddiv>
 8009fe8:	9008      	str	r0, [sp, #32]
 8009fea:	9109      	str	r1, [sp, #36]	; 0x24
 8009fec:	e05c      	b.n	800a0a8 <_dtoa_r+0x3dc>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	421c      	tst	r4, r3
 8009ff2:	d00b      	beq.n	800a00c <_dtoa_r+0x340>
 8009ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ff6:	0028      	movs	r0, r5
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8009ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ffe:	0031      	movs	r1, r6
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f7f7 fc8c 	bl	8001920 <__aeabi_dmul>
 800a008:	0005      	movs	r5, r0
 800a00a:	000e      	movs	r6, r1
 800a00c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a00e:	1064      	asrs	r4, r4, #1
 800a010:	3308      	adds	r3, #8
 800a012:	e7e0      	b.n	8009fd6 <_dtoa_r+0x30a>
 800a014:	0800cea6 	.word	0x0800cea6
 800a018:	0800cebd 	.word	0x0800cebd
 800a01c:	7ff00000 	.word	0x7ff00000
 800a020:	0000270f 	.word	0x0000270f
 800a024:	0800cea2 	.word	0x0800cea2
 800a028:	0800cea5 	.word	0x0800cea5
 800a02c:	0800cd18 	.word	0x0800cd18
 800a030:	0800cd19 	.word	0x0800cd19
 800a034:	3ff00000 	.word	0x3ff00000
 800a038:	fffffc01 	.word	0xfffffc01
 800a03c:	3ff80000 	.word	0x3ff80000
 800a040:	636f4361 	.word	0x636f4361
 800a044:	3fd287a7 	.word	0x3fd287a7
 800a048:	8b60c8b3 	.word	0x8b60c8b3
 800a04c:	3fc68a28 	.word	0x3fc68a28
 800a050:	509f79fb 	.word	0x509f79fb
 800a054:	3fd34413 	.word	0x3fd34413
 800a058:	0800d028 	.word	0x0800d028
 800a05c:	00000432 	.word	0x00000432
 800a060:	00000412 	.word	0x00000412
 800a064:	fe100000 	.word	0xfe100000
 800a068:	0800cf18 	.word	0x0800cf18
 800a06c:	0800d000 	.word	0x0800d000
 800a070:	2302      	movs	r3, #2
 800a072:	9310      	str	r3, [sp, #64]	; 0x40
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d016      	beq.n	800a0a8 <_dtoa_r+0x3dc>
 800a07a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a07c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a07e:	425c      	negs	r4, r3
 800a080:	230f      	movs	r3, #15
 800a082:	4ab6      	ldr	r2, [pc, #728]	; (800a35c <_dtoa_r+0x690>)
 800a084:	4023      	ands	r3, r4
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	18d3      	adds	r3, r2, r3
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f7f7 fc47 	bl	8001920 <__aeabi_dmul>
 800a092:	2601      	movs	r6, #1
 800a094:	2300      	movs	r3, #0
 800a096:	9008      	str	r0, [sp, #32]
 800a098:	9109      	str	r1, [sp, #36]	; 0x24
 800a09a:	4db1      	ldr	r5, [pc, #708]	; (800a360 <_dtoa_r+0x694>)
 800a09c:	1124      	asrs	r4, r4, #4
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d000      	beq.n	800a0a4 <_dtoa_r+0x3d8>
 800a0a2:	e094      	b.n	800a1ce <_dtoa_r+0x502>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d19f      	bne.n	8009fe8 <_dtoa_r+0x31c>
 800a0a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d100      	bne.n	800a0b0 <_dtoa_r+0x3e4>
 800a0ae:	e09b      	b.n	800a1e8 <_dtoa_r+0x51c>
 800a0b0:	9c08      	ldr	r4, [sp, #32]
 800a0b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	0020      	movs	r0, r4
 800a0b8:	0029      	movs	r1, r5
 800a0ba:	4baa      	ldr	r3, [pc, #680]	; (800a364 <_dtoa_r+0x698>)
 800a0bc:	f7f6 f9cc 	bl	8000458 <__aeabi_dcmplt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d100      	bne.n	800a0c6 <_dtoa_r+0x3fa>
 800a0c4:	e090      	b.n	800a1e8 <_dtoa_r+0x51c>
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d100      	bne.n	800a0ce <_dtoa_r+0x402>
 800a0cc:	e08c      	b.n	800a1e8 <_dtoa_r+0x51c>
 800a0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dd46      	ble.n	800a162 <_dtoa_r+0x496>
 800a0d4:	9b02      	ldr	r3, [sp, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	0020      	movs	r0, r4
 800a0da:	0029      	movs	r1, r5
 800a0dc:	1e5e      	subs	r6, r3, #1
 800a0de:	4ba2      	ldr	r3, [pc, #648]	; (800a368 <_dtoa_r+0x69c>)
 800a0e0:	f7f7 fc1e 	bl	8001920 <__aeabi_dmul>
 800a0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0e6:	9008      	str	r0, [sp, #32]
 800a0e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	9310      	str	r3, [sp, #64]	; 0x40
 800a0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a0f2:	9c08      	ldr	r4, [sp, #32]
 800a0f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0f6:	9314      	str	r3, [sp, #80]	; 0x50
 800a0f8:	f7f8 fa64 	bl	80025c4 <__aeabi_i2d>
 800a0fc:	0022      	movs	r2, r4
 800a0fe:	002b      	movs	r3, r5
 800a100:	f7f7 fc0e 	bl	8001920 <__aeabi_dmul>
 800a104:	2200      	movs	r2, #0
 800a106:	4b99      	ldr	r3, [pc, #612]	; (800a36c <_dtoa_r+0x6a0>)
 800a108:	f7f6 fccc 	bl	8000aa4 <__aeabi_dadd>
 800a10c:	9010      	str	r0, [sp, #64]	; 0x40
 800a10e:	9111      	str	r1, [sp, #68]	; 0x44
 800a110:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a114:	9208      	str	r2, [sp, #32]
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	4a95      	ldr	r2, [pc, #596]	; (800a370 <_dtoa_r+0x6a4>)
 800a11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a11c:	4694      	mov	ip, r2
 800a11e:	4463      	add	r3, ip
 800a120:	9317      	str	r3, [sp, #92]	; 0x5c
 800a122:	9309      	str	r3, [sp, #36]	; 0x24
 800a124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a126:	2b00      	cmp	r3, #0
 800a128:	d161      	bne.n	800a1ee <_dtoa_r+0x522>
 800a12a:	2200      	movs	r2, #0
 800a12c:	0020      	movs	r0, r4
 800a12e:	0029      	movs	r1, r5
 800a130:	4b90      	ldr	r3, [pc, #576]	; (800a374 <_dtoa_r+0x6a8>)
 800a132:	f7f7 fe61 	bl	8001df8 <__aeabi_dsub>
 800a136:	9a08      	ldr	r2, [sp, #32]
 800a138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a13a:	0004      	movs	r4, r0
 800a13c:	000d      	movs	r5, r1
 800a13e:	f7f6 f99f 	bl	8000480 <__aeabi_dcmpgt>
 800a142:	2800      	cmp	r0, #0
 800a144:	d000      	beq.n	800a148 <_dtoa_r+0x47c>
 800a146:	e2af      	b.n	800a6a8 <_dtoa_r+0x9dc>
 800a148:	488b      	ldr	r0, [pc, #556]	; (800a378 <_dtoa_r+0x6ac>)
 800a14a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a14c:	4684      	mov	ip, r0
 800a14e:	4461      	add	r1, ip
 800a150:	000b      	movs	r3, r1
 800a152:	0020      	movs	r0, r4
 800a154:	0029      	movs	r1, r5
 800a156:	9a08      	ldr	r2, [sp, #32]
 800a158:	f7f6 f97e 	bl	8000458 <__aeabi_dcmplt>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d000      	beq.n	800a162 <_dtoa_r+0x496>
 800a160:	e29f      	b.n	800a6a2 <_dtoa_r+0x9d6>
 800a162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a164:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a166:	9308      	str	r3, [sp, #32]
 800a168:	9409      	str	r4, [sp, #36]	; 0x24
 800a16a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	da00      	bge.n	800a172 <_dtoa_r+0x4a6>
 800a170:	e172      	b.n	800a458 <_dtoa_r+0x78c>
 800a172:	9a02      	ldr	r2, [sp, #8]
 800a174:	2a0e      	cmp	r2, #14
 800a176:	dd00      	ble.n	800a17a <_dtoa_r+0x4ae>
 800a178:	e16e      	b.n	800a458 <_dtoa_r+0x78c>
 800a17a:	4b78      	ldr	r3, [pc, #480]	; (800a35c <_dtoa_r+0x690>)
 800a17c:	00d2      	lsls	r2, r2, #3
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	685c      	ldr	r4, [r3, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	930a      	str	r3, [sp, #40]	; 0x28
 800a186:	940b      	str	r4, [sp, #44]	; 0x2c
 800a188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	db00      	blt.n	800a190 <_dtoa_r+0x4c4>
 800a18e:	e0f7      	b.n	800a380 <_dtoa_r+0x6b4>
 800a190:	9b07      	ldr	r3, [sp, #28]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dd00      	ble.n	800a198 <_dtoa_r+0x4cc>
 800a196:	e0f3      	b.n	800a380 <_dtoa_r+0x6b4>
 800a198:	d000      	beq.n	800a19c <_dtoa_r+0x4d0>
 800a19a:	e282      	b.n	800a6a2 <_dtoa_r+0x9d6>
 800a19c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a19e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4b74      	ldr	r3, [pc, #464]	; (800a374 <_dtoa_r+0x6a8>)
 800a1a4:	f7f7 fbbc 	bl	8001920 <__aeabi_dmul>
 800a1a8:	9a08      	ldr	r2, [sp, #32]
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	f7f6 f972 	bl	8000494 <__aeabi_dcmpge>
 800a1b0:	9e07      	ldr	r6, [sp, #28]
 800a1b2:	0035      	movs	r5, r6
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d000      	beq.n	800a1ba <_dtoa_r+0x4ee>
 800a1b8:	e259      	b.n	800a66e <_dtoa_r+0x9a2>
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	9a06      	ldr	r2, [sp, #24]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	9308      	str	r3, [sp, #32]
 800a1c2:	2331      	movs	r3, #49	; 0x31
 800a1c4:	7013      	strb	r3, [r2, #0]
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	e254      	b.n	800a678 <_dtoa_r+0x9ac>
 800a1ce:	4234      	tst	r4, r6
 800a1d0:	d007      	beq.n	800a1e2 <_dtoa_r+0x516>
 800a1d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	9310      	str	r3, [sp, #64]	; 0x40
 800a1d8:	682a      	ldr	r2, [r5, #0]
 800a1da:	686b      	ldr	r3, [r5, #4]
 800a1dc:	f7f7 fba0 	bl	8001920 <__aeabi_dmul>
 800a1e0:	0033      	movs	r3, r6
 800a1e2:	1064      	asrs	r4, r4, #1
 800a1e4:	3508      	adds	r5, #8
 800a1e6:	e75a      	b.n	800a09e <_dtoa_r+0x3d2>
 800a1e8:	9e02      	ldr	r6, [sp, #8]
 800a1ea:	9b07      	ldr	r3, [sp, #28]
 800a1ec:	e780      	b.n	800a0f0 <_dtoa_r+0x424>
 800a1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	4b59      	ldr	r3, [pc, #356]	; (800a35c <_dtoa_r+0x690>)
 800a1f6:	00d2      	lsls	r2, r2, #3
 800a1f8:	189b      	adds	r3, r3, r2
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d051      	beq.n	800a2a6 <_dtoa_r+0x5da>
 800a202:	2000      	movs	r0, #0
 800a204:	495d      	ldr	r1, [pc, #372]	; (800a37c <_dtoa_r+0x6b0>)
 800a206:	f7f6 ff89 	bl	800111c <__aeabi_ddiv>
 800a20a:	9a08      	ldr	r2, [sp, #32]
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	f7f7 fdf3 	bl	8001df8 <__aeabi_dsub>
 800a212:	9a06      	ldr	r2, [sp, #24]
 800a214:	9b06      	ldr	r3, [sp, #24]
 800a216:	4694      	mov	ip, r2
 800a218:	9317      	str	r3, [sp, #92]	; 0x5c
 800a21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a21c:	9010      	str	r0, [sp, #64]	; 0x40
 800a21e:	9111      	str	r1, [sp, #68]	; 0x44
 800a220:	4463      	add	r3, ip
 800a222:	9319      	str	r3, [sp, #100]	; 0x64
 800a224:	0029      	movs	r1, r5
 800a226:	0020      	movs	r0, r4
 800a228:	f7f8 f996 	bl	8002558 <__aeabi_d2iz>
 800a22c:	9014      	str	r0, [sp, #80]	; 0x50
 800a22e:	f7f8 f9c9 	bl	80025c4 <__aeabi_i2d>
 800a232:	0002      	movs	r2, r0
 800a234:	000b      	movs	r3, r1
 800a236:	0020      	movs	r0, r4
 800a238:	0029      	movs	r1, r5
 800a23a:	f7f7 fddd 	bl	8001df8 <__aeabi_dsub>
 800a23e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a242:	3301      	adds	r3, #1
 800a244:	9308      	str	r3, [sp, #32]
 800a246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a248:	0004      	movs	r4, r0
 800a24a:	3330      	adds	r3, #48	; 0x30
 800a24c:	7013      	strb	r3, [r2, #0]
 800a24e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a252:	000d      	movs	r5, r1
 800a254:	f7f6 f900 	bl	8000458 <__aeabi_dcmplt>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d175      	bne.n	800a348 <_dtoa_r+0x67c>
 800a25c:	0022      	movs	r2, r4
 800a25e:	002b      	movs	r3, r5
 800a260:	2000      	movs	r0, #0
 800a262:	4940      	ldr	r1, [pc, #256]	; (800a364 <_dtoa_r+0x698>)
 800a264:	f7f7 fdc8 	bl	8001df8 <__aeabi_dsub>
 800a268:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a26a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a26c:	f7f6 f8f4 	bl	8000458 <__aeabi_dcmplt>
 800a270:	2800      	cmp	r0, #0
 800a272:	d000      	beq.n	800a276 <_dtoa_r+0x5aa>
 800a274:	e0d2      	b.n	800a41c <_dtoa_r+0x750>
 800a276:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a278:	9a08      	ldr	r2, [sp, #32]
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d100      	bne.n	800a280 <_dtoa_r+0x5b4>
 800a27e:	e770      	b.n	800a162 <_dtoa_r+0x496>
 800a280:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a282:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a284:	2200      	movs	r2, #0
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <_dtoa_r+0x69c>)
 800a288:	f7f7 fb4a 	bl	8001920 <__aeabi_dmul>
 800a28c:	4b36      	ldr	r3, [pc, #216]	; (800a368 <_dtoa_r+0x69c>)
 800a28e:	9010      	str	r0, [sp, #64]	; 0x40
 800a290:	9111      	str	r1, [sp, #68]	; 0x44
 800a292:	2200      	movs	r2, #0
 800a294:	0020      	movs	r0, r4
 800a296:	0029      	movs	r1, r5
 800a298:	f7f7 fb42 	bl	8001920 <__aeabi_dmul>
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	0004      	movs	r4, r0
 800a2a0:	000d      	movs	r5, r1
 800a2a2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2a4:	e7be      	b.n	800a224 <_dtoa_r+0x558>
 800a2a6:	9808      	ldr	r0, [sp, #32]
 800a2a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2aa:	f7f7 fb39 	bl	8001920 <__aeabi_dmul>
 800a2ae:	9a06      	ldr	r2, [sp, #24]
 800a2b0:	9b06      	ldr	r3, [sp, #24]
 800a2b2:	4694      	mov	ip, r2
 800a2b4:	9308      	str	r3, [sp, #32]
 800a2b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2b8:	9010      	str	r0, [sp, #64]	; 0x40
 800a2ba:	9111      	str	r1, [sp, #68]	; 0x44
 800a2bc:	4463      	add	r3, ip
 800a2be:	9319      	str	r3, [sp, #100]	; 0x64
 800a2c0:	0029      	movs	r1, r5
 800a2c2:	0020      	movs	r0, r4
 800a2c4:	f7f8 f948 	bl	8002558 <__aeabi_d2iz>
 800a2c8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a2ca:	f7f8 f97b 	bl	80025c4 <__aeabi_i2d>
 800a2ce:	0002      	movs	r2, r0
 800a2d0:	000b      	movs	r3, r1
 800a2d2:	0020      	movs	r0, r4
 800a2d4:	0029      	movs	r1, r5
 800a2d6:	f7f7 fd8f 	bl	8001df8 <__aeabi_dsub>
 800a2da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2dc:	9a08      	ldr	r2, [sp, #32]
 800a2de:	3330      	adds	r3, #48	; 0x30
 800a2e0:	7013      	strb	r3, [r2, #0]
 800a2e2:	0013      	movs	r3, r2
 800a2e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	0004      	movs	r4, r0
 800a2ea:	000d      	movs	r5, r1
 800a2ec:	9308      	str	r3, [sp, #32]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d12c      	bne.n	800a34c <_dtoa_r+0x680>
 800a2f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2f6:	9a06      	ldr	r2, [sp, #24]
 800a2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2fa:	4694      	mov	ip, r2
 800a2fc:	4463      	add	r3, ip
 800a2fe:	2200      	movs	r2, #0
 800a300:	9308      	str	r3, [sp, #32]
 800a302:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <_dtoa_r+0x6b0>)
 800a304:	f7f6 fbce 	bl	8000aa4 <__aeabi_dadd>
 800a308:	0002      	movs	r2, r0
 800a30a:	000b      	movs	r3, r1
 800a30c:	0020      	movs	r0, r4
 800a30e:	0029      	movs	r1, r5
 800a310:	f7f6 f8b6 	bl	8000480 <__aeabi_dcmpgt>
 800a314:	2800      	cmp	r0, #0
 800a316:	d000      	beq.n	800a31a <_dtoa_r+0x64e>
 800a318:	e080      	b.n	800a41c <_dtoa_r+0x750>
 800a31a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a31c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a31e:	2000      	movs	r0, #0
 800a320:	4916      	ldr	r1, [pc, #88]	; (800a37c <_dtoa_r+0x6b0>)
 800a322:	f7f7 fd69 	bl	8001df8 <__aeabi_dsub>
 800a326:	0002      	movs	r2, r0
 800a328:	000b      	movs	r3, r1
 800a32a:	0020      	movs	r0, r4
 800a32c:	0029      	movs	r1, r5
 800a32e:	f7f6 f893 	bl	8000458 <__aeabi_dcmplt>
 800a332:	2800      	cmp	r0, #0
 800a334:	d100      	bne.n	800a338 <_dtoa_r+0x66c>
 800a336:	e714      	b.n	800a162 <_dtoa_r+0x496>
 800a338:	9b08      	ldr	r3, [sp, #32]
 800a33a:	001a      	movs	r2, r3
 800a33c:	3a01      	subs	r2, #1
 800a33e:	9208      	str	r2, [sp, #32]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	2a30      	cmp	r2, #48	; 0x30
 800a344:	d0f8      	beq.n	800a338 <_dtoa_r+0x66c>
 800a346:	9308      	str	r3, [sp, #32]
 800a348:	9602      	str	r6, [sp, #8]
 800a34a:	e055      	b.n	800a3f8 <_dtoa_r+0x72c>
 800a34c:	2200      	movs	r2, #0
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <_dtoa_r+0x69c>)
 800a350:	f7f7 fae6 	bl	8001920 <__aeabi_dmul>
 800a354:	0004      	movs	r4, r0
 800a356:	000d      	movs	r5, r1
 800a358:	e7b2      	b.n	800a2c0 <_dtoa_r+0x5f4>
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	0800d028 	.word	0x0800d028
 800a360:	0800d000 	.word	0x0800d000
 800a364:	3ff00000 	.word	0x3ff00000
 800a368:	40240000 	.word	0x40240000
 800a36c:	401c0000 	.word	0x401c0000
 800a370:	fcc00000 	.word	0xfcc00000
 800a374:	40140000 	.word	0x40140000
 800a378:	7cc00000 	.word	0x7cc00000
 800a37c:	3fe00000 	.word	0x3fe00000
 800a380:	9b07      	ldr	r3, [sp, #28]
 800a382:	9e06      	ldr	r6, [sp, #24]
 800a384:	3b01      	subs	r3, #1
 800a386:	199b      	adds	r3, r3, r6
 800a388:	930c      	str	r3, [sp, #48]	; 0x30
 800a38a:	9c08      	ldr	r4, [sp, #32]
 800a38c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a392:	0020      	movs	r0, r4
 800a394:	0029      	movs	r1, r5
 800a396:	f7f6 fec1 	bl	800111c <__aeabi_ddiv>
 800a39a:	f7f8 f8dd 	bl	8002558 <__aeabi_d2iz>
 800a39e:	9007      	str	r0, [sp, #28]
 800a3a0:	f7f8 f910 	bl	80025c4 <__aeabi_i2d>
 800a3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a8:	f7f7 faba 	bl	8001920 <__aeabi_dmul>
 800a3ac:	0002      	movs	r2, r0
 800a3ae:	000b      	movs	r3, r1
 800a3b0:	0020      	movs	r0, r4
 800a3b2:	0029      	movs	r1, r5
 800a3b4:	f7f7 fd20 	bl	8001df8 <__aeabi_dsub>
 800a3b8:	0033      	movs	r3, r6
 800a3ba:	9a07      	ldr	r2, [sp, #28]
 800a3bc:	3601      	adds	r6, #1
 800a3be:	3230      	adds	r2, #48	; 0x30
 800a3c0:	701a      	strb	r2, [r3, #0]
 800a3c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c4:	9608      	str	r6, [sp, #32]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d139      	bne.n	800a43e <_dtoa_r+0x772>
 800a3ca:	0002      	movs	r2, r0
 800a3cc:	000b      	movs	r3, r1
 800a3ce:	f7f6 fb69 	bl	8000aa4 <__aeabi_dadd>
 800a3d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d6:	0004      	movs	r4, r0
 800a3d8:	000d      	movs	r5, r1
 800a3da:	f7f6 f851 	bl	8000480 <__aeabi_dcmpgt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d11b      	bne.n	800a41a <_dtoa_r+0x74e>
 800a3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e6:	0020      	movs	r0, r4
 800a3e8:	0029      	movs	r1, r5
 800a3ea:	f7f6 f82f 	bl	800044c <__aeabi_dcmpeq>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d002      	beq.n	800a3f8 <_dtoa_r+0x72c>
 800a3f2:	9b07      	ldr	r3, [sp, #28]
 800a3f4:	07db      	lsls	r3, r3, #31
 800a3f6:	d410      	bmi.n	800a41a <_dtoa_r+0x74e>
 800a3f8:	0038      	movs	r0, r7
 800a3fa:	9905      	ldr	r1, [sp, #20]
 800a3fc:	f000 fe64 	bl	800b0c8 <_Bfree>
 800a400:	2300      	movs	r3, #0
 800a402:	9a08      	ldr	r2, [sp, #32]
 800a404:	9802      	ldr	r0, [sp, #8]
 800a406:	7013      	strb	r3, [r2, #0]
 800a408:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a40a:	3001      	adds	r0, #1
 800a40c:	6018      	str	r0, [r3, #0]
 800a40e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a410:	2b00      	cmp	r3, #0
 800a412:	d100      	bne.n	800a416 <_dtoa_r+0x74a>
 800a414:	e4a6      	b.n	8009d64 <_dtoa_r+0x98>
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e4a4      	b.n	8009d64 <_dtoa_r+0x98>
 800a41a:	9e02      	ldr	r6, [sp, #8]
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	9308      	str	r3, [sp, #32]
 800a420:	3b01      	subs	r3, #1
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	2a39      	cmp	r2, #57	; 0x39
 800a426:	d106      	bne.n	800a436 <_dtoa_r+0x76a>
 800a428:	9a06      	ldr	r2, [sp, #24]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d1f7      	bne.n	800a41e <_dtoa_r+0x752>
 800a42e:	2230      	movs	r2, #48	; 0x30
 800a430:	9906      	ldr	r1, [sp, #24]
 800a432:	3601      	adds	r6, #1
 800a434:	700a      	strb	r2, [r1, #0]
 800a436:	781a      	ldrb	r2, [r3, #0]
 800a438:	3201      	adds	r2, #1
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	e784      	b.n	800a348 <_dtoa_r+0x67c>
 800a43e:	2200      	movs	r2, #0
 800a440:	4baa      	ldr	r3, [pc, #680]	; (800a6ec <_dtoa_r+0xa20>)
 800a442:	f7f7 fa6d 	bl	8001920 <__aeabi_dmul>
 800a446:	2200      	movs	r2, #0
 800a448:	2300      	movs	r3, #0
 800a44a:	0004      	movs	r4, r0
 800a44c:	000d      	movs	r5, r1
 800a44e:	f7f5 fffd 	bl	800044c <__aeabi_dcmpeq>
 800a452:	2800      	cmp	r0, #0
 800a454:	d09b      	beq.n	800a38e <_dtoa_r+0x6c2>
 800a456:	e7cf      	b.n	800a3f8 <_dtoa_r+0x72c>
 800a458:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a45a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a45c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a45e:	2d00      	cmp	r5, #0
 800a460:	d012      	beq.n	800a488 <_dtoa_r+0x7bc>
 800a462:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a464:	2a01      	cmp	r2, #1
 800a466:	dc66      	bgt.n	800a536 <_dtoa_r+0x86a>
 800a468:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	d05d      	beq.n	800a52a <_dtoa_r+0x85e>
 800a46e:	4aa0      	ldr	r2, [pc, #640]	; (800a6f0 <_dtoa_r+0xa24>)
 800a470:	189b      	adds	r3, r3, r2
 800a472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a474:	2101      	movs	r1, #1
 800a476:	18d2      	adds	r2, r2, r3
 800a478:	920a      	str	r2, [sp, #40]	; 0x28
 800a47a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a47c:	0038      	movs	r0, r7
 800a47e:	18d3      	adds	r3, r2, r3
 800a480:	930d      	str	r3, [sp, #52]	; 0x34
 800a482:	f000 ff1d 	bl	800b2c0 <__i2b>
 800a486:	0005      	movs	r5, r0
 800a488:	2c00      	cmp	r4, #0
 800a48a:	dd0e      	ble.n	800a4aa <_dtoa_r+0x7de>
 800a48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd0b      	ble.n	800a4aa <_dtoa_r+0x7de>
 800a492:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a494:	0023      	movs	r3, r4
 800a496:	4294      	cmp	r4, r2
 800a498:	dd00      	ble.n	800a49c <_dtoa_r+0x7d0>
 800a49a:	0013      	movs	r3, r2
 800a49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a49e:	1ae4      	subs	r4, r4, r3
 800a4a0:	1ad2      	subs	r2, r2, r3
 800a4a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a4a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d01f      	beq.n	800a4f0 <_dtoa_r+0x824>
 800a4b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d054      	beq.n	800a560 <_dtoa_r+0x894>
 800a4b6:	2e00      	cmp	r6, #0
 800a4b8:	dd11      	ble.n	800a4de <_dtoa_r+0x812>
 800a4ba:	0029      	movs	r1, r5
 800a4bc:	0032      	movs	r2, r6
 800a4be:	0038      	movs	r0, r7
 800a4c0:	f000 ffc4 	bl	800b44c <__pow5mult>
 800a4c4:	9a05      	ldr	r2, [sp, #20]
 800a4c6:	0001      	movs	r1, r0
 800a4c8:	0005      	movs	r5, r0
 800a4ca:	0038      	movs	r0, r7
 800a4cc:	f000 ff0e 	bl	800b2ec <__multiply>
 800a4d0:	9905      	ldr	r1, [sp, #20]
 800a4d2:	9014      	str	r0, [sp, #80]	; 0x50
 800a4d4:	0038      	movs	r0, r7
 800a4d6:	f000 fdf7 	bl	800b0c8 <_Bfree>
 800a4da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e0:	1b9a      	subs	r2, r3, r6
 800a4e2:	42b3      	cmp	r3, r6
 800a4e4:	d004      	beq.n	800a4f0 <_dtoa_r+0x824>
 800a4e6:	0038      	movs	r0, r7
 800a4e8:	9905      	ldr	r1, [sp, #20]
 800a4ea:	f000 ffaf 	bl	800b44c <__pow5mult>
 800a4ee:	9005      	str	r0, [sp, #20]
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	0038      	movs	r0, r7
 800a4f4:	f000 fee4 	bl	800b2c0 <__i2b>
 800a4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fa:	0006      	movs	r6, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd31      	ble.n	800a564 <_dtoa_r+0x898>
 800a500:	001a      	movs	r2, r3
 800a502:	0001      	movs	r1, r0
 800a504:	0038      	movs	r0, r7
 800a506:	f000 ffa1 	bl	800b44c <__pow5mult>
 800a50a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a50c:	0006      	movs	r6, r0
 800a50e:	2b01      	cmp	r3, #1
 800a510:	dd2d      	ble.n	800a56e <_dtoa_r+0x8a2>
 800a512:	2300      	movs	r3, #0
 800a514:	930e      	str	r3, [sp, #56]	; 0x38
 800a516:	6933      	ldr	r3, [r6, #16]
 800a518:	3303      	adds	r3, #3
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	18f3      	adds	r3, r6, r3
 800a51e:	6858      	ldr	r0, [r3, #4]
 800a520:	f000 fe86 	bl	800b230 <__hi0bits>
 800a524:	2320      	movs	r3, #32
 800a526:	1a18      	subs	r0, r3, r0
 800a528:	e039      	b.n	800a59e <_dtoa_r+0x8d2>
 800a52a:	2336      	movs	r3, #54	; 0x36
 800a52c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a52e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a530:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	e79d      	b.n	800a472 <_dtoa_r+0x7a6>
 800a536:	9b07      	ldr	r3, [sp, #28]
 800a538:	1e5e      	subs	r6, r3, #1
 800a53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	db07      	blt.n	800a550 <_dtoa_r+0x884>
 800a540:	1b9e      	subs	r6, r3, r6
 800a542:	9b07      	ldr	r3, [sp, #28]
 800a544:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	da93      	bge.n	800a472 <_dtoa_r+0x7a6>
 800a54a:	1ae4      	subs	r4, r4, r3
 800a54c:	2300      	movs	r3, #0
 800a54e:	e790      	b.n	800a472 <_dtoa_r+0x7a6>
 800a550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a554:	1af3      	subs	r3, r6, r3
 800a556:	18d3      	adds	r3, r2, r3
 800a558:	960e      	str	r6, [sp, #56]	; 0x38
 800a55a:	9315      	str	r3, [sp, #84]	; 0x54
 800a55c:	2600      	movs	r6, #0
 800a55e:	e7f0      	b.n	800a542 <_dtoa_r+0x876>
 800a560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a562:	e7c0      	b.n	800a4e6 <_dtoa_r+0x81a>
 800a564:	2300      	movs	r3, #0
 800a566:	930e      	str	r3, [sp, #56]	; 0x38
 800a568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	dc13      	bgt.n	800a596 <_dtoa_r+0x8ca>
 800a56e:	2300      	movs	r3, #0
 800a570:	930e      	str	r3, [sp, #56]	; 0x38
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10e      	bne.n	800a596 <_dtoa_r+0x8ca>
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	031b      	lsls	r3, r3, #12
 800a57c:	d10b      	bne.n	800a596 <_dtoa_r+0x8ca>
 800a57e:	4b5d      	ldr	r3, [pc, #372]	; (800a6f4 <_dtoa_r+0xa28>)
 800a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a582:	4213      	tst	r3, r2
 800a584:	d007      	beq.n	800a596 <_dtoa_r+0x8ca>
 800a586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a588:	3301      	adds	r3, #1
 800a58a:	930a      	str	r3, [sp, #40]	; 0x28
 800a58c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a58e:	3301      	adds	r3, #1
 800a590:	930d      	str	r3, [sp, #52]	; 0x34
 800a592:	2301      	movs	r3, #1
 800a594:	930e      	str	r3, [sp, #56]	; 0x38
 800a596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a598:	2001      	movs	r0, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1bb      	bne.n	800a516 <_dtoa_r+0x84a>
 800a59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5a0:	221f      	movs	r2, #31
 800a5a2:	1818      	adds	r0, r3, r0
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	4210      	tst	r0, r2
 800a5aa:	d046      	beq.n	800a63a <_dtoa_r+0x96e>
 800a5ac:	3201      	adds	r2, #1
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	2a04      	cmp	r2, #4
 800a5b2:	dd3f      	ble.n	800a634 <_dtoa_r+0x968>
 800a5b4:	221c      	movs	r2, #28
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ba:	18e4      	adds	r4, r4, r3
 800a5bc:	18d2      	adds	r2, r2, r3
 800a5be:	920a      	str	r2, [sp, #40]	; 0x28
 800a5c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5c2:	18d3      	adds	r3, r2, r3
 800a5c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	dd05      	ble.n	800a5d8 <_dtoa_r+0x90c>
 800a5cc:	001a      	movs	r2, r3
 800a5ce:	0038      	movs	r0, r7
 800a5d0:	9905      	ldr	r1, [sp, #20]
 800a5d2:	f000 ff97 	bl	800b504 <__lshift>
 800a5d6:	9005      	str	r0, [sp, #20]
 800a5d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd05      	ble.n	800a5ea <_dtoa_r+0x91e>
 800a5de:	0031      	movs	r1, r6
 800a5e0:	001a      	movs	r2, r3
 800a5e2:	0038      	movs	r0, r7
 800a5e4:	f000 ff8e 	bl	800b504 <__lshift>
 800a5e8:	0006      	movs	r6, r0
 800a5ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d026      	beq.n	800a63e <_dtoa_r+0x972>
 800a5f0:	0031      	movs	r1, r6
 800a5f2:	9805      	ldr	r0, [sp, #20]
 800a5f4:	f000 fff4 	bl	800b5e0 <__mcmp>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	da20      	bge.n	800a63e <_dtoa_r+0x972>
 800a5fc:	9b02      	ldr	r3, [sp, #8]
 800a5fe:	220a      	movs	r2, #10
 800a600:	3b01      	subs	r3, #1
 800a602:	9302      	str	r3, [sp, #8]
 800a604:	0038      	movs	r0, r7
 800a606:	2300      	movs	r3, #0
 800a608:	9905      	ldr	r1, [sp, #20]
 800a60a:	f000 fd81 	bl	800b110 <__multadd>
 800a60e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a610:	9005      	str	r0, [sp, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d100      	bne.n	800a618 <_dtoa_r+0x94c>
 800a616:	e166      	b.n	800a8e6 <_dtoa_r+0xc1a>
 800a618:	2300      	movs	r3, #0
 800a61a:	0029      	movs	r1, r5
 800a61c:	220a      	movs	r2, #10
 800a61e:	0038      	movs	r0, r7
 800a620:	f000 fd76 	bl	800b110 <__multadd>
 800a624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a626:	0005      	movs	r5, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc47      	bgt.n	800a6bc <_dtoa_r+0x9f0>
 800a62c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a62e:	2b02      	cmp	r3, #2
 800a630:	dc0d      	bgt.n	800a64e <_dtoa_r+0x982>
 800a632:	e043      	b.n	800a6bc <_dtoa_r+0x9f0>
 800a634:	2a04      	cmp	r2, #4
 800a636:	d0c6      	beq.n	800a5c6 <_dtoa_r+0x8fa>
 800a638:	0013      	movs	r3, r2
 800a63a:	331c      	adds	r3, #28
 800a63c:	e7bc      	b.n	800a5b8 <_dtoa_r+0x8ec>
 800a63e:	9b07      	ldr	r3, [sp, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc35      	bgt.n	800a6b0 <_dtoa_r+0x9e4>
 800a644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a646:	2b02      	cmp	r3, #2
 800a648:	dd32      	ble.n	800a6b0 <_dtoa_r+0x9e4>
 800a64a:	9b07      	ldr	r3, [sp, #28]
 800a64c:	930c      	str	r3, [sp, #48]	; 0x30
 800a64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10c      	bne.n	800a66e <_dtoa_r+0x9a2>
 800a654:	0031      	movs	r1, r6
 800a656:	2205      	movs	r2, #5
 800a658:	0038      	movs	r0, r7
 800a65a:	f000 fd59 	bl	800b110 <__multadd>
 800a65e:	0006      	movs	r6, r0
 800a660:	0001      	movs	r1, r0
 800a662:	9805      	ldr	r0, [sp, #20]
 800a664:	f000 ffbc 	bl	800b5e0 <__mcmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	dd00      	ble.n	800a66e <_dtoa_r+0x9a2>
 800a66c:	e5a5      	b.n	800a1ba <_dtoa_r+0x4ee>
 800a66e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a670:	43db      	mvns	r3, r3
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	9b06      	ldr	r3, [sp, #24]
 800a676:	9308      	str	r3, [sp, #32]
 800a678:	2400      	movs	r4, #0
 800a67a:	0031      	movs	r1, r6
 800a67c:	0038      	movs	r0, r7
 800a67e:	f000 fd23 	bl	800b0c8 <_Bfree>
 800a682:	2d00      	cmp	r5, #0
 800a684:	d100      	bne.n	800a688 <_dtoa_r+0x9bc>
 800a686:	e6b7      	b.n	800a3f8 <_dtoa_r+0x72c>
 800a688:	2c00      	cmp	r4, #0
 800a68a:	d005      	beq.n	800a698 <_dtoa_r+0x9cc>
 800a68c:	42ac      	cmp	r4, r5
 800a68e:	d003      	beq.n	800a698 <_dtoa_r+0x9cc>
 800a690:	0021      	movs	r1, r4
 800a692:	0038      	movs	r0, r7
 800a694:	f000 fd18 	bl	800b0c8 <_Bfree>
 800a698:	0029      	movs	r1, r5
 800a69a:	0038      	movs	r0, r7
 800a69c:	f000 fd14 	bl	800b0c8 <_Bfree>
 800a6a0:	e6aa      	b.n	800a3f8 <_dtoa_r+0x72c>
 800a6a2:	2600      	movs	r6, #0
 800a6a4:	0035      	movs	r5, r6
 800a6a6:	e7e2      	b.n	800a66e <_dtoa_r+0x9a2>
 800a6a8:	9602      	str	r6, [sp, #8]
 800a6aa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a6ac:	0035      	movs	r5, r6
 800a6ae:	e584      	b.n	800a1ba <_dtoa_r+0x4ee>
 800a6b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d100      	bne.n	800a6b8 <_dtoa_r+0x9ec>
 800a6b6:	e0ce      	b.n	800a856 <_dtoa_r+0xb8a>
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a6bc:	2c00      	cmp	r4, #0
 800a6be:	dd05      	ble.n	800a6cc <_dtoa_r+0xa00>
 800a6c0:	0029      	movs	r1, r5
 800a6c2:	0022      	movs	r2, r4
 800a6c4:	0038      	movs	r0, r7
 800a6c6:	f000 ff1d 	bl	800b504 <__lshift>
 800a6ca:	0005      	movs	r5, r0
 800a6cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ce:	0028      	movs	r0, r5
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d022      	beq.n	800a71a <_dtoa_r+0xa4e>
 800a6d4:	0038      	movs	r0, r7
 800a6d6:	6869      	ldr	r1, [r5, #4]
 800a6d8:	f000 fcb2 	bl	800b040 <_Balloc>
 800a6dc:	1e04      	subs	r4, r0, #0
 800a6de:	d10f      	bne.n	800a700 <_dtoa_r+0xa34>
 800a6e0:	0002      	movs	r2, r0
 800a6e2:	4b05      	ldr	r3, [pc, #20]	; (800a6f8 <_dtoa_r+0xa2c>)
 800a6e4:	4905      	ldr	r1, [pc, #20]	; (800a6fc <_dtoa_r+0xa30>)
 800a6e6:	f7ff fb06 	bl	8009cf6 <_dtoa_r+0x2a>
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	40240000 	.word	0x40240000
 800a6f0:	00000433 	.word	0x00000433
 800a6f4:	7ff00000 	.word	0x7ff00000
 800a6f8:	0800cf18 	.word	0x0800cf18
 800a6fc:	000002ea 	.word	0x000002ea
 800a700:	0029      	movs	r1, r5
 800a702:	692b      	ldr	r3, [r5, #16]
 800a704:	310c      	adds	r1, #12
 800a706:	1c9a      	adds	r2, r3, #2
 800a708:	0092      	lsls	r2, r2, #2
 800a70a:	300c      	adds	r0, #12
 800a70c:	f7fd fce0 	bl	80080d0 <memcpy>
 800a710:	2201      	movs	r2, #1
 800a712:	0021      	movs	r1, r4
 800a714:	0038      	movs	r0, r7
 800a716:	f000 fef5 	bl	800b504 <__lshift>
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a71e:	930a      	str	r3, [sp, #40]	; 0x28
 800a720:	3b01      	subs	r3, #1
 800a722:	189b      	adds	r3, r3, r2
 800a724:	2201      	movs	r2, #1
 800a726:	002c      	movs	r4, r5
 800a728:	0005      	movs	r5, r0
 800a72a:	9314      	str	r3, [sp, #80]	; 0x50
 800a72c:	9b08      	ldr	r3, [sp, #32]
 800a72e:	4013      	ands	r3, r2
 800a730:	930f      	str	r3, [sp, #60]	; 0x3c
 800a732:	0031      	movs	r1, r6
 800a734:	9805      	ldr	r0, [sp, #20]
 800a736:	f7ff fa3d 	bl	8009bb4 <quorem>
 800a73a:	0003      	movs	r3, r0
 800a73c:	0021      	movs	r1, r4
 800a73e:	3330      	adds	r3, #48	; 0x30
 800a740:	900d      	str	r0, [sp, #52]	; 0x34
 800a742:	9805      	ldr	r0, [sp, #20]
 800a744:	9307      	str	r3, [sp, #28]
 800a746:	f000 ff4b 	bl	800b5e0 <__mcmp>
 800a74a:	002a      	movs	r2, r5
 800a74c:	900e      	str	r0, [sp, #56]	; 0x38
 800a74e:	0031      	movs	r1, r6
 800a750:	0038      	movs	r0, r7
 800a752:	f000 ff61 	bl	800b618 <__mdiff>
 800a756:	68c3      	ldr	r3, [r0, #12]
 800a758:	9008      	str	r0, [sp, #32]
 800a75a:	9310      	str	r3, [sp, #64]	; 0x40
 800a75c:	2301      	movs	r3, #1
 800a75e:	930c      	str	r3, [sp, #48]	; 0x30
 800a760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <_dtoa_r+0xaa4>
 800a766:	0001      	movs	r1, r0
 800a768:	9805      	ldr	r0, [sp, #20]
 800a76a:	f000 ff39 	bl	800b5e0 <__mcmp>
 800a76e:	900c      	str	r0, [sp, #48]	; 0x30
 800a770:	0038      	movs	r0, r7
 800a772:	9908      	ldr	r1, [sp, #32]
 800a774:	f000 fca8 	bl	800b0c8 <_Bfree>
 800a778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a77c:	3301      	adds	r3, #1
 800a77e:	9308      	str	r3, [sp, #32]
 800a780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a782:	4313      	orrs	r3, r2
 800a784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a786:	4313      	orrs	r3, r2
 800a788:	d10c      	bne.n	800a7a4 <_dtoa_r+0xad8>
 800a78a:	9b07      	ldr	r3, [sp, #28]
 800a78c:	2b39      	cmp	r3, #57	; 0x39
 800a78e:	d026      	beq.n	800a7de <_dtoa_r+0xb12>
 800a790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	dd02      	ble.n	800a79c <_dtoa_r+0xad0>
 800a796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a798:	3331      	adds	r3, #49	; 0x31
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79e:	9a07      	ldr	r2, [sp, #28]
 800a7a0:	701a      	strb	r2, [r3, #0]
 800a7a2:	e76a      	b.n	800a67a <_dtoa_r+0x9ae>
 800a7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	db04      	blt.n	800a7b4 <_dtoa_r+0xae8>
 800a7aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	d11f      	bne.n	800a7f4 <_dtoa_r+0xb28>
 800a7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	ddf0      	ble.n	800a79c <_dtoa_r+0xad0>
 800a7ba:	9905      	ldr	r1, [sp, #20]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	0038      	movs	r0, r7
 800a7c0:	f000 fea0 	bl	800b504 <__lshift>
 800a7c4:	0031      	movs	r1, r6
 800a7c6:	9005      	str	r0, [sp, #20]
 800a7c8:	f000 ff0a 	bl	800b5e0 <__mcmp>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	dc03      	bgt.n	800a7d8 <_dtoa_r+0xb0c>
 800a7d0:	d1e4      	bne.n	800a79c <_dtoa_r+0xad0>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	07db      	lsls	r3, r3, #31
 800a7d6:	d5e1      	bpl.n	800a79c <_dtoa_r+0xad0>
 800a7d8:	9b07      	ldr	r3, [sp, #28]
 800a7da:	2b39      	cmp	r3, #57	; 0x39
 800a7dc:	d1db      	bne.n	800a796 <_dtoa_r+0xaca>
 800a7de:	2339      	movs	r3, #57	; 0x39
 800a7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7e2:	7013      	strb	r3, [r2, #0]
 800a7e4:	9b08      	ldr	r3, [sp, #32]
 800a7e6:	9308      	str	r3, [sp, #32]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	2a39      	cmp	r2, #57	; 0x39
 800a7ee:	d068      	beq.n	800a8c2 <_dtoa_r+0xbf6>
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	e7d5      	b.n	800a7a0 <_dtoa_r+0xad4>
 800a7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd07      	ble.n	800a80a <_dtoa_r+0xb3e>
 800a7fa:	9b07      	ldr	r3, [sp, #28]
 800a7fc:	2b39      	cmp	r3, #57	; 0x39
 800a7fe:	d0ee      	beq.n	800a7de <_dtoa_r+0xb12>
 800a800:	9b07      	ldr	r3, [sp, #28]
 800a802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a804:	3301      	adds	r3, #1
 800a806:	7013      	strb	r3, [r2, #0]
 800a808:	e737      	b.n	800a67a <_dtoa_r+0x9ae>
 800a80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80c:	9a07      	ldr	r2, [sp, #28]
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a814:	4293      	cmp	r3, r2
 800a816:	d03e      	beq.n	800a896 <_dtoa_r+0xbca>
 800a818:	2300      	movs	r3, #0
 800a81a:	220a      	movs	r2, #10
 800a81c:	9905      	ldr	r1, [sp, #20]
 800a81e:	0038      	movs	r0, r7
 800a820:	f000 fc76 	bl	800b110 <__multadd>
 800a824:	2300      	movs	r3, #0
 800a826:	9005      	str	r0, [sp, #20]
 800a828:	220a      	movs	r2, #10
 800a82a:	0021      	movs	r1, r4
 800a82c:	0038      	movs	r0, r7
 800a82e:	42ac      	cmp	r4, r5
 800a830:	d106      	bne.n	800a840 <_dtoa_r+0xb74>
 800a832:	f000 fc6d 	bl	800b110 <__multadd>
 800a836:	0004      	movs	r4, r0
 800a838:	0005      	movs	r5, r0
 800a83a:	9b08      	ldr	r3, [sp, #32]
 800a83c:	930a      	str	r3, [sp, #40]	; 0x28
 800a83e:	e778      	b.n	800a732 <_dtoa_r+0xa66>
 800a840:	f000 fc66 	bl	800b110 <__multadd>
 800a844:	0029      	movs	r1, r5
 800a846:	0004      	movs	r4, r0
 800a848:	2300      	movs	r3, #0
 800a84a:	220a      	movs	r2, #10
 800a84c:	0038      	movs	r0, r7
 800a84e:	f000 fc5f 	bl	800b110 <__multadd>
 800a852:	0005      	movs	r5, r0
 800a854:	e7f1      	b.n	800a83a <_dtoa_r+0xb6e>
 800a856:	9b07      	ldr	r3, [sp, #28]
 800a858:	930c      	str	r3, [sp, #48]	; 0x30
 800a85a:	2400      	movs	r4, #0
 800a85c:	0031      	movs	r1, r6
 800a85e:	9805      	ldr	r0, [sp, #20]
 800a860:	f7ff f9a8 	bl	8009bb4 <quorem>
 800a864:	9b06      	ldr	r3, [sp, #24]
 800a866:	3030      	adds	r0, #48	; 0x30
 800a868:	5518      	strb	r0, [r3, r4]
 800a86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a86c:	3401      	adds	r4, #1
 800a86e:	9007      	str	r0, [sp, #28]
 800a870:	42a3      	cmp	r3, r4
 800a872:	dd07      	ble.n	800a884 <_dtoa_r+0xbb8>
 800a874:	2300      	movs	r3, #0
 800a876:	220a      	movs	r2, #10
 800a878:	0038      	movs	r0, r7
 800a87a:	9905      	ldr	r1, [sp, #20]
 800a87c:	f000 fc48 	bl	800b110 <__multadd>
 800a880:	9005      	str	r0, [sp, #20]
 800a882:	e7eb      	b.n	800a85c <_dtoa_r+0xb90>
 800a884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a886:	2001      	movs	r0, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dd00      	ble.n	800a88e <_dtoa_r+0xbc2>
 800a88c:	0018      	movs	r0, r3
 800a88e:	2400      	movs	r4, #0
 800a890:	9b06      	ldr	r3, [sp, #24]
 800a892:	181b      	adds	r3, r3, r0
 800a894:	9308      	str	r3, [sp, #32]
 800a896:	9905      	ldr	r1, [sp, #20]
 800a898:	2201      	movs	r2, #1
 800a89a:	0038      	movs	r0, r7
 800a89c:	f000 fe32 	bl	800b504 <__lshift>
 800a8a0:	0031      	movs	r1, r6
 800a8a2:	9005      	str	r0, [sp, #20]
 800a8a4:	f000 fe9c 	bl	800b5e0 <__mcmp>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	dc9b      	bgt.n	800a7e4 <_dtoa_r+0xb18>
 800a8ac:	d102      	bne.n	800a8b4 <_dtoa_r+0xbe8>
 800a8ae:	9b07      	ldr	r3, [sp, #28]
 800a8b0:	07db      	lsls	r3, r3, #31
 800a8b2:	d497      	bmi.n	800a7e4 <_dtoa_r+0xb18>
 800a8b4:	9b08      	ldr	r3, [sp, #32]
 800a8b6:	9308      	str	r3, [sp, #32]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	781a      	ldrb	r2, [r3, #0]
 800a8bc:	2a30      	cmp	r2, #48	; 0x30
 800a8be:	d0fa      	beq.n	800a8b6 <_dtoa_r+0xbea>
 800a8c0:	e6db      	b.n	800a67a <_dtoa_r+0x9ae>
 800a8c2:	9a06      	ldr	r2, [sp, #24]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d18e      	bne.n	800a7e6 <_dtoa_r+0xb1a>
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	9302      	str	r3, [sp, #8]
 800a8ce:	2331      	movs	r3, #49	; 0x31
 800a8d0:	e799      	b.n	800a806 <_dtoa_r+0xb3a>
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <_dtoa_r+0xc2c>)
 800a8d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a8d6:	9306      	str	r3, [sp, #24]
 800a8d8:	4b08      	ldr	r3, [pc, #32]	; (800a8fc <_dtoa_r+0xc30>)
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	d001      	beq.n	800a8e2 <_dtoa_r+0xc16>
 800a8de:	f7ff fa3f 	bl	8009d60 <_dtoa_r+0x94>
 800a8e2:	f7ff fa3f 	bl	8009d64 <_dtoa_r+0x98>
 800a8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dcb6      	bgt.n	800a85a <_dtoa_r+0xb8e>
 800a8ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	dd00      	ble.n	800a8f4 <_dtoa_r+0xc28>
 800a8f2:	e6ac      	b.n	800a64e <_dtoa_r+0x982>
 800a8f4:	e7b1      	b.n	800a85a <_dtoa_r+0xb8e>
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	0800ce99 	.word	0x0800ce99
 800a8fc:	0800cea1 	.word	0x0800cea1

0800a900 <rshift>:
 800a900:	0002      	movs	r2, r0
 800a902:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a904:	6904      	ldr	r4, [r0, #16]
 800a906:	3214      	adds	r2, #20
 800a908:	0013      	movs	r3, r2
 800a90a:	b085      	sub	sp, #20
 800a90c:	114f      	asrs	r7, r1, #5
 800a90e:	42bc      	cmp	r4, r7
 800a910:	dd31      	ble.n	800a976 <rshift+0x76>
 800a912:	00bb      	lsls	r3, r7, #2
 800a914:	18d3      	adds	r3, r2, r3
 800a916:	261f      	movs	r6, #31
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	000b      	movs	r3, r1
 800a91c:	00a5      	lsls	r5, r4, #2
 800a91e:	4033      	ands	r3, r6
 800a920:	1955      	adds	r5, r2, r5
 800a922:	9302      	str	r3, [sp, #8]
 800a924:	4231      	tst	r1, r6
 800a926:	d10c      	bne.n	800a942 <rshift+0x42>
 800a928:	0016      	movs	r6, r2
 800a92a:	9901      	ldr	r1, [sp, #4]
 800a92c:	428d      	cmp	r5, r1
 800a92e:	d838      	bhi.n	800a9a2 <rshift+0xa2>
 800a930:	9901      	ldr	r1, [sp, #4]
 800a932:	2300      	movs	r3, #0
 800a934:	3903      	subs	r1, #3
 800a936:	428d      	cmp	r5, r1
 800a938:	d301      	bcc.n	800a93e <rshift+0x3e>
 800a93a:	1be3      	subs	r3, r4, r7
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	18d3      	adds	r3, r2, r3
 800a940:	e019      	b.n	800a976 <rshift+0x76>
 800a942:	2120      	movs	r1, #32
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	9e01      	ldr	r6, [sp, #4]
 800a948:	1acb      	subs	r3, r1, r3
 800a94a:	9303      	str	r3, [sp, #12]
 800a94c:	ce02      	ldmia	r6!, {r1}
 800a94e:	9b02      	ldr	r3, [sp, #8]
 800a950:	4694      	mov	ip, r2
 800a952:	40d9      	lsrs	r1, r3
 800a954:	9100      	str	r1, [sp, #0]
 800a956:	42b5      	cmp	r5, r6
 800a958:	d816      	bhi.n	800a988 <rshift+0x88>
 800a95a:	9e01      	ldr	r6, [sp, #4]
 800a95c:	2300      	movs	r3, #0
 800a95e:	3601      	adds	r6, #1
 800a960:	42b5      	cmp	r5, r6
 800a962:	d302      	bcc.n	800a96a <rshift+0x6a>
 800a964:	1be3      	subs	r3, r4, r7
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	3b04      	subs	r3, #4
 800a96a:	9900      	ldr	r1, [sp, #0]
 800a96c:	18d3      	adds	r3, r2, r3
 800a96e:	6019      	str	r1, [r3, #0]
 800a970:	2900      	cmp	r1, #0
 800a972:	d000      	beq.n	800a976 <rshift+0x76>
 800a974:	3304      	adds	r3, #4
 800a976:	1a99      	subs	r1, r3, r2
 800a978:	1089      	asrs	r1, r1, #2
 800a97a:	6101      	str	r1, [r0, #16]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d101      	bne.n	800a984 <rshift+0x84>
 800a980:	2300      	movs	r3, #0
 800a982:	6143      	str	r3, [r0, #20]
 800a984:	b005      	add	sp, #20
 800a986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	9903      	ldr	r1, [sp, #12]
 800a98c:	408b      	lsls	r3, r1
 800a98e:	9900      	ldr	r1, [sp, #0]
 800a990:	4319      	orrs	r1, r3
 800a992:	4663      	mov	r3, ip
 800a994:	c302      	stmia	r3!, {r1}
 800a996:	469c      	mov	ip, r3
 800a998:	ce02      	ldmia	r6!, {r1}
 800a99a:	9b02      	ldr	r3, [sp, #8]
 800a99c:	40d9      	lsrs	r1, r3
 800a99e:	9100      	str	r1, [sp, #0]
 800a9a0:	e7d9      	b.n	800a956 <rshift+0x56>
 800a9a2:	c908      	ldmia	r1!, {r3}
 800a9a4:	c608      	stmia	r6!, {r3}
 800a9a6:	e7c1      	b.n	800a92c <rshift+0x2c>

0800a9a8 <__hexdig_fun>:
 800a9a8:	0002      	movs	r2, r0
 800a9aa:	3a30      	subs	r2, #48	; 0x30
 800a9ac:	0003      	movs	r3, r0
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d802      	bhi.n	800a9b8 <__hexdig_fun+0x10>
 800a9b2:	3b20      	subs	r3, #32
 800a9b4:	b2d8      	uxtb	r0, r3
 800a9b6:	4770      	bx	lr
 800a9b8:	0002      	movs	r2, r0
 800a9ba:	3a61      	subs	r2, #97	; 0x61
 800a9bc:	2a05      	cmp	r2, #5
 800a9be:	d801      	bhi.n	800a9c4 <__hexdig_fun+0x1c>
 800a9c0:	3b47      	subs	r3, #71	; 0x47
 800a9c2:	e7f7      	b.n	800a9b4 <__hexdig_fun+0xc>
 800a9c4:	001a      	movs	r2, r3
 800a9c6:	3a41      	subs	r2, #65	; 0x41
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	2a05      	cmp	r2, #5
 800a9cc:	d8f3      	bhi.n	800a9b6 <__hexdig_fun+0xe>
 800a9ce:	3b27      	subs	r3, #39	; 0x27
 800a9d0:	e7f0      	b.n	800a9b4 <__hexdig_fun+0xc>
	...

0800a9d4 <__gethex>:
 800a9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9d6:	b08d      	sub	sp, #52	; 0x34
 800a9d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9da:	4bbf      	ldr	r3, [pc, #764]	; (800acd8 <__gethex+0x304>)
 800a9dc:	9005      	str	r0, [sp, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	9109      	str	r1, [sp, #36]	; 0x24
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	9202      	str	r2, [sp, #8]
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	f7f5 fb8e 	bl	8000108 <strlen>
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	9b07      	ldr	r3, [sp, #28]
 800a9f0:	4252      	negs	r2, r2
 800a9f2:	181b      	adds	r3, r3, r0
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	9003      	str	r0, [sp, #12]
 800a9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	1c8b      	adds	r3, r1, #2
 800aa02:	1a52      	subs	r2, r2, r1
 800aa04:	18d1      	adds	r1, r2, r3
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	9108      	str	r1, [sp, #32]
 800aa0a:	9901      	ldr	r1, [sp, #4]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	7808      	ldrb	r0, [r1, #0]
 800aa10:	2830      	cmp	r0, #48	; 0x30
 800aa12:	d0f7      	beq.n	800aa04 <__gethex+0x30>
 800aa14:	f7ff ffc8 	bl	800a9a8 <__hexdig_fun>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	001c      	movs	r4, r3
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	4298      	cmp	r0, r3
 800aa20:	d11f      	bne.n	800aa62 <__gethex+0x8e>
 800aa22:	9a03      	ldr	r2, [sp, #12]
 800aa24:	9907      	ldr	r1, [sp, #28]
 800aa26:	9801      	ldr	r0, [sp, #4]
 800aa28:	f001 fa5c 	bl	800bee4 <strncmp>
 800aa2c:	0007      	movs	r7, r0
 800aa2e:	42a0      	cmp	r0, r4
 800aa30:	d000      	beq.n	800aa34 <__gethex+0x60>
 800aa32:	e06b      	b.n	800ab0c <__gethex+0x138>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	9a03      	ldr	r2, [sp, #12]
 800aa38:	5c98      	ldrb	r0, [r3, r2]
 800aa3a:	189d      	adds	r5, r3, r2
 800aa3c:	f7ff ffb4 	bl	800a9a8 <__hexdig_fun>
 800aa40:	2301      	movs	r3, #1
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	42a0      	cmp	r0, r4
 800aa46:	d030      	beq.n	800aaaa <__gethex+0xd6>
 800aa48:	9501      	str	r5, [sp, #4]
 800aa4a:	9b01      	ldr	r3, [sp, #4]
 800aa4c:	7818      	ldrb	r0, [r3, #0]
 800aa4e:	2830      	cmp	r0, #48	; 0x30
 800aa50:	d009      	beq.n	800aa66 <__gethex+0x92>
 800aa52:	f7ff ffa9 	bl	800a9a8 <__hexdig_fun>
 800aa56:	4242      	negs	r2, r0
 800aa58:	4142      	adcs	r2, r0
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	002c      	movs	r4, r5
 800aa5e:	9204      	str	r2, [sp, #16]
 800aa60:	9308      	str	r3, [sp, #32]
 800aa62:	9d01      	ldr	r5, [sp, #4]
 800aa64:	e004      	b.n	800aa70 <__gethex+0x9c>
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	e7ed      	b.n	800aa4a <__gethex+0x76>
 800aa6e:	3501      	adds	r5, #1
 800aa70:	7828      	ldrb	r0, [r5, #0]
 800aa72:	f7ff ff99 	bl	800a9a8 <__hexdig_fun>
 800aa76:	1e07      	subs	r7, r0, #0
 800aa78:	d1f9      	bne.n	800aa6e <__gethex+0x9a>
 800aa7a:	0028      	movs	r0, r5
 800aa7c:	9a03      	ldr	r2, [sp, #12]
 800aa7e:	9907      	ldr	r1, [sp, #28]
 800aa80:	f001 fa30 	bl	800bee4 <strncmp>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d10e      	bne.n	800aaa6 <__gethex+0xd2>
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	d107      	bne.n	800aa9c <__gethex+0xc8>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	18ed      	adds	r5, r5, r3
 800aa90:	002c      	movs	r4, r5
 800aa92:	7828      	ldrb	r0, [r5, #0]
 800aa94:	f7ff ff88 	bl	800a9a8 <__hexdig_fun>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d102      	bne.n	800aaa2 <__gethex+0xce>
 800aa9c:	1b64      	subs	r4, r4, r5
 800aa9e:	00a7      	lsls	r7, r4, #2
 800aaa0:	e003      	b.n	800aaaa <__gethex+0xd6>
 800aaa2:	3501      	adds	r5, #1
 800aaa4:	e7f5      	b.n	800aa92 <__gethex+0xbe>
 800aaa6:	2c00      	cmp	r4, #0
 800aaa8:	d1f8      	bne.n	800aa9c <__gethex+0xc8>
 800aaaa:	2220      	movs	r2, #32
 800aaac:	782b      	ldrb	r3, [r5, #0]
 800aaae:	002e      	movs	r6, r5
 800aab0:	4393      	bics	r3, r2
 800aab2:	2b50      	cmp	r3, #80	; 0x50
 800aab4:	d11d      	bne.n	800aaf2 <__gethex+0x11e>
 800aab6:	786b      	ldrb	r3, [r5, #1]
 800aab8:	2b2b      	cmp	r3, #43	; 0x2b
 800aaba:	d02c      	beq.n	800ab16 <__gethex+0x142>
 800aabc:	2b2d      	cmp	r3, #45	; 0x2d
 800aabe:	d02e      	beq.n	800ab1e <__gethex+0x14a>
 800aac0:	2300      	movs	r3, #0
 800aac2:	1c6e      	adds	r6, r5, #1
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	7830      	ldrb	r0, [r6, #0]
 800aac8:	f7ff ff6e 	bl	800a9a8 <__hexdig_fun>
 800aacc:	1e43      	subs	r3, r0, #1
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b18      	cmp	r3, #24
 800aad2:	d82b      	bhi.n	800ab2c <__gethex+0x158>
 800aad4:	3810      	subs	r0, #16
 800aad6:	0004      	movs	r4, r0
 800aad8:	7870      	ldrb	r0, [r6, #1]
 800aada:	f7ff ff65 	bl	800a9a8 <__hexdig_fun>
 800aade:	1e43      	subs	r3, r0, #1
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	3601      	adds	r6, #1
 800aae4:	2b18      	cmp	r3, #24
 800aae6:	d91c      	bls.n	800ab22 <__gethex+0x14e>
 800aae8:	9b06      	ldr	r3, [sp, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d000      	beq.n	800aaf0 <__gethex+0x11c>
 800aaee:	4264      	negs	r4, r4
 800aaf0:	193f      	adds	r7, r7, r4
 800aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf4:	601e      	str	r6, [r3, #0]
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d019      	beq.n	800ab30 <__gethex+0x15c>
 800aafc:	2600      	movs	r6, #0
 800aafe:	9b08      	ldr	r3, [sp, #32]
 800ab00:	42b3      	cmp	r3, r6
 800ab02:	d100      	bne.n	800ab06 <__gethex+0x132>
 800ab04:	3606      	adds	r6, #6
 800ab06:	0030      	movs	r0, r6
 800ab08:	b00d      	add	sp, #52	; 0x34
 800ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	2700      	movs	r7, #0
 800ab10:	9d01      	ldr	r5, [sp, #4]
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	e7c9      	b.n	800aaaa <__gethex+0xd6>
 800ab16:	2300      	movs	r3, #0
 800ab18:	9306      	str	r3, [sp, #24]
 800ab1a:	1cae      	adds	r6, r5, #2
 800ab1c:	e7d3      	b.n	800aac6 <__gethex+0xf2>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7fa      	b.n	800ab18 <__gethex+0x144>
 800ab22:	230a      	movs	r3, #10
 800ab24:	435c      	muls	r4, r3
 800ab26:	1824      	adds	r4, r4, r0
 800ab28:	3c10      	subs	r4, #16
 800ab2a:	e7d5      	b.n	800aad8 <__gethex+0x104>
 800ab2c:	002e      	movs	r6, r5
 800ab2e:	e7e0      	b.n	800aaf2 <__gethex+0x11e>
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	9904      	ldr	r1, [sp, #16]
 800ab34:	1aeb      	subs	r3, r5, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b07      	cmp	r3, #7
 800ab3a:	dc0a      	bgt.n	800ab52 <__gethex+0x17e>
 800ab3c:	9805      	ldr	r0, [sp, #20]
 800ab3e:	f000 fa7f 	bl	800b040 <_Balloc>
 800ab42:	1e04      	subs	r4, r0, #0
 800ab44:	d108      	bne.n	800ab58 <__gethex+0x184>
 800ab46:	0002      	movs	r2, r0
 800ab48:	21de      	movs	r1, #222	; 0xde
 800ab4a:	4b64      	ldr	r3, [pc, #400]	; (800acdc <__gethex+0x308>)
 800ab4c:	4864      	ldr	r0, [pc, #400]	; (800ace0 <__gethex+0x30c>)
 800ab4e:	f001 f9e9 	bl	800bf24 <__assert_func>
 800ab52:	3101      	adds	r1, #1
 800ab54:	105b      	asrs	r3, r3, #1
 800ab56:	e7ef      	b.n	800ab38 <__gethex+0x164>
 800ab58:	0003      	movs	r3, r0
 800ab5a:	3314      	adds	r3, #20
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab60:	2300      	movs	r3, #0
 800ab62:	001e      	movs	r6, r3
 800ab64:	9306      	str	r3, [sp, #24]
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	d340      	bcc.n	800abee <__gethex+0x21a>
 800ab6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	c540      	stmia	r5!, {r6}
 800ab72:	1aed      	subs	r5, r5, r3
 800ab74:	10ad      	asrs	r5, r5, #2
 800ab76:	0030      	movs	r0, r6
 800ab78:	6125      	str	r5, [r4, #16]
 800ab7a:	f000 fb59 	bl	800b230 <__hi0bits>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	016d      	lsls	r5, r5, #5
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	1a2e      	subs	r6, r5, r0
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	429e      	cmp	r6, r3
 800ab8a:	dd5a      	ble.n	800ac42 <__gethex+0x26e>
 800ab8c:	1af6      	subs	r6, r6, r3
 800ab8e:	0031      	movs	r1, r6
 800ab90:	0020      	movs	r0, r4
 800ab92:	f000 fefb 	bl	800b98c <__any_on>
 800ab96:	1e05      	subs	r5, r0, #0
 800ab98:	d016      	beq.n	800abc8 <__gethex+0x1f4>
 800ab9a:	2501      	movs	r5, #1
 800ab9c:	211f      	movs	r1, #31
 800ab9e:	0028      	movs	r0, r5
 800aba0:	1e73      	subs	r3, r6, #1
 800aba2:	4019      	ands	r1, r3
 800aba4:	4088      	lsls	r0, r1
 800aba6:	0001      	movs	r1, r0
 800aba8:	115a      	asrs	r2, r3, #5
 800abaa:	9804      	ldr	r0, [sp, #16]
 800abac:	0092      	lsls	r2, r2, #2
 800abae:	5812      	ldr	r2, [r2, r0]
 800abb0:	420a      	tst	r2, r1
 800abb2:	d009      	beq.n	800abc8 <__gethex+0x1f4>
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	dd06      	ble.n	800abc6 <__gethex+0x1f2>
 800abb8:	0020      	movs	r0, r4
 800abba:	1eb1      	subs	r1, r6, #2
 800abbc:	f000 fee6 	bl	800b98c <__any_on>
 800abc0:	3502      	adds	r5, #2
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d100      	bne.n	800abc8 <__gethex+0x1f4>
 800abc6:	2502      	movs	r5, #2
 800abc8:	0031      	movs	r1, r6
 800abca:	0020      	movs	r0, r4
 800abcc:	f7ff fe98 	bl	800a900 <rshift>
 800abd0:	19bf      	adds	r7, r7, r6
 800abd2:	9b02      	ldr	r3, [sp, #8]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	9303      	str	r3, [sp, #12]
 800abd8:	42bb      	cmp	r3, r7
 800abda:	da42      	bge.n	800ac62 <__gethex+0x28e>
 800abdc:	0021      	movs	r1, r4
 800abde:	9805      	ldr	r0, [sp, #20]
 800abe0:	f000 fa72 	bl	800b0c8 <_Bfree>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abe8:	26a3      	movs	r6, #163	; 0xa3
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	e78b      	b.n	800ab06 <__gethex+0x132>
 800abee:	1e6b      	subs	r3, r5, #1
 800abf0:	9308      	str	r3, [sp, #32]
 800abf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d014      	beq.n	800ac24 <__gethex+0x250>
 800abfa:	9b06      	ldr	r3, [sp, #24]
 800abfc:	2b20      	cmp	r3, #32
 800abfe:	d104      	bne.n	800ac0a <__gethex+0x236>
 800ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac02:	c340      	stmia	r3!, {r6}
 800ac04:	2600      	movs	r6, #0
 800ac06:	9309      	str	r3, [sp, #36]	; 0x24
 800ac08:	9606      	str	r6, [sp, #24]
 800ac0a:	9b08      	ldr	r3, [sp, #32]
 800ac0c:	7818      	ldrb	r0, [r3, #0]
 800ac0e:	f7ff fecb 	bl	800a9a8 <__hexdig_fun>
 800ac12:	230f      	movs	r3, #15
 800ac14:	4018      	ands	r0, r3
 800ac16:	9b06      	ldr	r3, [sp, #24]
 800ac18:	9d08      	ldr	r5, [sp, #32]
 800ac1a:	4098      	lsls	r0, r3
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4306      	orrs	r6, r0
 800ac20:	9306      	str	r3, [sp, #24]
 800ac22:	e7a0      	b.n	800ab66 <__gethex+0x192>
 800ac24:	2301      	movs	r3, #1
 800ac26:	9a03      	ldr	r2, [sp, #12]
 800ac28:	1a9d      	subs	r5, r3, r2
 800ac2a:	9b08      	ldr	r3, [sp, #32]
 800ac2c:	195d      	adds	r5, r3, r5
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	429d      	cmp	r5, r3
 800ac32:	d3e2      	bcc.n	800abfa <__gethex+0x226>
 800ac34:	0028      	movs	r0, r5
 800ac36:	9907      	ldr	r1, [sp, #28]
 800ac38:	f001 f954 	bl	800bee4 <strncmp>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d1dc      	bne.n	800abfa <__gethex+0x226>
 800ac40:	e791      	b.n	800ab66 <__gethex+0x192>
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	2500      	movs	r5, #0
 800ac46:	429e      	cmp	r6, r3
 800ac48:	dac3      	bge.n	800abd2 <__gethex+0x1fe>
 800ac4a:	1b9e      	subs	r6, r3, r6
 800ac4c:	0021      	movs	r1, r4
 800ac4e:	0032      	movs	r2, r6
 800ac50:	9805      	ldr	r0, [sp, #20]
 800ac52:	f000 fc57 	bl	800b504 <__lshift>
 800ac56:	0003      	movs	r3, r0
 800ac58:	3314      	adds	r3, #20
 800ac5a:	0004      	movs	r4, r0
 800ac5c:	1bbf      	subs	r7, r7, r6
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	e7b7      	b.n	800abd2 <__gethex+0x1fe>
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	685e      	ldr	r6, [r3, #4]
 800ac66:	42be      	cmp	r6, r7
 800ac68:	dd71      	ble.n	800ad4e <__gethex+0x37a>
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	1bf6      	subs	r6, r6, r7
 800ac6e:	42b3      	cmp	r3, r6
 800ac70:	dc38      	bgt.n	800ace4 <__gethex+0x310>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d026      	beq.n	800acc8 <__gethex+0x2f4>
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d028      	beq.n	800acd0 <__gethex+0x2fc>
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d119      	bne.n	800acb6 <__gethex+0x2e2>
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	42b3      	cmp	r3, r6
 800ac86:	d116      	bne.n	800acb6 <__gethex+0x2e2>
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d10d      	bne.n	800aca8 <__gethex+0x2d4>
 800ac8c:	9b02      	ldr	r3, [sp, #8]
 800ac8e:	2662      	movs	r6, #98	; 0x62
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	9a01      	ldr	r2, [sp, #4]
 800ac96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	9a04      	ldr	r2, [sp, #16]
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aca4:	601c      	str	r4, [r3, #0]
 800aca6:	e72e      	b.n	800ab06 <__gethex+0x132>
 800aca8:	9901      	ldr	r1, [sp, #4]
 800acaa:	0020      	movs	r0, r4
 800acac:	3901      	subs	r1, #1
 800acae:	f000 fe6d 	bl	800b98c <__any_on>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d1ea      	bne.n	800ac8c <__gethex+0x2b8>
 800acb6:	0021      	movs	r1, r4
 800acb8:	9805      	ldr	r0, [sp, #20]
 800acba:	f000 fa05 	bl	800b0c8 <_Bfree>
 800acbe:	2300      	movs	r3, #0
 800acc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acc2:	2650      	movs	r6, #80	; 0x50
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	e71e      	b.n	800ab06 <__gethex+0x132>
 800acc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f3      	bne.n	800acb6 <__gethex+0x2e2>
 800acce:	e7dd      	b.n	800ac8c <__gethex+0x2b8>
 800acd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1da      	bne.n	800ac8c <__gethex+0x2b8>
 800acd6:	e7ee      	b.n	800acb6 <__gethex+0x2e2>
 800acd8:	0800cf90 	.word	0x0800cf90
 800acdc:	0800cf18 	.word	0x0800cf18
 800ace0:	0800cf29 	.word	0x0800cf29
 800ace4:	1e77      	subs	r7, r6, #1
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	d12f      	bne.n	800ad4a <__gethex+0x376>
 800acea:	2f00      	cmp	r7, #0
 800acec:	d004      	beq.n	800acf8 <__gethex+0x324>
 800acee:	0039      	movs	r1, r7
 800acf0:	0020      	movs	r0, r4
 800acf2:	f000 fe4b 	bl	800b98c <__any_on>
 800acf6:	0005      	movs	r5, r0
 800acf8:	231f      	movs	r3, #31
 800acfa:	117a      	asrs	r2, r7, #5
 800acfc:	401f      	ands	r7, r3
 800acfe:	3b1e      	subs	r3, #30
 800ad00:	40bb      	lsls	r3, r7
 800ad02:	9904      	ldr	r1, [sp, #16]
 800ad04:	0092      	lsls	r2, r2, #2
 800ad06:	5852      	ldr	r2, [r2, r1]
 800ad08:	421a      	tst	r2, r3
 800ad0a:	d001      	beq.n	800ad10 <__gethex+0x33c>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	431d      	orrs	r5, r3
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	0031      	movs	r1, r6
 800ad14:	1b9b      	subs	r3, r3, r6
 800ad16:	2602      	movs	r6, #2
 800ad18:	0020      	movs	r0, r4
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	f7ff fdf0 	bl	800a900 <rshift>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	685f      	ldr	r7, [r3, #4]
 800ad24:	2d00      	cmp	r5, #0
 800ad26:	d041      	beq.n	800adac <__gethex+0x3d8>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d010      	beq.n	800ad52 <__gethex+0x37e>
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d012      	beq.n	800ad5a <__gethex+0x386>
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d106      	bne.n	800ad46 <__gethex+0x372>
 800ad38:	07aa      	lsls	r2, r5, #30
 800ad3a:	d504      	bpl.n	800ad46 <__gethex+0x372>
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	6810      	ldr	r0, [r2, #0]
 800ad40:	4305      	orrs	r5, r0
 800ad42:	421d      	tst	r5, r3
 800ad44:	d10c      	bne.n	800ad60 <__gethex+0x38c>
 800ad46:	2310      	movs	r3, #16
 800ad48:	e02f      	b.n	800adaa <__gethex+0x3d6>
 800ad4a:	2501      	movs	r5, #1
 800ad4c:	e7d4      	b.n	800acf8 <__gethex+0x324>
 800ad4e:	2601      	movs	r6, #1
 800ad50:	e7e8      	b.n	800ad24 <__gethex+0x350>
 800ad52:	2301      	movs	r3, #1
 800ad54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad56:	1a9b      	subs	r3, r3, r2
 800ad58:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0f2      	beq.n	800ad46 <__gethex+0x372>
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	2000      	movs	r0, #0
 800ad64:	9303      	str	r3, [sp, #12]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	0023      	movs	r3, r4
 800ad6c:	9a04      	ldr	r2, [sp, #16]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	1899      	adds	r1, r3, r2
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	1c55      	adds	r5, r2, #1
 800ad76:	d01e      	beq.n	800adb6 <__gethex+0x3e2>
 800ad78:	3201      	adds	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	0023      	movs	r3, r4
 800ad7e:	3314      	adds	r3, #20
 800ad80:	2e02      	cmp	r6, #2
 800ad82:	d140      	bne.n	800ae06 <__gethex+0x432>
 800ad84:	9a02      	ldr	r2, [sp, #8]
 800ad86:	9901      	ldr	r1, [sp, #4]
 800ad88:	6812      	ldr	r2, [r2, #0]
 800ad8a:	3a01      	subs	r2, #1
 800ad8c:	428a      	cmp	r2, r1
 800ad8e:	d10b      	bne.n	800ada8 <__gethex+0x3d4>
 800ad90:	114a      	asrs	r2, r1, #5
 800ad92:	211f      	movs	r1, #31
 800ad94:	9801      	ldr	r0, [sp, #4]
 800ad96:	0092      	lsls	r2, r2, #2
 800ad98:	4001      	ands	r1, r0
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	0005      	movs	r5, r0
 800ad9e:	408d      	lsls	r5, r1
 800ada0:	58d3      	ldr	r3, [r2, r3]
 800ada2:	422b      	tst	r3, r5
 800ada4:	d000      	beq.n	800ada8 <__gethex+0x3d4>
 800ada6:	2601      	movs	r6, #1
 800ada8:	2320      	movs	r3, #32
 800adaa:	431e      	orrs	r6, r3
 800adac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adae:	601c      	str	r4, [r3, #0]
 800adb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb2:	601f      	str	r7, [r3, #0]
 800adb4:	e6a7      	b.n	800ab06 <__gethex+0x132>
 800adb6:	c301      	stmia	r3!, {r0}
 800adb8:	4299      	cmp	r1, r3
 800adba:	d8da      	bhi.n	800ad72 <__gethex+0x39e>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	68a2      	ldr	r2, [r4, #8]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	db17      	blt.n	800adf4 <__gethex+0x420>
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	9805      	ldr	r0, [sp, #20]
 800adc8:	1c59      	adds	r1, r3, #1
 800adca:	f000 f939 	bl	800b040 <_Balloc>
 800adce:	1e05      	subs	r5, r0, #0
 800add0:	d103      	bne.n	800adda <__gethex+0x406>
 800add2:	0002      	movs	r2, r0
 800add4:	2184      	movs	r1, #132	; 0x84
 800add6:	4b1c      	ldr	r3, [pc, #112]	; (800ae48 <__gethex+0x474>)
 800add8:	e6b8      	b.n	800ab4c <__gethex+0x178>
 800adda:	0021      	movs	r1, r4
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	310c      	adds	r1, #12
 800ade0:	1c9a      	adds	r2, r3, #2
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	300c      	adds	r0, #12
 800ade6:	f7fd f973 	bl	80080d0 <memcpy>
 800adea:	0021      	movs	r1, r4
 800adec:	9805      	ldr	r0, [sp, #20]
 800adee:	f000 f96b 	bl	800b0c8 <_Bfree>
 800adf2:	002c      	movs	r4, r5
 800adf4:	6923      	ldr	r3, [r4, #16]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	6122      	str	r2, [r4, #16]
 800adfa:	2201      	movs	r2, #1
 800adfc:	3304      	adds	r3, #4
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	18e3      	adds	r3, r4, r3
 800ae02:	605a      	str	r2, [r3, #4]
 800ae04:	e7ba      	b.n	800ad7c <__gethex+0x3a8>
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	9903      	ldr	r1, [sp, #12]
 800ae0a:	428a      	cmp	r2, r1
 800ae0c:	dd09      	ble.n	800ae22 <__gethex+0x44e>
 800ae0e:	2101      	movs	r1, #1
 800ae10:	0020      	movs	r0, r4
 800ae12:	f7ff fd75 	bl	800a900 <rshift>
 800ae16:	9b02      	ldr	r3, [sp, #8]
 800ae18:	3701      	adds	r7, #1
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	42bb      	cmp	r3, r7
 800ae1e:	dac2      	bge.n	800ada6 <__gethex+0x3d2>
 800ae20:	e6dc      	b.n	800abdc <__gethex+0x208>
 800ae22:	221f      	movs	r2, #31
 800ae24:	9d01      	ldr	r5, [sp, #4]
 800ae26:	9901      	ldr	r1, [sp, #4]
 800ae28:	2601      	movs	r6, #1
 800ae2a:	4015      	ands	r5, r2
 800ae2c:	4211      	tst	r1, r2
 800ae2e:	d0bb      	beq.n	800ada8 <__gethex+0x3d4>
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	189b      	adds	r3, r3, r2
 800ae34:	3b04      	subs	r3, #4
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	f000 f9fa 	bl	800b230 <__hi0bits>
 800ae3c:	2320      	movs	r3, #32
 800ae3e:	1b5d      	subs	r5, r3, r5
 800ae40:	42a8      	cmp	r0, r5
 800ae42:	dbe4      	blt.n	800ae0e <__gethex+0x43a>
 800ae44:	e7b0      	b.n	800ada8 <__gethex+0x3d4>
 800ae46:	46c0      	nop			; (mov r8, r8)
 800ae48:	0800cf18 	.word	0x0800cf18

0800ae4c <L_shift>:
 800ae4c:	2308      	movs	r3, #8
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	2520      	movs	r5, #32
 800ae52:	1a9a      	subs	r2, r3, r2
 800ae54:	0092      	lsls	r2, r2, #2
 800ae56:	1aad      	subs	r5, r5, r2
 800ae58:	6843      	ldr	r3, [r0, #4]
 800ae5a:	6806      	ldr	r6, [r0, #0]
 800ae5c:	001c      	movs	r4, r3
 800ae5e:	40ac      	lsls	r4, r5
 800ae60:	40d3      	lsrs	r3, r2
 800ae62:	4334      	orrs	r4, r6
 800ae64:	6004      	str	r4, [r0, #0]
 800ae66:	6043      	str	r3, [r0, #4]
 800ae68:	3004      	adds	r0, #4
 800ae6a:	4288      	cmp	r0, r1
 800ae6c:	d3f4      	bcc.n	800ae58 <L_shift+0xc>
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}

0800ae70 <__match>:
 800ae70:	b530      	push	{r4, r5, lr}
 800ae72:	6803      	ldr	r3, [r0, #0]
 800ae74:	780c      	ldrb	r4, [r1, #0]
 800ae76:	3301      	adds	r3, #1
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d102      	bne.n	800ae82 <__match+0x12>
 800ae7c:	6003      	str	r3, [r0, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	bd30      	pop	{r4, r5, pc}
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	0015      	movs	r5, r2
 800ae86:	3d41      	subs	r5, #65	; 0x41
 800ae88:	2d19      	cmp	r5, #25
 800ae8a:	d800      	bhi.n	800ae8e <__match+0x1e>
 800ae8c:	3220      	adds	r2, #32
 800ae8e:	3101      	adds	r1, #1
 800ae90:	42a2      	cmp	r2, r4
 800ae92:	d0ef      	beq.n	800ae74 <__match+0x4>
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7f3      	b.n	800ae80 <__match+0x10>

0800ae98 <__hexnan>:
 800ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae9a:	680b      	ldr	r3, [r1, #0]
 800ae9c:	b08b      	sub	sp, #44	; 0x2c
 800ae9e:	9201      	str	r2, [sp, #4]
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	115a      	asrs	r2, r3, #5
 800aea4:	0092      	lsls	r2, r2, #2
 800aea6:	188a      	adds	r2, r1, r2
 800aea8:	9202      	str	r2, [sp, #8]
 800aeaa:	0019      	movs	r1, r3
 800aeac:	221f      	movs	r2, #31
 800aeae:	4011      	ands	r1, r2
 800aeb0:	9008      	str	r0, [sp, #32]
 800aeb2:	9106      	str	r1, [sp, #24]
 800aeb4:	4213      	tst	r3, r2
 800aeb6:	d002      	beq.n	800aebe <__hexnan+0x26>
 800aeb8:	9b02      	ldr	r3, [sp, #8]
 800aeba:	3304      	adds	r3, #4
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	2500      	movs	r5, #0
 800aec2:	1f1e      	subs	r6, r3, #4
 800aec4:	0037      	movs	r7, r6
 800aec6:	0034      	movs	r4, r6
 800aec8:	9b08      	ldr	r3, [sp, #32]
 800aeca:	6035      	str	r5, [r6, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	9507      	str	r5, [sp, #28]
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	9503      	str	r5, [sp, #12]
 800aed4:	9b05      	ldr	r3, [sp, #20]
 800aed6:	3301      	adds	r3, #1
 800aed8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeda:	9b05      	ldr	r3, [sp, #20]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d028      	beq.n	800af36 <__hexnan+0x9e>
 800aee4:	9804      	ldr	r0, [sp, #16]
 800aee6:	f7ff fd5f 	bl	800a9a8 <__hexdig_fun>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d154      	bne.n	800af98 <__hexnan+0x100>
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	d819      	bhi.n	800af28 <__hexnan+0x90>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	9a07      	ldr	r2, [sp, #28]
 800aef8:	4293      	cmp	r3, r2
 800aefa:	dd12      	ble.n	800af22 <__hexnan+0x8a>
 800aefc:	42bc      	cmp	r4, r7
 800aefe:	d206      	bcs.n	800af0e <__hexnan+0x76>
 800af00:	2d07      	cmp	r5, #7
 800af02:	dc04      	bgt.n	800af0e <__hexnan+0x76>
 800af04:	002a      	movs	r2, r5
 800af06:	0039      	movs	r1, r7
 800af08:	0020      	movs	r0, r4
 800af0a:	f7ff ff9f 	bl	800ae4c <L_shift>
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	2508      	movs	r5, #8
 800af12:	429c      	cmp	r4, r3
 800af14:	d905      	bls.n	800af22 <__hexnan+0x8a>
 800af16:	1f27      	subs	r7, r4, #4
 800af18:	2500      	movs	r5, #0
 800af1a:	003c      	movs	r4, r7
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	603d      	str	r5, [r7, #0]
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	e7d5      	b.n	800aed4 <__hexnan+0x3c>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	2b29      	cmp	r3, #41	; 0x29
 800af2c:	d159      	bne.n	800afe2 <__hexnan+0x14a>
 800af2e:	9b05      	ldr	r3, [sp, #20]
 800af30:	9a08      	ldr	r2, [sp, #32]
 800af32:	3302      	adds	r3, #2
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d052      	beq.n	800afe2 <__hexnan+0x14a>
 800af3c:	42bc      	cmp	r4, r7
 800af3e:	d206      	bcs.n	800af4e <__hexnan+0xb6>
 800af40:	2d07      	cmp	r5, #7
 800af42:	dc04      	bgt.n	800af4e <__hexnan+0xb6>
 800af44:	002a      	movs	r2, r5
 800af46:	0039      	movs	r1, r7
 800af48:	0020      	movs	r0, r4
 800af4a:	f7ff ff7f 	bl	800ae4c <L_shift>
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	429c      	cmp	r4, r3
 800af52:	d935      	bls.n	800afc0 <__hexnan+0x128>
 800af54:	001a      	movs	r2, r3
 800af56:	0023      	movs	r3, r4
 800af58:	cb02      	ldmia	r3!, {r1}
 800af5a:	c202      	stmia	r2!, {r1}
 800af5c:	429e      	cmp	r6, r3
 800af5e:	d2fb      	bcs.n	800af58 <__hexnan+0xc0>
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	1c61      	adds	r1, r4, #1
 800af64:	1eda      	subs	r2, r3, #3
 800af66:	2304      	movs	r3, #4
 800af68:	4291      	cmp	r1, r2
 800af6a:	d805      	bhi.n	800af78 <__hexnan+0xe0>
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	3b04      	subs	r3, #4
 800af70:	1b1b      	subs	r3, r3, r4
 800af72:	089b      	lsrs	r3, r3, #2
 800af74:	3301      	adds	r3, #1
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	9a01      	ldr	r2, [sp, #4]
 800af7a:	18d3      	adds	r3, r2, r3
 800af7c:	2200      	movs	r2, #0
 800af7e:	c304      	stmia	r3!, {r2}
 800af80:	429e      	cmp	r6, r3
 800af82:	d2fc      	bcs.n	800af7e <__hexnan+0xe6>
 800af84:	6833      	ldr	r3, [r6, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d104      	bne.n	800af94 <__hexnan+0xfc>
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	429e      	cmp	r6, r3
 800af8e:	d126      	bne.n	800afde <__hexnan+0x146>
 800af90:	2301      	movs	r3, #1
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	2005      	movs	r0, #5
 800af96:	e025      	b.n	800afe4 <__hexnan+0x14c>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	3501      	adds	r5, #1
 800af9c:	3301      	adds	r3, #1
 800af9e:	9303      	str	r3, [sp, #12]
 800afa0:	2d08      	cmp	r5, #8
 800afa2:	dd06      	ble.n	800afb2 <__hexnan+0x11a>
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	429c      	cmp	r4, r3
 800afa8:	d9bb      	bls.n	800af22 <__hexnan+0x8a>
 800afaa:	2300      	movs	r3, #0
 800afac:	2501      	movs	r5, #1
 800afae:	3c04      	subs	r4, #4
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	220f      	movs	r2, #15
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	4010      	ands	r0, r2
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	4318      	orrs	r0, r3
 800afbc:	6020      	str	r0, [r4, #0]
 800afbe:	e7b0      	b.n	800af22 <__hexnan+0x8a>
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0de      	beq.n	800af84 <__hexnan+0xec>
 800afc6:	2120      	movs	r1, #32
 800afc8:	9a06      	ldr	r2, [sp, #24]
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	1a89      	subs	r1, r1, r2
 800afce:	2201      	movs	r2, #1
 800afd0:	4252      	negs	r2, r2
 800afd2:	40ca      	lsrs	r2, r1
 800afd4:	3b04      	subs	r3, #4
 800afd6:	6819      	ldr	r1, [r3, #0]
 800afd8:	400a      	ands	r2, r1
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	e7d2      	b.n	800af84 <__hexnan+0xec>
 800afde:	3e04      	subs	r6, #4
 800afe0:	e7d0      	b.n	800af84 <__hexnan+0xec>
 800afe2:	2004      	movs	r0, #4
 800afe4:	b00b      	add	sp, #44	; 0x2c
 800afe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afe8 <_localeconv_r>:
 800afe8:	4800      	ldr	r0, [pc, #0]	; (800afec <_localeconv_r+0x4>)
 800afea:	4770      	bx	lr
 800afec:	20000170 	.word	0x20000170

0800aff0 <malloc>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	4b03      	ldr	r3, [pc, #12]	; (800b000 <malloc+0x10>)
 800aff4:	0001      	movs	r1, r0
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	f000 fd84 	bl	800bb04 <_malloc_r>
 800affc:	bd10      	pop	{r4, pc}
 800affe:	46c0      	nop			; (mov r8, r8)
 800b000:	20000018 	.word	0x20000018

0800b004 <__ascii_mbtowc>:
 800b004:	b082      	sub	sp, #8
 800b006:	2900      	cmp	r1, #0
 800b008:	d100      	bne.n	800b00c <__ascii_mbtowc+0x8>
 800b00a:	a901      	add	r1, sp, #4
 800b00c:	1e10      	subs	r0, r2, #0
 800b00e:	d006      	beq.n	800b01e <__ascii_mbtowc+0x1a>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d006      	beq.n	800b022 <__ascii_mbtowc+0x1e>
 800b014:	7813      	ldrb	r3, [r2, #0]
 800b016:	600b      	str	r3, [r1, #0]
 800b018:	7810      	ldrb	r0, [r2, #0]
 800b01a:	1e43      	subs	r3, r0, #1
 800b01c:	4198      	sbcs	r0, r3
 800b01e:	b002      	add	sp, #8
 800b020:	4770      	bx	lr
 800b022:	2002      	movs	r0, #2
 800b024:	4240      	negs	r0, r0
 800b026:	e7fa      	b.n	800b01e <__ascii_mbtowc+0x1a>

0800b028 <memchr>:
 800b028:	b2c9      	uxtb	r1, r1
 800b02a:	1882      	adds	r2, r0, r2
 800b02c:	4290      	cmp	r0, r2
 800b02e:	d101      	bne.n	800b034 <memchr+0xc>
 800b030:	2000      	movs	r0, #0
 800b032:	4770      	bx	lr
 800b034:	7803      	ldrb	r3, [r0, #0]
 800b036:	428b      	cmp	r3, r1
 800b038:	d0fb      	beq.n	800b032 <memchr+0xa>
 800b03a:	3001      	adds	r0, #1
 800b03c:	e7f6      	b.n	800b02c <memchr+0x4>
	...

0800b040 <_Balloc>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b044:	0006      	movs	r6, r0
 800b046:	000c      	movs	r4, r1
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d10e      	bne.n	800b06a <_Balloc+0x2a>
 800b04c:	2010      	movs	r0, #16
 800b04e:	f7ff ffcf 	bl	800aff0 <malloc>
 800b052:	1e02      	subs	r2, r0, #0
 800b054:	6270      	str	r0, [r6, #36]	; 0x24
 800b056:	d104      	bne.n	800b062 <_Balloc+0x22>
 800b058:	2166      	movs	r1, #102	; 0x66
 800b05a:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <_Balloc+0x80>)
 800b05c:	4819      	ldr	r0, [pc, #100]	; (800b0c4 <_Balloc+0x84>)
 800b05e:	f000 ff61 	bl	800bf24 <__assert_func>
 800b062:	6045      	str	r5, [r0, #4]
 800b064:	6085      	str	r5, [r0, #8]
 800b066:	6005      	str	r5, [r0, #0]
 800b068:	60c5      	str	r5, [r0, #12]
 800b06a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b06c:	68eb      	ldr	r3, [r5, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d013      	beq.n	800b09a <_Balloc+0x5a>
 800b072:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b074:	00a2      	lsls	r2, r4, #2
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	189b      	adds	r3, r3, r2
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d118      	bne.n	800b0b2 <_Balloc+0x72>
 800b080:	2101      	movs	r1, #1
 800b082:	000d      	movs	r5, r1
 800b084:	40a5      	lsls	r5, r4
 800b086:	1d6a      	adds	r2, r5, #5
 800b088:	0030      	movs	r0, r6
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	f000 fca1 	bl	800b9d2 <_calloc_r>
 800b090:	2800      	cmp	r0, #0
 800b092:	d00c      	beq.n	800b0ae <_Balloc+0x6e>
 800b094:	6044      	str	r4, [r0, #4]
 800b096:	6085      	str	r5, [r0, #8]
 800b098:	e00d      	b.n	800b0b6 <_Balloc+0x76>
 800b09a:	2221      	movs	r2, #33	; 0x21
 800b09c:	2104      	movs	r1, #4
 800b09e:	0030      	movs	r0, r6
 800b0a0:	f000 fc97 	bl	800b9d2 <_calloc_r>
 800b0a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0a6:	60e8      	str	r0, [r5, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e1      	bne.n	800b072 <_Balloc+0x32>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	6802      	ldr	r2, [r0, #0]
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	6103      	str	r3, [r0, #16]
 800b0ba:	60c3      	str	r3, [r0, #12]
 800b0bc:	e7f8      	b.n	800b0b0 <_Balloc+0x70>
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	0800cea6 	.word	0x0800cea6
 800b0c4:	0800cfa4 	.word	0x0800cfa4

0800b0c8 <_Bfree>:
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0cc:	0005      	movs	r5, r0
 800b0ce:	000c      	movs	r4, r1
 800b0d0:	2e00      	cmp	r6, #0
 800b0d2:	d10e      	bne.n	800b0f2 <_Bfree+0x2a>
 800b0d4:	2010      	movs	r0, #16
 800b0d6:	f7ff ff8b 	bl	800aff0 <malloc>
 800b0da:	1e02      	subs	r2, r0, #0
 800b0dc:	6268      	str	r0, [r5, #36]	; 0x24
 800b0de:	d104      	bne.n	800b0ea <_Bfree+0x22>
 800b0e0:	218a      	movs	r1, #138	; 0x8a
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <_Bfree+0x40>)
 800b0e4:	4809      	ldr	r0, [pc, #36]	; (800b10c <_Bfree+0x44>)
 800b0e6:	f000 ff1d 	bl	800bf24 <__assert_func>
 800b0ea:	6046      	str	r6, [r0, #4]
 800b0ec:	6086      	str	r6, [r0, #8]
 800b0ee:	6006      	str	r6, [r0, #0]
 800b0f0:	60c6      	str	r6, [r0, #12]
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	d007      	beq.n	800b106 <_Bfree+0x3e>
 800b0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0f8:	6862      	ldr	r2, [r4, #4]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	0092      	lsls	r2, r2, #2
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	601c      	str	r4, [r3, #0]
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	0800cea6 	.word	0x0800cea6
 800b10c:	0800cfa4 	.word	0x0800cfa4

0800b110 <__multadd>:
 800b110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b112:	000e      	movs	r6, r1
 800b114:	9001      	str	r0, [sp, #4]
 800b116:	000c      	movs	r4, r1
 800b118:	001d      	movs	r5, r3
 800b11a:	2000      	movs	r0, #0
 800b11c:	690f      	ldr	r7, [r1, #16]
 800b11e:	3614      	adds	r6, #20
 800b120:	6833      	ldr	r3, [r6, #0]
 800b122:	3001      	adds	r0, #1
 800b124:	b299      	uxth	r1, r3
 800b126:	4351      	muls	r1, r2
 800b128:	0c1b      	lsrs	r3, r3, #16
 800b12a:	4353      	muls	r3, r2
 800b12c:	1949      	adds	r1, r1, r5
 800b12e:	0c0d      	lsrs	r5, r1, #16
 800b130:	195b      	adds	r3, r3, r5
 800b132:	0c1d      	lsrs	r5, r3, #16
 800b134:	b289      	uxth	r1, r1
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	185b      	adds	r3, r3, r1
 800b13a:	c608      	stmia	r6!, {r3}
 800b13c:	4287      	cmp	r7, r0
 800b13e:	dcef      	bgt.n	800b120 <__multadd+0x10>
 800b140:	2d00      	cmp	r5, #0
 800b142:	d022      	beq.n	800b18a <__multadd+0x7a>
 800b144:	68a3      	ldr	r3, [r4, #8]
 800b146:	42bb      	cmp	r3, r7
 800b148:	dc19      	bgt.n	800b17e <__multadd+0x6e>
 800b14a:	6863      	ldr	r3, [r4, #4]
 800b14c:	9801      	ldr	r0, [sp, #4]
 800b14e:	1c59      	adds	r1, r3, #1
 800b150:	f7ff ff76 	bl	800b040 <_Balloc>
 800b154:	1e06      	subs	r6, r0, #0
 800b156:	d105      	bne.n	800b164 <__multadd+0x54>
 800b158:	0002      	movs	r2, r0
 800b15a:	21b5      	movs	r1, #181	; 0xb5
 800b15c:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <__multadd+0x80>)
 800b15e:	480d      	ldr	r0, [pc, #52]	; (800b194 <__multadd+0x84>)
 800b160:	f000 fee0 	bl	800bf24 <__assert_func>
 800b164:	0021      	movs	r1, r4
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	310c      	adds	r1, #12
 800b16a:	1c9a      	adds	r2, r3, #2
 800b16c:	0092      	lsls	r2, r2, #2
 800b16e:	300c      	adds	r0, #12
 800b170:	f7fc ffae 	bl	80080d0 <memcpy>
 800b174:	0021      	movs	r1, r4
 800b176:	9801      	ldr	r0, [sp, #4]
 800b178:	f7ff ffa6 	bl	800b0c8 <_Bfree>
 800b17c:	0034      	movs	r4, r6
 800b17e:	1d3b      	adds	r3, r7, #4
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	18e3      	adds	r3, r4, r3
 800b184:	605d      	str	r5, [r3, #4]
 800b186:	1c7b      	adds	r3, r7, #1
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	0020      	movs	r0, r4
 800b18c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	0800cf18 	.word	0x0800cf18
 800b194:	0800cfa4 	.word	0x0800cfa4

0800b198 <__s2b>:
 800b198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b19a:	0006      	movs	r6, r0
 800b19c:	0018      	movs	r0, r3
 800b19e:	000c      	movs	r4, r1
 800b1a0:	3008      	adds	r0, #8
 800b1a2:	2109      	movs	r1, #9
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	0015      	movs	r5, r2
 800b1a8:	f7f5 f854 	bl	8000254 <__divsi3>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	db0a      	blt.n	800b1ca <__s2b+0x32>
 800b1b4:	0030      	movs	r0, r6
 800b1b6:	f7ff ff43 	bl	800b040 <_Balloc>
 800b1ba:	1e01      	subs	r1, r0, #0
 800b1bc:	d108      	bne.n	800b1d0 <__s2b+0x38>
 800b1be:	0002      	movs	r2, r0
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <__s2b+0x90>)
 800b1c2:	481a      	ldr	r0, [pc, #104]	; (800b22c <__s2b+0x94>)
 800b1c4:	31ce      	adds	r1, #206	; 0xce
 800b1c6:	f000 fead 	bl	800bf24 <__assert_func>
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	3101      	adds	r1, #1
 800b1ce:	e7ef      	b.n	800b1b0 <__s2b+0x18>
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	6143      	str	r3, [r0, #20]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	6103      	str	r3, [r0, #16]
 800b1d8:	2d09      	cmp	r5, #9
 800b1da:	dd18      	ble.n	800b20e <__s2b+0x76>
 800b1dc:	0023      	movs	r3, r4
 800b1de:	3309      	adds	r3, #9
 800b1e0:	001f      	movs	r7, r3
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	1964      	adds	r4, r4, r5
 800b1e6:	783b      	ldrb	r3, [r7, #0]
 800b1e8:	220a      	movs	r2, #10
 800b1ea:	0030      	movs	r0, r6
 800b1ec:	3b30      	subs	r3, #48	; 0x30
 800b1ee:	f7ff ff8f 	bl	800b110 <__multadd>
 800b1f2:	3701      	adds	r7, #1
 800b1f4:	0001      	movs	r1, r0
 800b1f6:	42a7      	cmp	r7, r4
 800b1f8:	d1f5      	bne.n	800b1e6 <__s2b+0x4e>
 800b1fa:	002c      	movs	r4, r5
 800b1fc:	9b00      	ldr	r3, [sp, #0]
 800b1fe:	3c08      	subs	r4, #8
 800b200:	191c      	adds	r4, r3, r4
 800b202:	002f      	movs	r7, r5
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	429f      	cmp	r7, r3
 800b208:	db04      	blt.n	800b214 <__s2b+0x7c>
 800b20a:	0008      	movs	r0, r1
 800b20c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b20e:	2509      	movs	r5, #9
 800b210:	340a      	adds	r4, #10
 800b212:	e7f6      	b.n	800b202 <__s2b+0x6a>
 800b214:	1b63      	subs	r3, r4, r5
 800b216:	5ddb      	ldrb	r3, [r3, r7]
 800b218:	220a      	movs	r2, #10
 800b21a:	0030      	movs	r0, r6
 800b21c:	3b30      	subs	r3, #48	; 0x30
 800b21e:	f7ff ff77 	bl	800b110 <__multadd>
 800b222:	3701      	adds	r7, #1
 800b224:	0001      	movs	r1, r0
 800b226:	e7ed      	b.n	800b204 <__s2b+0x6c>
 800b228:	0800cf18 	.word	0x0800cf18
 800b22c:	0800cfa4 	.word	0x0800cfa4

0800b230 <__hi0bits>:
 800b230:	0003      	movs	r3, r0
 800b232:	0c02      	lsrs	r2, r0, #16
 800b234:	2000      	movs	r0, #0
 800b236:	4282      	cmp	r2, r0
 800b238:	d101      	bne.n	800b23e <__hi0bits+0xe>
 800b23a:	041b      	lsls	r3, r3, #16
 800b23c:	3010      	adds	r0, #16
 800b23e:	0e1a      	lsrs	r2, r3, #24
 800b240:	d101      	bne.n	800b246 <__hi0bits+0x16>
 800b242:	3008      	adds	r0, #8
 800b244:	021b      	lsls	r3, r3, #8
 800b246:	0f1a      	lsrs	r2, r3, #28
 800b248:	d101      	bne.n	800b24e <__hi0bits+0x1e>
 800b24a:	3004      	adds	r0, #4
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	0f9a      	lsrs	r2, r3, #30
 800b250:	d101      	bne.n	800b256 <__hi0bits+0x26>
 800b252:	3002      	adds	r0, #2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	db03      	blt.n	800b262 <__hi0bits+0x32>
 800b25a:	3001      	adds	r0, #1
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	d400      	bmi.n	800b262 <__hi0bits+0x32>
 800b260:	2020      	movs	r0, #32
 800b262:	4770      	bx	lr

0800b264 <__lo0bits>:
 800b264:	6803      	ldr	r3, [r0, #0]
 800b266:	0002      	movs	r2, r0
 800b268:	2107      	movs	r1, #7
 800b26a:	0018      	movs	r0, r3
 800b26c:	4008      	ands	r0, r1
 800b26e:	420b      	tst	r3, r1
 800b270:	d00d      	beq.n	800b28e <__lo0bits+0x2a>
 800b272:	3906      	subs	r1, #6
 800b274:	2000      	movs	r0, #0
 800b276:	420b      	tst	r3, r1
 800b278:	d105      	bne.n	800b286 <__lo0bits+0x22>
 800b27a:	3002      	adds	r0, #2
 800b27c:	4203      	tst	r3, r0
 800b27e:	d003      	beq.n	800b288 <__lo0bits+0x24>
 800b280:	40cb      	lsrs	r3, r1
 800b282:	0008      	movs	r0, r1
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	4770      	bx	lr
 800b288:	089b      	lsrs	r3, r3, #2
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	e7fb      	b.n	800b286 <__lo0bits+0x22>
 800b28e:	b299      	uxth	r1, r3
 800b290:	2900      	cmp	r1, #0
 800b292:	d101      	bne.n	800b298 <__lo0bits+0x34>
 800b294:	2010      	movs	r0, #16
 800b296:	0c1b      	lsrs	r3, r3, #16
 800b298:	b2d9      	uxtb	r1, r3
 800b29a:	2900      	cmp	r1, #0
 800b29c:	d101      	bne.n	800b2a2 <__lo0bits+0x3e>
 800b29e:	3008      	adds	r0, #8
 800b2a0:	0a1b      	lsrs	r3, r3, #8
 800b2a2:	0719      	lsls	r1, r3, #28
 800b2a4:	d101      	bne.n	800b2aa <__lo0bits+0x46>
 800b2a6:	3004      	adds	r0, #4
 800b2a8:	091b      	lsrs	r3, r3, #4
 800b2aa:	0799      	lsls	r1, r3, #30
 800b2ac:	d101      	bne.n	800b2b2 <__lo0bits+0x4e>
 800b2ae:	3002      	adds	r0, #2
 800b2b0:	089b      	lsrs	r3, r3, #2
 800b2b2:	07d9      	lsls	r1, r3, #31
 800b2b4:	d4e9      	bmi.n	800b28a <__lo0bits+0x26>
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	d1e6      	bne.n	800b28a <__lo0bits+0x26>
 800b2bc:	2020      	movs	r0, #32
 800b2be:	e7e2      	b.n	800b286 <__lo0bits+0x22>

0800b2c0 <__i2b>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	000c      	movs	r4, r1
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	f7ff febb 	bl	800b040 <_Balloc>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d106      	bne.n	800b2dc <__i2b+0x1c>
 800b2ce:	21a0      	movs	r1, #160	; 0xa0
 800b2d0:	0002      	movs	r2, r0
 800b2d2:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <__i2b+0x24>)
 800b2d4:	4804      	ldr	r0, [pc, #16]	; (800b2e8 <__i2b+0x28>)
 800b2d6:	0049      	lsls	r1, r1, #1
 800b2d8:	f000 fe24 	bl	800bf24 <__assert_func>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	6144      	str	r4, [r0, #20]
 800b2e0:	6103      	str	r3, [r0, #16]
 800b2e2:	bd10      	pop	{r4, pc}
 800b2e4:	0800cf18 	.word	0x0800cf18
 800b2e8:	0800cfa4 	.word	0x0800cfa4

0800b2ec <__multiply>:
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	690b      	ldr	r3, [r1, #16]
 800b2f0:	0014      	movs	r4, r2
 800b2f2:	6912      	ldr	r2, [r2, #16]
 800b2f4:	000d      	movs	r5, r1
 800b2f6:	b089      	sub	sp, #36	; 0x24
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	da01      	bge.n	800b300 <__multiply+0x14>
 800b2fc:	0025      	movs	r5, r4
 800b2fe:	000c      	movs	r4, r1
 800b300:	692f      	ldr	r7, [r5, #16]
 800b302:	6926      	ldr	r6, [r4, #16]
 800b304:	6869      	ldr	r1, [r5, #4]
 800b306:	19bb      	adds	r3, r7, r6
 800b308:	9302      	str	r3, [sp, #8]
 800b30a:	68ab      	ldr	r3, [r5, #8]
 800b30c:	19ba      	adds	r2, r7, r6
 800b30e:	4293      	cmp	r3, r2
 800b310:	da00      	bge.n	800b314 <__multiply+0x28>
 800b312:	3101      	adds	r1, #1
 800b314:	f7ff fe94 	bl	800b040 <_Balloc>
 800b318:	9001      	str	r0, [sp, #4]
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d106      	bne.n	800b32c <__multiply+0x40>
 800b31e:	215e      	movs	r1, #94	; 0x5e
 800b320:	0002      	movs	r2, r0
 800b322:	4b48      	ldr	r3, [pc, #288]	; (800b444 <__multiply+0x158>)
 800b324:	4848      	ldr	r0, [pc, #288]	; (800b448 <__multiply+0x15c>)
 800b326:	31ff      	adds	r1, #255	; 0xff
 800b328:	f000 fdfc 	bl	800bf24 <__assert_func>
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	3314      	adds	r3, #20
 800b332:	469c      	mov	ip, r3
 800b334:	19bb      	adds	r3, r7, r6
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4463      	add	r3, ip
 800b33a:	9303      	str	r3, [sp, #12]
 800b33c:	4663      	mov	r3, ip
 800b33e:	9903      	ldr	r1, [sp, #12]
 800b340:	428b      	cmp	r3, r1
 800b342:	d32c      	bcc.n	800b39e <__multiply+0xb2>
 800b344:	002b      	movs	r3, r5
 800b346:	0022      	movs	r2, r4
 800b348:	3314      	adds	r3, #20
 800b34a:	00bf      	lsls	r7, r7, #2
 800b34c:	3214      	adds	r2, #20
 800b34e:	9306      	str	r3, [sp, #24]
 800b350:	00b6      	lsls	r6, r6, #2
 800b352:	19db      	adds	r3, r3, r7
 800b354:	9304      	str	r3, [sp, #16]
 800b356:	1993      	adds	r3, r2, r6
 800b358:	9307      	str	r3, [sp, #28]
 800b35a:	2304      	movs	r3, #4
 800b35c:	9305      	str	r3, [sp, #20]
 800b35e:	002b      	movs	r3, r5
 800b360:	9904      	ldr	r1, [sp, #16]
 800b362:	3315      	adds	r3, #21
 800b364:	9200      	str	r2, [sp, #0]
 800b366:	4299      	cmp	r1, r3
 800b368:	d305      	bcc.n	800b376 <__multiply+0x8a>
 800b36a:	1b4b      	subs	r3, r1, r5
 800b36c:	3b15      	subs	r3, #21
 800b36e:	089b      	lsrs	r3, r3, #2
 800b370:	3301      	adds	r3, #1
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	9305      	str	r3, [sp, #20]
 800b376:	9b07      	ldr	r3, [sp, #28]
 800b378:	9a00      	ldr	r2, [sp, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d311      	bcc.n	800b3a2 <__multiply+0xb6>
 800b37e:	9b02      	ldr	r3, [sp, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	dd06      	ble.n	800b392 <__multiply+0xa6>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	3b04      	subs	r3, #4
 800b388:	9303      	str	r3, [sp, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d053      	beq.n	800b43a <__multiply+0x14e>
 800b392:	9b01      	ldr	r3, [sp, #4]
 800b394:	9a02      	ldr	r2, [sp, #8]
 800b396:	0018      	movs	r0, r3
 800b398:	611a      	str	r2, [r3, #16]
 800b39a:	b009      	add	sp, #36	; 0x24
 800b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39e:	c304      	stmia	r3!, {r2}
 800b3a0:	e7cd      	b.n	800b33e <__multiply+0x52>
 800b3a2:	9b00      	ldr	r3, [sp, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	b298      	uxth	r0, r3
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d01b      	beq.n	800b3e4 <__multiply+0xf8>
 800b3ac:	4667      	mov	r7, ip
 800b3ae:	2400      	movs	r4, #0
 800b3b0:	9e06      	ldr	r6, [sp, #24]
 800b3b2:	ce02      	ldmia	r6!, {r1}
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	b28b      	uxth	r3, r1
 800b3b8:	4343      	muls	r3, r0
 800b3ba:	b292      	uxth	r2, r2
 800b3bc:	189b      	adds	r3, r3, r2
 800b3be:	191b      	adds	r3, r3, r4
 800b3c0:	0c0c      	lsrs	r4, r1, #16
 800b3c2:	4344      	muls	r4, r0
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	0c11      	lsrs	r1, r2, #16
 800b3c8:	1861      	adds	r1, r4, r1
 800b3ca:	0c1c      	lsrs	r4, r3, #16
 800b3cc:	1909      	adds	r1, r1, r4
 800b3ce:	0c0c      	lsrs	r4, r1, #16
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	0409      	lsls	r1, r1, #16
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	c708      	stmia	r7!, {r3}
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	42b3      	cmp	r3, r6
 800b3dc:	d8e9      	bhi.n	800b3b2 <__multiply+0xc6>
 800b3de:	4663      	mov	r3, ip
 800b3e0:	9a05      	ldr	r2, [sp, #20]
 800b3e2:	509c      	str	r4, [r3, r2]
 800b3e4:	9b00      	ldr	r3, [sp, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	0c1e      	lsrs	r6, r3, #16
 800b3ea:	d020      	beq.n	800b42e <__multiply+0x142>
 800b3ec:	4663      	mov	r3, ip
 800b3ee:	002c      	movs	r4, r5
 800b3f0:	4660      	mov	r0, ip
 800b3f2:	2700      	movs	r7, #0
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3414      	adds	r4, #20
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	b291      	uxth	r1, r2
 800b3fe:	4371      	muls	r1, r6
 800b400:	6802      	ldr	r2, [r0, #0]
 800b402:	0c12      	lsrs	r2, r2, #16
 800b404:	1889      	adds	r1, r1, r2
 800b406:	19cf      	adds	r7, r1, r7
 800b408:	0439      	lsls	r1, r7, #16
 800b40a:	430b      	orrs	r3, r1
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	cc02      	ldmia	r4!, {r1}
 800b410:	6843      	ldr	r3, [r0, #4]
 800b412:	0c09      	lsrs	r1, r1, #16
 800b414:	4371      	muls	r1, r6
 800b416:	b29b      	uxth	r3, r3
 800b418:	0c3f      	lsrs	r7, r7, #16
 800b41a:	18cb      	adds	r3, r1, r3
 800b41c:	9a04      	ldr	r2, [sp, #16]
 800b41e:	19db      	adds	r3, r3, r7
 800b420:	0c1f      	lsrs	r7, r3, #16
 800b422:	3004      	adds	r0, #4
 800b424:	42a2      	cmp	r2, r4
 800b426:	d8e7      	bhi.n	800b3f8 <__multiply+0x10c>
 800b428:	4662      	mov	r2, ip
 800b42a:	9905      	ldr	r1, [sp, #20]
 800b42c:	5053      	str	r3, [r2, r1]
 800b42e:	9b00      	ldr	r3, [sp, #0]
 800b430:	3304      	adds	r3, #4
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	2304      	movs	r3, #4
 800b436:	449c      	add	ip, r3
 800b438:	e79d      	b.n	800b376 <__multiply+0x8a>
 800b43a:	9b02      	ldr	r3, [sp, #8]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	e79d      	b.n	800b37e <__multiply+0x92>
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	0800cf18 	.word	0x0800cf18
 800b448:	0800cfa4 	.word	0x0800cfa4

0800b44c <__pow5mult>:
 800b44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b44e:	2303      	movs	r3, #3
 800b450:	0015      	movs	r5, r2
 800b452:	0007      	movs	r7, r0
 800b454:	000e      	movs	r6, r1
 800b456:	401a      	ands	r2, r3
 800b458:	421d      	tst	r5, r3
 800b45a:	d008      	beq.n	800b46e <__pow5mult+0x22>
 800b45c:	4925      	ldr	r1, [pc, #148]	; (800b4f4 <__pow5mult+0xa8>)
 800b45e:	3a01      	subs	r2, #1
 800b460:	0092      	lsls	r2, r2, #2
 800b462:	5852      	ldr	r2, [r2, r1]
 800b464:	2300      	movs	r3, #0
 800b466:	0031      	movs	r1, r6
 800b468:	f7ff fe52 	bl	800b110 <__multadd>
 800b46c:	0006      	movs	r6, r0
 800b46e:	10ad      	asrs	r5, r5, #2
 800b470:	d03d      	beq.n	800b4ee <__pow5mult+0xa2>
 800b472:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b474:	2c00      	cmp	r4, #0
 800b476:	d10f      	bne.n	800b498 <__pow5mult+0x4c>
 800b478:	2010      	movs	r0, #16
 800b47a:	f7ff fdb9 	bl	800aff0 <malloc>
 800b47e:	1e02      	subs	r2, r0, #0
 800b480:	6278      	str	r0, [r7, #36]	; 0x24
 800b482:	d105      	bne.n	800b490 <__pow5mult+0x44>
 800b484:	21d7      	movs	r1, #215	; 0xd7
 800b486:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <__pow5mult+0xac>)
 800b488:	481c      	ldr	r0, [pc, #112]	; (800b4fc <__pow5mult+0xb0>)
 800b48a:	0049      	lsls	r1, r1, #1
 800b48c:	f000 fd4a 	bl	800bf24 <__assert_func>
 800b490:	6044      	str	r4, [r0, #4]
 800b492:	6084      	str	r4, [r0, #8]
 800b494:	6004      	str	r4, [r0, #0]
 800b496:	60c4      	str	r4, [r0, #12]
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	689c      	ldr	r4, [r3, #8]
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	2c00      	cmp	r4, #0
 800b4a0:	d108      	bne.n	800b4b4 <__pow5mult+0x68>
 800b4a2:	0038      	movs	r0, r7
 800b4a4:	4916      	ldr	r1, [pc, #88]	; (800b500 <__pow5mult+0xb4>)
 800b4a6:	f7ff ff0b 	bl	800b2c0 <__i2b>
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	0004      	movs	r4, r0
 800b4ae:	6098      	str	r0, [r3, #8]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6003      	str	r3, [r0, #0]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	421d      	tst	r5, r3
 800b4b8:	d00a      	beq.n	800b4d0 <__pow5mult+0x84>
 800b4ba:	0031      	movs	r1, r6
 800b4bc:	0022      	movs	r2, r4
 800b4be:	0038      	movs	r0, r7
 800b4c0:	f7ff ff14 	bl	800b2ec <__multiply>
 800b4c4:	0031      	movs	r1, r6
 800b4c6:	9001      	str	r0, [sp, #4]
 800b4c8:	0038      	movs	r0, r7
 800b4ca:	f7ff fdfd 	bl	800b0c8 <_Bfree>
 800b4ce:	9e01      	ldr	r6, [sp, #4]
 800b4d0:	106d      	asrs	r5, r5, #1
 800b4d2:	d00c      	beq.n	800b4ee <__pow5mult+0xa2>
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d107      	bne.n	800b4ea <__pow5mult+0x9e>
 800b4da:	0022      	movs	r2, r4
 800b4dc:	0021      	movs	r1, r4
 800b4de:	0038      	movs	r0, r7
 800b4e0:	f7ff ff04 	bl	800b2ec <__multiply>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6020      	str	r0, [r4, #0]
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	0004      	movs	r4, r0
 800b4ec:	e7e2      	b.n	800b4b4 <__pow5mult+0x68>
 800b4ee:	0030      	movs	r0, r6
 800b4f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	0800d0f0 	.word	0x0800d0f0
 800b4f8:	0800cea6 	.word	0x0800cea6
 800b4fc:	0800cfa4 	.word	0x0800cfa4
 800b500:	00000271 	.word	0x00000271

0800b504 <__lshift>:
 800b504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b506:	000c      	movs	r4, r1
 800b508:	0017      	movs	r7, r2
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	1155      	asrs	r5, r2, #5
 800b50e:	b087      	sub	sp, #28
 800b510:	18eb      	adds	r3, r5, r3
 800b512:	9302      	str	r3, [sp, #8]
 800b514:	3301      	adds	r3, #1
 800b516:	9301      	str	r3, [sp, #4]
 800b518:	6849      	ldr	r1, [r1, #4]
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	9004      	str	r0, [sp, #16]
 800b51e:	9a01      	ldr	r2, [sp, #4]
 800b520:	4293      	cmp	r3, r2
 800b522:	db10      	blt.n	800b546 <__lshift+0x42>
 800b524:	9804      	ldr	r0, [sp, #16]
 800b526:	f7ff fd8b 	bl	800b040 <_Balloc>
 800b52a:	2300      	movs	r3, #0
 800b52c:	0002      	movs	r2, r0
 800b52e:	0006      	movs	r6, r0
 800b530:	0019      	movs	r1, r3
 800b532:	3214      	adds	r2, #20
 800b534:	4298      	cmp	r0, r3
 800b536:	d10c      	bne.n	800b552 <__lshift+0x4e>
 800b538:	21da      	movs	r1, #218	; 0xda
 800b53a:	0002      	movs	r2, r0
 800b53c:	4b26      	ldr	r3, [pc, #152]	; (800b5d8 <__lshift+0xd4>)
 800b53e:	4827      	ldr	r0, [pc, #156]	; (800b5dc <__lshift+0xd8>)
 800b540:	31ff      	adds	r1, #255	; 0xff
 800b542:	f000 fcef 	bl	800bf24 <__assert_func>
 800b546:	3101      	adds	r1, #1
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	e7e8      	b.n	800b51e <__lshift+0x1a>
 800b54c:	0098      	lsls	r0, r3, #2
 800b54e:	5011      	str	r1, [r2, r0]
 800b550:	3301      	adds	r3, #1
 800b552:	42ab      	cmp	r3, r5
 800b554:	dbfa      	blt.n	800b54c <__lshift+0x48>
 800b556:	43eb      	mvns	r3, r5
 800b558:	17db      	asrs	r3, r3, #31
 800b55a:	401d      	ands	r5, r3
 800b55c:	211f      	movs	r1, #31
 800b55e:	0023      	movs	r3, r4
 800b560:	0038      	movs	r0, r7
 800b562:	00ad      	lsls	r5, r5, #2
 800b564:	1955      	adds	r5, r2, r5
 800b566:	6922      	ldr	r2, [r4, #16]
 800b568:	3314      	adds	r3, #20
 800b56a:	0092      	lsls	r2, r2, #2
 800b56c:	4008      	ands	r0, r1
 800b56e:	4684      	mov	ip, r0
 800b570:	189a      	adds	r2, r3, r2
 800b572:	420f      	tst	r7, r1
 800b574:	d02a      	beq.n	800b5cc <__lshift+0xc8>
 800b576:	3101      	adds	r1, #1
 800b578:	1a09      	subs	r1, r1, r0
 800b57a:	9105      	str	r1, [sp, #20]
 800b57c:	2100      	movs	r1, #0
 800b57e:	9503      	str	r5, [sp, #12]
 800b580:	4667      	mov	r7, ip
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	40b8      	lsls	r0, r7
 800b586:	4301      	orrs	r1, r0
 800b588:	9803      	ldr	r0, [sp, #12]
 800b58a:	c002      	stmia	r0!, {r1}
 800b58c:	cb02      	ldmia	r3!, {r1}
 800b58e:	9003      	str	r0, [sp, #12]
 800b590:	9805      	ldr	r0, [sp, #20]
 800b592:	40c1      	lsrs	r1, r0
 800b594:	429a      	cmp	r2, r3
 800b596:	d8f3      	bhi.n	800b580 <__lshift+0x7c>
 800b598:	0020      	movs	r0, r4
 800b59a:	3015      	adds	r0, #21
 800b59c:	2304      	movs	r3, #4
 800b59e:	4282      	cmp	r2, r0
 800b5a0:	d304      	bcc.n	800b5ac <__lshift+0xa8>
 800b5a2:	1b13      	subs	r3, r2, r4
 800b5a4:	3b15      	subs	r3, #21
 800b5a6:	089b      	lsrs	r3, r3, #2
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	50e9      	str	r1, [r5, r3]
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d002      	beq.n	800b5b8 <__lshift+0xb4>
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	3302      	adds	r3, #2
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	9b01      	ldr	r3, [sp, #4]
 800b5ba:	9804      	ldr	r0, [sp, #16]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	0021      	movs	r1, r4
 800b5c0:	6133      	str	r3, [r6, #16]
 800b5c2:	f7ff fd81 	bl	800b0c8 <_Bfree>
 800b5c6:	0030      	movs	r0, r6
 800b5c8:	b007      	add	sp, #28
 800b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5cc:	cb02      	ldmia	r3!, {r1}
 800b5ce:	c502      	stmia	r5!, {r1}
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d8fb      	bhi.n	800b5cc <__lshift+0xc8>
 800b5d4:	e7f0      	b.n	800b5b8 <__lshift+0xb4>
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	0800cf18 	.word	0x0800cf18
 800b5dc:	0800cfa4 	.word	0x0800cfa4

0800b5e0 <__mcmp>:
 800b5e0:	6902      	ldr	r2, [r0, #16]
 800b5e2:	690b      	ldr	r3, [r1, #16]
 800b5e4:	b530      	push	{r4, r5, lr}
 800b5e6:	0004      	movs	r4, r0
 800b5e8:	1ad0      	subs	r0, r2, r3
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d10d      	bne.n	800b60a <__mcmp+0x2a>
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	3414      	adds	r4, #20
 800b5f2:	3114      	adds	r1, #20
 800b5f4:	18e2      	adds	r2, r4, r3
 800b5f6:	18c9      	adds	r1, r1, r3
 800b5f8:	3a04      	subs	r2, #4
 800b5fa:	3904      	subs	r1, #4
 800b5fc:	6815      	ldr	r5, [r2, #0]
 800b5fe:	680b      	ldr	r3, [r1, #0]
 800b600:	429d      	cmp	r5, r3
 800b602:	d003      	beq.n	800b60c <__mcmp+0x2c>
 800b604:	2001      	movs	r0, #1
 800b606:	429d      	cmp	r5, r3
 800b608:	d303      	bcc.n	800b612 <__mcmp+0x32>
 800b60a:	bd30      	pop	{r4, r5, pc}
 800b60c:	4294      	cmp	r4, r2
 800b60e:	d3f3      	bcc.n	800b5f8 <__mcmp+0x18>
 800b610:	e7fb      	b.n	800b60a <__mcmp+0x2a>
 800b612:	4240      	negs	r0, r0
 800b614:	e7f9      	b.n	800b60a <__mcmp+0x2a>
	...

0800b618 <__mdiff>:
 800b618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b61a:	000e      	movs	r6, r1
 800b61c:	0007      	movs	r7, r0
 800b61e:	0011      	movs	r1, r2
 800b620:	0030      	movs	r0, r6
 800b622:	b087      	sub	sp, #28
 800b624:	0014      	movs	r4, r2
 800b626:	f7ff ffdb 	bl	800b5e0 <__mcmp>
 800b62a:	1e05      	subs	r5, r0, #0
 800b62c:	d110      	bne.n	800b650 <__mdiff+0x38>
 800b62e:	0001      	movs	r1, r0
 800b630:	0038      	movs	r0, r7
 800b632:	f7ff fd05 	bl	800b040 <_Balloc>
 800b636:	1e02      	subs	r2, r0, #0
 800b638:	d104      	bne.n	800b644 <__mdiff+0x2c>
 800b63a:	4b40      	ldr	r3, [pc, #256]	; (800b73c <__mdiff+0x124>)
 800b63c:	4940      	ldr	r1, [pc, #256]	; (800b740 <__mdiff+0x128>)
 800b63e:	4841      	ldr	r0, [pc, #260]	; (800b744 <__mdiff+0x12c>)
 800b640:	f000 fc70 	bl	800bf24 <__assert_func>
 800b644:	2301      	movs	r3, #1
 800b646:	6145      	str	r5, [r0, #20]
 800b648:	6103      	str	r3, [r0, #16]
 800b64a:	0010      	movs	r0, r2
 800b64c:	b007      	add	sp, #28
 800b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b650:	2301      	movs	r3, #1
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	2800      	cmp	r0, #0
 800b656:	db04      	blt.n	800b662 <__mdiff+0x4a>
 800b658:	0023      	movs	r3, r4
 800b65a:	0034      	movs	r4, r6
 800b65c:	001e      	movs	r6, r3
 800b65e:	2300      	movs	r3, #0
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	0038      	movs	r0, r7
 800b664:	6861      	ldr	r1, [r4, #4]
 800b666:	f7ff fceb 	bl	800b040 <_Balloc>
 800b66a:	1e02      	subs	r2, r0, #0
 800b66c:	d103      	bne.n	800b676 <__mdiff+0x5e>
 800b66e:	2190      	movs	r1, #144	; 0x90
 800b670:	4b32      	ldr	r3, [pc, #200]	; (800b73c <__mdiff+0x124>)
 800b672:	0089      	lsls	r1, r1, #2
 800b674:	e7e3      	b.n	800b63e <__mdiff+0x26>
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	2700      	movs	r7, #0
 800b67a:	60c3      	str	r3, [r0, #12]
 800b67c:	6920      	ldr	r0, [r4, #16]
 800b67e:	3414      	adds	r4, #20
 800b680:	9401      	str	r4, [sp, #4]
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	0084      	lsls	r4, r0, #2
 800b686:	191b      	adds	r3, r3, r4
 800b688:	0034      	movs	r4, r6
 800b68a:	9302      	str	r3, [sp, #8]
 800b68c:	6933      	ldr	r3, [r6, #16]
 800b68e:	3414      	adds	r4, #20
 800b690:	0099      	lsls	r1, r3, #2
 800b692:	1863      	adds	r3, r4, r1
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	0013      	movs	r3, r2
 800b698:	3314      	adds	r3, #20
 800b69a:	469c      	mov	ip, r3
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	cc02      	ldmia	r4!, {r1}
 800b6a6:	cb20      	ldmia	r3!, {r5}
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	b2ab      	uxth	r3, r5
 800b6ac:	19df      	adds	r7, r3, r7
 800b6ae:	b28b      	uxth	r3, r1
 800b6b0:	1afb      	subs	r3, r7, r3
 800b6b2:	0c09      	lsrs	r1, r1, #16
 800b6b4:	0c2d      	lsrs	r5, r5, #16
 800b6b6:	1a6d      	subs	r5, r5, r1
 800b6b8:	1419      	asrs	r1, r3, #16
 800b6ba:	186d      	adds	r5, r5, r1
 800b6bc:	4661      	mov	r1, ip
 800b6be:	142f      	asrs	r7, r5, #16
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	042d      	lsls	r5, r5, #16
 800b6c4:	432b      	orrs	r3, r5
 800b6c6:	c108      	stmia	r1!, {r3}
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	468c      	mov	ip, r1
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d8e8      	bhi.n	800b6a2 <__mdiff+0x8a>
 800b6d0:	0031      	movs	r1, r6
 800b6d2:	9c03      	ldr	r4, [sp, #12]
 800b6d4:	3115      	adds	r1, #21
 800b6d6:	2304      	movs	r3, #4
 800b6d8:	428c      	cmp	r4, r1
 800b6da:	d304      	bcc.n	800b6e6 <__mdiff+0xce>
 800b6dc:	1ba3      	subs	r3, r4, r6
 800b6de:	3b15      	subs	r3, #21
 800b6e0:	089b      	lsrs	r3, r3, #2
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	9901      	ldr	r1, [sp, #4]
 800b6e8:	18cc      	adds	r4, r1, r3
 800b6ea:	9905      	ldr	r1, [sp, #20]
 800b6ec:	0026      	movs	r6, r4
 800b6ee:	18cb      	adds	r3, r1, r3
 800b6f0:	469c      	mov	ip, r3
 800b6f2:	9902      	ldr	r1, [sp, #8]
 800b6f4:	428e      	cmp	r6, r1
 800b6f6:	d310      	bcc.n	800b71a <__mdiff+0x102>
 800b6f8:	9e02      	ldr	r6, [sp, #8]
 800b6fa:	1ee1      	subs	r1, r4, #3
 800b6fc:	2500      	movs	r5, #0
 800b6fe:	428e      	cmp	r6, r1
 800b700:	d304      	bcc.n	800b70c <__mdiff+0xf4>
 800b702:	0031      	movs	r1, r6
 800b704:	3103      	adds	r1, #3
 800b706:	1b0c      	subs	r4, r1, r4
 800b708:	08a4      	lsrs	r4, r4, #2
 800b70a:	00a5      	lsls	r5, r4, #2
 800b70c:	195b      	adds	r3, r3, r5
 800b70e:	3b04      	subs	r3, #4
 800b710:	6819      	ldr	r1, [r3, #0]
 800b712:	2900      	cmp	r1, #0
 800b714:	d00f      	beq.n	800b736 <__mdiff+0x11e>
 800b716:	6110      	str	r0, [r2, #16]
 800b718:	e797      	b.n	800b64a <__mdiff+0x32>
 800b71a:	ce02      	ldmia	r6!, {r1}
 800b71c:	b28d      	uxth	r5, r1
 800b71e:	19ed      	adds	r5, r5, r7
 800b720:	0c0f      	lsrs	r7, r1, #16
 800b722:	1429      	asrs	r1, r5, #16
 800b724:	1879      	adds	r1, r7, r1
 800b726:	140f      	asrs	r7, r1, #16
 800b728:	b2ad      	uxth	r5, r5
 800b72a:	0409      	lsls	r1, r1, #16
 800b72c:	430d      	orrs	r5, r1
 800b72e:	4661      	mov	r1, ip
 800b730:	c120      	stmia	r1!, {r5}
 800b732:	468c      	mov	ip, r1
 800b734:	e7dd      	b.n	800b6f2 <__mdiff+0xda>
 800b736:	3801      	subs	r0, #1
 800b738:	e7e9      	b.n	800b70e <__mdiff+0xf6>
 800b73a:	46c0      	nop			; (mov r8, r8)
 800b73c:	0800cf18 	.word	0x0800cf18
 800b740:	00000232 	.word	0x00000232
 800b744:	0800cfa4 	.word	0x0800cfa4

0800b748 <__ulp>:
 800b748:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <__ulp+0x40>)
 800b74a:	4019      	ands	r1, r3
 800b74c:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <__ulp+0x44>)
 800b74e:	18c9      	adds	r1, r1, r3
 800b750:	2900      	cmp	r1, #0
 800b752:	dd04      	ble.n	800b75e <__ulp+0x16>
 800b754:	2200      	movs	r2, #0
 800b756:	000b      	movs	r3, r1
 800b758:	0010      	movs	r0, r2
 800b75a:	0019      	movs	r1, r3
 800b75c:	4770      	bx	lr
 800b75e:	4249      	negs	r1, r1
 800b760:	2200      	movs	r2, #0
 800b762:	2300      	movs	r3, #0
 800b764:	1509      	asrs	r1, r1, #20
 800b766:	2913      	cmp	r1, #19
 800b768:	dc04      	bgt.n	800b774 <__ulp+0x2c>
 800b76a:	2080      	movs	r0, #128	; 0x80
 800b76c:	0300      	lsls	r0, r0, #12
 800b76e:	4108      	asrs	r0, r1
 800b770:	0003      	movs	r3, r0
 800b772:	e7f1      	b.n	800b758 <__ulp+0x10>
 800b774:	3914      	subs	r1, #20
 800b776:	2001      	movs	r0, #1
 800b778:	291e      	cmp	r1, #30
 800b77a:	dc02      	bgt.n	800b782 <__ulp+0x3a>
 800b77c:	2080      	movs	r0, #128	; 0x80
 800b77e:	0600      	lsls	r0, r0, #24
 800b780:	40c8      	lsrs	r0, r1
 800b782:	0002      	movs	r2, r0
 800b784:	e7e8      	b.n	800b758 <__ulp+0x10>
 800b786:	46c0      	nop			; (mov r8, r8)
 800b788:	7ff00000 	.word	0x7ff00000
 800b78c:	fcc00000 	.word	0xfcc00000

0800b790 <__b2d>:
 800b790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b792:	0006      	movs	r6, r0
 800b794:	6903      	ldr	r3, [r0, #16]
 800b796:	3614      	adds	r6, #20
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	18f3      	adds	r3, r6, r3
 800b79c:	1f1d      	subs	r5, r3, #4
 800b79e:	682c      	ldr	r4, [r5, #0]
 800b7a0:	000f      	movs	r7, r1
 800b7a2:	0020      	movs	r0, r4
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	f7ff fd43 	bl	800b230 <__hi0bits>
 800b7aa:	2320      	movs	r3, #32
 800b7ac:	1a1b      	subs	r3, r3, r0
 800b7ae:	491f      	ldr	r1, [pc, #124]	; (800b82c <__b2d+0x9c>)
 800b7b0:	603b      	str	r3, [r7, #0]
 800b7b2:	280a      	cmp	r0, #10
 800b7b4:	dc16      	bgt.n	800b7e4 <__b2d+0x54>
 800b7b6:	230b      	movs	r3, #11
 800b7b8:	0027      	movs	r7, r4
 800b7ba:	1a1b      	subs	r3, r3, r0
 800b7bc:	40df      	lsrs	r7, r3
 800b7be:	4339      	orrs	r1, r7
 800b7c0:	469c      	mov	ip, r3
 800b7c2:	000b      	movs	r3, r1
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	42ae      	cmp	r6, r5
 800b7c8:	d202      	bcs.n	800b7d0 <__b2d+0x40>
 800b7ca:	9901      	ldr	r1, [sp, #4]
 800b7cc:	3908      	subs	r1, #8
 800b7ce:	6809      	ldr	r1, [r1, #0]
 800b7d0:	3015      	adds	r0, #21
 800b7d2:	4084      	lsls	r4, r0
 800b7d4:	4660      	mov	r0, ip
 800b7d6:	40c1      	lsrs	r1, r0
 800b7d8:	430c      	orrs	r4, r1
 800b7da:	0022      	movs	r2, r4
 800b7dc:	0010      	movs	r0, r2
 800b7de:	0019      	movs	r1, r3
 800b7e0:	b003      	add	sp, #12
 800b7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e4:	2700      	movs	r7, #0
 800b7e6:	42ae      	cmp	r6, r5
 800b7e8:	d202      	bcs.n	800b7f0 <__b2d+0x60>
 800b7ea:	9d01      	ldr	r5, [sp, #4]
 800b7ec:	3d08      	subs	r5, #8
 800b7ee:	682f      	ldr	r7, [r5, #0]
 800b7f0:	230b      	movs	r3, #11
 800b7f2:	425b      	negs	r3, r3
 800b7f4:	469c      	mov	ip, r3
 800b7f6:	4484      	add	ip, r0
 800b7f8:	280b      	cmp	r0, #11
 800b7fa:	d013      	beq.n	800b824 <__b2d+0x94>
 800b7fc:	4663      	mov	r3, ip
 800b7fe:	2020      	movs	r0, #32
 800b800:	409c      	lsls	r4, r3
 800b802:	1ac0      	subs	r0, r0, r3
 800b804:	003b      	movs	r3, r7
 800b806:	40c3      	lsrs	r3, r0
 800b808:	431c      	orrs	r4, r3
 800b80a:	4321      	orrs	r1, r4
 800b80c:	000b      	movs	r3, r1
 800b80e:	2100      	movs	r1, #0
 800b810:	42b5      	cmp	r5, r6
 800b812:	d901      	bls.n	800b818 <__b2d+0x88>
 800b814:	3d04      	subs	r5, #4
 800b816:	6829      	ldr	r1, [r5, #0]
 800b818:	4664      	mov	r4, ip
 800b81a:	40c1      	lsrs	r1, r0
 800b81c:	40a7      	lsls	r7, r4
 800b81e:	430f      	orrs	r7, r1
 800b820:	003a      	movs	r2, r7
 800b822:	e7db      	b.n	800b7dc <__b2d+0x4c>
 800b824:	4321      	orrs	r1, r4
 800b826:	000b      	movs	r3, r1
 800b828:	e7fa      	b.n	800b820 <__b2d+0x90>
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	3ff00000 	.word	0x3ff00000

0800b830 <__d2b>:
 800b830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b832:	2101      	movs	r1, #1
 800b834:	0014      	movs	r4, r2
 800b836:	001e      	movs	r6, r3
 800b838:	9f08      	ldr	r7, [sp, #32]
 800b83a:	f7ff fc01 	bl	800b040 <_Balloc>
 800b83e:	1e05      	subs	r5, r0, #0
 800b840:	d105      	bne.n	800b84e <__d2b+0x1e>
 800b842:	0002      	movs	r2, r0
 800b844:	4b26      	ldr	r3, [pc, #152]	; (800b8e0 <__d2b+0xb0>)
 800b846:	4927      	ldr	r1, [pc, #156]	; (800b8e4 <__d2b+0xb4>)
 800b848:	4827      	ldr	r0, [pc, #156]	; (800b8e8 <__d2b+0xb8>)
 800b84a:	f000 fb6b 	bl	800bf24 <__assert_func>
 800b84e:	0333      	lsls	r3, r6, #12
 800b850:	0076      	lsls	r6, r6, #1
 800b852:	0b1b      	lsrs	r3, r3, #12
 800b854:	0d76      	lsrs	r6, r6, #21
 800b856:	d124      	bne.n	800b8a2 <__d2b+0x72>
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	d027      	beq.n	800b8ae <__d2b+0x7e>
 800b85e:	4668      	mov	r0, sp
 800b860:	9400      	str	r4, [sp, #0]
 800b862:	f7ff fcff 	bl	800b264 <__lo0bits>
 800b866:	9c00      	ldr	r4, [sp, #0]
 800b868:	2800      	cmp	r0, #0
 800b86a:	d01e      	beq.n	800b8aa <__d2b+0x7a>
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	2120      	movs	r1, #32
 800b870:	001a      	movs	r2, r3
 800b872:	1a09      	subs	r1, r1, r0
 800b874:	408a      	lsls	r2, r1
 800b876:	40c3      	lsrs	r3, r0
 800b878:	4322      	orrs	r2, r4
 800b87a:	616a      	str	r2, [r5, #20]
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	9c01      	ldr	r4, [sp, #4]
 800b880:	61ac      	str	r4, [r5, #24]
 800b882:	1e63      	subs	r3, r4, #1
 800b884:	419c      	sbcs	r4, r3
 800b886:	3401      	adds	r4, #1
 800b888:	612c      	str	r4, [r5, #16]
 800b88a:	2e00      	cmp	r6, #0
 800b88c:	d018      	beq.n	800b8c0 <__d2b+0x90>
 800b88e:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <__d2b+0xbc>)
 800b890:	18f6      	adds	r6, r6, r3
 800b892:	2335      	movs	r3, #53	; 0x35
 800b894:	1836      	adds	r6, r6, r0
 800b896:	1a18      	subs	r0, r3, r0
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	603e      	str	r6, [r7, #0]
 800b89c:	6018      	str	r0, [r3, #0]
 800b89e:	0028      	movs	r0, r5
 800b8a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8a2:	2280      	movs	r2, #128	; 0x80
 800b8a4:	0352      	lsls	r2, r2, #13
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	e7d6      	b.n	800b858 <__d2b+0x28>
 800b8aa:	616c      	str	r4, [r5, #20]
 800b8ac:	e7e7      	b.n	800b87e <__d2b+0x4e>
 800b8ae:	a801      	add	r0, sp, #4
 800b8b0:	f7ff fcd8 	bl	800b264 <__lo0bits>
 800b8b4:	2401      	movs	r4, #1
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	612c      	str	r4, [r5, #16]
 800b8ba:	616b      	str	r3, [r5, #20]
 800b8bc:	3020      	adds	r0, #32
 800b8be:	e7e4      	b.n	800b88a <__d2b+0x5a>
 800b8c0:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <__d2b+0xc0>)
 800b8c2:	18c0      	adds	r0, r0, r3
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <__d2b+0xc4>)
 800b8c6:	6038      	str	r0, [r7, #0]
 800b8c8:	18e3      	adds	r3, r4, r3
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	18eb      	adds	r3, r5, r3
 800b8ce:	6958      	ldr	r0, [r3, #20]
 800b8d0:	f7ff fcae 	bl	800b230 <__hi0bits>
 800b8d4:	0164      	lsls	r4, r4, #5
 800b8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d8:	1a24      	subs	r4, r4, r0
 800b8da:	601c      	str	r4, [r3, #0]
 800b8dc:	e7df      	b.n	800b89e <__d2b+0x6e>
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	0800cf18 	.word	0x0800cf18
 800b8e4:	0000030a 	.word	0x0000030a
 800b8e8:	0800cfa4 	.word	0x0800cfa4
 800b8ec:	fffffbcd 	.word	0xfffffbcd
 800b8f0:	fffffbce 	.word	0xfffffbce
 800b8f4:	3fffffff 	.word	0x3fffffff

0800b8f8 <__ratio>:
 800b8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	000f      	movs	r7, r1
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	0006      	movs	r6, r0
 800b902:	f7ff ff45 	bl	800b790 <__b2d>
 800b906:	9000      	str	r0, [sp, #0]
 800b908:	9101      	str	r1, [sp, #4]
 800b90a:	9c00      	ldr	r4, [sp, #0]
 800b90c:	9d01      	ldr	r5, [sp, #4]
 800b90e:	0038      	movs	r0, r7
 800b910:	a905      	add	r1, sp, #20
 800b912:	f7ff ff3d 	bl	800b790 <__b2d>
 800b916:	9002      	str	r0, [sp, #8]
 800b918:	9103      	str	r1, [sp, #12]
 800b91a:	9a02      	ldr	r2, [sp, #8]
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	6931      	ldr	r1, [r6, #16]
 800b920:	6938      	ldr	r0, [r7, #16]
 800b922:	9e05      	ldr	r6, [sp, #20]
 800b924:	1a08      	subs	r0, r1, r0
 800b926:	9904      	ldr	r1, [sp, #16]
 800b928:	0140      	lsls	r0, r0, #5
 800b92a:	1b89      	subs	r1, r1, r6
 800b92c:	1841      	adds	r1, r0, r1
 800b92e:	0508      	lsls	r0, r1, #20
 800b930:	2900      	cmp	r1, #0
 800b932:	dd07      	ble.n	800b944 <__ratio+0x4c>
 800b934:	9901      	ldr	r1, [sp, #4]
 800b936:	1845      	adds	r5, r0, r1
 800b938:	0020      	movs	r0, r4
 800b93a:	0029      	movs	r1, r5
 800b93c:	f7f5 fbee 	bl	800111c <__aeabi_ddiv>
 800b940:	b007      	add	sp, #28
 800b942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b944:	9903      	ldr	r1, [sp, #12]
 800b946:	1a0b      	subs	r3, r1, r0
 800b948:	e7f6      	b.n	800b938 <__ratio+0x40>

0800b94a <__copybits>:
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	0014      	movs	r4, r2
 800b94e:	0005      	movs	r5, r0
 800b950:	3901      	subs	r1, #1
 800b952:	6913      	ldr	r3, [r2, #16]
 800b954:	1149      	asrs	r1, r1, #5
 800b956:	3101      	adds	r1, #1
 800b958:	0089      	lsls	r1, r1, #2
 800b95a:	3414      	adds	r4, #20
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	1841      	adds	r1, r0, r1
 800b960:	18e3      	adds	r3, r4, r3
 800b962:	42a3      	cmp	r3, r4
 800b964:	d80d      	bhi.n	800b982 <__copybits+0x38>
 800b966:	0014      	movs	r4, r2
 800b968:	3411      	adds	r4, #17
 800b96a:	2500      	movs	r5, #0
 800b96c:	429c      	cmp	r4, r3
 800b96e:	d803      	bhi.n	800b978 <__copybits+0x2e>
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	3b11      	subs	r3, #17
 800b974:	089b      	lsrs	r3, r3, #2
 800b976:	009d      	lsls	r5, r3, #2
 800b978:	2300      	movs	r3, #0
 800b97a:	1940      	adds	r0, r0, r5
 800b97c:	4281      	cmp	r1, r0
 800b97e:	d803      	bhi.n	800b988 <__copybits+0x3e>
 800b980:	bd70      	pop	{r4, r5, r6, pc}
 800b982:	cc40      	ldmia	r4!, {r6}
 800b984:	c540      	stmia	r5!, {r6}
 800b986:	e7ec      	b.n	800b962 <__copybits+0x18>
 800b988:	c008      	stmia	r0!, {r3}
 800b98a:	e7f7      	b.n	800b97c <__copybits+0x32>

0800b98c <__any_on>:
 800b98c:	0002      	movs	r2, r0
 800b98e:	6900      	ldr	r0, [r0, #16]
 800b990:	b510      	push	{r4, lr}
 800b992:	3214      	adds	r2, #20
 800b994:	114b      	asrs	r3, r1, #5
 800b996:	4298      	cmp	r0, r3
 800b998:	db13      	blt.n	800b9c2 <__any_on+0x36>
 800b99a:	dd0c      	ble.n	800b9b6 <__any_on+0x2a>
 800b99c:	241f      	movs	r4, #31
 800b99e:	0008      	movs	r0, r1
 800b9a0:	4020      	ands	r0, r4
 800b9a2:	4221      	tst	r1, r4
 800b9a4:	d007      	beq.n	800b9b6 <__any_on+0x2a>
 800b9a6:	0099      	lsls	r1, r3, #2
 800b9a8:	588c      	ldr	r4, [r1, r2]
 800b9aa:	0021      	movs	r1, r4
 800b9ac:	40c1      	lsrs	r1, r0
 800b9ae:	4081      	lsls	r1, r0
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	428c      	cmp	r4, r1
 800b9b4:	d104      	bne.n	800b9c0 <__any_on+0x34>
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	18d3      	adds	r3, r2, r3
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d803      	bhi.n	800b9c6 <__any_on+0x3a>
 800b9be:	2000      	movs	r0, #0
 800b9c0:	bd10      	pop	{r4, pc}
 800b9c2:	0003      	movs	r3, r0
 800b9c4:	e7f7      	b.n	800b9b6 <__any_on+0x2a>
 800b9c6:	3b04      	subs	r3, #4
 800b9c8:	6819      	ldr	r1, [r3, #0]
 800b9ca:	2900      	cmp	r1, #0
 800b9cc:	d0f5      	beq.n	800b9ba <__any_on+0x2e>
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7f6      	b.n	800b9c0 <__any_on+0x34>

0800b9d2 <_calloc_r>:
 800b9d2:	b570      	push	{r4, r5, r6, lr}
 800b9d4:	0c13      	lsrs	r3, r2, #16
 800b9d6:	0c0d      	lsrs	r5, r1, #16
 800b9d8:	d11e      	bne.n	800ba18 <_calloc_r+0x46>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10c      	bne.n	800b9f8 <_calloc_r+0x26>
 800b9de:	b289      	uxth	r1, r1
 800b9e0:	b294      	uxth	r4, r2
 800b9e2:	434c      	muls	r4, r1
 800b9e4:	0021      	movs	r1, r4
 800b9e6:	f000 f88d 	bl	800bb04 <_malloc_r>
 800b9ea:	1e05      	subs	r5, r0, #0
 800b9ec:	d01b      	beq.n	800ba26 <_calloc_r+0x54>
 800b9ee:	0022      	movs	r2, r4
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	f7fc fb76 	bl	80080e2 <memset>
 800b9f6:	e016      	b.n	800ba26 <_calloc_r+0x54>
 800b9f8:	1c1d      	adds	r5, r3, #0
 800b9fa:	1c0b      	adds	r3, r1, #0
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	b289      	uxth	r1, r1
 800ba00:	b29c      	uxth	r4, r3
 800ba02:	4351      	muls	r1, r2
 800ba04:	b2ab      	uxth	r3, r5
 800ba06:	4363      	muls	r3, r4
 800ba08:	0c0c      	lsrs	r4, r1, #16
 800ba0a:	191c      	adds	r4, r3, r4
 800ba0c:	0c22      	lsrs	r2, r4, #16
 800ba0e:	d107      	bne.n	800ba20 <_calloc_r+0x4e>
 800ba10:	0424      	lsls	r4, r4, #16
 800ba12:	b289      	uxth	r1, r1
 800ba14:	430c      	orrs	r4, r1
 800ba16:	e7e5      	b.n	800b9e4 <_calloc_r+0x12>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <_calloc_r+0x4e>
 800ba1c:	1c13      	adds	r3, r2, #0
 800ba1e:	e7ed      	b.n	800b9fc <_calloc_r+0x2a>
 800ba20:	230c      	movs	r3, #12
 800ba22:	2500      	movs	r5, #0
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	0028      	movs	r0, r5
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba2c <_free_r>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	0005      	movs	r5, r0
 800ba30:	2900      	cmp	r1, #0
 800ba32:	d010      	beq.n	800ba56 <_free_r+0x2a>
 800ba34:	1f0c      	subs	r4, r1, #4
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da00      	bge.n	800ba3e <_free_r+0x12>
 800ba3c:	18e4      	adds	r4, r4, r3
 800ba3e:	0028      	movs	r0, r5
 800ba40:	f000 fab2 	bl	800bfa8 <__malloc_lock>
 800ba44:	4a1d      	ldr	r2, [pc, #116]	; (800babc <_free_r+0x90>)
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d105      	bne.n	800ba58 <_free_r+0x2c>
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	6014      	str	r4, [r2, #0]
 800ba50:	0028      	movs	r0, r5
 800ba52:	f000 fab1 	bl	800bfb8 <__malloc_unlock>
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d908      	bls.n	800ba6e <_free_r+0x42>
 800ba5c:	6821      	ldr	r1, [r4, #0]
 800ba5e:	1860      	adds	r0, r4, r1
 800ba60:	4283      	cmp	r3, r0
 800ba62:	d1f3      	bne.n	800ba4c <_free_r+0x20>
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	1841      	adds	r1, r0, r1
 800ba6a:	6021      	str	r1, [r4, #0]
 800ba6c:	e7ee      	b.n	800ba4c <_free_r+0x20>
 800ba6e:	001a      	movs	r2, r3
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <_free_r+0x4e>
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	d9f9      	bls.n	800ba6e <_free_r+0x42>
 800ba7a:	6811      	ldr	r1, [r2, #0]
 800ba7c:	1850      	adds	r0, r2, r1
 800ba7e:	42a0      	cmp	r0, r4
 800ba80:	d10b      	bne.n	800ba9a <_free_r+0x6e>
 800ba82:	6820      	ldr	r0, [r4, #0]
 800ba84:	1809      	adds	r1, r1, r0
 800ba86:	1850      	adds	r0, r2, r1
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	4283      	cmp	r3, r0
 800ba8c:	d1e0      	bne.n	800ba50 <_free_r+0x24>
 800ba8e:	6818      	ldr	r0, [r3, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	1841      	adds	r1, r0, r1
 800ba94:	6011      	str	r1, [r2, #0]
 800ba96:	6053      	str	r3, [r2, #4]
 800ba98:	e7da      	b.n	800ba50 <_free_r+0x24>
 800ba9a:	42a0      	cmp	r0, r4
 800ba9c:	d902      	bls.n	800baa4 <_free_r+0x78>
 800ba9e:	230c      	movs	r3, #12
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	e7d5      	b.n	800ba50 <_free_r+0x24>
 800baa4:	6821      	ldr	r1, [r4, #0]
 800baa6:	1860      	adds	r0, r4, r1
 800baa8:	4283      	cmp	r3, r0
 800baaa:	d103      	bne.n	800bab4 <_free_r+0x88>
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	1841      	adds	r1, r0, r1
 800bab2:	6021      	str	r1, [r4, #0]
 800bab4:	6063      	str	r3, [r4, #4]
 800bab6:	6054      	str	r4, [r2, #4]
 800bab8:	e7ca      	b.n	800ba50 <_free_r+0x24>
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	20001390 	.word	0x20001390

0800bac0 <sbrk_aligned>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	4e0f      	ldr	r6, [pc, #60]	; (800bb00 <sbrk_aligned+0x40>)
 800bac4:	000d      	movs	r5, r1
 800bac6:	6831      	ldr	r1, [r6, #0]
 800bac8:	0004      	movs	r4, r0
 800baca:	2900      	cmp	r1, #0
 800bacc:	d102      	bne.n	800bad4 <sbrk_aligned+0x14>
 800bace:	f000 f9f7 	bl	800bec0 <_sbrk_r>
 800bad2:	6030      	str	r0, [r6, #0]
 800bad4:	0029      	movs	r1, r5
 800bad6:	0020      	movs	r0, r4
 800bad8:	f000 f9f2 	bl	800bec0 <_sbrk_r>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d00a      	beq.n	800baf6 <sbrk_aligned+0x36>
 800bae0:	2303      	movs	r3, #3
 800bae2:	1cc5      	adds	r5, r0, #3
 800bae4:	439d      	bics	r5, r3
 800bae6:	42a8      	cmp	r0, r5
 800bae8:	d007      	beq.n	800bafa <sbrk_aligned+0x3a>
 800baea:	1a29      	subs	r1, r5, r0
 800baec:	0020      	movs	r0, r4
 800baee:	f000 f9e7 	bl	800bec0 <_sbrk_r>
 800baf2:	1c43      	adds	r3, r0, #1
 800baf4:	d101      	bne.n	800bafa <sbrk_aligned+0x3a>
 800baf6:	2501      	movs	r5, #1
 800baf8:	426d      	negs	r5, r5
 800bafa:	0028      	movs	r0, r5
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	20001394 	.word	0x20001394

0800bb04 <_malloc_r>:
 800bb04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb06:	2203      	movs	r2, #3
 800bb08:	1ccb      	adds	r3, r1, #3
 800bb0a:	4393      	bics	r3, r2
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	0006      	movs	r6, r0
 800bb10:	001f      	movs	r7, r3
 800bb12:	2b0c      	cmp	r3, #12
 800bb14:	d232      	bcs.n	800bb7c <_malloc_r+0x78>
 800bb16:	270c      	movs	r7, #12
 800bb18:	42b9      	cmp	r1, r7
 800bb1a:	d831      	bhi.n	800bb80 <_malloc_r+0x7c>
 800bb1c:	0030      	movs	r0, r6
 800bb1e:	f000 fa43 	bl	800bfa8 <__malloc_lock>
 800bb22:	4d32      	ldr	r5, [pc, #200]	; (800bbec <_malloc_r+0xe8>)
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	001c      	movs	r4, r3
 800bb28:	2c00      	cmp	r4, #0
 800bb2a:	d12e      	bne.n	800bb8a <_malloc_r+0x86>
 800bb2c:	0039      	movs	r1, r7
 800bb2e:	0030      	movs	r0, r6
 800bb30:	f7ff ffc6 	bl	800bac0 <sbrk_aligned>
 800bb34:	0004      	movs	r4, r0
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d11e      	bne.n	800bb78 <_malloc_r+0x74>
 800bb3a:	682c      	ldr	r4, [r5, #0]
 800bb3c:	0025      	movs	r5, r4
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	d14a      	bne.n	800bbd8 <_malloc_r+0xd4>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	0029      	movs	r1, r5
 800bb46:	18e3      	adds	r3, r4, r3
 800bb48:	0030      	movs	r0, r6
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	f000 f9b8 	bl	800bec0 <_sbrk_r>
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	4283      	cmp	r3, r0
 800bb54:	d143      	bne.n	800bbde <_malloc_r+0xda>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	3703      	adds	r7, #3
 800bb5a:	1aff      	subs	r7, r7, r3
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	439f      	bics	r7, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	2f0c      	cmp	r7, #12
 800bb64:	d200      	bcs.n	800bb68 <_malloc_r+0x64>
 800bb66:	270c      	movs	r7, #12
 800bb68:	0039      	movs	r1, r7
 800bb6a:	0030      	movs	r0, r6
 800bb6c:	f7ff ffa8 	bl	800bac0 <sbrk_aligned>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d034      	beq.n	800bbde <_malloc_r+0xda>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	19df      	adds	r7, r3, r7
 800bb78:	6027      	str	r7, [r4, #0]
 800bb7a:	e013      	b.n	800bba4 <_malloc_r+0xa0>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	dacb      	bge.n	800bb18 <_malloc_r+0x14>
 800bb80:	230c      	movs	r3, #12
 800bb82:	2500      	movs	r5, #0
 800bb84:	6033      	str	r3, [r6, #0]
 800bb86:	0028      	movs	r0, r5
 800bb88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	1bd1      	subs	r1, r2, r7
 800bb8e:	d420      	bmi.n	800bbd2 <_malloc_r+0xce>
 800bb90:	290b      	cmp	r1, #11
 800bb92:	d917      	bls.n	800bbc4 <_malloc_r+0xc0>
 800bb94:	19e2      	adds	r2, r4, r7
 800bb96:	6027      	str	r7, [r4, #0]
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	d111      	bne.n	800bbc0 <_malloc_r+0xbc>
 800bb9c:	602a      	str	r2, [r5, #0]
 800bb9e:	6863      	ldr	r3, [r4, #4]
 800bba0:	6011      	str	r1, [r2, #0]
 800bba2:	6053      	str	r3, [r2, #4]
 800bba4:	0030      	movs	r0, r6
 800bba6:	0025      	movs	r5, r4
 800bba8:	f000 fa06 	bl	800bfb8 <__malloc_unlock>
 800bbac:	2207      	movs	r2, #7
 800bbae:	350b      	adds	r5, #11
 800bbb0:	1d23      	adds	r3, r4, #4
 800bbb2:	4395      	bics	r5, r2
 800bbb4:	1aea      	subs	r2, r5, r3
 800bbb6:	429d      	cmp	r5, r3
 800bbb8:	d0e5      	beq.n	800bb86 <_malloc_r+0x82>
 800bbba:	1b5b      	subs	r3, r3, r5
 800bbbc:	50a3      	str	r3, [r4, r2]
 800bbbe:	e7e2      	b.n	800bb86 <_malloc_r+0x82>
 800bbc0:	605a      	str	r2, [r3, #4]
 800bbc2:	e7ec      	b.n	800bb9e <_malloc_r+0x9a>
 800bbc4:	6862      	ldr	r2, [r4, #4]
 800bbc6:	42a3      	cmp	r3, r4
 800bbc8:	d101      	bne.n	800bbce <_malloc_r+0xca>
 800bbca:	602a      	str	r2, [r5, #0]
 800bbcc:	e7ea      	b.n	800bba4 <_malloc_r+0xa0>
 800bbce:	605a      	str	r2, [r3, #4]
 800bbd0:	e7e8      	b.n	800bba4 <_malloc_r+0xa0>
 800bbd2:	0023      	movs	r3, r4
 800bbd4:	6864      	ldr	r4, [r4, #4]
 800bbd6:	e7a7      	b.n	800bb28 <_malloc_r+0x24>
 800bbd8:	002c      	movs	r4, r5
 800bbda:	686d      	ldr	r5, [r5, #4]
 800bbdc:	e7af      	b.n	800bb3e <_malloc_r+0x3a>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	0030      	movs	r0, r6
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f000 f9e8 	bl	800bfb8 <__malloc_unlock>
 800bbe8:	e7cd      	b.n	800bb86 <_malloc_r+0x82>
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	20001390 	.word	0x20001390

0800bbf0 <__ssputs_r>:
 800bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf2:	688e      	ldr	r6, [r1, #8]
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	0007      	movs	r7, r0
 800bbf8:	000c      	movs	r4, r1
 800bbfa:	9203      	str	r2, [sp, #12]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	429e      	cmp	r6, r3
 800bc00:	d83c      	bhi.n	800bc7c <__ssputs_r+0x8c>
 800bc02:	2390      	movs	r3, #144	; 0x90
 800bc04:	898a      	ldrh	r2, [r1, #12]
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	421a      	tst	r2, r3
 800bc0a:	d034      	beq.n	800bc76 <__ssputs_r+0x86>
 800bc0c:	6909      	ldr	r1, [r1, #16]
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	6960      	ldr	r0, [r4, #20]
 800bc12:	1a5b      	subs	r3, r3, r1
 800bc14:	9302      	str	r3, [sp, #8]
 800bc16:	2303      	movs	r3, #3
 800bc18:	4343      	muls	r3, r0
 800bc1a:	0fdd      	lsrs	r5, r3, #31
 800bc1c:	18ed      	adds	r5, r5, r3
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	9802      	ldr	r0, [sp, #8]
 800bc22:	3301      	adds	r3, #1
 800bc24:	181b      	adds	r3, r3, r0
 800bc26:	106d      	asrs	r5, r5, #1
 800bc28:	42ab      	cmp	r3, r5
 800bc2a:	d900      	bls.n	800bc2e <__ssputs_r+0x3e>
 800bc2c:	001d      	movs	r5, r3
 800bc2e:	0553      	lsls	r3, r2, #21
 800bc30:	d532      	bpl.n	800bc98 <__ssputs_r+0xa8>
 800bc32:	0029      	movs	r1, r5
 800bc34:	0038      	movs	r0, r7
 800bc36:	f7ff ff65 	bl	800bb04 <_malloc_r>
 800bc3a:	1e06      	subs	r6, r0, #0
 800bc3c:	d109      	bne.n	800bc52 <__ssputs_r+0x62>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	2340      	movs	r3, #64	; 0x40
 800bc44:	2001      	movs	r0, #1
 800bc46:	89a2      	ldrh	r2, [r4, #12]
 800bc48:	4240      	negs	r0, r0
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	b005      	add	sp, #20
 800bc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc52:	9a02      	ldr	r2, [sp, #8]
 800bc54:	6921      	ldr	r1, [r4, #16]
 800bc56:	f7fc fa3b 	bl	80080d0 <memcpy>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	4a14      	ldr	r2, [pc, #80]	; (800bcb0 <__ssputs_r+0xc0>)
 800bc5e:	401a      	ands	r2, r3
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	4313      	orrs	r3, r2
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	9b02      	ldr	r3, [sp, #8]
 800bc68:	6126      	str	r6, [r4, #16]
 800bc6a:	18f6      	adds	r6, r6, r3
 800bc6c:	6026      	str	r6, [r4, #0]
 800bc6e:	6165      	str	r5, [r4, #20]
 800bc70:	9e01      	ldr	r6, [sp, #4]
 800bc72:	1aed      	subs	r5, r5, r3
 800bc74:	60a5      	str	r5, [r4, #8]
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	429e      	cmp	r6, r3
 800bc7a:	d900      	bls.n	800bc7e <__ssputs_r+0x8e>
 800bc7c:	9e01      	ldr	r6, [sp, #4]
 800bc7e:	0032      	movs	r2, r6
 800bc80:	9903      	ldr	r1, [sp, #12]
 800bc82:	6820      	ldr	r0, [r4, #0]
 800bc84:	f000 f97c 	bl	800bf80 <memmove>
 800bc88:	68a3      	ldr	r3, [r4, #8]
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	1b9b      	subs	r3, r3, r6
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	199e      	adds	r6, r3, r6
 800bc94:	6026      	str	r6, [r4, #0]
 800bc96:	e7da      	b.n	800bc4e <__ssputs_r+0x5e>
 800bc98:	002a      	movs	r2, r5
 800bc9a:	0038      	movs	r0, r7
 800bc9c:	f000 f994 	bl	800bfc8 <_realloc_r>
 800bca0:	1e06      	subs	r6, r0, #0
 800bca2:	d1e0      	bne.n	800bc66 <__ssputs_r+0x76>
 800bca4:	0038      	movs	r0, r7
 800bca6:	6921      	ldr	r1, [r4, #16]
 800bca8:	f7ff fec0 	bl	800ba2c <_free_r>
 800bcac:	e7c7      	b.n	800bc3e <__ssputs_r+0x4e>
 800bcae:	46c0      	nop			; (mov r8, r8)
 800bcb0:	fffffb7f 	.word	0xfffffb7f

0800bcb4 <_svfiprintf_r>:
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	b0a1      	sub	sp, #132	; 0x84
 800bcb8:	9003      	str	r0, [sp, #12]
 800bcba:	001d      	movs	r5, r3
 800bcbc:	898b      	ldrh	r3, [r1, #12]
 800bcbe:	000f      	movs	r7, r1
 800bcc0:	0016      	movs	r6, r2
 800bcc2:	061b      	lsls	r3, r3, #24
 800bcc4:	d511      	bpl.n	800bcea <_svfiprintf_r+0x36>
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10e      	bne.n	800bcea <_svfiprintf_r+0x36>
 800bccc:	2140      	movs	r1, #64	; 0x40
 800bcce:	f7ff ff19 	bl	800bb04 <_malloc_r>
 800bcd2:	6038      	str	r0, [r7, #0]
 800bcd4:	6138      	str	r0, [r7, #16]
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d105      	bne.n	800bce6 <_svfiprintf_r+0x32>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	9a03      	ldr	r2, [sp, #12]
 800bcde:	3801      	subs	r0, #1
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	b021      	add	sp, #132	; 0x84
 800bce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	617b      	str	r3, [r7, #20]
 800bcea:	2300      	movs	r3, #0
 800bcec:	ac08      	add	r4, sp, #32
 800bcee:	6163      	str	r3, [r4, #20]
 800bcf0:	3320      	adds	r3, #32
 800bcf2:	7663      	strb	r3, [r4, #25]
 800bcf4:	3310      	adds	r3, #16
 800bcf6:	76a3      	strb	r3, [r4, #26]
 800bcf8:	9507      	str	r5, [sp, #28]
 800bcfa:	0035      	movs	r5, r6
 800bcfc:	782b      	ldrb	r3, [r5, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <_svfiprintf_r+0x52>
 800bd02:	2b25      	cmp	r3, #37	; 0x25
 800bd04:	d147      	bne.n	800bd96 <_svfiprintf_r+0xe2>
 800bd06:	1bab      	subs	r3, r5, r6
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	42b5      	cmp	r5, r6
 800bd0c:	d00c      	beq.n	800bd28 <_svfiprintf_r+0x74>
 800bd0e:	0032      	movs	r2, r6
 800bd10:	0039      	movs	r1, r7
 800bd12:	9803      	ldr	r0, [sp, #12]
 800bd14:	f7ff ff6c 	bl	800bbf0 <__ssputs_r>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d100      	bne.n	800bd1e <_svfiprintf_r+0x6a>
 800bd1c:	e0ae      	b.n	800be7c <_svfiprintf_r+0x1c8>
 800bd1e:	6962      	ldr	r2, [r4, #20]
 800bd20:	9b05      	ldr	r3, [sp, #20]
 800bd22:	4694      	mov	ip, r2
 800bd24:	4463      	add	r3, ip
 800bd26:	6163      	str	r3, [r4, #20]
 800bd28:	782b      	ldrb	r3, [r5, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d100      	bne.n	800bd30 <_svfiprintf_r+0x7c>
 800bd2e:	e0a5      	b.n	800be7c <_svfiprintf_r+0x1c8>
 800bd30:	2201      	movs	r2, #1
 800bd32:	2300      	movs	r3, #0
 800bd34:	4252      	negs	r2, r2
 800bd36:	6062      	str	r2, [r4, #4]
 800bd38:	a904      	add	r1, sp, #16
 800bd3a:	3254      	adds	r2, #84	; 0x54
 800bd3c:	1852      	adds	r2, r2, r1
 800bd3e:	1c6e      	adds	r6, r5, #1
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	60e3      	str	r3, [r4, #12]
 800bd44:	60a3      	str	r3, [r4, #8]
 800bd46:	7013      	strb	r3, [r2, #0]
 800bd48:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd4a:	2205      	movs	r2, #5
 800bd4c:	7831      	ldrb	r1, [r6, #0]
 800bd4e:	4854      	ldr	r0, [pc, #336]	; (800bea0 <_svfiprintf_r+0x1ec>)
 800bd50:	f7ff f96a 	bl	800b028 <memchr>
 800bd54:	1c75      	adds	r5, r6, #1
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d11f      	bne.n	800bd9a <_svfiprintf_r+0xe6>
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	06d3      	lsls	r3, r2, #27
 800bd5e:	d504      	bpl.n	800bd6a <_svfiprintf_r+0xb6>
 800bd60:	2353      	movs	r3, #83	; 0x53
 800bd62:	a904      	add	r1, sp, #16
 800bd64:	185b      	adds	r3, r3, r1
 800bd66:	2120      	movs	r1, #32
 800bd68:	7019      	strb	r1, [r3, #0]
 800bd6a:	0713      	lsls	r3, r2, #28
 800bd6c:	d504      	bpl.n	800bd78 <_svfiprintf_r+0xc4>
 800bd6e:	2353      	movs	r3, #83	; 0x53
 800bd70:	a904      	add	r1, sp, #16
 800bd72:	185b      	adds	r3, r3, r1
 800bd74:	212b      	movs	r1, #43	; 0x2b
 800bd76:	7019      	strb	r1, [r3, #0]
 800bd78:	7833      	ldrb	r3, [r6, #0]
 800bd7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd7c:	d016      	beq.n	800bdac <_svfiprintf_r+0xf8>
 800bd7e:	0035      	movs	r5, r6
 800bd80:	2100      	movs	r1, #0
 800bd82:	200a      	movs	r0, #10
 800bd84:	68e3      	ldr	r3, [r4, #12]
 800bd86:	782a      	ldrb	r2, [r5, #0]
 800bd88:	1c6e      	adds	r6, r5, #1
 800bd8a:	3a30      	subs	r2, #48	; 0x30
 800bd8c:	2a09      	cmp	r2, #9
 800bd8e:	d94e      	bls.n	800be2e <_svfiprintf_r+0x17a>
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d111      	bne.n	800bdb8 <_svfiprintf_r+0x104>
 800bd94:	e017      	b.n	800bdc6 <_svfiprintf_r+0x112>
 800bd96:	3501      	adds	r5, #1
 800bd98:	e7b0      	b.n	800bcfc <_svfiprintf_r+0x48>
 800bd9a:	4b41      	ldr	r3, [pc, #260]	; (800bea0 <_svfiprintf_r+0x1ec>)
 800bd9c:	6822      	ldr	r2, [r4, #0]
 800bd9e:	1ac0      	subs	r0, r0, r3
 800bda0:	2301      	movs	r3, #1
 800bda2:	4083      	lsls	r3, r0
 800bda4:	4313      	orrs	r3, r2
 800bda6:	002e      	movs	r6, r5
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	e7ce      	b.n	800bd4a <_svfiprintf_r+0x96>
 800bdac:	9b07      	ldr	r3, [sp, #28]
 800bdae:	1d19      	adds	r1, r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	9107      	str	r1, [sp, #28]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	db01      	blt.n	800bdbc <_svfiprintf_r+0x108>
 800bdb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdba:	e004      	b.n	800bdc6 <_svfiprintf_r+0x112>
 800bdbc:	425b      	negs	r3, r3
 800bdbe:	60e3      	str	r3, [r4, #12]
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	782b      	ldrb	r3, [r5, #0]
 800bdc8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdca:	d10a      	bne.n	800bde2 <_svfiprintf_r+0x12e>
 800bdcc:	786b      	ldrb	r3, [r5, #1]
 800bdce:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd0:	d135      	bne.n	800be3e <_svfiprintf_r+0x18a>
 800bdd2:	9b07      	ldr	r3, [sp, #28]
 800bdd4:	3502      	adds	r5, #2
 800bdd6:	1d1a      	adds	r2, r3, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	9207      	str	r2, [sp, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	db2b      	blt.n	800be38 <_svfiprintf_r+0x184>
 800bde0:	9309      	str	r3, [sp, #36]	; 0x24
 800bde2:	4e30      	ldr	r6, [pc, #192]	; (800bea4 <_svfiprintf_r+0x1f0>)
 800bde4:	2203      	movs	r2, #3
 800bde6:	0030      	movs	r0, r6
 800bde8:	7829      	ldrb	r1, [r5, #0]
 800bdea:	f7ff f91d 	bl	800b028 <memchr>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d006      	beq.n	800be00 <_svfiprintf_r+0x14c>
 800bdf2:	2340      	movs	r3, #64	; 0x40
 800bdf4:	1b80      	subs	r0, r0, r6
 800bdf6:	4083      	lsls	r3, r0
 800bdf8:	6822      	ldr	r2, [r4, #0]
 800bdfa:	3501      	adds	r5, #1
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	6023      	str	r3, [r4, #0]
 800be00:	7829      	ldrb	r1, [r5, #0]
 800be02:	2206      	movs	r2, #6
 800be04:	4828      	ldr	r0, [pc, #160]	; (800bea8 <_svfiprintf_r+0x1f4>)
 800be06:	1c6e      	adds	r6, r5, #1
 800be08:	7621      	strb	r1, [r4, #24]
 800be0a:	f7ff f90d 	bl	800b028 <memchr>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d03c      	beq.n	800be8c <_svfiprintf_r+0x1d8>
 800be12:	4b26      	ldr	r3, [pc, #152]	; (800beac <_svfiprintf_r+0x1f8>)
 800be14:	2b00      	cmp	r3, #0
 800be16:	d125      	bne.n	800be64 <_svfiprintf_r+0x1b0>
 800be18:	2207      	movs	r2, #7
 800be1a:	9b07      	ldr	r3, [sp, #28]
 800be1c:	3307      	adds	r3, #7
 800be1e:	4393      	bics	r3, r2
 800be20:	3308      	adds	r3, #8
 800be22:	9307      	str	r3, [sp, #28]
 800be24:	6963      	ldr	r3, [r4, #20]
 800be26:	9a04      	ldr	r2, [sp, #16]
 800be28:	189b      	adds	r3, r3, r2
 800be2a:	6163      	str	r3, [r4, #20]
 800be2c:	e765      	b.n	800bcfa <_svfiprintf_r+0x46>
 800be2e:	4343      	muls	r3, r0
 800be30:	0035      	movs	r5, r6
 800be32:	2101      	movs	r1, #1
 800be34:	189b      	adds	r3, r3, r2
 800be36:	e7a6      	b.n	800bd86 <_svfiprintf_r+0xd2>
 800be38:	2301      	movs	r3, #1
 800be3a:	425b      	negs	r3, r3
 800be3c:	e7d0      	b.n	800bde0 <_svfiprintf_r+0x12c>
 800be3e:	2300      	movs	r3, #0
 800be40:	200a      	movs	r0, #10
 800be42:	001a      	movs	r2, r3
 800be44:	3501      	adds	r5, #1
 800be46:	6063      	str	r3, [r4, #4]
 800be48:	7829      	ldrb	r1, [r5, #0]
 800be4a:	1c6e      	adds	r6, r5, #1
 800be4c:	3930      	subs	r1, #48	; 0x30
 800be4e:	2909      	cmp	r1, #9
 800be50:	d903      	bls.n	800be5a <_svfiprintf_r+0x1a6>
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0c5      	beq.n	800bde2 <_svfiprintf_r+0x12e>
 800be56:	9209      	str	r2, [sp, #36]	; 0x24
 800be58:	e7c3      	b.n	800bde2 <_svfiprintf_r+0x12e>
 800be5a:	4342      	muls	r2, r0
 800be5c:	0035      	movs	r5, r6
 800be5e:	2301      	movs	r3, #1
 800be60:	1852      	adds	r2, r2, r1
 800be62:	e7f1      	b.n	800be48 <_svfiprintf_r+0x194>
 800be64:	ab07      	add	r3, sp, #28
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	003a      	movs	r2, r7
 800be6a:	0021      	movs	r1, r4
 800be6c:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <_svfiprintf_r+0x1fc>)
 800be6e:	9803      	ldr	r0, [sp, #12]
 800be70:	f7fc f9ea 	bl	8008248 <_printf_float>
 800be74:	9004      	str	r0, [sp, #16]
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	3301      	adds	r3, #1
 800be7a:	d1d3      	bne.n	800be24 <_svfiprintf_r+0x170>
 800be7c:	89bb      	ldrh	r3, [r7, #12]
 800be7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be80:	065b      	lsls	r3, r3, #25
 800be82:	d400      	bmi.n	800be86 <_svfiprintf_r+0x1d2>
 800be84:	e72d      	b.n	800bce2 <_svfiprintf_r+0x2e>
 800be86:	2001      	movs	r0, #1
 800be88:	4240      	negs	r0, r0
 800be8a:	e72a      	b.n	800bce2 <_svfiprintf_r+0x2e>
 800be8c:	ab07      	add	r3, sp, #28
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	003a      	movs	r2, r7
 800be92:	0021      	movs	r1, r4
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <_svfiprintf_r+0x1fc>)
 800be96:	9803      	ldr	r0, [sp, #12]
 800be98:	f7fc fc88 	bl	80087ac <_printf_i>
 800be9c:	e7ea      	b.n	800be74 <_svfiprintf_r+0x1c0>
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	0800d0fc 	.word	0x0800d0fc
 800bea4:	0800d102 	.word	0x0800d102
 800bea8:	0800d106 	.word	0x0800d106
 800beac:	08008249 	.word	0x08008249
 800beb0:	0800bbf1 	.word	0x0800bbf1

0800beb4 <nan>:
 800beb4:	2000      	movs	r0, #0
 800beb6:	4901      	ldr	r1, [pc, #4]	; (800bebc <nan+0x8>)
 800beb8:	4770      	bx	lr
 800beba:	46c0      	nop			; (mov r8, r8)
 800bebc:	7ff80000 	.word	0x7ff80000

0800bec0 <_sbrk_r>:
 800bec0:	2300      	movs	r3, #0
 800bec2:	b570      	push	{r4, r5, r6, lr}
 800bec4:	4d06      	ldr	r5, [pc, #24]	; (800bee0 <_sbrk_r+0x20>)
 800bec6:	0004      	movs	r4, r0
 800bec8:	0008      	movs	r0, r1
 800beca:	602b      	str	r3, [r5, #0]
 800becc:	f7f7 fda6 	bl	8003a1c <_sbrk>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d103      	bne.n	800bedc <_sbrk_r+0x1c>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d000      	beq.n	800bedc <_sbrk_r+0x1c>
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	bd70      	pop	{r4, r5, r6, pc}
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	20001398 	.word	0x20001398

0800bee4 <strncmp>:
 800bee4:	b530      	push	{r4, r5, lr}
 800bee6:	0005      	movs	r5, r0
 800bee8:	1e10      	subs	r0, r2, #0
 800beea:	d008      	beq.n	800befe <strncmp+0x1a>
 800beec:	2400      	movs	r4, #0
 800beee:	3a01      	subs	r2, #1
 800bef0:	5d2b      	ldrb	r3, [r5, r4]
 800bef2:	5d08      	ldrb	r0, [r1, r4]
 800bef4:	4283      	cmp	r3, r0
 800bef6:	d101      	bne.n	800befc <strncmp+0x18>
 800bef8:	4294      	cmp	r4, r2
 800befa:	d101      	bne.n	800bf00 <strncmp+0x1c>
 800befc:	1a18      	subs	r0, r3, r0
 800befe:	bd30      	pop	{r4, r5, pc}
 800bf00:	3401      	adds	r4, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1f4      	bne.n	800bef0 <strncmp+0xc>
 800bf06:	e7f9      	b.n	800befc <strncmp+0x18>

0800bf08 <__ascii_wctomb>:
 800bf08:	0003      	movs	r3, r0
 800bf0a:	1e08      	subs	r0, r1, #0
 800bf0c:	d005      	beq.n	800bf1a <__ascii_wctomb+0x12>
 800bf0e:	2aff      	cmp	r2, #255	; 0xff
 800bf10:	d904      	bls.n	800bf1c <__ascii_wctomb+0x14>
 800bf12:	228a      	movs	r2, #138	; 0x8a
 800bf14:	2001      	movs	r0, #1
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	4240      	negs	r0, r0
 800bf1a:	4770      	bx	lr
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	700a      	strb	r2, [r1, #0]
 800bf20:	e7fb      	b.n	800bf1a <__ascii_wctomb+0x12>
	...

0800bf24 <__assert_func>:
 800bf24:	b530      	push	{r4, r5, lr}
 800bf26:	0014      	movs	r4, r2
 800bf28:	001a      	movs	r2, r3
 800bf2a:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <__assert_func+0x2c>)
 800bf2c:	0005      	movs	r5, r0
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	b085      	sub	sp, #20
 800bf32:	68d8      	ldr	r0, [r3, #12]
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <__assert_func+0x30>)
 800bf36:	2c00      	cmp	r4, #0
 800bf38:	d101      	bne.n	800bf3e <__assert_func+0x1a>
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <__assert_func+0x34>)
 800bf3c:	001c      	movs	r4, r3
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	9100      	str	r1, [sp, #0]
 800bf42:	002b      	movs	r3, r5
 800bf44:	4905      	ldr	r1, [pc, #20]	; (800bf5c <__assert_func+0x38>)
 800bf46:	9402      	str	r4, [sp, #8]
 800bf48:	f000 f80a 	bl	800bf60 <fiprintf>
 800bf4c:	f000 fa9a 	bl	800c484 <abort>
 800bf50:	20000018 	.word	0x20000018
 800bf54:	0800d10d 	.word	0x0800d10d
 800bf58:	0800d148 	.word	0x0800d148
 800bf5c:	0800d11a 	.word	0x0800d11a

0800bf60 <fiprintf>:
 800bf60:	b40e      	push	{r1, r2, r3}
 800bf62:	b503      	push	{r0, r1, lr}
 800bf64:	0001      	movs	r1, r0
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	4804      	ldr	r0, [pc, #16]	; (800bf7c <fiprintf+0x1c>)
 800bf6a:	cb04      	ldmia	r3!, {r2}
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	f000 f880 	bl	800c074 <_vfiprintf_r>
 800bf74:	b002      	add	sp, #8
 800bf76:	bc08      	pop	{r3}
 800bf78:	b003      	add	sp, #12
 800bf7a:	4718      	bx	r3
 800bf7c:	20000018 	.word	0x20000018

0800bf80 <memmove>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	4288      	cmp	r0, r1
 800bf84:	d902      	bls.n	800bf8c <memmove+0xc>
 800bf86:	188b      	adds	r3, r1, r2
 800bf88:	4298      	cmp	r0, r3
 800bf8a:	d303      	bcc.n	800bf94 <memmove+0x14>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e007      	b.n	800bfa0 <memmove+0x20>
 800bf90:	5c8b      	ldrb	r3, [r1, r2]
 800bf92:	5483      	strb	r3, [r0, r2]
 800bf94:	3a01      	subs	r2, #1
 800bf96:	d2fb      	bcs.n	800bf90 <memmove+0x10>
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	5ccc      	ldrb	r4, [r1, r3]
 800bf9c:	54c4      	strb	r4, [r0, r3]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d1fa      	bne.n	800bf9a <memmove+0x1a>
 800bfa4:	e7f8      	b.n	800bf98 <memmove+0x18>
	...

0800bfa8 <__malloc_lock>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	4802      	ldr	r0, [pc, #8]	; (800bfb4 <__malloc_lock+0xc>)
 800bfac:	f000 fc41 	bl	800c832 <__retarget_lock_acquire_recursive>
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	2000139c 	.word	0x2000139c

0800bfb8 <__malloc_unlock>:
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	4802      	ldr	r0, [pc, #8]	; (800bfc4 <__malloc_unlock+0xc>)
 800bfbc:	f000 fc3a 	bl	800c834 <__retarget_lock_release_recursive>
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	2000139c 	.word	0x2000139c

0800bfc8 <_realloc_r>:
 800bfc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfca:	0007      	movs	r7, r0
 800bfcc:	000e      	movs	r6, r1
 800bfce:	0014      	movs	r4, r2
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	d105      	bne.n	800bfe0 <_realloc_r+0x18>
 800bfd4:	0011      	movs	r1, r2
 800bfd6:	f7ff fd95 	bl	800bb04 <_malloc_r>
 800bfda:	0005      	movs	r5, r0
 800bfdc:	0028      	movs	r0, r5
 800bfde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	d103      	bne.n	800bfec <_realloc_r+0x24>
 800bfe4:	f7ff fd22 	bl	800ba2c <_free_r>
 800bfe8:	0025      	movs	r5, r4
 800bfea:	e7f7      	b.n	800bfdc <_realloc_r+0x14>
 800bfec:	f000 fc90 	bl	800c910 <_malloc_usable_size_r>
 800bff0:	9001      	str	r0, [sp, #4]
 800bff2:	4284      	cmp	r4, r0
 800bff4:	d803      	bhi.n	800bffe <_realloc_r+0x36>
 800bff6:	0035      	movs	r5, r6
 800bff8:	0843      	lsrs	r3, r0, #1
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	d3ee      	bcc.n	800bfdc <_realloc_r+0x14>
 800bffe:	0021      	movs	r1, r4
 800c000:	0038      	movs	r0, r7
 800c002:	f7ff fd7f 	bl	800bb04 <_malloc_r>
 800c006:	1e05      	subs	r5, r0, #0
 800c008:	d0e8      	beq.n	800bfdc <_realloc_r+0x14>
 800c00a:	9b01      	ldr	r3, [sp, #4]
 800c00c:	0022      	movs	r2, r4
 800c00e:	429c      	cmp	r4, r3
 800c010:	d900      	bls.n	800c014 <_realloc_r+0x4c>
 800c012:	001a      	movs	r2, r3
 800c014:	0031      	movs	r1, r6
 800c016:	0028      	movs	r0, r5
 800c018:	f7fc f85a 	bl	80080d0 <memcpy>
 800c01c:	0031      	movs	r1, r6
 800c01e:	0038      	movs	r0, r7
 800c020:	f7ff fd04 	bl	800ba2c <_free_r>
 800c024:	e7da      	b.n	800bfdc <_realloc_r+0x14>

0800c026 <__sfputc_r>:
 800c026:	6893      	ldr	r3, [r2, #8]
 800c028:	b510      	push	{r4, lr}
 800c02a:	3b01      	subs	r3, #1
 800c02c:	6093      	str	r3, [r2, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	da04      	bge.n	800c03c <__sfputc_r+0x16>
 800c032:	6994      	ldr	r4, [r2, #24]
 800c034:	42a3      	cmp	r3, r4
 800c036:	db07      	blt.n	800c048 <__sfputc_r+0x22>
 800c038:	290a      	cmp	r1, #10
 800c03a:	d005      	beq.n	800c048 <__sfputc_r+0x22>
 800c03c:	6813      	ldr	r3, [r2, #0]
 800c03e:	1c58      	adds	r0, r3, #1
 800c040:	6010      	str	r0, [r2, #0]
 800c042:	7019      	strb	r1, [r3, #0]
 800c044:	0008      	movs	r0, r1
 800c046:	bd10      	pop	{r4, pc}
 800c048:	f000 f94e 	bl	800c2e8 <__swbuf_r>
 800c04c:	0001      	movs	r1, r0
 800c04e:	e7f9      	b.n	800c044 <__sfputc_r+0x1e>

0800c050 <__sfputs_r>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	0006      	movs	r6, r0
 800c054:	000f      	movs	r7, r1
 800c056:	0014      	movs	r4, r2
 800c058:	18d5      	adds	r5, r2, r3
 800c05a:	42ac      	cmp	r4, r5
 800c05c:	d101      	bne.n	800c062 <__sfputs_r+0x12>
 800c05e:	2000      	movs	r0, #0
 800c060:	e007      	b.n	800c072 <__sfputs_r+0x22>
 800c062:	7821      	ldrb	r1, [r4, #0]
 800c064:	003a      	movs	r2, r7
 800c066:	0030      	movs	r0, r6
 800c068:	f7ff ffdd 	bl	800c026 <__sfputc_r>
 800c06c:	3401      	adds	r4, #1
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d1f3      	bne.n	800c05a <__sfputs_r+0xa>
 800c072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c074 <_vfiprintf_r>:
 800c074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c076:	b0a1      	sub	sp, #132	; 0x84
 800c078:	0006      	movs	r6, r0
 800c07a:	000c      	movs	r4, r1
 800c07c:	001f      	movs	r7, r3
 800c07e:	9203      	str	r2, [sp, #12]
 800c080:	2800      	cmp	r0, #0
 800c082:	d004      	beq.n	800c08e <_vfiprintf_r+0x1a>
 800c084:	6983      	ldr	r3, [r0, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <_vfiprintf_r+0x1a>
 800c08a:	f000 fb31 	bl	800c6f0 <__sinit>
 800c08e:	4b8e      	ldr	r3, [pc, #568]	; (800c2c8 <_vfiprintf_r+0x254>)
 800c090:	429c      	cmp	r4, r3
 800c092:	d11c      	bne.n	800c0ce <_vfiprintf_r+0x5a>
 800c094:	6874      	ldr	r4, [r6, #4]
 800c096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c098:	07db      	lsls	r3, r3, #31
 800c09a:	d405      	bmi.n	800c0a8 <_vfiprintf_r+0x34>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	059b      	lsls	r3, r3, #22
 800c0a0:	d402      	bmi.n	800c0a8 <_vfiprintf_r+0x34>
 800c0a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a4:	f000 fbc5 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	071b      	lsls	r3, r3, #28
 800c0ac:	d502      	bpl.n	800c0b4 <_vfiprintf_r+0x40>
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11d      	bne.n	800c0f0 <_vfiprintf_r+0x7c>
 800c0b4:	0021      	movs	r1, r4
 800c0b6:	0030      	movs	r0, r6
 800c0b8:	f000 f96c 	bl	800c394 <__swsetup_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d017      	beq.n	800c0f0 <_vfiprintf_r+0x7c>
 800c0c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0c2:	07db      	lsls	r3, r3, #31
 800c0c4:	d50d      	bpl.n	800c0e2 <_vfiprintf_r+0x6e>
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	4240      	negs	r0, r0
 800c0ca:	b021      	add	sp, #132	; 0x84
 800c0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ce:	4b7f      	ldr	r3, [pc, #508]	; (800c2cc <_vfiprintf_r+0x258>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	d101      	bne.n	800c0d8 <_vfiprintf_r+0x64>
 800c0d4:	68b4      	ldr	r4, [r6, #8]
 800c0d6:	e7de      	b.n	800c096 <_vfiprintf_r+0x22>
 800c0d8:	4b7d      	ldr	r3, [pc, #500]	; (800c2d0 <_vfiprintf_r+0x25c>)
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	d1db      	bne.n	800c096 <_vfiprintf_r+0x22>
 800c0de:	68f4      	ldr	r4, [r6, #12]
 800c0e0:	e7d9      	b.n	800c096 <_vfiprintf_r+0x22>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	059b      	lsls	r3, r3, #22
 800c0e6:	d4ee      	bmi.n	800c0c6 <_vfiprintf_r+0x52>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ea:	f000 fba3 	bl	800c834 <__retarget_lock_release_recursive>
 800c0ee:	e7ea      	b.n	800c0c6 <_vfiprintf_r+0x52>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	ad08      	add	r5, sp, #32
 800c0f4:	616b      	str	r3, [r5, #20]
 800c0f6:	3320      	adds	r3, #32
 800c0f8:	766b      	strb	r3, [r5, #25]
 800c0fa:	3310      	adds	r3, #16
 800c0fc:	76ab      	strb	r3, [r5, #26]
 800c0fe:	9707      	str	r7, [sp, #28]
 800c100:	9f03      	ldr	r7, [sp, #12]
 800c102:	783b      	ldrb	r3, [r7, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <_vfiprintf_r+0x98>
 800c108:	2b25      	cmp	r3, #37	; 0x25
 800c10a:	d14e      	bne.n	800c1aa <_vfiprintf_r+0x136>
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	1afb      	subs	r3, r7, r3
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	429f      	cmp	r7, r3
 800c116:	d00d      	beq.n	800c134 <_vfiprintf_r+0xc0>
 800c118:	9b05      	ldr	r3, [sp, #20]
 800c11a:	0021      	movs	r1, r4
 800c11c:	0030      	movs	r0, r6
 800c11e:	9a03      	ldr	r2, [sp, #12]
 800c120:	f7ff ff96 	bl	800c050 <__sfputs_r>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d100      	bne.n	800c12a <_vfiprintf_r+0xb6>
 800c128:	e0b5      	b.n	800c296 <_vfiprintf_r+0x222>
 800c12a:	696a      	ldr	r2, [r5, #20]
 800c12c:	9b05      	ldr	r3, [sp, #20]
 800c12e:	4694      	mov	ip, r2
 800c130:	4463      	add	r3, ip
 800c132:	616b      	str	r3, [r5, #20]
 800c134:	783b      	ldrb	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d100      	bne.n	800c13c <_vfiprintf_r+0xc8>
 800c13a:	e0ac      	b.n	800c296 <_vfiprintf_r+0x222>
 800c13c:	2201      	movs	r2, #1
 800c13e:	1c7b      	adds	r3, r7, #1
 800c140:	9303      	str	r3, [sp, #12]
 800c142:	2300      	movs	r3, #0
 800c144:	4252      	negs	r2, r2
 800c146:	606a      	str	r2, [r5, #4]
 800c148:	a904      	add	r1, sp, #16
 800c14a:	3254      	adds	r2, #84	; 0x54
 800c14c:	1852      	adds	r2, r2, r1
 800c14e:	602b      	str	r3, [r5, #0]
 800c150:	60eb      	str	r3, [r5, #12]
 800c152:	60ab      	str	r3, [r5, #8]
 800c154:	7013      	strb	r3, [r2, #0]
 800c156:	65ab      	str	r3, [r5, #88]	; 0x58
 800c158:	9b03      	ldr	r3, [sp, #12]
 800c15a:	2205      	movs	r2, #5
 800c15c:	7819      	ldrb	r1, [r3, #0]
 800c15e:	485d      	ldr	r0, [pc, #372]	; (800c2d4 <_vfiprintf_r+0x260>)
 800c160:	f7fe ff62 	bl	800b028 <memchr>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	1c5f      	adds	r7, r3, #1
 800c168:	2800      	cmp	r0, #0
 800c16a:	d120      	bne.n	800c1ae <_vfiprintf_r+0x13a>
 800c16c:	682a      	ldr	r2, [r5, #0]
 800c16e:	06d3      	lsls	r3, r2, #27
 800c170:	d504      	bpl.n	800c17c <_vfiprintf_r+0x108>
 800c172:	2353      	movs	r3, #83	; 0x53
 800c174:	a904      	add	r1, sp, #16
 800c176:	185b      	adds	r3, r3, r1
 800c178:	2120      	movs	r1, #32
 800c17a:	7019      	strb	r1, [r3, #0]
 800c17c:	0713      	lsls	r3, r2, #28
 800c17e:	d504      	bpl.n	800c18a <_vfiprintf_r+0x116>
 800c180:	2353      	movs	r3, #83	; 0x53
 800c182:	a904      	add	r1, sp, #16
 800c184:	185b      	adds	r3, r3, r1
 800c186:	212b      	movs	r1, #43	; 0x2b
 800c188:	7019      	strb	r1, [r3, #0]
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b2a      	cmp	r3, #42	; 0x2a
 800c190:	d016      	beq.n	800c1c0 <_vfiprintf_r+0x14c>
 800c192:	2100      	movs	r1, #0
 800c194:	68eb      	ldr	r3, [r5, #12]
 800c196:	9f03      	ldr	r7, [sp, #12]
 800c198:	783a      	ldrb	r2, [r7, #0]
 800c19a:	1c78      	adds	r0, r7, #1
 800c19c:	3a30      	subs	r2, #48	; 0x30
 800c19e:	4684      	mov	ip, r0
 800c1a0:	2a09      	cmp	r2, #9
 800c1a2:	d94f      	bls.n	800c244 <_vfiprintf_r+0x1d0>
 800c1a4:	2900      	cmp	r1, #0
 800c1a6:	d111      	bne.n	800c1cc <_vfiprintf_r+0x158>
 800c1a8:	e017      	b.n	800c1da <_vfiprintf_r+0x166>
 800c1aa:	3701      	adds	r7, #1
 800c1ac:	e7a9      	b.n	800c102 <_vfiprintf_r+0x8e>
 800c1ae:	4b49      	ldr	r3, [pc, #292]	; (800c2d4 <_vfiprintf_r+0x260>)
 800c1b0:	682a      	ldr	r2, [r5, #0]
 800c1b2:	1ac0      	subs	r0, r0, r3
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4083      	lsls	r3, r0
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	602b      	str	r3, [r5, #0]
 800c1bc:	9703      	str	r7, [sp, #12]
 800c1be:	e7cb      	b.n	800c158 <_vfiprintf_r+0xe4>
 800c1c0:	9b07      	ldr	r3, [sp, #28]
 800c1c2:	1d19      	adds	r1, r3, #4
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	9107      	str	r1, [sp, #28]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	db01      	blt.n	800c1d0 <_vfiprintf_r+0x15c>
 800c1cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1ce:	e004      	b.n	800c1da <_vfiprintf_r+0x166>
 800c1d0:	425b      	negs	r3, r3
 800c1d2:	60eb      	str	r3, [r5, #12]
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	783b      	ldrb	r3, [r7, #0]
 800c1dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c1de:	d10a      	bne.n	800c1f6 <_vfiprintf_r+0x182>
 800c1e0:	787b      	ldrb	r3, [r7, #1]
 800c1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e4:	d137      	bne.n	800c256 <_vfiprintf_r+0x1e2>
 800c1e6:	9b07      	ldr	r3, [sp, #28]
 800c1e8:	3702      	adds	r7, #2
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9207      	str	r2, [sp, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	db2d      	blt.n	800c250 <_vfiprintf_r+0x1dc>
 800c1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	7839      	ldrb	r1, [r7, #0]
 800c1fa:	4837      	ldr	r0, [pc, #220]	; (800c2d8 <_vfiprintf_r+0x264>)
 800c1fc:	f7fe ff14 	bl	800b028 <memchr>
 800c200:	2800      	cmp	r0, #0
 800c202:	d007      	beq.n	800c214 <_vfiprintf_r+0x1a0>
 800c204:	4b34      	ldr	r3, [pc, #208]	; (800c2d8 <_vfiprintf_r+0x264>)
 800c206:	682a      	ldr	r2, [r5, #0]
 800c208:	1ac0      	subs	r0, r0, r3
 800c20a:	2340      	movs	r3, #64	; 0x40
 800c20c:	4083      	lsls	r3, r0
 800c20e:	4313      	orrs	r3, r2
 800c210:	3701      	adds	r7, #1
 800c212:	602b      	str	r3, [r5, #0]
 800c214:	7839      	ldrb	r1, [r7, #0]
 800c216:	1c7b      	adds	r3, r7, #1
 800c218:	2206      	movs	r2, #6
 800c21a:	4830      	ldr	r0, [pc, #192]	; (800c2dc <_vfiprintf_r+0x268>)
 800c21c:	9303      	str	r3, [sp, #12]
 800c21e:	7629      	strb	r1, [r5, #24]
 800c220:	f7fe ff02 	bl	800b028 <memchr>
 800c224:	2800      	cmp	r0, #0
 800c226:	d045      	beq.n	800c2b4 <_vfiprintf_r+0x240>
 800c228:	4b2d      	ldr	r3, [pc, #180]	; (800c2e0 <_vfiprintf_r+0x26c>)
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d127      	bne.n	800c27e <_vfiprintf_r+0x20a>
 800c22e:	2207      	movs	r2, #7
 800c230:	9b07      	ldr	r3, [sp, #28]
 800c232:	3307      	adds	r3, #7
 800c234:	4393      	bics	r3, r2
 800c236:	3308      	adds	r3, #8
 800c238:	9307      	str	r3, [sp, #28]
 800c23a:	696b      	ldr	r3, [r5, #20]
 800c23c:	9a04      	ldr	r2, [sp, #16]
 800c23e:	189b      	adds	r3, r3, r2
 800c240:	616b      	str	r3, [r5, #20]
 800c242:	e75d      	b.n	800c100 <_vfiprintf_r+0x8c>
 800c244:	210a      	movs	r1, #10
 800c246:	434b      	muls	r3, r1
 800c248:	4667      	mov	r7, ip
 800c24a:	189b      	adds	r3, r3, r2
 800c24c:	3909      	subs	r1, #9
 800c24e:	e7a3      	b.n	800c198 <_vfiprintf_r+0x124>
 800c250:	2301      	movs	r3, #1
 800c252:	425b      	negs	r3, r3
 800c254:	e7ce      	b.n	800c1f4 <_vfiprintf_r+0x180>
 800c256:	2300      	movs	r3, #0
 800c258:	001a      	movs	r2, r3
 800c25a:	3701      	adds	r7, #1
 800c25c:	606b      	str	r3, [r5, #4]
 800c25e:	7839      	ldrb	r1, [r7, #0]
 800c260:	1c78      	adds	r0, r7, #1
 800c262:	3930      	subs	r1, #48	; 0x30
 800c264:	4684      	mov	ip, r0
 800c266:	2909      	cmp	r1, #9
 800c268:	d903      	bls.n	800c272 <_vfiprintf_r+0x1fe>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0c3      	beq.n	800c1f6 <_vfiprintf_r+0x182>
 800c26e:	9209      	str	r2, [sp, #36]	; 0x24
 800c270:	e7c1      	b.n	800c1f6 <_vfiprintf_r+0x182>
 800c272:	230a      	movs	r3, #10
 800c274:	435a      	muls	r2, r3
 800c276:	4667      	mov	r7, ip
 800c278:	1852      	adds	r2, r2, r1
 800c27a:	3b09      	subs	r3, #9
 800c27c:	e7ef      	b.n	800c25e <_vfiprintf_r+0x1ea>
 800c27e:	ab07      	add	r3, sp, #28
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	0022      	movs	r2, r4
 800c284:	0029      	movs	r1, r5
 800c286:	0030      	movs	r0, r6
 800c288:	4b16      	ldr	r3, [pc, #88]	; (800c2e4 <_vfiprintf_r+0x270>)
 800c28a:	f7fb ffdd 	bl	8008248 <_printf_float>
 800c28e:	9004      	str	r0, [sp, #16]
 800c290:	9b04      	ldr	r3, [sp, #16]
 800c292:	3301      	adds	r3, #1
 800c294:	d1d1      	bne.n	800c23a <_vfiprintf_r+0x1c6>
 800c296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c298:	07db      	lsls	r3, r3, #31
 800c29a:	d405      	bmi.n	800c2a8 <_vfiprintf_r+0x234>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	059b      	lsls	r3, r3, #22
 800c2a0:	d402      	bmi.n	800c2a8 <_vfiprintf_r+0x234>
 800c2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a4:	f000 fac6 	bl	800c834 <__retarget_lock_release_recursive>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	065b      	lsls	r3, r3, #25
 800c2ac:	d500      	bpl.n	800c2b0 <_vfiprintf_r+0x23c>
 800c2ae:	e70a      	b.n	800c0c6 <_vfiprintf_r+0x52>
 800c2b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2b2:	e70a      	b.n	800c0ca <_vfiprintf_r+0x56>
 800c2b4:	ab07      	add	r3, sp, #28
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	0022      	movs	r2, r4
 800c2ba:	0029      	movs	r1, r5
 800c2bc:	0030      	movs	r0, r6
 800c2be:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <_vfiprintf_r+0x270>)
 800c2c0:	f7fc fa74 	bl	80087ac <_printf_i>
 800c2c4:	e7e3      	b.n	800c28e <_vfiprintf_r+0x21a>
 800c2c6:	46c0      	nop			; (mov r8, r8)
 800c2c8:	0800d16c 	.word	0x0800d16c
 800c2cc:	0800d18c 	.word	0x0800d18c
 800c2d0:	0800d14c 	.word	0x0800d14c
 800c2d4:	0800d0fc 	.word	0x0800d0fc
 800c2d8:	0800d102 	.word	0x0800d102
 800c2dc:	0800d106 	.word	0x0800d106
 800c2e0:	08008249 	.word	0x08008249
 800c2e4:	0800c051 	.word	0x0800c051

0800c2e8 <__swbuf_r>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	0005      	movs	r5, r0
 800c2ec:	000e      	movs	r6, r1
 800c2ee:	0014      	movs	r4, r2
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d004      	beq.n	800c2fe <__swbuf_r+0x16>
 800c2f4:	6983      	ldr	r3, [r0, #24]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <__swbuf_r+0x16>
 800c2fa:	f000 f9f9 	bl	800c6f0 <__sinit>
 800c2fe:	4b22      	ldr	r3, [pc, #136]	; (800c388 <__swbuf_r+0xa0>)
 800c300:	429c      	cmp	r4, r3
 800c302:	d12e      	bne.n	800c362 <__swbuf_r+0x7a>
 800c304:	686c      	ldr	r4, [r5, #4]
 800c306:	69a3      	ldr	r3, [r4, #24]
 800c308:	60a3      	str	r3, [r4, #8]
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	071b      	lsls	r3, r3, #28
 800c30e:	d532      	bpl.n	800c376 <__swbuf_r+0x8e>
 800c310:	6923      	ldr	r3, [r4, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d02f      	beq.n	800c376 <__swbuf_r+0x8e>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	b2f7      	uxtb	r7, r6
 800c31c:	1a98      	subs	r0, r3, r2
 800c31e:	6963      	ldr	r3, [r4, #20]
 800c320:	b2f6      	uxtb	r6, r6
 800c322:	4283      	cmp	r3, r0
 800c324:	dc05      	bgt.n	800c332 <__swbuf_r+0x4a>
 800c326:	0021      	movs	r1, r4
 800c328:	0028      	movs	r0, r5
 800c32a:	f000 f93f 	bl	800c5ac <_fflush_r>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d127      	bne.n	800c382 <__swbuf_r+0x9a>
 800c332:	68a3      	ldr	r3, [r4, #8]
 800c334:	3001      	adds	r0, #1
 800c336:	3b01      	subs	r3, #1
 800c338:	60a3      	str	r3, [r4, #8]
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	6022      	str	r2, [r4, #0]
 800c340:	701f      	strb	r7, [r3, #0]
 800c342:	6963      	ldr	r3, [r4, #20]
 800c344:	4283      	cmp	r3, r0
 800c346:	d004      	beq.n	800c352 <__swbuf_r+0x6a>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	07db      	lsls	r3, r3, #31
 800c34c:	d507      	bpl.n	800c35e <__swbuf_r+0x76>
 800c34e:	2e0a      	cmp	r6, #10
 800c350:	d105      	bne.n	800c35e <__swbuf_r+0x76>
 800c352:	0021      	movs	r1, r4
 800c354:	0028      	movs	r0, r5
 800c356:	f000 f929 	bl	800c5ac <_fflush_r>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d111      	bne.n	800c382 <__swbuf_r+0x9a>
 800c35e:	0030      	movs	r0, r6
 800c360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c362:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <__swbuf_r+0xa4>)
 800c364:	429c      	cmp	r4, r3
 800c366:	d101      	bne.n	800c36c <__swbuf_r+0x84>
 800c368:	68ac      	ldr	r4, [r5, #8]
 800c36a:	e7cc      	b.n	800c306 <__swbuf_r+0x1e>
 800c36c:	4b08      	ldr	r3, [pc, #32]	; (800c390 <__swbuf_r+0xa8>)
 800c36e:	429c      	cmp	r4, r3
 800c370:	d1c9      	bne.n	800c306 <__swbuf_r+0x1e>
 800c372:	68ec      	ldr	r4, [r5, #12]
 800c374:	e7c7      	b.n	800c306 <__swbuf_r+0x1e>
 800c376:	0021      	movs	r1, r4
 800c378:	0028      	movs	r0, r5
 800c37a:	f000 f80b 	bl	800c394 <__swsetup_r>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0c9      	beq.n	800c316 <__swbuf_r+0x2e>
 800c382:	2601      	movs	r6, #1
 800c384:	4276      	negs	r6, r6
 800c386:	e7ea      	b.n	800c35e <__swbuf_r+0x76>
 800c388:	0800d16c 	.word	0x0800d16c
 800c38c:	0800d18c 	.word	0x0800d18c
 800c390:	0800d14c 	.word	0x0800d14c

0800c394 <__swsetup_r>:
 800c394:	4b37      	ldr	r3, [pc, #220]	; (800c474 <__swsetup_r+0xe0>)
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	681d      	ldr	r5, [r3, #0]
 800c39a:	0006      	movs	r6, r0
 800c39c:	000c      	movs	r4, r1
 800c39e:	2d00      	cmp	r5, #0
 800c3a0:	d005      	beq.n	800c3ae <__swsetup_r+0x1a>
 800c3a2:	69ab      	ldr	r3, [r5, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <__swsetup_r+0x1a>
 800c3a8:	0028      	movs	r0, r5
 800c3aa:	f000 f9a1 	bl	800c6f0 <__sinit>
 800c3ae:	4b32      	ldr	r3, [pc, #200]	; (800c478 <__swsetup_r+0xe4>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d10f      	bne.n	800c3d4 <__swsetup_r+0x40>
 800c3b4:	686c      	ldr	r4, [r5, #4]
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	5ee2      	ldrsh	r2, [r4, r3]
 800c3ba:	b293      	uxth	r3, r2
 800c3bc:	0711      	lsls	r1, r2, #28
 800c3be:	d42d      	bmi.n	800c41c <__swsetup_r+0x88>
 800c3c0:	06d9      	lsls	r1, r3, #27
 800c3c2:	d411      	bmi.n	800c3e8 <__swsetup_r+0x54>
 800c3c4:	2309      	movs	r3, #9
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	6033      	str	r3, [r6, #0]
 800c3ca:	3337      	adds	r3, #55	; 0x37
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	4240      	negs	r0, r0
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	4b29      	ldr	r3, [pc, #164]	; (800c47c <__swsetup_r+0xe8>)
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	d101      	bne.n	800c3de <__swsetup_r+0x4a>
 800c3da:	68ac      	ldr	r4, [r5, #8]
 800c3dc:	e7eb      	b.n	800c3b6 <__swsetup_r+0x22>
 800c3de:	4b28      	ldr	r3, [pc, #160]	; (800c480 <__swsetup_r+0xec>)
 800c3e0:	429c      	cmp	r4, r3
 800c3e2:	d1e8      	bne.n	800c3b6 <__swsetup_r+0x22>
 800c3e4:	68ec      	ldr	r4, [r5, #12]
 800c3e6:	e7e6      	b.n	800c3b6 <__swsetup_r+0x22>
 800c3e8:	075b      	lsls	r3, r3, #29
 800c3ea:	d513      	bpl.n	800c414 <__swsetup_r+0x80>
 800c3ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ee:	2900      	cmp	r1, #0
 800c3f0:	d008      	beq.n	800c404 <__swsetup_r+0x70>
 800c3f2:	0023      	movs	r3, r4
 800c3f4:	3344      	adds	r3, #68	; 0x44
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	d002      	beq.n	800c400 <__swsetup_r+0x6c>
 800c3fa:	0030      	movs	r0, r6
 800c3fc:	f7ff fb16 	bl	800ba2c <_free_r>
 800c400:	2300      	movs	r3, #0
 800c402:	6363      	str	r3, [r4, #52]	; 0x34
 800c404:	2224      	movs	r2, #36	; 0x24
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	4393      	bics	r3, r2
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	2300      	movs	r3, #0
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	2308      	movs	r3, #8
 800c416:	89a2      	ldrh	r2, [r4, #12]
 800c418:	4313      	orrs	r3, r2
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <__swsetup_r+0xa6>
 800c422:	21a0      	movs	r1, #160	; 0xa0
 800c424:	2280      	movs	r2, #128	; 0x80
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	0089      	lsls	r1, r1, #2
 800c42a:	0092      	lsls	r2, r2, #2
 800c42c:	400b      	ands	r3, r1
 800c42e:	4293      	cmp	r3, r2
 800c430:	d003      	beq.n	800c43a <__swsetup_r+0xa6>
 800c432:	0021      	movs	r1, r4
 800c434:	0030      	movs	r0, r6
 800c436:	f000 fa27 	bl	800c888 <__smakebuf_r>
 800c43a:	220c      	movs	r2, #12
 800c43c:	5ea3      	ldrsh	r3, [r4, r2]
 800c43e:	2001      	movs	r0, #1
 800c440:	001a      	movs	r2, r3
 800c442:	b299      	uxth	r1, r3
 800c444:	4002      	ands	r2, r0
 800c446:	4203      	tst	r3, r0
 800c448:	d00f      	beq.n	800c46a <__swsetup_r+0xd6>
 800c44a:	2200      	movs	r2, #0
 800c44c:	60a2      	str	r2, [r4, #8]
 800c44e:	6962      	ldr	r2, [r4, #20]
 800c450:	4252      	negs	r2, r2
 800c452:	61a2      	str	r2, [r4, #24]
 800c454:	2000      	movs	r0, #0
 800c456:	6922      	ldr	r2, [r4, #16]
 800c458:	4282      	cmp	r2, r0
 800c45a:	d1ba      	bne.n	800c3d2 <__swsetup_r+0x3e>
 800c45c:	060a      	lsls	r2, r1, #24
 800c45e:	d5b8      	bpl.n	800c3d2 <__swsetup_r+0x3e>
 800c460:	2240      	movs	r2, #64	; 0x40
 800c462:	4313      	orrs	r3, r2
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	3801      	subs	r0, #1
 800c468:	e7b3      	b.n	800c3d2 <__swsetup_r+0x3e>
 800c46a:	0788      	lsls	r0, r1, #30
 800c46c:	d400      	bmi.n	800c470 <__swsetup_r+0xdc>
 800c46e:	6962      	ldr	r2, [r4, #20]
 800c470:	60a2      	str	r2, [r4, #8]
 800c472:	e7ef      	b.n	800c454 <__swsetup_r+0xc0>
 800c474:	20000018 	.word	0x20000018
 800c478:	0800d16c 	.word	0x0800d16c
 800c47c:	0800d18c 	.word	0x0800d18c
 800c480:	0800d14c 	.word	0x0800d14c

0800c484 <abort>:
 800c484:	2006      	movs	r0, #6
 800c486:	b510      	push	{r4, lr}
 800c488:	f000 fa74 	bl	800c974 <raise>
 800c48c:	2001      	movs	r0, #1
 800c48e:	f7f7 fa53 	bl	8003938 <_exit>
	...

0800c494 <__sflush_r>:
 800c494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c496:	898b      	ldrh	r3, [r1, #12]
 800c498:	0005      	movs	r5, r0
 800c49a:	000c      	movs	r4, r1
 800c49c:	071a      	lsls	r2, r3, #28
 800c49e:	d45f      	bmi.n	800c560 <__sflush_r+0xcc>
 800c4a0:	684a      	ldr	r2, [r1, #4]
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	dc04      	bgt.n	800c4b0 <__sflush_r+0x1c>
 800c4a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	dc01      	bgt.n	800c4b0 <__sflush_r+0x1c>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c4b2:	2f00      	cmp	r7, #0
 800c4b4:	d0fa      	beq.n	800c4ac <__sflush_r+0x18>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2180      	movs	r1, #128	; 0x80
 800c4ba:	682e      	ldr	r6, [r5, #0]
 800c4bc:	602a      	str	r2, [r5, #0]
 800c4be:	001a      	movs	r2, r3
 800c4c0:	0149      	lsls	r1, r1, #5
 800c4c2:	400a      	ands	r2, r1
 800c4c4:	420b      	tst	r3, r1
 800c4c6:	d034      	beq.n	800c532 <__sflush_r+0x9e>
 800c4c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	075b      	lsls	r3, r3, #29
 800c4ce:	d506      	bpl.n	800c4de <__sflush_r+0x4a>
 800c4d0:	6863      	ldr	r3, [r4, #4]
 800c4d2:	1ac0      	subs	r0, r0, r3
 800c4d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <__sflush_r+0x4a>
 800c4da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4dc:	1ac0      	subs	r0, r0, r3
 800c4de:	0002      	movs	r2, r0
 800c4e0:	6a21      	ldr	r1, [r4, #32]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	0028      	movs	r0, r5
 800c4e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c4e8:	47b8      	blx	r7
 800c4ea:	89a1      	ldrh	r1, [r4, #12]
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d106      	bne.n	800c4fe <__sflush_r+0x6a>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	2b1d      	cmp	r3, #29
 800c4f4:	d831      	bhi.n	800c55a <__sflush_r+0xc6>
 800c4f6:	4a2c      	ldr	r2, [pc, #176]	; (800c5a8 <__sflush_r+0x114>)
 800c4f8:	40da      	lsrs	r2, r3
 800c4fa:	07d3      	lsls	r3, r2, #31
 800c4fc:	d52d      	bpl.n	800c55a <__sflush_r+0xc6>
 800c4fe:	2300      	movs	r3, #0
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	04cb      	lsls	r3, r1, #19
 800c508:	d505      	bpl.n	800c516 <__sflush_r+0x82>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d102      	bne.n	800c514 <__sflush_r+0x80>
 800c50e:	682b      	ldr	r3, [r5, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d100      	bne.n	800c516 <__sflush_r+0x82>
 800c514:	6560      	str	r0, [r4, #84]	; 0x54
 800c516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c518:	602e      	str	r6, [r5, #0]
 800c51a:	2900      	cmp	r1, #0
 800c51c:	d0c6      	beq.n	800c4ac <__sflush_r+0x18>
 800c51e:	0023      	movs	r3, r4
 800c520:	3344      	adds	r3, #68	; 0x44
 800c522:	4299      	cmp	r1, r3
 800c524:	d002      	beq.n	800c52c <__sflush_r+0x98>
 800c526:	0028      	movs	r0, r5
 800c528:	f7ff fa80 	bl	800ba2c <_free_r>
 800c52c:	2000      	movs	r0, #0
 800c52e:	6360      	str	r0, [r4, #52]	; 0x34
 800c530:	e7bd      	b.n	800c4ae <__sflush_r+0x1a>
 800c532:	2301      	movs	r3, #1
 800c534:	0028      	movs	r0, r5
 800c536:	6a21      	ldr	r1, [r4, #32]
 800c538:	47b8      	blx	r7
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	d1c5      	bne.n	800c4ca <__sflush_r+0x36>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0c2      	beq.n	800c4ca <__sflush_r+0x36>
 800c544:	2b1d      	cmp	r3, #29
 800c546:	d001      	beq.n	800c54c <__sflush_r+0xb8>
 800c548:	2b16      	cmp	r3, #22
 800c54a:	d101      	bne.n	800c550 <__sflush_r+0xbc>
 800c54c:	602e      	str	r6, [r5, #0]
 800c54e:	e7ad      	b.n	800c4ac <__sflush_r+0x18>
 800c550:	2340      	movs	r3, #64	; 0x40
 800c552:	89a2      	ldrh	r2, [r4, #12]
 800c554:	4313      	orrs	r3, r2
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	e7a9      	b.n	800c4ae <__sflush_r+0x1a>
 800c55a:	2340      	movs	r3, #64	; 0x40
 800c55c:	430b      	orrs	r3, r1
 800c55e:	e7fa      	b.n	800c556 <__sflush_r+0xc2>
 800c560:	690f      	ldr	r7, [r1, #16]
 800c562:	2f00      	cmp	r7, #0
 800c564:	d0a2      	beq.n	800c4ac <__sflush_r+0x18>
 800c566:	680a      	ldr	r2, [r1, #0]
 800c568:	600f      	str	r7, [r1, #0]
 800c56a:	1bd2      	subs	r2, r2, r7
 800c56c:	9201      	str	r2, [sp, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	079b      	lsls	r3, r3, #30
 800c572:	d100      	bne.n	800c576 <__sflush_r+0xe2>
 800c574:	694a      	ldr	r2, [r1, #20]
 800c576:	60a2      	str	r2, [r4, #8]
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	dc00      	bgt.n	800c580 <__sflush_r+0xec>
 800c57e:	e795      	b.n	800c4ac <__sflush_r+0x18>
 800c580:	003a      	movs	r2, r7
 800c582:	0028      	movs	r0, r5
 800c584:	9b01      	ldr	r3, [sp, #4]
 800c586:	6a21      	ldr	r1, [r4, #32]
 800c588:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c58a:	47b0      	blx	r6
 800c58c:	2800      	cmp	r0, #0
 800c58e:	dc06      	bgt.n	800c59e <__sflush_r+0x10a>
 800c590:	2340      	movs	r3, #64	; 0x40
 800c592:	2001      	movs	r0, #1
 800c594:	89a2      	ldrh	r2, [r4, #12]
 800c596:	4240      	negs	r0, r0
 800c598:	4313      	orrs	r3, r2
 800c59a:	81a3      	strh	r3, [r4, #12]
 800c59c:	e787      	b.n	800c4ae <__sflush_r+0x1a>
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	183f      	adds	r7, r7, r0
 800c5a2:	1a1b      	subs	r3, r3, r0
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	e7e7      	b.n	800c578 <__sflush_r+0xe4>
 800c5a8:	20400001 	.word	0x20400001

0800c5ac <_fflush_r>:
 800c5ac:	690b      	ldr	r3, [r1, #16]
 800c5ae:	b570      	push	{r4, r5, r6, lr}
 800c5b0:	0005      	movs	r5, r0
 800c5b2:	000c      	movs	r4, r1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <_fflush_r+0x12>
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	0028      	movs	r0, r5
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d004      	beq.n	800c5cc <_fflush_r+0x20>
 800c5c2:	6983      	ldr	r3, [r0, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <_fflush_r+0x20>
 800c5c8:	f000 f892 	bl	800c6f0 <__sinit>
 800c5cc:	4b14      	ldr	r3, [pc, #80]	; (800c620 <_fflush_r+0x74>)
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d11b      	bne.n	800c60a <_fflush_r+0x5e>
 800c5d2:	686c      	ldr	r4, [r5, #4]
 800c5d4:	220c      	movs	r2, #12
 800c5d6:	5ea3      	ldrsh	r3, [r4, r2]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0ed      	beq.n	800c5b8 <_fflush_r+0xc>
 800c5dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5de:	07d2      	lsls	r2, r2, #31
 800c5e0:	d404      	bmi.n	800c5ec <_fflush_r+0x40>
 800c5e2:	059b      	lsls	r3, r3, #22
 800c5e4:	d402      	bmi.n	800c5ec <_fflush_r+0x40>
 800c5e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5e8:	f000 f923 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c5ec:	0028      	movs	r0, r5
 800c5ee:	0021      	movs	r1, r4
 800c5f0:	f7ff ff50 	bl	800c494 <__sflush_r>
 800c5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f6:	0005      	movs	r5, r0
 800c5f8:	07db      	lsls	r3, r3, #31
 800c5fa:	d4de      	bmi.n	800c5ba <_fflush_r+0xe>
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	059b      	lsls	r3, r3, #22
 800c600:	d4db      	bmi.n	800c5ba <_fflush_r+0xe>
 800c602:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c604:	f000 f916 	bl	800c834 <__retarget_lock_release_recursive>
 800c608:	e7d7      	b.n	800c5ba <_fflush_r+0xe>
 800c60a:	4b06      	ldr	r3, [pc, #24]	; (800c624 <_fflush_r+0x78>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	d101      	bne.n	800c614 <_fflush_r+0x68>
 800c610:	68ac      	ldr	r4, [r5, #8]
 800c612:	e7df      	b.n	800c5d4 <_fflush_r+0x28>
 800c614:	4b04      	ldr	r3, [pc, #16]	; (800c628 <_fflush_r+0x7c>)
 800c616:	429c      	cmp	r4, r3
 800c618:	d1dc      	bne.n	800c5d4 <_fflush_r+0x28>
 800c61a:	68ec      	ldr	r4, [r5, #12]
 800c61c:	e7da      	b.n	800c5d4 <_fflush_r+0x28>
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	0800d16c 	.word	0x0800d16c
 800c624:	0800d18c 	.word	0x0800d18c
 800c628:	0800d14c 	.word	0x0800d14c

0800c62c <std>:
 800c62c:	2300      	movs	r3, #0
 800c62e:	b510      	push	{r4, lr}
 800c630:	0004      	movs	r4, r0
 800c632:	6003      	str	r3, [r0, #0]
 800c634:	6043      	str	r3, [r0, #4]
 800c636:	6083      	str	r3, [r0, #8]
 800c638:	8181      	strh	r1, [r0, #12]
 800c63a:	6643      	str	r3, [r0, #100]	; 0x64
 800c63c:	0019      	movs	r1, r3
 800c63e:	81c2      	strh	r2, [r0, #14]
 800c640:	6103      	str	r3, [r0, #16]
 800c642:	6143      	str	r3, [r0, #20]
 800c644:	6183      	str	r3, [r0, #24]
 800c646:	2208      	movs	r2, #8
 800c648:	305c      	adds	r0, #92	; 0x5c
 800c64a:	f7fb fd4a 	bl	80080e2 <memset>
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <std+0x38>)
 800c650:	6224      	str	r4, [r4, #32]
 800c652:	6263      	str	r3, [r4, #36]	; 0x24
 800c654:	4b04      	ldr	r3, [pc, #16]	; (800c668 <std+0x3c>)
 800c656:	62a3      	str	r3, [r4, #40]	; 0x28
 800c658:	4b04      	ldr	r3, [pc, #16]	; (800c66c <std+0x40>)
 800c65a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c65c:	4b04      	ldr	r3, [pc, #16]	; (800c670 <std+0x44>)
 800c65e:	6323      	str	r3, [r4, #48]	; 0x30
 800c660:	bd10      	pop	{r4, pc}
 800c662:	46c0      	nop			; (mov r8, r8)
 800c664:	0800c9b5 	.word	0x0800c9b5
 800c668:	0800c9dd 	.word	0x0800c9dd
 800c66c:	0800ca15 	.word	0x0800ca15
 800c670:	0800ca41 	.word	0x0800ca41

0800c674 <_cleanup_r>:
 800c674:	b510      	push	{r4, lr}
 800c676:	4902      	ldr	r1, [pc, #8]	; (800c680 <_cleanup_r+0xc>)
 800c678:	f000 f8ba 	bl	800c7f0 <_fwalk_reent>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	0800c5ad 	.word	0x0800c5ad

0800c684 <__sfmoreglue>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	2568      	movs	r5, #104	; 0x68
 800c688:	1e4a      	subs	r2, r1, #1
 800c68a:	4355      	muls	r5, r2
 800c68c:	000e      	movs	r6, r1
 800c68e:	0029      	movs	r1, r5
 800c690:	3174      	adds	r1, #116	; 0x74
 800c692:	f7ff fa37 	bl	800bb04 <_malloc_r>
 800c696:	1e04      	subs	r4, r0, #0
 800c698:	d008      	beq.n	800c6ac <__sfmoreglue+0x28>
 800c69a:	2100      	movs	r1, #0
 800c69c:	002a      	movs	r2, r5
 800c69e:	6001      	str	r1, [r0, #0]
 800c6a0:	6046      	str	r6, [r0, #4]
 800c6a2:	300c      	adds	r0, #12
 800c6a4:	60a0      	str	r0, [r4, #8]
 800c6a6:	3268      	adds	r2, #104	; 0x68
 800c6a8:	f7fb fd1b 	bl	80080e2 <memset>
 800c6ac:	0020      	movs	r0, r4
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}

0800c6b0 <__sfp_lock_acquire>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4802      	ldr	r0, [pc, #8]	; (800c6bc <__sfp_lock_acquire+0xc>)
 800c6b4:	f000 f8bd 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c6b8:	bd10      	pop	{r4, pc}
 800c6ba:	46c0      	nop			; (mov r8, r8)
 800c6bc:	2000139d 	.word	0x2000139d

0800c6c0 <__sfp_lock_release>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	4802      	ldr	r0, [pc, #8]	; (800c6cc <__sfp_lock_release+0xc>)
 800c6c4:	f000 f8b6 	bl	800c834 <__retarget_lock_release_recursive>
 800c6c8:	bd10      	pop	{r4, pc}
 800c6ca:	46c0      	nop			; (mov r8, r8)
 800c6cc:	2000139d 	.word	0x2000139d

0800c6d0 <__sinit_lock_acquire>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	4802      	ldr	r0, [pc, #8]	; (800c6dc <__sinit_lock_acquire+0xc>)
 800c6d4:	f000 f8ad 	bl	800c832 <__retarget_lock_acquire_recursive>
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	46c0      	nop			; (mov r8, r8)
 800c6dc:	2000139e 	.word	0x2000139e

0800c6e0 <__sinit_lock_release>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4802      	ldr	r0, [pc, #8]	; (800c6ec <__sinit_lock_release+0xc>)
 800c6e4:	f000 f8a6 	bl	800c834 <__retarget_lock_release_recursive>
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	2000139e 	.word	0x2000139e

0800c6f0 <__sinit>:
 800c6f0:	b513      	push	{r0, r1, r4, lr}
 800c6f2:	0004      	movs	r4, r0
 800c6f4:	f7ff ffec 	bl	800c6d0 <__sinit_lock_acquire>
 800c6f8:	69a3      	ldr	r3, [r4, #24]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <__sinit+0x14>
 800c6fe:	f7ff ffef 	bl	800c6e0 <__sinit_lock_release>
 800c702:	bd13      	pop	{r0, r1, r4, pc}
 800c704:	64a3      	str	r3, [r4, #72]	; 0x48
 800c706:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c708:	6523      	str	r3, [r4, #80]	; 0x50
 800c70a:	4b13      	ldr	r3, [pc, #76]	; (800c758 <__sinit+0x68>)
 800c70c:	4a13      	ldr	r2, [pc, #76]	; (800c75c <__sinit+0x6c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	62a2      	str	r2, [r4, #40]	; 0x28
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	42a3      	cmp	r3, r4
 800c716:	d101      	bne.n	800c71c <__sinit+0x2c>
 800c718:	2301      	movs	r3, #1
 800c71a:	61a3      	str	r3, [r4, #24]
 800c71c:	0020      	movs	r0, r4
 800c71e:	f000 f81f 	bl	800c760 <__sfp>
 800c722:	6060      	str	r0, [r4, #4]
 800c724:	0020      	movs	r0, r4
 800c726:	f000 f81b 	bl	800c760 <__sfp>
 800c72a:	60a0      	str	r0, [r4, #8]
 800c72c:	0020      	movs	r0, r4
 800c72e:	f000 f817 	bl	800c760 <__sfp>
 800c732:	2200      	movs	r2, #0
 800c734:	2104      	movs	r1, #4
 800c736:	60e0      	str	r0, [r4, #12]
 800c738:	6860      	ldr	r0, [r4, #4]
 800c73a:	f7ff ff77 	bl	800c62c <std>
 800c73e:	2201      	movs	r2, #1
 800c740:	2109      	movs	r1, #9
 800c742:	68a0      	ldr	r0, [r4, #8]
 800c744:	f7ff ff72 	bl	800c62c <std>
 800c748:	2202      	movs	r2, #2
 800c74a:	2112      	movs	r1, #18
 800c74c:	68e0      	ldr	r0, [r4, #12]
 800c74e:	f7ff ff6d 	bl	800c62c <std>
 800c752:	2301      	movs	r3, #1
 800c754:	61a3      	str	r3, [r4, #24]
 800c756:	e7d2      	b.n	800c6fe <__sinit+0xe>
 800c758:	0800cd04 	.word	0x0800cd04
 800c75c:	0800c675 	.word	0x0800c675

0800c760 <__sfp>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	0007      	movs	r7, r0
 800c764:	f7ff ffa4 	bl	800c6b0 <__sfp_lock_acquire>
 800c768:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <__sfp+0x88>)
 800c76a:	681e      	ldr	r6, [r3, #0]
 800c76c:	69b3      	ldr	r3, [r6, #24]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d102      	bne.n	800c778 <__sfp+0x18>
 800c772:	0030      	movs	r0, r6
 800c774:	f7ff ffbc 	bl	800c6f0 <__sinit>
 800c778:	3648      	adds	r6, #72	; 0x48
 800c77a:	68b4      	ldr	r4, [r6, #8]
 800c77c:	6873      	ldr	r3, [r6, #4]
 800c77e:	3b01      	subs	r3, #1
 800c780:	d504      	bpl.n	800c78c <__sfp+0x2c>
 800c782:	6833      	ldr	r3, [r6, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d022      	beq.n	800c7ce <__sfp+0x6e>
 800c788:	6836      	ldr	r6, [r6, #0]
 800c78a:	e7f6      	b.n	800c77a <__sfp+0x1a>
 800c78c:	220c      	movs	r2, #12
 800c78e:	5ea5      	ldrsh	r5, [r4, r2]
 800c790:	2d00      	cmp	r5, #0
 800c792:	d11a      	bne.n	800c7ca <__sfp+0x6a>
 800c794:	0020      	movs	r0, r4
 800c796:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <__sfp+0x8c>)
 800c798:	3058      	adds	r0, #88	; 0x58
 800c79a:	60e3      	str	r3, [r4, #12]
 800c79c:	6665      	str	r5, [r4, #100]	; 0x64
 800c79e:	f000 f847 	bl	800c830 <__retarget_lock_init_recursive>
 800c7a2:	f7ff ff8d 	bl	800c6c0 <__sfp_lock_release>
 800c7a6:	0020      	movs	r0, r4
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	0029      	movs	r1, r5
 800c7ac:	6025      	str	r5, [r4, #0]
 800c7ae:	60a5      	str	r5, [r4, #8]
 800c7b0:	6065      	str	r5, [r4, #4]
 800c7b2:	6125      	str	r5, [r4, #16]
 800c7b4:	6165      	str	r5, [r4, #20]
 800c7b6:	61a5      	str	r5, [r4, #24]
 800c7b8:	305c      	adds	r0, #92	; 0x5c
 800c7ba:	f7fb fc92 	bl	80080e2 <memset>
 800c7be:	6365      	str	r5, [r4, #52]	; 0x34
 800c7c0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c7c2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c7c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c7c6:	0020      	movs	r0, r4
 800c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ca:	3468      	adds	r4, #104	; 0x68
 800c7cc:	e7d7      	b.n	800c77e <__sfp+0x1e>
 800c7ce:	2104      	movs	r1, #4
 800c7d0:	0038      	movs	r0, r7
 800c7d2:	f7ff ff57 	bl	800c684 <__sfmoreglue>
 800c7d6:	1e04      	subs	r4, r0, #0
 800c7d8:	6030      	str	r0, [r6, #0]
 800c7da:	d1d5      	bne.n	800c788 <__sfp+0x28>
 800c7dc:	f7ff ff70 	bl	800c6c0 <__sfp_lock_release>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	603b      	str	r3, [r7, #0]
 800c7e4:	e7ef      	b.n	800c7c6 <__sfp+0x66>
 800c7e6:	46c0      	nop			; (mov r8, r8)
 800c7e8:	0800cd04 	.word	0x0800cd04
 800c7ec:	ffff0001 	.word	0xffff0001

0800c7f0 <_fwalk_reent>:
 800c7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7f2:	0004      	movs	r4, r0
 800c7f4:	0006      	movs	r6, r0
 800c7f6:	2700      	movs	r7, #0
 800c7f8:	9101      	str	r1, [sp, #4]
 800c7fa:	3448      	adds	r4, #72	; 0x48
 800c7fc:	6863      	ldr	r3, [r4, #4]
 800c7fe:	68a5      	ldr	r5, [r4, #8]
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	9b00      	ldr	r3, [sp, #0]
 800c804:	3b01      	subs	r3, #1
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	d504      	bpl.n	800c814 <_fwalk_reent+0x24>
 800c80a:	6824      	ldr	r4, [r4, #0]
 800c80c:	2c00      	cmp	r4, #0
 800c80e:	d1f5      	bne.n	800c7fc <_fwalk_reent+0xc>
 800c810:	0038      	movs	r0, r7
 800c812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c814:	89ab      	ldrh	r3, [r5, #12]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d908      	bls.n	800c82c <_fwalk_reent+0x3c>
 800c81a:	220e      	movs	r2, #14
 800c81c:	5eab      	ldrsh	r3, [r5, r2]
 800c81e:	3301      	adds	r3, #1
 800c820:	d004      	beq.n	800c82c <_fwalk_reent+0x3c>
 800c822:	0029      	movs	r1, r5
 800c824:	0030      	movs	r0, r6
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	4798      	blx	r3
 800c82a:	4307      	orrs	r7, r0
 800c82c:	3568      	adds	r5, #104	; 0x68
 800c82e:	e7e8      	b.n	800c802 <_fwalk_reent+0x12>

0800c830 <__retarget_lock_init_recursive>:
 800c830:	4770      	bx	lr

0800c832 <__retarget_lock_acquire_recursive>:
 800c832:	4770      	bx	lr

0800c834 <__retarget_lock_release_recursive>:
 800c834:	4770      	bx	lr
	...

0800c838 <__swhatbuf_r>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	000e      	movs	r6, r1
 800c83c:	001d      	movs	r5, r3
 800c83e:	230e      	movs	r3, #14
 800c840:	5ec9      	ldrsh	r1, [r1, r3]
 800c842:	0014      	movs	r4, r2
 800c844:	b096      	sub	sp, #88	; 0x58
 800c846:	2900      	cmp	r1, #0
 800c848:	da08      	bge.n	800c85c <__swhatbuf_r+0x24>
 800c84a:	220c      	movs	r2, #12
 800c84c:	5eb3      	ldrsh	r3, [r6, r2]
 800c84e:	2200      	movs	r2, #0
 800c850:	602a      	str	r2, [r5, #0]
 800c852:	061b      	lsls	r3, r3, #24
 800c854:	d411      	bmi.n	800c87a <__swhatbuf_r+0x42>
 800c856:	2380      	movs	r3, #128	; 0x80
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	e00f      	b.n	800c87c <__swhatbuf_r+0x44>
 800c85c:	466a      	mov	r2, sp
 800c85e:	f000 f91b 	bl	800ca98 <_fstat_r>
 800c862:	2800      	cmp	r0, #0
 800c864:	dbf1      	blt.n	800c84a <__swhatbuf_r+0x12>
 800c866:	23f0      	movs	r3, #240	; 0xf0
 800c868:	9901      	ldr	r1, [sp, #4]
 800c86a:	021b      	lsls	r3, r3, #8
 800c86c:	4019      	ands	r1, r3
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <__swhatbuf_r+0x4c>)
 800c870:	18c9      	adds	r1, r1, r3
 800c872:	424b      	negs	r3, r1
 800c874:	4159      	adcs	r1, r3
 800c876:	6029      	str	r1, [r5, #0]
 800c878:	e7ed      	b.n	800c856 <__swhatbuf_r+0x1e>
 800c87a:	2340      	movs	r3, #64	; 0x40
 800c87c:	2000      	movs	r0, #0
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	b016      	add	sp, #88	; 0x58
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	ffffe000 	.word	0xffffe000

0800c888 <__smakebuf_r>:
 800c888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c88a:	2602      	movs	r6, #2
 800c88c:	898b      	ldrh	r3, [r1, #12]
 800c88e:	0005      	movs	r5, r0
 800c890:	000c      	movs	r4, r1
 800c892:	4233      	tst	r3, r6
 800c894:	d006      	beq.n	800c8a4 <__smakebuf_r+0x1c>
 800c896:	0023      	movs	r3, r4
 800c898:	3347      	adds	r3, #71	; 0x47
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	6123      	str	r3, [r4, #16]
 800c89e:	2301      	movs	r3, #1
 800c8a0:	6163      	str	r3, [r4, #20]
 800c8a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c8a4:	466a      	mov	r2, sp
 800c8a6:	ab01      	add	r3, sp, #4
 800c8a8:	f7ff ffc6 	bl	800c838 <__swhatbuf_r>
 800c8ac:	9900      	ldr	r1, [sp, #0]
 800c8ae:	0007      	movs	r7, r0
 800c8b0:	0028      	movs	r0, r5
 800c8b2:	f7ff f927 	bl	800bb04 <_malloc_r>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d108      	bne.n	800c8cc <__smakebuf_r+0x44>
 800c8ba:	220c      	movs	r2, #12
 800c8bc:	5ea3      	ldrsh	r3, [r4, r2]
 800c8be:	059a      	lsls	r2, r3, #22
 800c8c0:	d4ef      	bmi.n	800c8a2 <__smakebuf_r+0x1a>
 800c8c2:	2203      	movs	r2, #3
 800c8c4:	4393      	bics	r3, r2
 800c8c6:	431e      	orrs	r6, r3
 800c8c8:	81a6      	strh	r6, [r4, #12]
 800c8ca:	e7e4      	b.n	800c896 <__smakebuf_r+0xe>
 800c8cc:	4b0f      	ldr	r3, [pc, #60]	; (800c90c <__smakebuf_r+0x84>)
 800c8ce:	62ab      	str	r3, [r5, #40]	; 0x28
 800c8d0:	2380      	movs	r3, #128	; 0x80
 800c8d2:	89a2      	ldrh	r2, [r4, #12]
 800c8d4:	6020      	str	r0, [r4, #0]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	6120      	str	r0, [r4, #16]
 800c8de:	6163      	str	r3, [r4, #20]
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00d      	beq.n	800c902 <__smakebuf_r+0x7a>
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	230e      	movs	r3, #14
 800c8ea:	5ee1      	ldrsh	r1, [r4, r3]
 800c8ec:	f000 f8e6 	bl	800cabc <_isatty_r>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d006      	beq.n	800c902 <__smakebuf_r+0x7a>
 800c8f4:	2203      	movs	r2, #3
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	4393      	bics	r3, r2
 800c8fa:	001a      	movs	r2, r3
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	4313      	orrs	r3, r2
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	89a0      	ldrh	r0, [r4, #12]
 800c904:	4307      	orrs	r7, r0
 800c906:	81a7      	strh	r7, [r4, #12]
 800c908:	e7cb      	b.n	800c8a2 <__smakebuf_r+0x1a>
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	0800c675 	.word	0x0800c675

0800c910 <_malloc_usable_size_r>:
 800c910:	1f0b      	subs	r3, r1, #4
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	1f18      	subs	r0, r3, #4
 800c916:	2b00      	cmp	r3, #0
 800c918:	da01      	bge.n	800c91e <_malloc_usable_size_r+0xe>
 800c91a:	580b      	ldr	r3, [r1, r0]
 800c91c:	18c0      	adds	r0, r0, r3
 800c91e:	4770      	bx	lr

0800c920 <_raise_r>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	0004      	movs	r4, r0
 800c924:	000d      	movs	r5, r1
 800c926:	291f      	cmp	r1, #31
 800c928:	d904      	bls.n	800c934 <_raise_r+0x14>
 800c92a:	2316      	movs	r3, #22
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	2001      	movs	r0, #1
 800c930:	4240      	negs	r0, r0
 800c932:	bd70      	pop	{r4, r5, r6, pc}
 800c934:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c936:	2b00      	cmp	r3, #0
 800c938:	d004      	beq.n	800c944 <_raise_r+0x24>
 800c93a:	008a      	lsls	r2, r1, #2
 800c93c:	189b      	adds	r3, r3, r2
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	2a00      	cmp	r2, #0
 800c942:	d108      	bne.n	800c956 <_raise_r+0x36>
 800c944:	0020      	movs	r0, r4
 800c946:	f000 f831 	bl	800c9ac <_getpid_r>
 800c94a:	002a      	movs	r2, r5
 800c94c:	0001      	movs	r1, r0
 800c94e:	0020      	movs	r0, r4
 800c950:	f000 f81a 	bl	800c988 <_kill_r>
 800c954:	e7ed      	b.n	800c932 <_raise_r+0x12>
 800c956:	2000      	movs	r0, #0
 800c958:	2a01      	cmp	r2, #1
 800c95a:	d0ea      	beq.n	800c932 <_raise_r+0x12>
 800c95c:	1c51      	adds	r1, r2, #1
 800c95e:	d103      	bne.n	800c968 <_raise_r+0x48>
 800c960:	2316      	movs	r3, #22
 800c962:	3001      	adds	r0, #1
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	e7e4      	b.n	800c932 <_raise_r+0x12>
 800c968:	2400      	movs	r4, #0
 800c96a:	0028      	movs	r0, r5
 800c96c:	601c      	str	r4, [r3, #0]
 800c96e:	4790      	blx	r2
 800c970:	0020      	movs	r0, r4
 800c972:	e7de      	b.n	800c932 <_raise_r+0x12>

0800c974 <raise>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4b03      	ldr	r3, [pc, #12]	; (800c984 <raise+0x10>)
 800c978:	0001      	movs	r1, r0
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	f7ff ffd0 	bl	800c920 <_raise_r>
 800c980:	bd10      	pop	{r4, pc}
 800c982:	46c0      	nop			; (mov r8, r8)
 800c984:	20000018 	.word	0x20000018

0800c988 <_kill_r>:
 800c988:	2300      	movs	r3, #0
 800c98a:	b570      	push	{r4, r5, r6, lr}
 800c98c:	4d06      	ldr	r5, [pc, #24]	; (800c9a8 <_kill_r+0x20>)
 800c98e:	0004      	movs	r4, r0
 800c990:	0008      	movs	r0, r1
 800c992:	0011      	movs	r1, r2
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	f7f6 ffbf 	bl	8003918 <_kill>
 800c99a:	1c43      	adds	r3, r0, #1
 800c99c:	d103      	bne.n	800c9a6 <_kill_r+0x1e>
 800c99e:	682b      	ldr	r3, [r5, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d000      	beq.n	800c9a6 <_kill_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	20001398 	.word	0x20001398

0800c9ac <_getpid_r>:
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	f7f6 ffad 	bl	800390c <_getpid>
 800c9b2:	bd10      	pop	{r4, pc}

0800c9b4 <__sread>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	000c      	movs	r4, r1
 800c9b8:	250e      	movs	r5, #14
 800c9ba:	5f49      	ldrsh	r1, [r1, r5]
 800c9bc:	f000 f8a4 	bl	800cb08 <_read_r>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	db03      	blt.n	800c9cc <__sread+0x18>
 800c9c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c9c6:	181b      	adds	r3, r3, r0
 800c9c8:	6563      	str	r3, [r4, #84]	; 0x54
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	4a02      	ldr	r2, [pc, #8]	; (800c9d8 <__sread+0x24>)
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	81a3      	strh	r3, [r4, #12]
 800c9d4:	e7f9      	b.n	800c9ca <__sread+0x16>
 800c9d6:	46c0      	nop			; (mov r8, r8)
 800c9d8:	ffffefff 	.word	0xffffefff

0800c9dc <__swrite>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	001f      	movs	r7, r3
 800c9e0:	898b      	ldrh	r3, [r1, #12]
 800c9e2:	0005      	movs	r5, r0
 800c9e4:	000c      	movs	r4, r1
 800c9e6:	0016      	movs	r6, r2
 800c9e8:	05db      	lsls	r3, r3, #23
 800c9ea:	d505      	bpl.n	800c9f8 <__swrite+0x1c>
 800c9ec:	230e      	movs	r3, #14
 800c9ee:	5ec9      	ldrsh	r1, [r1, r3]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	f000 f874 	bl	800cae0 <_lseek_r>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <__swrite+0x34>)
 800c9fc:	0028      	movs	r0, r5
 800c9fe:	4013      	ands	r3, r2
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	0032      	movs	r2, r6
 800ca04:	230e      	movs	r3, #14
 800ca06:	5ee1      	ldrsh	r1, [r4, r3]
 800ca08:	003b      	movs	r3, r7
 800ca0a:	f000 f81f 	bl	800ca4c <_write_r>
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	ffffefff 	.word	0xffffefff

0800ca14 <__sseek>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	000c      	movs	r4, r1
 800ca18:	250e      	movs	r5, #14
 800ca1a:	5f49      	ldrsh	r1, [r1, r5]
 800ca1c:	f000 f860 	bl	800cae0 <_lseek_r>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	1c42      	adds	r2, r0, #1
 800ca24:	d103      	bne.n	800ca2e <__sseek+0x1a>
 800ca26:	4a05      	ldr	r2, [pc, #20]	; (800ca3c <__sseek+0x28>)
 800ca28:	4013      	ands	r3, r2
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	bd70      	pop	{r4, r5, r6, pc}
 800ca2e:	2280      	movs	r2, #128	; 0x80
 800ca30:	0152      	lsls	r2, r2, #5
 800ca32:	4313      	orrs	r3, r2
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	6560      	str	r0, [r4, #84]	; 0x54
 800ca38:	e7f8      	b.n	800ca2c <__sseek+0x18>
 800ca3a:	46c0      	nop			; (mov r8, r8)
 800ca3c:	ffffefff 	.word	0xffffefff

0800ca40 <__sclose>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	230e      	movs	r3, #14
 800ca44:	5ec9      	ldrsh	r1, [r1, r3]
 800ca46:	f000 f815 	bl	800ca74 <_close_r>
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <_write_r>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	0004      	movs	r4, r0
 800ca50:	0008      	movs	r0, r1
 800ca52:	0011      	movs	r1, r2
 800ca54:	001a      	movs	r2, r3
 800ca56:	2300      	movs	r3, #0
 800ca58:	4d05      	ldr	r5, [pc, #20]	; (800ca70 <_write_r+0x24>)
 800ca5a:	602b      	str	r3, [r5, #0]
 800ca5c:	f7f6 ff95 	bl	800398a <_write>
 800ca60:	1c43      	adds	r3, r0, #1
 800ca62:	d103      	bne.n	800ca6c <_write_r+0x20>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d000      	beq.n	800ca6c <_write_r+0x20>
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	bd70      	pop	{r4, r5, r6, pc}
 800ca6e:	46c0      	nop			; (mov r8, r8)
 800ca70:	20001398 	.word	0x20001398

0800ca74 <_close_r>:
 800ca74:	2300      	movs	r3, #0
 800ca76:	b570      	push	{r4, r5, r6, lr}
 800ca78:	4d06      	ldr	r5, [pc, #24]	; (800ca94 <_close_r+0x20>)
 800ca7a:	0004      	movs	r4, r0
 800ca7c:	0008      	movs	r0, r1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	f7f6 ff9f 	bl	80039c2 <_close>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d103      	bne.n	800ca90 <_close_r+0x1c>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d000      	beq.n	800ca90 <_close_r+0x1c>
 800ca8e:	6023      	str	r3, [r4, #0]
 800ca90:	bd70      	pop	{r4, r5, r6, pc}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	20001398 	.word	0x20001398

0800ca98 <_fstat_r>:
 800ca98:	2300      	movs	r3, #0
 800ca9a:	b570      	push	{r4, r5, r6, lr}
 800ca9c:	4d06      	ldr	r5, [pc, #24]	; (800cab8 <_fstat_r+0x20>)
 800ca9e:	0004      	movs	r4, r0
 800caa0:	0008      	movs	r0, r1
 800caa2:	0011      	movs	r1, r2
 800caa4:	602b      	str	r3, [r5, #0]
 800caa6:	f7f6 ff96 	bl	80039d6 <_fstat>
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	d103      	bne.n	800cab6 <_fstat_r+0x1e>
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d000      	beq.n	800cab6 <_fstat_r+0x1e>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	20001398 	.word	0x20001398

0800cabc <_isatty_r>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	4d06      	ldr	r5, [pc, #24]	; (800cadc <_isatty_r+0x20>)
 800cac2:	0004      	movs	r4, r0
 800cac4:	0008      	movs	r0, r1
 800cac6:	602b      	str	r3, [r5, #0]
 800cac8:	f7f6 ff93 	bl	80039f2 <_isatty>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d103      	bne.n	800cad8 <_isatty_r+0x1c>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d000      	beq.n	800cad8 <_isatty_r+0x1c>
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	bd70      	pop	{r4, r5, r6, pc}
 800cada:	46c0      	nop			; (mov r8, r8)
 800cadc:	20001398 	.word	0x20001398

0800cae0 <_lseek_r>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	0004      	movs	r4, r0
 800cae4:	0008      	movs	r0, r1
 800cae6:	0011      	movs	r1, r2
 800cae8:	001a      	movs	r2, r3
 800caea:	2300      	movs	r3, #0
 800caec:	4d05      	ldr	r5, [pc, #20]	; (800cb04 <_lseek_r+0x24>)
 800caee:	602b      	str	r3, [r5, #0]
 800caf0:	f7f6 ff88 	bl	8003a04 <_lseek>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d103      	bne.n	800cb00 <_lseek_r+0x20>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d000      	beq.n	800cb00 <_lseek_r+0x20>
 800cafe:	6023      	str	r3, [r4, #0]
 800cb00:	bd70      	pop	{r4, r5, r6, pc}
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	20001398 	.word	0x20001398

0800cb08 <_read_r>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	0004      	movs	r4, r0
 800cb0c:	0008      	movs	r0, r1
 800cb0e:	0011      	movs	r1, r2
 800cb10:	001a      	movs	r2, r3
 800cb12:	2300      	movs	r3, #0
 800cb14:	4d05      	ldr	r5, [pc, #20]	; (800cb2c <_read_r+0x24>)
 800cb16:	602b      	str	r3, [r5, #0]
 800cb18:	f7f6 ff1a 	bl	8003950 <_read>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d103      	bne.n	800cb28 <_read_r+0x20>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d000      	beq.n	800cb28 <_read_r+0x20>
 800cb26:	6023      	str	r3, [r4, #0]
 800cb28:	bd70      	pop	{r4, r5, r6, pc}
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	20001398 	.word	0x20001398

0800cb30 <_init>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb36:	bc08      	pop	{r3}
 800cb38:	469e      	mov	lr, r3
 800cb3a:	4770      	bx	lr

0800cb3c <_fini>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	46c0      	nop			; (mov r8, r8)
 800cb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb42:	bc08      	pop	{r3}
 800cb44:	469e      	mov	lr, r3
 800cb46:	4770      	bx	lr
